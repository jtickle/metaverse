if(typeof Math.imul == "undefined" || (Math.imul(0xffffffff,5) == 0)) {
    Math.imul = function (a, b) {
        var ah  = (a >>> 16) & 0xffff;
        var al = a & 0xffff;
        var bh  = (b >>> 16) & 0xffff;
        var bl = b & 0xffff;
        // the shift by 0 fixes the sign on the high part
        // the final |0 converts the unsigned value into a signed value
        return ((al * bl) + (((ah * bl + al * bh) << 16) >>> 0)|0);
    }
}


var CLOSURE_NO_DEPS = true;
var COMPILED = false;
var goog = goog || {};
goog.global = this;
goog.global.CLOSURE_UNCOMPILED_DEFINES;
goog.global.CLOSURE_DEFINES;
goog.isDef = function(val) {
  return val !== void 0;
};
goog.exportPath_ = function(name, opt_object, opt_objectToExportTo) {
  var parts = name.split(".");
  var cur = opt_objectToExportTo || goog.global;
  if (!(parts[0] in cur) && cur.execScript) {
    cur.execScript("var " + parts[0]);
  }
  for (var part;parts.length && (part = parts.shift());) {
    if (!parts.length && goog.isDef(opt_object)) {
      cur[part] = opt_object;
    } else {
      if (cur[part]) {
        cur = cur[part];
      } else {
        cur = cur[part] = {};
      }
    }
  }
};
goog.define = function(name, defaultValue) {
  var value = defaultValue;
  if (!COMPILED) {
    if (goog.global.CLOSURE_UNCOMPILED_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_UNCOMPILED_DEFINES, name)) {
      value = goog.global.CLOSURE_UNCOMPILED_DEFINES[name];
    } else {
      if (goog.global.CLOSURE_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_DEFINES, name)) {
        value = goog.global.CLOSURE_DEFINES[name];
      }
    }
  }
  goog.exportPath_(name, value);
};
goog.define("goog.DEBUG", true);
goog.define("goog.LOCALE", "en");
goog.define("goog.TRUSTED_SITE", true);
goog.define("goog.STRICT_MODE_COMPATIBLE", false);
goog.define("goog.DISALLOW_TEST_ONLY_CODE", COMPILED && !goog.DEBUG);
goog.define("goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING", false);
goog.provide = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      throw Error('Namespace "' + name + '" already declared.');
    }
  }
  goog.constructNamespace_(name);
};
goog.constructNamespace_ = function(name, opt_obj) {
  if (!COMPILED) {
    delete goog.implicitNamespaces_[name];
    var namespace = name;
    while (namespace = namespace.substring(0, namespace.lastIndexOf("."))) {
      if (goog.getObjectByName(namespace)) {
        break;
      }
      goog.implicitNamespaces_[namespace] = true;
    }
  }
  goog.exportPath_(name, opt_obj);
};
goog.VALID_MODULE_RE_ = /^[a-zA-Z_$][a-zA-Z0-9._$]*$/;
goog.module = function(name) {
  if (!goog.isString(name) || !name || name.search(goog.VALID_MODULE_RE_) == -1) {
    throw Error("Invalid module identifier");
  }
  if (!goog.isInModuleLoader_()) {
    throw Error("Module " + name + " has been loaded incorrectly.");
  }
  if (goog.moduleLoaderState_.moduleName) {
    throw Error("goog.module may only be called once per module.");
  }
  goog.moduleLoaderState_.moduleName = name;
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      throw Error('Namespace "' + name + '" already declared.');
    }
    delete goog.implicitNamespaces_[name];
  }
};
goog.module.get = function(name) {
  return goog.module.getInternal_(name);
};
goog.module.getInternal_ = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      return name in goog.loadedModules_ ? goog.loadedModules_[name] : goog.getObjectByName(name);
    } else {
      return null;
    }
  }
};
goog.moduleLoaderState_ = null;
goog.isInModuleLoader_ = function() {
  return goog.moduleLoaderState_ != null;
};
goog.module.declareTestMethods = function() {
  if (!goog.isInModuleLoader_()) {
    throw new Error("goog.module.declareTestMethods must be called from " + "within a goog.module");
  }
  goog.moduleLoaderState_.declareTestMethods = true;
};
goog.module.declareLegacyNamespace = function() {
  if (!COMPILED && !goog.isInModuleLoader_()) {
    throw new Error("goog.module.declareLegacyNamespace must be called from " + "within a goog.module");
  }
  if (!COMPILED && !goog.moduleLoaderState_.moduleName) {
    throw Error("goog.module must be called prior to " + "goog.module.declareLegacyNamespace.");
  }
  goog.moduleLoaderState_.declareLegacyNamespace = true;
};
goog.setTestOnly = function(opt_message) {
  if (goog.DISALLOW_TEST_ONLY_CODE) {
    opt_message = opt_message || "";
    throw Error("Importing test-only code into non-debug environment" + (opt_message ? ": " + opt_message : "."));
  }
};
goog.forwardDeclare = function(name) {
};
if (!COMPILED) {
  goog.isProvided_ = function(name) {
    return name in goog.loadedModules_ || !goog.implicitNamespaces_[name] && goog.isDefAndNotNull(goog.getObjectByName(name));
  };
  goog.implicitNamespaces_ = {"goog.module":true};
}
goog.getObjectByName = function(name, opt_obj) {
  var parts = name.split(".");
  var cur = opt_obj || goog.global;
  for (var part;part = parts.shift();) {
    if (goog.isDefAndNotNull(cur[part])) {
      cur = cur[part];
    } else {
      return null;
    }
  }
  return cur;
};
goog.globalize = function(obj, opt_global) {
  var global = opt_global || goog.global;
  for (var x in obj) {
    global[x] = obj[x];
  }
};
goog.addDependency = function(relPath, provides, requires, opt_isModule) {
  if (goog.DEPENDENCIES_ENABLED) {
    var provide, require;
    var path = relPath.replace(/\\/g, "/");
    var deps = goog.dependencies_;
    for (var i = 0;provide = provides[i];i++) {
      deps.nameToPath[provide] = path;
      deps.pathIsModule[path] = !!opt_isModule;
    }
    for (var j = 0;require = requires[j];j++) {
      if (!(path in deps.requires)) {
        deps.requires[path] = {};
      }
      deps.requires[path][require] = true;
    }
  }
};
goog.define("goog.ENABLE_DEBUG_LOADER", true);
goog.logToConsole_ = function(msg) {
  if (goog.global.console) {
    goog.global.console["error"](msg);
  }
};
goog.require = function(name) {
  if (!COMPILED) {
    if (goog.ENABLE_DEBUG_LOADER && goog.IS_OLD_IE_) {
      goog.maybeProcessDeferredDep_(name);
    }
    if (goog.isProvided_(name)) {
      if (goog.isInModuleLoader_()) {
        return goog.module.getInternal_(name);
      } else {
        return null;
      }
    }
    if (goog.ENABLE_DEBUG_LOADER) {
      var path = goog.getPathFromDeps_(name);
      if (path) {
        goog.included_[path] = true;
        goog.writeScripts_();
        return null;
      }
    }
    var errorMessage = "goog.require could not find: " + name;
    goog.logToConsole_(errorMessage);
    throw Error(errorMessage);
  }
};
goog.basePath = "";
goog.global.CLOSURE_BASE_PATH;
goog.global.CLOSURE_NO_DEPS;
goog.global.CLOSURE_IMPORT_SCRIPT;
goog.nullFunction = function() {
};
goog.abstractMethod = function() {
  throw Error("unimplemented abstract method");
};
goog.addSingletonGetter = function(ctor) {
  ctor.getInstance = function() {
    if (ctor.instance_) {
      return ctor.instance_;
    }
    if (goog.DEBUG) {
      goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor;
    }
    return ctor.instance_ = new ctor;
  };
};
goog.instantiatedSingletons_ = [];
goog.define("goog.LOAD_MODULE_USING_EVAL", true);
goog.define("goog.SEAL_MODULE_EXPORTS", goog.DEBUG);
goog.loadedModules_ = {};
goog.DEPENDENCIES_ENABLED = !COMPILED && goog.ENABLE_DEBUG_LOADER;
if (goog.DEPENDENCIES_ENABLED) {
  goog.included_ = {};
  goog.dependencies_ = {pathIsModule:{}, nameToPath:{}, requires:{}, visited:{}, written:{}, deferred:{}};
  goog.inHtmlDocument_ = function() {
    var doc = goog.global.document;
    return typeof doc != "undefined" && "write" in doc;
  };
  goog.findBasePath_ = function() {
    if (goog.global.CLOSURE_BASE_PATH) {
      goog.basePath = goog.global.CLOSURE_BASE_PATH;
      return;
    } else {
      if (!goog.inHtmlDocument_()) {
        return;
      }
    }
    var doc = goog.global.document;
    var scripts = doc.getElementsByTagName("SCRIPT");
    for (var i = scripts.length - 1;i >= 0;--i) {
      var script = (scripts[i]);
      var src = script.src;
      var qmark = src.lastIndexOf("?");
      var l = qmark == -1 ? src.length : qmark;
      if (src.substr(l - 7, 7) == "base.js") {
        goog.basePath = src.substr(0, l - 7);
        return;
      }
    }
  };
  goog.importScript_ = function(src, opt_sourceText) {
    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;
    if (importScript(src, opt_sourceText)) {
      goog.dependencies_.written[src] = true;
    }
  };
  goog.IS_OLD_IE_ = !goog.global.atob && goog.global.document && goog.global.document.all;
  goog.importModule_ = function(src) {
    var bootstrap = 'goog.retrieveAndExecModule_("' + src + '");';
    if (goog.importScript_("", bootstrap)) {
      goog.dependencies_.written[src] = true;
    }
  };
  goog.queuedModules_ = [];
  goog.wrapModule_ = function(srcUrl, scriptText) {
    if (!goog.LOAD_MODULE_USING_EVAL || !goog.isDef(goog.global.JSON)) {
      return "" + "goog.loadModule(function(exports) {" + '"use strict";' + scriptText + "\n" + ";return exports" + "});" + "\n//# sourceURL\x3d" + srcUrl + "\n";
    } else {
      return "" + "goog.loadModule(" + goog.global.JSON.stringify(scriptText + "\n//# sourceURL\x3d" + srcUrl + "\n") + ");";
    }
  };
  goog.loadQueuedModules_ = function() {
    var count = goog.queuedModules_.length;
    if (count > 0) {
      var queue = goog.queuedModules_;
      goog.queuedModules_ = [];
      for (var i = 0;i < count;i++) {
        var path = queue[i];
        goog.maybeProcessDeferredPath_(path);
      }
    }
  };
  goog.maybeProcessDeferredDep_ = function(name) {
    if (goog.isDeferredModule_(name) && goog.allDepsAreAvailable_(name)) {
      var path = goog.getPathFromDeps_(name);
      goog.maybeProcessDeferredPath_(goog.basePath + path);
    }
  };
  goog.isDeferredModule_ = function(name) {
    var path = goog.getPathFromDeps_(name);
    if (path && goog.dependencies_.pathIsModule[path]) {
      var abspath = goog.basePath + path;
      return abspath in goog.dependencies_.deferred;
    }
    return false;
  };
  goog.allDepsAreAvailable_ = function(name) {
    var path = goog.getPathFromDeps_(name);
    if (path && path in goog.dependencies_.requires) {
      for (var requireName in goog.dependencies_.requires[path]) {
        if (!goog.isProvided_(requireName) && !goog.isDeferredModule_(requireName)) {
          return false;
        }
      }
    }
    return true;
  };
  goog.maybeProcessDeferredPath_ = function(abspath) {
    if (abspath in goog.dependencies_.deferred) {
      var src = goog.dependencies_.deferred[abspath];
      delete goog.dependencies_.deferred[abspath];
      goog.globalEval(src);
    }
  };
  goog.loadModule = function(moduleDef) {
    var previousState = goog.moduleLoaderState_;
    try {
      goog.moduleLoaderState_ = {moduleName:undefined, declareTestMethods:false};
      var exports;
      if (goog.isFunction(moduleDef)) {
        exports = moduleDef.call(goog.global, {});
      } else {
        if (goog.isString(moduleDef)) {
          exports = goog.loadModuleFromSource_.call(goog.global, moduleDef);
        } else {
          throw Error("Invalid module definition");
        }
      }
      var moduleName = goog.moduleLoaderState_.moduleName;
      if (!goog.isString(moduleName) || !moduleName) {
        throw Error('Invalid module name "' + moduleName + '"');
      }
      if (goog.moduleLoaderState_.declareLegacyNamespace) {
        goog.constructNamespace_(moduleName, exports);
      } else {
        if (goog.SEAL_MODULE_EXPORTS && Object.seal) {
          Object.seal(exports);
        }
      }
      goog.loadedModules_[moduleName] = exports;
      if (goog.moduleLoaderState_.declareTestMethods) {
        for (var entry in exports) {
          if (entry.indexOf("test", 0) === 0 || entry == "tearDown" || entry == "setUp" || entry == "setUpPage" || entry == "tearDownPage") {
            goog.global[entry] = exports[entry];
          }
        }
      }
    } finally {
      goog.moduleLoaderState_ = previousState;
    }
  };
  goog.loadModuleFromSource_ = function(source) {
    var exports = {};
    eval(arguments[0]);
    return exports;
  };
  goog.writeScriptSrcNode_ = function(src) {
    goog.global.document.write('\x3cscript type\x3d"text/javascript" src\x3d"' + src + '"\x3e\x3c/' + "script\x3e");
  };
  goog.appendScriptSrcNode_ = function(src) {
    var doc = goog.global.document;
    var scriptEl = doc.createElement("script");
    scriptEl.type = "text/javascript";
    scriptEl.src = src;
    scriptEl.defer = false;
    scriptEl.async = false;
    doc.head.appendChild(scriptEl);
  };
  goog.writeScriptTag_ = function(src, opt_sourceText) {
    if (goog.inHtmlDocument_()) {
      var doc = goog.global.document;
      if (!goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING && doc.readyState == "complete") {
        var isDeps = /\bdeps.js$/.test(src);
        if (isDeps) {
          return false;
        } else {
          throw Error('Cannot write "' + src + '" after document load');
        }
      }
      var isOldIE = goog.IS_OLD_IE_;
      if (opt_sourceText === undefined) {
        if (!isOldIE) {
          if (goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING) {
            goog.appendScriptSrcNode_(src);
          } else {
            goog.writeScriptSrcNode_(src);
          }
        } else {
          var state = " onreadystatechange\x3d'goog.onScriptLoad_(this, " + ++goog.lastNonModuleScriptIndex_ + ")' ";
          doc.write('\x3cscript type\x3d"text/javascript" src\x3d"' + src + '"' + state + "\x3e\x3c/" + "script\x3e");
        }
      } else {
        doc.write('\x3cscript type\x3d"text/javascript"\x3e' + opt_sourceText + "\x3c/" + "script\x3e");
      }
      return true;
    } else {
      return false;
    }
  };
  goog.lastNonModuleScriptIndex_ = 0;
  goog.onScriptLoad_ = function(script, scriptIndex) {
    if (script.readyState == "complete" && goog.lastNonModuleScriptIndex_ == scriptIndex) {
      goog.loadQueuedModules_();
    }
    return true;
  };
  goog.writeScripts_ = function() {
    var scripts = [];
    var seenScript = {};
    var deps = goog.dependencies_;
    function visitNode(path) {
      if (path in deps.written) {
        return;
      }
      if (path in deps.visited) {
        if (!(path in seenScript)) {
          seenScript[path] = true;
          scripts.push(path);
        }
        return;
      }
      deps.visited[path] = true;
      if (path in deps.requires) {
        for (var requireName in deps.requires[path]) {
          if (!goog.isProvided_(requireName)) {
            if (requireName in deps.nameToPath) {
              visitNode(deps.nameToPath[requireName]);
            } else {
              throw Error("Undefined nameToPath for " + requireName);
            }
          }
        }
      }
      if (!(path in seenScript)) {
        seenScript[path] = true;
        scripts.push(path);
      }
    }
    for (var path in goog.included_) {
      if (!deps.written[path]) {
        visitNode(path);
      }
    }
    for (var i = 0;i < scripts.length;i++) {
      var path = scripts[i];
      goog.dependencies_.written[path] = true;
    }
    var moduleState = goog.moduleLoaderState_;
    goog.moduleLoaderState_ = null;
    var loadingModule = false;
    for (var i = 0;i < scripts.length;i++) {
      var path = scripts[i];
      if (path) {
        if (!deps.pathIsModule[path]) {
          goog.importScript_(goog.basePath + path);
        } else {
          loadingModule = true;
          goog.importModule_(goog.basePath + path);
        }
      } else {
        goog.moduleLoaderState_ = moduleState;
        throw Error("Undefined script input");
      }
    }
    goog.moduleLoaderState_ = moduleState;
  };
  goog.getPathFromDeps_ = function(rule) {
    if (rule in goog.dependencies_.nameToPath) {
      return goog.dependencies_.nameToPath[rule];
    } else {
      return null;
    }
  };
  goog.findBasePath_();
  if (!goog.global.CLOSURE_NO_DEPS) {
    goog.importScript_(goog.basePath + "deps.js");
  }
}
goog.normalizePath_ = function(path) {
  var components = path.split("/");
  var i = 0;
  while (i < components.length) {
    if (components[i] == ".") {
      components.splice(i, 1);
    } else {
      if (i && components[i] == ".." && components[i - 1] && components[i - 1] != "..") {
        components.splice(--i, 2);
      } else {
        i++;
      }
    }
  }
  return components.join("/");
};
goog.loadFileSync_ = function(src) {
  if (goog.global.CLOSURE_LOAD_FILE_SYNC) {
    return goog.global.CLOSURE_LOAD_FILE_SYNC(src);
  } else {
    var xhr = new goog.global["XMLHttpRequest"];
    xhr.open("get", src, false);
    xhr.send();
    return xhr.responseText;
  }
};
goog.retrieveAndExecModule_ = function(src) {
  if (!COMPILED) {
    var originalPath = src;
    src = goog.normalizePath_(src);
    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;
    var scriptText = goog.loadFileSync_(src);
    if (scriptText != null) {
      var execModuleScript = goog.wrapModule_(src, scriptText);
      var isOldIE = goog.IS_OLD_IE_;
      if (isOldIE) {
        goog.dependencies_.deferred[originalPath] = execModuleScript;
        goog.queuedModules_.push(originalPath);
      } else {
        importScript(src, execModuleScript);
      }
    } else {
      throw new Error("load of " + src + "failed");
    }
  }
};
goog.typeOf = function(value) {
  var s = typeof value;
  if (s == "object") {
    if (value) {
      if (value instanceof Array) {
        return "array";
      } else {
        if (value instanceof Object) {
          return s;
        }
      }
      var className = Object.prototype.toString.call((value));
      if (className == "[object Window]") {
        return "object";
      }
      if (className == "[object Array]" || typeof value.length == "number" && typeof value.splice != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("splice")) {
        return "array";
      }
      if (className == "[object Function]" || typeof value.call != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("call")) {
        return "function";
      }
    } else {
      return "null";
    }
  } else {
    if (s == "function" && typeof value.call == "undefined") {
      return "object";
    }
  }
  return s;
};
goog.isNull = function(val) {
  return val === null;
};
goog.isDefAndNotNull = function(val) {
  return val != null;
};
goog.isArray = function(val) {
  return goog.typeOf(val) == "array";
};
goog.isArrayLike = function(val) {
  var type = goog.typeOf(val);
  return type == "array" || type == "object" && typeof val.length == "number";
};
goog.isDateLike = function(val) {
  return goog.isObject(val) && typeof val.getFullYear == "function";
};
goog.isString = function(val) {
  return typeof val == "string";
};
goog.isBoolean = function(val) {
  return typeof val == "boolean";
};
goog.isNumber = function(val) {
  return typeof val == "number";
};
goog.isFunction = function(val) {
  return goog.typeOf(val) == "function";
};
goog.isObject = function(val) {
  var type = typeof val;
  return type == "object" && val != null || type == "function";
};
goog.getUid = function(obj) {
  return obj[goog.UID_PROPERTY_] || (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_);
};
goog.hasUid = function(obj) {
  return !!obj[goog.UID_PROPERTY_];
};
goog.removeUid = function(obj) {
  if ("removeAttribute" in obj) {
    obj.removeAttribute(goog.UID_PROPERTY_);
  }
  try {
    delete obj[goog.UID_PROPERTY_];
  } catch (ex) {
  }
};
goog.UID_PROPERTY_ = "closure_uid_" + (Math.random() * 1E9 >>> 0);
goog.uidCounter_ = 0;
goog.getHashCode = goog.getUid;
goog.removeHashCode = goog.removeUid;
goog.cloneObject = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.cloneObject(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.bindNative_ = function(fn, selfObj, var_args) {
  return (fn.call.apply(fn.bind, arguments));
};
goog.bindJs_ = function(fn, selfObj, var_args) {
  if (!fn) {
    throw new Error;
  }
  if (arguments.length > 2) {
    var boundArgs = Array.prototype.slice.call(arguments, 2);
    return function() {
      var newArgs = Array.prototype.slice.call(arguments);
      Array.prototype.unshift.apply(newArgs, boundArgs);
      return fn.apply(selfObj, newArgs);
    };
  } else {
    return function() {
      return fn.apply(selfObj, arguments);
    };
  }
};
goog.bind = function(fn, selfObj, var_args) {
  if (Function.prototype.bind && Function.prototype.bind.toString().indexOf("native code") != -1) {
    goog.bind = goog.bindNative_;
  } else {
    goog.bind = goog.bindJs_;
  }
  return goog.bind.apply(null, arguments);
};
goog.partial = function(fn, var_args) {
  var args = Array.prototype.slice.call(arguments, 1);
  return function() {
    var newArgs = args.slice();
    newArgs.push.apply(newArgs, arguments);
    return fn.apply(this, newArgs);
  };
};
goog.mixin = function(target, source) {
  for (var x in source) {
    target[x] = source[x];
  }
};
goog.now = goog.TRUSTED_SITE && Date.now || function() {
  return +new Date;
};
goog.globalEval = function(script) {
  if (goog.global.execScript) {
    goog.global.execScript(script, "JavaScript");
  } else {
    if (goog.global.eval) {
      if (goog.evalWorksForGlobals_ == null) {
        goog.global.eval("var _et_ \x3d 1;");
        if (typeof goog.global["_et_"] != "undefined") {
          delete goog.global["_et_"];
          goog.evalWorksForGlobals_ = true;
        } else {
          goog.evalWorksForGlobals_ = false;
        }
      }
      if (goog.evalWorksForGlobals_) {
        goog.global.eval(script);
      } else {
        var doc = goog.global.document;
        var scriptElt = doc.createElement("SCRIPT");
        scriptElt.type = "text/javascript";
        scriptElt.defer = false;
        scriptElt.appendChild(doc.createTextNode(script));
        doc.body.appendChild(scriptElt);
        doc.body.removeChild(scriptElt);
      }
    } else {
      throw Error("goog.globalEval not available");
    }
  }
};
goog.evalWorksForGlobals_ = null;
goog.cssNameMapping_;
goog.cssNameMappingStyle_;
goog.getCssName = function(className, opt_modifier) {
  var getMapping = function(cssName) {
    return goog.cssNameMapping_[cssName] || cssName;
  };
  var renameByParts = function(cssName) {
    var parts = cssName.split("-");
    var mapped = [];
    for (var i = 0;i < parts.length;i++) {
      mapped.push(getMapping(parts[i]));
    }
    return mapped.join("-");
  };
  var rename;
  if (goog.cssNameMapping_) {
    rename = goog.cssNameMappingStyle_ == "BY_WHOLE" ? getMapping : renameByParts;
  } else {
    rename = function(a) {
      return a;
    };
  }
  if (opt_modifier) {
    return className + "-" + rename(opt_modifier);
  } else {
    return rename(className);
  }
};
goog.setCssNameMapping = function(mapping, opt_style) {
  goog.cssNameMapping_ = mapping;
  goog.cssNameMappingStyle_ = opt_style;
};
goog.global.CLOSURE_CSS_NAME_MAPPING;
if (!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING) {
  goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING;
}
goog.getMsg = function(str, opt_values) {
  if (opt_values) {
    str = str.replace(/\{\$([^}]+)}/g, function(match, key) {
      return key in opt_values ? opt_values[key] : match;
    });
  }
  return str;
};
goog.getMsgWithFallback = function(a, b) {
  return a;
};
goog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {
  goog.exportPath_(publicPath, object, opt_objectToExportTo);
};
goog.exportProperty = function(object, publicName, symbol) {
  object[publicName] = symbol;
};
goog.inherits = function(childCtor, parentCtor) {
  function tempCtor() {
  }
  tempCtor.prototype = parentCtor.prototype;
  childCtor.superClass_ = parentCtor.prototype;
  childCtor.prototype = new tempCtor;
  childCtor.prototype.constructor = childCtor;
  childCtor.base = function(me, methodName, var_args) {
    var args = new Array(arguments.length - 2);
    for (var i = 2;i < arguments.length;i++) {
      args[i - 2] = arguments[i];
    }
    return parentCtor.prototype[methodName].apply(me, args);
  };
};
goog.base = function(me, opt_methodName, var_args) {
  var caller = arguments.callee.caller;
  if (goog.STRICT_MODE_COMPATIBLE || goog.DEBUG && !caller) {
    throw Error("arguments.caller not defined.  goog.base() cannot be used " + "with strict mode code. See " + "http://www.ecma-international.org/ecma-262/5.1/#sec-C");
  }
  if (caller.superClass_) {
    var ctorArgs = new Array(arguments.length - 1);
    for (var i = 1;i < arguments.length;i++) {
      ctorArgs[i - 1] = arguments[i];
    }
    return caller.superClass_.constructor.apply(me, ctorArgs);
  }
  var args = new Array(arguments.length - 2);
  for (var i = 2;i < arguments.length;i++) {
    args[i - 2] = arguments[i];
  }
  var foundCaller = false;
  for (var ctor = me.constructor;ctor;ctor = ctor.superClass_ && ctor.superClass_.constructor) {
    if (ctor.prototype[opt_methodName] === caller) {
      foundCaller = true;
    } else {
      if (foundCaller) {
        return ctor.prototype[opt_methodName].apply(me, args);
      }
    }
  }
  if (me[opt_methodName] === caller) {
    return me.constructor.prototype[opt_methodName].apply(me, args);
  } else {
    throw Error("goog.base called from a method of one name " + "to a method of a different name");
  }
};
goog.scope = function(fn) {
  fn.call(goog.global);
};
if (!COMPILED) {
  goog.global["COMPILED"] = COMPILED;
}
goog.defineClass = function(superClass, def) {
  var constructor = def.constructor;
  var statics = def.statics;
  if (!constructor || constructor == Object.prototype.constructor) {
    constructor = function() {
      throw Error("cannot instantiate an interface (no constructor defined).");
    };
  }
  var cls = goog.defineClass.createSealingConstructor_(constructor, superClass);
  if (superClass) {
    goog.inherits(cls, superClass);
  }
  delete def.constructor;
  delete def.statics;
  goog.defineClass.applyProperties_(cls.prototype, def);
  if (statics != null) {
    if (statics instanceof Function) {
      statics(cls);
    } else {
      goog.defineClass.applyProperties_(cls, statics);
    }
  }
  return cls;
};
goog.defineClass.ClassDescriptor;
goog.define("goog.defineClass.SEAL_CLASS_INSTANCES", goog.DEBUG);
goog.defineClass.createSealingConstructor_ = function(ctr, superClass) {
  if (goog.defineClass.SEAL_CLASS_INSTANCES && Object.seal instanceof Function) {
    if (superClass && superClass.prototype && superClass.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_]) {
      return ctr;
    }
    var wrappedCtr = function() {
      var instance = ctr.apply(this, arguments) || this;
      instance[goog.UID_PROPERTY_] = instance[goog.UID_PROPERTY_];
      if (this.constructor === wrappedCtr) {
        Object.seal(instance);
      }
      return instance;
    };
    return wrappedCtr;
  }
  return ctr;
};
goog.defineClass.OBJECT_PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.defineClass.applyProperties_ = function(target, source) {
  var key;
  for (key in source) {
    if (Object.prototype.hasOwnProperty.call(source, key)) {
      target[key] = source[key];
    }
  }
  for (var i = 0;i < goog.defineClass.OBJECT_PROTOTYPE_FIELDS_.length;i++) {
    key = goog.defineClass.OBJECT_PROTOTYPE_FIELDS_[i];
    if (Object.prototype.hasOwnProperty.call(source, key)) {
      target[key] = source[key];
    }
  }
};
goog.tagUnsealableClass = function(ctr) {
  if (!COMPILED && goog.defineClass.SEAL_CLASS_INSTANCES) {
    ctr.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_] = true;
  }
};
goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_ = "goog_defineClass_legacy_unsealable";
goog.provide("goog.string");
goog.provide("goog.string.Unicode");
goog.define("goog.string.DETECT_DOUBLE_ESCAPING", false);
goog.define("goog.string.FORCE_NON_DOM_HTML_UNESCAPING", false);
goog.string.Unicode = {NBSP:"\u00a0"};
goog.string.startsWith = function(str, prefix) {
  return str.lastIndexOf(prefix, 0) == 0;
};
goog.string.endsWith = function(str, suffix) {
  var l = str.length - suffix.length;
  return l >= 0 && str.indexOf(suffix, l) == l;
};
goog.string.caseInsensitiveStartsWith = function(str, prefix) {
  return goog.string.caseInsensitiveCompare(prefix, str.substr(0, prefix.length)) == 0;
};
goog.string.caseInsensitiveEndsWith = function(str, suffix) {
  return goog.string.caseInsensitiveCompare(suffix, str.substr(str.length - suffix.length, suffix.length)) == 0;
};
goog.string.caseInsensitiveEquals = function(str1, str2) {
  return str1.toLowerCase() == str2.toLowerCase();
};
goog.string.subs = function(str, var_args) {
  var splitParts = str.split("%s");
  var returnString = "";
  var subsArguments = Array.prototype.slice.call(arguments, 1);
  while (subsArguments.length && splitParts.length > 1) {
    returnString += splitParts.shift() + subsArguments.shift();
  }
  return returnString + splitParts.join("%s");
};
goog.string.collapseWhitespace = function(str) {
  return str.replace(/[\s\xa0]+/g, " ").replace(/^\s+|\s+$/g, "");
};
goog.string.isEmptyOrWhitespace = function(str) {
  return /^[\s\xa0]*$/.test(str);
};
goog.string.isEmptyString = function(str) {
  return str.length == 0;
};
goog.string.isEmpty = goog.string.isEmptyOrWhitespace;
goog.string.isEmptyOrWhitespaceSafe = function(str) {
  return goog.string.isEmptyOrWhitespace(goog.string.makeSafe(str));
};
goog.string.isEmptySafe = goog.string.isEmptyOrWhitespaceSafe;
goog.string.isBreakingWhitespace = function(str) {
  return !/[^\t\n\r ]/.test(str);
};
goog.string.isAlpha = function(str) {
  return !/[^a-zA-Z]/.test(str);
};
goog.string.isNumeric = function(str) {
  return !/[^0-9]/.test(str);
};
goog.string.isAlphaNumeric = function(str) {
  return !/[^a-zA-Z0-9]/.test(str);
};
goog.string.isSpace = function(ch) {
  return ch == " ";
};
goog.string.isUnicodeChar = function(ch) {
  return ch.length == 1 && ch >= " " && ch <= "~" || ch >= "\u0080" && ch <= "\ufffd";
};
goog.string.stripNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)+/g, " ");
};
goog.string.canonicalizeNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)/g, "\n");
};
goog.string.normalizeWhitespace = function(str) {
  return str.replace(/\xa0|\s/g, " ");
};
goog.string.normalizeSpaces = function(str) {
  return str.replace(/\xa0|[ \t]+/g, " ");
};
goog.string.collapseBreakingSpaces = function(str) {
  return str.replace(/[\t\r\n ]+/g, " ").replace(/^[\t\r\n ]+|[\t\r\n ]+$/g, "");
};
goog.string.trim = goog.TRUSTED_SITE && String.prototype.trim ? function(str) {
  return str.trim();
} : function(str) {
  return str.replace(/^[\s\xa0]+|[\s\xa0]+$/g, "");
};
goog.string.trimLeft = function(str) {
  return str.replace(/^[\s\xa0]+/, "");
};
goog.string.trimRight = function(str) {
  return str.replace(/[\s\xa0]+$/, "");
};
goog.string.caseInsensitiveCompare = function(str1, str2) {
  var test1 = String(str1).toLowerCase();
  var test2 = String(str2).toLowerCase();
  if (test1 < test2) {
    return -1;
  } else {
    if (test1 == test2) {
      return 0;
    } else {
      return 1;
    }
  }
};
goog.string.numerateCompareRegExp_ = /(\.\d+)|(\d+)|(\D+)/g;
goog.string.numerateCompare = function(str1, str2) {
  if (str1 == str2) {
    return 0;
  }
  if (!str1) {
    return -1;
  }
  if (!str2) {
    return 1;
  }
  var tokens1 = str1.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var tokens2 = str2.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var count = Math.min(tokens1.length, tokens2.length);
  for (var i = 0;i < count;i++) {
    var a = tokens1[i];
    var b = tokens2[i];
    if (a != b) {
      var num1 = parseInt(a, 10);
      if (!isNaN(num1)) {
        var num2 = parseInt(b, 10);
        if (!isNaN(num2) && num1 - num2) {
          return num1 - num2;
        }
      }
      return a < b ? -1 : 1;
    }
  }
  if (tokens1.length != tokens2.length) {
    return tokens1.length - tokens2.length;
  }
  return str1 < str2 ? -1 : 1;
};
goog.string.urlEncode = function(str) {
  return encodeURIComponent(String(str));
};
goog.string.urlDecode = function(str) {
  return decodeURIComponent(str.replace(/\+/g, " "));
};
goog.string.newLineToBr = function(str, opt_xml) {
  return str.replace(/(\r\n|\r|\n)/g, opt_xml ? "\x3cbr /\x3e" : "\x3cbr\x3e");
};
goog.string.htmlEscape = function(str, opt_isLikelyToContainHtmlChars) {
  if (opt_isLikelyToContainHtmlChars) {
    str = str.replace(goog.string.AMP_RE_, "\x26amp;").replace(goog.string.LT_RE_, "\x26lt;").replace(goog.string.GT_RE_, "\x26gt;").replace(goog.string.QUOT_RE_, "\x26quot;").replace(goog.string.SINGLE_QUOTE_RE_, "\x26#39;").replace(goog.string.NULL_RE_, "\x26#0;");
    if (goog.string.DETECT_DOUBLE_ESCAPING) {
      str = str.replace(goog.string.E_RE_, "\x26#101;");
    }
    return str;
  } else {
    if (!goog.string.ALL_RE_.test(str)) {
      return str;
    }
    if (str.indexOf("\x26") != -1) {
      str = str.replace(goog.string.AMP_RE_, "\x26amp;");
    }
    if (str.indexOf("\x3c") != -1) {
      str = str.replace(goog.string.LT_RE_, "\x26lt;");
    }
    if (str.indexOf("\x3e") != -1) {
      str = str.replace(goog.string.GT_RE_, "\x26gt;");
    }
    if (str.indexOf('"') != -1) {
      str = str.replace(goog.string.QUOT_RE_, "\x26quot;");
    }
    if (str.indexOf("'") != -1) {
      str = str.replace(goog.string.SINGLE_QUOTE_RE_, "\x26#39;");
    }
    if (str.indexOf("\x00") != -1) {
      str = str.replace(goog.string.NULL_RE_, "\x26#0;");
    }
    if (goog.string.DETECT_DOUBLE_ESCAPING && str.indexOf("e") != -1) {
      str = str.replace(goog.string.E_RE_, "\x26#101;");
    }
    return str;
  }
};
goog.string.AMP_RE_ = /&/g;
goog.string.LT_RE_ = /</g;
goog.string.GT_RE_ = />/g;
goog.string.QUOT_RE_ = /"/g;
goog.string.SINGLE_QUOTE_RE_ = /'/g;
goog.string.NULL_RE_ = /\x00/g;
goog.string.E_RE_ = /e/g;
goog.string.ALL_RE_ = goog.string.DETECT_DOUBLE_ESCAPING ? /[\x00&<>"'e]/ : /[\x00&<>"']/;
goog.string.unescapeEntities = function(str) {
  if (goog.string.contains(str, "\x26")) {
    if (!goog.string.FORCE_NON_DOM_HTML_UNESCAPING && "document" in goog.global) {
      return goog.string.unescapeEntitiesUsingDom_(str);
    } else {
      return goog.string.unescapePureXmlEntities_(str);
    }
  }
  return str;
};
goog.string.unescapeEntitiesWithDocument = function(str, document) {
  if (goog.string.contains(str, "\x26")) {
    return goog.string.unescapeEntitiesUsingDom_(str, document);
  }
  return str;
};
goog.string.unescapeEntitiesUsingDom_ = function(str, opt_document) {
  var seen = {"\x26amp;":"\x26", "\x26lt;":"\x3c", "\x26gt;":"\x3e", "\x26quot;":'"'};
  var div;
  if (opt_document) {
    div = opt_document.createElement("div");
  } else {
    div = goog.global.document.createElement("div");
  }
  return str.replace(goog.string.HTML_ENTITY_PATTERN_, function(s, entity) {
    var value = seen[s];
    if (value) {
      return value;
    }
    if (entity.charAt(0) == "#") {
      var n = Number("0" + entity.substr(1));
      if (!isNaN(n)) {
        value = String.fromCharCode(n);
      }
    }
    if (!value) {
      div.innerHTML = s + " ";
      value = div.firstChild.nodeValue.slice(0, -1);
    }
    return seen[s] = value;
  });
};
goog.string.unescapePureXmlEntities_ = function(str) {
  return str.replace(/&([^;]+);/g, function(s, entity) {
    switch(entity) {
      case "amp":
        return "\x26";
      case "lt":
        return "\x3c";
      case "gt":
        return "\x3e";
      case "quot":
        return '"';
      default:
        if (entity.charAt(0) == "#") {
          var n = Number("0" + entity.substr(1));
          if (!isNaN(n)) {
            return String.fromCharCode(n);
          }
        }
        return s;
    }
  });
};
goog.string.HTML_ENTITY_PATTERN_ = /&([^;\s<&]+);?/g;
goog.string.whitespaceEscape = function(str, opt_xml) {
  return goog.string.newLineToBr(str.replace(/  /g, " \x26#160;"), opt_xml);
};
goog.string.preserveSpaces = function(str) {
  return str.replace(/(^|[\n ]) /g, "$1" + goog.string.Unicode.NBSP);
};
goog.string.stripQuotes = function(str, quoteChars) {
  var length = quoteChars.length;
  for (var i = 0;i < length;i++) {
    var quoteChar = length == 1 ? quoteChars : quoteChars.charAt(i);
    if (str.charAt(0) == quoteChar && str.charAt(str.length - 1) == quoteChar) {
      return str.substring(1, str.length - 1);
    }
  }
  return str;
};
goog.string.truncate = function(str, chars, opt_protectEscapedCharacters) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (str.length > chars) {
    str = str.substring(0, chars - 3) + "...";
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.truncateMiddle = function(str, chars, opt_protectEscapedCharacters, opt_trailingChars) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (opt_trailingChars && str.length > chars) {
    if (opt_trailingChars > chars) {
      opt_trailingChars = chars;
    }
    var endPoint = str.length - opt_trailingChars;
    var startPoint = chars - opt_trailingChars;
    str = str.substring(0, startPoint) + "..." + str.substring(endPoint);
  } else {
    if (str.length > chars) {
      var half = Math.floor(chars / 2);
      var endPos = str.length - half;
      half += chars % 2;
      str = str.substring(0, half) + "..." + str.substring(endPos);
    }
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.specialEscapeChars_ = {"\x00":"\\0", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\x0B", '"':'\\"', "\\":"\\\\"};
goog.string.jsEscapeCache_ = {"'":"\\'"};
goog.string.quote = function(s) {
  s = String(s);
  if (s.quote) {
    return s.quote();
  } else {
    var sb = ['"'];
    for (var i = 0;i < s.length;i++) {
      var ch = s.charAt(i);
      var cc = ch.charCodeAt(0);
      sb[i + 1] = goog.string.specialEscapeChars_[ch] || (cc > 31 && cc < 127 ? ch : goog.string.escapeChar(ch));
    }
    sb.push('"');
    return sb.join("");
  }
};
goog.string.escapeString = function(str) {
  var sb = [];
  for (var i = 0;i < str.length;i++) {
    sb[i] = goog.string.escapeChar(str.charAt(i));
  }
  return sb.join("");
};
goog.string.escapeChar = function(c) {
  if (c in goog.string.jsEscapeCache_) {
    return goog.string.jsEscapeCache_[c];
  }
  if (c in goog.string.specialEscapeChars_) {
    return goog.string.jsEscapeCache_[c] = goog.string.specialEscapeChars_[c];
  }
  var rv = c;
  var cc = c.charCodeAt(0);
  if (cc > 31 && cc < 127) {
    rv = c;
  } else {
    if (cc < 256) {
      rv = "\\x";
      if (cc < 16 || cc > 256) {
        rv += "0";
      }
    } else {
      rv = "\\u";
      if (cc < 4096) {
        rv += "0";
      }
    }
    rv += cc.toString(16).toUpperCase();
  }
  return goog.string.jsEscapeCache_[c] = rv;
};
goog.string.contains = function(str, subString) {
  return str.indexOf(subString) != -1;
};
goog.string.caseInsensitiveContains = function(str, subString) {
  return goog.string.contains(str.toLowerCase(), subString.toLowerCase());
};
goog.string.countOf = function(s, ss) {
  return s && ss ? s.split(ss).length - 1 : 0;
};
goog.string.removeAt = function(s, index, stringLength) {
  var resultStr = s;
  if (index >= 0 && index < s.length && stringLength > 0) {
    resultStr = s.substr(0, index) + s.substr(index + stringLength, s.length - index - stringLength);
  }
  return resultStr;
};
goog.string.remove = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "");
  return s.replace(re, "");
};
goog.string.removeAll = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "g");
  return s.replace(re, "");
};
goog.string.regExpEscape = function(s) {
  return String(s).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, "\\$1").replace(/\x08/g, "\\x08");
};
goog.string.repeat = function(string, length) {
  return (new Array(length + 1)).join(string);
};
goog.string.padNumber = function(num, length, opt_precision) {
  var s = goog.isDef(opt_precision) ? num.toFixed(opt_precision) : String(num);
  var index = s.indexOf(".");
  if (index == -1) {
    index = s.length;
  }
  return goog.string.repeat("0", Math.max(0, length - index)) + s;
};
goog.string.makeSafe = function(obj) {
  return obj == null ? "" : String(obj);
};
goog.string.buildString = function(var_args) {
  return Array.prototype.join.call(arguments, "");
};
goog.string.getRandomString = function() {
  var x = 2147483648;
  return Math.floor(Math.random() * x).toString(36) + Math.abs(Math.floor(Math.random() * x) ^ goog.now()).toString(36);
};
goog.string.compareVersions = function(version1, version2) {
  var order = 0;
  var v1Subs = goog.string.trim(String(version1)).split(".");
  var v2Subs = goog.string.trim(String(version2)).split(".");
  var subCount = Math.max(v1Subs.length, v2Subs.length);
  for (var subIdx = 0;order == 0 && subIdx < subCount;subIdx++) {
    var v1Sub = v1Subs[subIdx] || "";
    var v2Sub = v2Subs[subIdx] || "";
    var v1CompParser = new RegExp("(\\d*)(\\D*)", "g");
    var v2CompParser = new RegExp("(\\d*)(\\D*)", "g");
    do {
      var v1Comp = v1CompParser.exec(v1Sub) || ["", "", ""];
      var v2Comp = v2CompParser.exec(v2Sub) || ["", "", ""];
      if (v1Comp[0].length == 0 && v2Comp[0].length == 0) {
        break;
      }
      var v1CompNum = v1Comp[1].length == 0 ? 0 : parseInt(v1Comp[1], 10);
      var v2CompNum = v2Comp[1].length == 0 ? 0 : parseInt(v2Comp[1], 10);
      order = goog.string.compareElements_(v1CompNum, v2CompNum) || goog.string.compareElements_(v1Comp[2].length == 0, v2Comp[2].length == 0) || goog.string.compareElements_(v1Comp[2], v2Comp[2]);
    } while (order == 0);
  }
  return order;
};
goog.string.compareElements_ = function(left, right) {
  if (left < right) {
    return -1;
  } else {
    if (left > right) {
      return 1;
    }
  }
  return 0;
};
goog.string.HASHCODE_MAX_ = 4294967296;
goog.string.hashCode = function(str) {
  var result = 0;
  for (var i = 0;i < str.length;++i) {
    result = 31 * result + str.charCodeAt(i);
    result %= goog.string.HASHCODE_MAX_;
  }
  return result;
};
goog.string.uniqueStringCounter_ = Math.random() * 2147483648 | 0;
goog.string.createUniqueString = function() {
  return "goog_" + goog.string.uniqueStringCounter_++;
};
goog.string.toNumber = function(str) {
  var num = Number(str);
  if (num == 0 && goog.string.isEmptyOrWhitespace(str)) {
    return NaN;
  }
  return num;
};
goog.string.isLowerCamelCase = function(str) {
  return /^[a-z]+([A-Z][a-z]*)*$/.test(str);
};
goog.string.isUpperCamelCase = function(str) {
  return /^([A-Z][a-z]*)+$/.test(str);
};
goog.string.toCamelCase = function(str) {
  return String(str).replace(/\-([a-z])/g, function(all, match) {
    return match.toUpperCase();
  });
};
goog.string.toSelectorCase = function(str) {
  return String(str).replace(/([A-Z])/g, "-$1").toLowerCase();
};
goog.string.toTitleCase = function(str, opt_delimiters) {
  var delimiters = goog.isString(opt_delimiters) ? goog.string.regExpEscape(opt_delimiters) : "\\s";
  delimiters = delimiters ? "|[" + delimiters + "]+" : "";
  var regexp = new RegExp("(^" + delimiters + ")([a-z])", "g");
  return str.replace(regexp, function(all, p1, p2) {
    return p1 + p2.toUpperCase();
  });
};
goog.string.capitalize = function(str) {
  return String(str.charAt(0)).toUpperCase() + String(str.substr(1)).toLowerCase();
};
goog.string.parseInt = function(value) {
  if (isFinite(value)) {
    value = String(value);
  }
  if (goog.isString(value)) {
    return /^\s*-?0x/i.test(value) ? parseInt(value, 16) : parseInt(value, 10);
  }
  return NaN;
};
goog.string.splitLimit = function(str, separator, limit) {
  var parts = str.split(separator);
  var returnVal = [];
  while (limit > 0 && parts.length) {
    returnVal.push(parts.shift());
    limit--;
  }
  if (parts.length) {
    returnVal.push(parts.join(separator));
  }
  return returnVal;
};
goog.string.editDistance = function(a, b) {
  var v0 = [];
  var v1 = [];
  if (a == b) {
    return 0;
  }
  if (!a.length || !b.length) {
    return Math.max(a.length, b.length);
  }
  for (var i = 0;i < b.length + 1;i++) {
    v0[i] = i;
  }
  for (var i = 0;i < a.length;i++) {
    v1[0] = i + 1;
    for (var j = 0;j < b.length;j++) {
      var cost = a[i] != b[j];
      v1[j + 1] = Math.min(v1[j] + 1, v0[j + 1] + 1, v0[j] + cost);
    }
    for (var j = 0;j < v0.length;j++) {
      v0[j] = v1[j];
    }
  }
  return v1[b.length];
};
goog.provide("goog.object");
goog.object.forEach = function(obj, f, opt_obj) {
  for (var key in obj) {
    f.call(opt_obj, obj[key], key, obj);
  }
};
goog.object.filter = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      res[key] = obj[key];
    }
  }
  return res;
};
goog.object.map = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    res[key] = f.call(opt_obj, obj[key], key, obj);
  }
  return res;
};
goog.object.some = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      return true;
    }
  }
  return false;
};
goog.object.every = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (!f.call(opt_obj, obj[key], key, obj)) {
      return false;
    }
  }
  return true;
};
goog.object.getCount = function(obj) {
  var rv = 0;
  for (var key in obj) {
    rv++;
  }
  return rv;
};
goog.object.getAnyKey = function(obj) {
  for (var key in obj) {
    return key;
  }
};
goog.object.getAnyValue = function(obj) {
  for (var key in obj) {
    return obj[key];
  }
};
goog.object.contains = function(obj, val) {
  return goog.object.containsValue(obj, val);
};
goog.object.getValues = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = obj[key];
  }
  return res;
};
goog.object.getKeys = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = key;
  }
  return res;
};
goog.object.getValueByKeys = function(obj, var_args) {
  var isArrayLike = goog.isArrayLike(var_args);
  var keys = isArrayLike ? var_args : arguments;
  for (var i = isArrayLike ? 0 : 1;i < keys.length;i++) {
    obj = obj[keys[i]];
    if (!goog.isDef(obj)) {
      break;
    }
  }
  return obj;
};
goog.object.containsKey = function(obj, key) {
  return key in obj;
};
goog.object.containsValue = function(obj, val) {
  for (var key in obj) {
    if (obj[key] == val) {
      return true;
    }
  }
  return false;
};
goog.object.findKey = function(obj, f, opt_this) {
  for (var key in obj) {
    if (f.call(opt_this, obj[key], key, obj)) {
      return key;
    }
  }
  return undefined;
};
goog.object.findValue = function(obj, f, opt_this) {
  var key = goog.object.findKey(obj, f, opt_this);
  return key && obj[key];
};
goog.object.isEmpty = function(obj) {
  for (var key in obj) {
    return false;
  }
  return true;
};
goog.object.clear = function(obj) {
  for (var i in obj) {
    delete obj[i];
  }
};
goog.object.remove = function(obj, key) {
  var rv;
  if (rv = key in obj) {
    delete obj[key];
  }
  return rv;
};
goog.object.add = function(obj, key, val) {
  if (key in obj) {
    throw Error('The object already contains the key "' + key + '"');
  }
  goog.object.set(obj, key, val);
};
goog.object.get = function(obj, key, opt_val) {
  if (key in obj) {
    return obj[key];
  }
  return opt_val;
};
goog.object.set = function(obj, key, value) {
  obj[key] = value;
};
goog.object.setIfUndefined = function(obj, key, value) {
  return key in obj ? obj[key] : obj[key] = value;
};
goog.object.setWithReturnValueIfNotSet = function(obj, key, f) {
  if (key in obj) {
    return obj[key];
  }
  var val = f();
  obj[key] = val;
  return val;
};
goog.object.equals = function(a, b) {
  for (var k in a) {
    if (!(k in b) || a[k] !== b[k]) {
      return false;
    }
  }
  for (var k in b) {
    if (!(k in a)) {
      return false;
    }
  }
  return true;
};
goog.object.clone = function(obj) {
  var res = {};
  for (var key in obj) {
    res[key] = obj[key];
  }
  return res;
};
goog.object.unsafeClone = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.object.unsafeClone(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.object.transpose = function(obj) {
  var transposed = {};
  for (var key in obj) {
    transposed[obj[key]] = key;
  }
  return transposed;
};
goog.object.PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.object.extend = function(target, var_args) {
  var key, source;
  for (var i = 1;i < arguments.length;i++) {
    source = arguments[i];
    for (key in source) {
      target[key] = source[key];
    }
    for (var j = 0;j < goog.object.PROTOTYPE_FIELDS_.length;j++) {
      key = goog.object.PROTOTYPE_FIELDS_[j];
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }
};
goog.object.create = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.create.apply(null, arguments[0]);
  }
  if (argLength % 2) {
    throw Error("Uneven number of arguments");
  }
  var rv = {};
  for (var i = 0;i < argLength;i += 2) {
    rv[arguments[i]] = arguments[i + 1];
  }
  return rv;
};
goog.object.createSet = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.createSet.apply(null, arguments[0]);
  }
  var rv = {};
  for (var i = 0;i < argLength;i++) {
    rv[arguments[i]] = true;
  }
  return rv;
};
goog.object.createImmutableView = function(obj) {
  var result = obj;
  if (Object.isFrozen && !Object.isFrozen(obj)) {
    result = Object.create(obj);
    Object.freeze(result);
  }
  return result;
};
goog.object.isImmutableView = function(obj) {
  return !!Object.isFrozen && Object.isFrozen(obj);
};
goog.provide("goog.string.StringBuffer");
goog.string.StringBuffer = function(opt_a1, var_args) {
  if (opt_a1 != null) {
    this.append.apply(this, arguments);
  }
};
goog.string.StringBuffer.prototype.buffer_ = "";
goog.string.StringBuffer.prototype.set = function(s) {
  this.buffer_ = "" + s;
};
goog.string.StringBuffer.prototype.append = function(a1, opt_a2, var_args) {
  this.buffer_ += a1;
  if (opt_a2 != null) {
    for (var i = 1;i < arguments.length;i++) {
      this.buffer_ += arguments[i];
    }
  }
  return this;
};
goog.string.StringBuffer.prototype.clear = function() {
  this.buffer_ = "";
};
goog.string.StringBuffer.prototype.getLength = function() {
  return this.buffer_.length;
};
goog.string.StringBuffer.prototype.toString = function() {
  return this.buffer_;
};
goog.provide("goog.debug.Error");
goog.debug.Error = function(opt_msg) {
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, goog.debug.Error);
  } else {
    var stack = (new Error).stack;
    if (stack) {
      this.stack = stack;
    }
  }
  if (opt_msg) {
    this.message = String(opt_msg);
  }
  this.reportErrorToServer = true;
};
goog.inherits(goog.debug.Error, Error);
goog.debug.Error.prototype.name = "CustomError";
goog.provide("goog.dom.NodeType");
goog.dom.NodeType = {ELEMENT:1, ATTRIBUTE:2, TEXT:3, CDATA_SECTION:4, ENTITY_REFERENCE:5, ENTITY:6, PROCESSING_INSTRUCTION:7, COMMENT:8, DOCUMENT:9, DOCUMENT_TYPE:10, DOCUMENT_FRAGMENT:11, NOTATION:12};
goog.provide("goog.asserts");
goog.provide("goog.asserts.AssertionError");
goog.require("goog.debug.Error");
goog.require("goog.dom.NodeType");
goog.require("goog.string");
goog.define("goog.asserts.ENABLE_ASSERTS", goog.DEBUG);
goog.asserts.AssertionError = function(messagePattern, messageArgs) {
  messageArgs.unshift(messagePattern);
  goog.debug.Error.call(this, goog.string.subs.apply(null, messageArgs));
  messageArgs.shift();
  this.messagePattern = messagePattern;
};
goog.inherits(goog.asserts.AssertionError, goog.debug.Error);
goog.asserts.AssertionError.prototype.name = "AssertionError";
goog.asserts.DEFAULT_ERROR_HANDLER = function(e) {
  throw e;
};
goog.asserts.errorHandler_ = goog.asserts.DEFAULT_ERROR_HANDLER;
goog.asserts.doAssertFailure_ = function(defaultMessage, defaultArgs, givenMessage, givenArgs) {
  var message = "Assertion failed";
  if (givenMessage) {
    message += ": " + givenMessage;
    var args = givenArgs;
  } else {
    if (defaultMessage) {
      message += ": " + defaultMessage;
      args = defaultArgs;
    }
  }
  var e = new goog.asserts.AssertionError("" + message, args || []);
  goog.asserts.errorHandler_(e);
};
goog.asserts.setErrorHandler = function(errorHandler) {
  if (goog.asserts.ENABLE_ASSERTS) {
    goog.asserts.errorHandler_ = errorHandler;
  }
};
goog.asserts.assert = function(condition, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !condition) {
    goog.asserts.doAssertFailure_("", null, opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return condition;
};
goog.asserts.fail = function(opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS) {
    goog.asserts.errorHandler_(new goog.asserts.AssertionError("Failure" + (opt_message ? ": " + opt_message : ""), Array.prototype.slice.call(arguments, 1)));
  }
};
goog.asserts.assertNumber = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isNumber(value)) {
    goog.asserts.doAssertFailure_("Expected number but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return (value);
};
goog.asserts.assertString = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isString(value)) {
    goog.asserts.doAssertFailure_("Expected string but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return (value);
};
goog.asserts.assertFunction = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isFunction(value)) {
    goog.asserts.doAssertFailure_("Expected function but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return (value);
};
goog.asserts.assertObject = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isObject(value)) {
    goog.asserts.doAssertFailure_("Expected object but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return (value);
};
goog.asserts.assertArray = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isArray(value)) {
    goog.asserts.doAssertFailure_("Expected array but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return (value);
};
goog.asserts.assertBoolean = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isBoolean(value)) {
    goog.asserts.doAssertFailure_("Expected boolean but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return (value);
};
goog.asserts.assertElement = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && (!goog.isObject(value) || value.nodeType != goog.dom.NodeType.ELEMENT)) {
    goog.asserts.doAssertFailure_("Expected Element but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return (value);
};
goog.asserts.assertInstanceof = function(value, type, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !(value instanceof type)) {
    goog.asserts.doAssertFailure_("Expected instanceof %s but got %s.", [goog.asserts.getType_(type), goog.asserts.getType_(value)], opt_message, Array.prototype.slice.call(arguments, 3));
  }
  return value;
};
goog.asserts.assertObjectPrototypeIsIntact = function() {
  for (var key in Object.prototype) {
    goog.asserts.fail(key + " should not be enumerable in Object.prototype.");
  }
};
goog.asserts.getType_ = function(value) {
  if (value instanceof Function) {
    return value.displayName || value.name || "unknown type name";
  } else {
    if (value instanceof Object) {
      return value.constructor.displayName || value.constructor.name || Object.prototype.toString.call(value);
    } else {
      return value === null ? "null" : typeof value;
    }
  }
};
goog.provide("goog.array");
goog.provide("goog.array.ArrayLike");
goog.require("goog.asserts");
goog.define("goog.NATIVE_ARRAY_PROTOTYPES", goog.TRUSTED_SITE);
goog.define("goog.array.ASSUME_NATIVE_FUNCTIONS", false);
goog.array.ArrayLike;
goog.array.peek = function(array) {
  return array[array.length - 1];
};
goog.array.last = goog.array.peek;
goog.array.ARRAY_PROTOTYPE_ = Array.prototype;
goog.array.indexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.indexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.indexOf.call(arr, obj, opt_fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? 0 : opt_fromIndex < 0 ? Math.max(0, arr.length + opt_fromIndex) : opt_fromIndex;
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return -1;
    }
    return arr.indexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i < arr.length;i++) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return -1;
};
goog.array.lastIndexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.lastIndexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  return goog.array.ARRAY_PROTOTYPE_.lastIndexOf.call(arr, obj, fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  if (fromIndex < 0) {
    fromIndex = Math.max(0, arr.length + fromIndex);
  }
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return -1;
    }
    return arr.lastIndexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i >= 0;i--) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return -1;
};
goog.array.forEach = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.forEach) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  goog.array.ARRAY_PROTOTYPE_.forEach.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.forEachRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;--i) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.filter = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.filter) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.filter.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = [];
  var resLength = 0;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      var val = arr2[i];
      if (f.call(opt_obj, val, i, arr)) {
        res[resLength++] = val;
      }
    }
  }
  return res;
};
goog.array.map = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.map) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.map.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = new Array(l);
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      res[i] = f.call(opt_obj, arr2[i], i, arr);
    }
  }
  return res;
};
goog.array.reduce = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.reduce) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return goog.array.ARRAY_PROTOTYPE_.reduce.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEach(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.reduceRight = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.reduceRight) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return goog.array.ARRAY_PROTOTYPE_.reduceRight.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEachRight(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.some = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.some) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.some.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return true;
    }
  }
  return false;
};
goog.array.every = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.every) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.every.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && !f.call(opt_obj, arr2[i], i, arr)) {
      return false;
    }
  }
  return true;
};
goog.array.count = function(arr, f, opt_obj) {
  var count = 0;
  goog.array.forEach(arr, function(element, index, arr) {
    if (f.call(opt_obj, element, index, arr)) {
      ++count;
    }
  }, opt_obj);
  return count;
};
goog.array.find = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndex = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return -1;
};
goog.array.findRight = function(arr, f, opt_obj) {
  var i = goog.array.findIndexRight(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndexRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;i--) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return -1;
};
goog.array.contains = function(arr, obj) {
  return goog.array.indexOf(arr, obj) >= 0;
};
goog.array.isEmpty = function(arr) {
  return arr.length == 0;
};
goog.array.clear = function(arr) {
  if (!goog.isArray(arr)) {
    for (var i = arr.length - 1;i >= 0;i--) {
      delete arr[i];
    }
  }
  arr.length = 0;
};
goog.array.insert = function(arr, obj) {
  if (!goog.array.contains(arr, obj)) {
    arr.push(obj);
  }
};
goog.array.insertAt = function(arr, obj, opt_i) {
  goog.array.splice(arr, opt_i, 0, obj);
};
goog.array.insertArrayAt = function(arr, elementsToAdd, opt_i) {
  goog.partial(goog.array.splice, arr, opt_i, 0).apply(null, elementsToAdd);
};
goog.array.insertBefore = function(arr, obj, opt_obj2) {
  var i;
  if (arguments.length == 2 || (i = goog.array.indexOf(arr, opt_obj2)) < 0) {
    arr.push(obj);
  } else {
    goog.array.insertAt(arr, obj, i);
  }
};
goog.array.remove = function(arr, obj) {
  var i = goog.array.indexOf(arr, obj);
  var rv;
  if (rv = i >= 0) {
    goog.array.removeAt(arr, i);
  }
  return rv;
};
goog.array.removeAt = function(arr, i) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.call(arr, i, 1).length == 1;
};
goog.array.removeIf = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  if (i >= 0) {
    goog.array.removeAt(arr, i);
    return true;
  }
  return false;
};
goog.array.removeAllIf = function(arr, f, opt_obj) {
  var removedCount = 0;
  goog.array.forEachRight(arr, function(val, index) {
    if (f.call(opt_obj, val, index, arr)) {
      if (goog.array.removeAt(arr, index)) {
        removedCount++;
      }
    }
  });
  return removedCount;
};
goog.array.concat = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.join = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.toArray = function(object) {
  var length = object.length;
  if (length > 0) {
    var rv = new Array(length);
    for (var i = 0;i < length;i++) {
      rv[i] = object[i];
    }
    return rv;
  }
  return [];
};
goog.array.clone = goog.array.toArray;
goog.array.extend = function(arr1, var_args) {
  for (var i = 1;i < arguments.length;i++) {
    var arr2 = arguments[i];
    if (goog.isArrayLike(arr2)) {
      var len1 = arr1.length || 0;
      var len2 = arr2.length || 0;
      arr1.length = len1 + len2;
      for (var j = 0;j < len2;j++) {
        arr1[len1 + j] = arr2[j];
      }
    } else {
      arr1.push(arr2);
    }
  }
};
goog.array.splice = function(arr, index, howMany, var_args) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.apply(arr, goog.array.slice(arguments, 1));
};
goog.array.slice = function(arr, start, opt_end) {
  goog.asserts.assert(arr.length != null);
  if (arguments.length <= 2) {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start);
  } else {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start, opt_end);
  }
};
goog.array.removeDuplicates = function(arr, opt_rv, opt_hashFn) {
  var returnArray = opt_rv || arr;
  var defaultHashFn = function(item) {
    return goog.isObject(current) ? "o" + goog.getUid(current) : (typeof current).charAt(0) + current;
  };
  var hashFn = opt_hashFn || defaultHashFn;
  var seen = {}, cursorInsert = 0, cursorRead = 0;
  while (cursorRead < arr.length) {
    var current = arr[cursorRead++];
    var key = hashFn(current);
    if (!Object.prototype.hasOwnProperty.call(seen, key)) {
      seen[key] = true;
      returnArray[cursorInsert++] = current;
    }
  }
  returnArray.length = cursorInsert;
};
goog.array.binarySearch = function(arr, target, opt_compareFn) {
  return goog.array.binarySearch_(arr, opt_compareFn || goog.array.defaultCompare, false, target);
};
goog.array.binarySelect = function(arr, evaluator, opt_obj) {
  return goog.array.binarySearch_(arr, evaluator, true, undefined, opt_obj);
};
goog.array.binarySearch_ = function(arr, compareFn, isEvaluator, opt_target, opt_selfObj) {
  var left = 0;
  var right = arr.length;
  var found;
  while (left < right) {
    var middle = left + right >> 1;
    var compareResult;
    if (isEvaluator) {
      compareResult = compareFn.call(opt_selfObj, arr[middle], middle, arr);
    } else {
      compareResult = compareFn(opt_target, arr[middle]);
    }
    if (compareResult > 0) {
      left = middle + 1;
    } else {
      right = middle;
      found = !compareResult;
    }
  }
  return found ? left : ~left;
};
goog.array.sort = function(arr, opt_compareFn) {
  arr.sort(opt_compareFn || goog.array.defaultCompare);
};
goog.array.stableSort = function(arr, opt_compareFn) {
  for (var i = 0;i < arr.length;i++) {
    arr[i] = {index:i, value:arr[i]};
  }
  var valueCompareFn = opt_compareFn || goog.array.defaultCompare;
  function stableCompareFn(obj1, obj2) {
    return valueCompareFn(obj1.value, obj2.value) || obj1.index - obj2.index;
  }
  goog.array.sort(arr, stableCompareFn);
  for (var i = 0;i < arr.length;i++) {
    arr[i] = arr[i].value;
  }
};
goog.array.sortByKey = function(arr, keyFn, opt_compareFn) {
  var keyCompareFn = opt_compareFn || goog.array.defaultCompare;
  goog.array.sort(arr, function(a, b) {
    return keyCompareFn(keyFn(a), keyFn(b));
  });
};
goog.array.sortObjectsByKey = function(arr, key, opt_compareFn) {
  goog.array.sortByKey(arr, function(obj) {
    return obj[key];
  }, opt_compareFn);
};
goog.array.isSorted = function(arr, opt_compareFn, opt_strict) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  for (var i = 1;i < arr.length;i++) {
    var compareResult = compare(arr[i - 1], arr[i]);
    if (compareResult > 0 || compareResult == 0 && opt_strict) {
      return false;
    }
  }
  return true;
};
goog.array.equals = function(arr1, arr2, opt_equalsFn) {
  if (!goog.isArrayLike(arr1) || !goog.isArrayLike(arr2) || arr1.length != arr2.length) {
    return false;
  }
  var l = arr1.length;
  var equalsFn = opt_equalsFn || goog.array.defaultCompareEquality;
  for (var i = 0;i < l;i++) {
    if (!equalsFn(arr1[i], arr2[i])) {
      return false;
    }
  }
  return true;
};
goog.array.compare3 = function(arr1, arr2, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  var l = Math.min(arr1.length, arr2.length);
  for (var i = 0;i < l;i++) {
    var result = compare(arr1[i], arr2[i]);
    if (result != 0) {
      return result;
    }
  }
  return goog.array.defaultCompare(arr1.length, arr2.length);
};
goog.array.defaultCompare = function(a, b) {
  return a > b ? 1 : a < b ? -1 : 0;
};
goog.array.inverseDefaultCompare = function(a, b) {
  return -goog.array.defaultCompare(a, b);
};
goog.array.defaultCompareEquality = function(a, b) {
  return a === b;
};
goog.array.binaryInsert = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  if (index < 0) {
    goog.array.insertAt(array, value, -(index + 1));
    return true;
  }
  return false;
};
goog.array.binaryRemove = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  return index >= 0 ? goog.array.removeAt(array, index) : false;
};
goog.array.bucket = function(array, sorter, opt_obj) {
  var buckets = {};
  for (var i = 0;i < array.length;i++) {
    var value = array[i];
    var key = sorter.call(opt_obj, value, i, array);
    if (goog.isDef(key)) {
      var bucket = buckets[key] || (buckets[key] = []);
      bucket.push(value);
    }
  }
  return buckets;
};
goog.array.toObject = function(arr, keyFunc, opt_obj) {
  var ret = {};
  goog.array.forEach(arr, function(element, index) {
    ret[keyFunc.call(opt_obj, element, index, arr)] = element;
  });
  return ret;
};
goog.array.range = function(startOrEnd, opt_end, opt_step) {
  var array = [];
  var start = 0;
  var end = startOrEnd;
  var step = opt_step || 1;
  if (opt_end !== undefined) {
    start = startOrEnd;
    end = opt_end;
  }
  if (step * (end - start) < 0) {
    return [];
  }
  if (step > 0) {
    for (var i = start;i < end;i += step) {
      array.push(i);
    }
  } else {
    for (var i = start;i > end;i += step) {
      array.push(i);
    }
  }
  return array;
};
goog.array.repeat = function(value, n) {
  var array = [];
  for (var i = 0;i < n;i++) {
    array[i] = value;
  }
  return array;
};
goog.array.flatten = function(var_args) {
  var CHUNK_SIZE = 8192;
  var result = [];
  for (var i = 0;i < arguments.length;i++) {
    var element = arguments[i];
    if (goog.isArray(element)) {
      for (var c = 0;c < element.length;c += CHUNK_SIZE) {
        var chunk = goog.array.slice(element, c, c + CHUNK_SIZE);
        var recurseResult = goog.array.flatten.apply(null, chunk);
        for (var r = 0;r < recurseResult.length;r++) {
          result.push(recurseResult[r]);
        }
      }
    } else {
      result.push(element);
    }
  }
  return result;
};
goog.array.rotate = function(array, n) {
  goog.asserts.assert(array.length != null);
  if (array.length) {
    n %= array.length;
    if (n > 0) {
      goog.array.ARRAY_PROTOTYPE_.unshift.apply(array, array.splice(-n, n));
    } else {
      if (n < 0) {
        goog.array.ARRAY_PROTOTYPE_.push.apply(array, array.splice(0, -n));
      }
    }
  }
  return array;
};
goog.array.moveItem = function(arr, fromIndex, toIndex) {
  goog.asserts.assert(fromIndex >= 0 && fromIndex < arr.length);
  goog.asserts.assert(toIndex >= 0 && toIndex < arr.length);
  var removedItems = goog.array.ARRAY_PROTOTYPE_.splice.call(arr, fromIndex, 1);
  goog.array.ARRAY_PROTOTYPE_.splice.call(arr, toIndex, 0, removedItems[0]);
};
goog.array.zip = function(var_args) {
  if (!arguments.length) {
    return [];
  }
  var result = [];
  for (var i = 0;true;i++) {
    var value = [];
    for (var j = 0;j < arguments.length;j++) {
      var arr = arguments[j];
      if (i >= arr.length) {
        return result;
      }
      value.push(arr[i]);
    }
    result.push(value);
  }
};
goog.array.shuffle = function(arr, opt_randFn) {
  var randFn = opt_randFn || Math.random;
  for (var i = arr.length - 1;i > 0;i--) {
    var j = Math.floor(randFn() * (i + 1));
    var tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
  }
};
goog.array.copyByIndex = function(arr, index_arr) {
  var result = [];
  goog.array.forEach(index_arr, function(index) {
    result.push(arr[index]);
  });
  return result;
};
goog.provide("cljs.core");
goog.require("goog.string");
goog.require("goog.object");
goog.require("goog.array");
goog.require("goog.string.StringBuffer");
cljs.core._STAR_clojurescript_version_STAR_ = "0.0-3308";
cljs.core._STAR_unchecked_if_STAR_ = false;
cljs.core._STAR_target_STAR_ = "default";
if (typeof cljs.core._STAR_print_fn_STAR_ !== "undefined") {
} else {
  cljs.core._STAR_print_fn_STAR_ = function cljs$core$_STAR_print_fn_STAR_(_) {
    throw new Error("No *print-fn* fn set for evaluation environment");
  };
}
cljs.core.set_print_fn_BANG_ = function cljs$core$set_print_fn_BANG_(f) {
  return cljs.core._STAR_print_fn_STAR_ = f;
};
cljs.core._STAR_flush_on_newline_STAR_ = true;
cljs.core._STAR_print_newline_STAR_ = true;
cljs.core._STAR_print_readably_STAR_ = true;
cljs.core._STAR_print_meta_STAR_ = false;
cljs.core._STAR_print_dup_STAR_ = false;
cljs.core._STAR_print_length_STAR_ = null;
cljs.core._STAR_print_level_STAR_ = null;
if (typeof cljs.core._STAR_loaded_libs_STAR_ !== "undefined") {
} else {
  cljs.core._STAR_loaded_libs_STAR_ = null;
}
cljs.core.pr_opts = function cljs$core$pr_opts() {
  return new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", -151457939), cljs.core._STAR_flush_on_newline_STAR_, new cljs.core.Keyword(null, "readably", "readably", 1129599760), cljs.core._STAR_print_readably_STAR_, new cljs.core.Keyword(null, "meta", "meta", 1499536964), cljs.core._STAR_print_meta_STAR_, new cljs.core.Keyword(null, "dup", "dup", 556298533), cljs.core._STAR_print_dup_STAR_, new cljs.core.Keyword(null, "print-length", "print-length", 
  1931866356), cljs.core._STAR_print_length_STAR_], null);
};
cljs.core.enable_console_print_BANG_ = function cljs$core$enable_console_print_BANG_() {
  cljs.core._STAR_print_newline_STAR_ = false;
  return cljs.core._STAR_print_fn_STAR_ = function() {
    var G__13651__delegate = function(args) {
      return console.log.apply(console, function() {
        var G__13650 = args;
        return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1 ? cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(G__13650) : cljs.core.into_array.call(null, G__13650);
      }());
    };
    var G__13651 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        var G__13652__i = 0, G__13652__a = new Array(arguments.length - 0);
        while (G__13652__i < G__13652__a.length) {
          G__13652__a[G__13652__i] = arguments[G__13652__i + 0];
          ++G__13652__i;
        }
        args = new cljs.core.IndexedSeq(G__13652__a, 0);
      }
      return G__13651__delegate.call(this, args);
    };
    G__13651.cljs$lang$maxFixedArity = 0;
    G__13651.cljs$lang$applyTo = function(arglist__13653) {
      var args = cljs.core.seq(arglist__13653);
      return G__13651__delegate(args);
    };
    G__13651.cljs$core$IFn$_invoke$arity$variadic = G__13651__delegate;
    return G__13651;
  }();
};
cljs.core.truth_ = function cljs$core$truth_(x) {
  return x != null && x !== false;
};
cljs.core.not_native = null;
cljs.core.identical_QMARK_ = function cljs$core$identical_QMARK_(x, y) {
  return x === y;
};
cljs.core.nil_QMARK_ = function cljs$core$nil_QMARK_(x) {
  return x == null;
};
cljs.core.array_QMARK_ = function cljs$core$array_QMARK_(x) {
  if (cljs.core._STAR_target_STAR_ === "nodejs") {
    return Array.isArray(x);
  } else {
    return x instanceof Array;
  }
};
cljs.core.number_QMARK_ = function cljs$core$number_QMARK_(n) {
  return typeof n === "number";
};
cljs.core.not = function cljs$core$not(x) {
  if (cljs.core.truth_(x)) {
    return false;
  } else {
    return true;
  }
};
cljs.core.some_QMARK_ = function cljs$core$some_QMARK_(x) {
  return !(x == null);
};
cljs.core.object_QMARK_ = function cljs$core$object_QMARK_(x) {
  if (!(x == null)) {
    return x.constructor === Object;
  } else {
    return false;
  }
};
cljs.core.string_QMARK_ = function cljs$core$string_QMARK_(x) {
  var G__13655 = x;
  return goog.isString(G__13655);
};
cljs.core.native_satisfies_QMARK_ = function cljs$core$native_satisfies_QMARK_(p, x) {
  var x__$1 = x == null ? null : x;
  if (p[function() {
    var G__13657 = x__$1;
    return goog.typeOf(G__13657);
  }()]) {
    return true;
  } else {
    if (p["_"]) {
      return true;
    } else {
      return false;
    }
  }
};
cljs.core.is_proto_ = function cljs$core$is_proto_(x) {
  return x.constructor.prototype === x;
};
cljs.core._STAR_main_cli_fn_STAR_ = null;
cljs.core.type = function cljs$core$type(x) {
  if (x == null) {
    return null;
  } else {
    return x.constructor;
  }
};
cljs.core.missing_protocol = function cljs$core$missing_protocol(proto, obj) {
  var ty = cljs.core.type(obj);
  var ty__$1 = cljs.core.truth_(function() {
    var and__4297__auto__ = ty;
    if (cljs.core.truth_(and__4297__auto__)) {
      return ty.cljs$lang$type;
    } else {
      return and__4297__auto__;
    }
  }()) ? ty.cljs$lang$ctorStr : function() {
    var G__13659 = obj;
    return goog.typeOf(G__13659);
  }();
  return new Error(["No protocol method ", proto, " defined for type ", ty__$1, ": ", obj].join(""));
};
cljs.core.type__GT_str = function cljs$core$type__GT_str(ty) {
  var temp__4420__auto__ = ty.cljs$lang$ctorStr;
  if (cljs.core.truth_(temp__4420__auto__)) {
    var s = temp__4420__auto__;
    return s;
  } else {
    return [cljs.core.str(ty)].join("");
  }
};
cljs.core.load_file = function cljs$core$load_file(file) {
  if (cljs.core.truth_(COMPILED)) {
    return null;
  } else {
    return goog.nodeGlobalRequire(file);
  }
};
if (typeof Symbol !== "undefined" && function() {
  var G__13661 = Symbol;
  return goog.typeOf(G__13661);
}() === "function") {
  cljs.core.ITER_SYMBOL = Symbol.iterator;
} else {
  cljs.core.ITER_SYMBOL = "@@iterator";
}
cljs.core.make_array = function cljs$core$make_array() {
  var G__13663 = arguments.length;
  switch(G__13663) {
    case 1:
      return cljs.core.make_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.make_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.make_array.cljs$core$IFn$_invoke$arity$1 = function(size) {
  return new Array(size);
};
cljs.core.make_array.cljs$core$IFn$_invoke$arity$2 = function(type, size) {
  return new Array(size);
};
cljs.core.make_array.cljs$lang$maxFixedArity = 2;
cljs.core.aclone = function cljs$core$aclone(arr) {
  var len = arr.length;
  var new_arr = new Array(len);
  var n__5194__auto___13665 = len;
  var i_13666 = 0;
  while (true) {
    if (i_13666 < n__5194__auto___13665) {
      new_arr[i_13666] = arr[i_13666];
      var G__13667 = i_13666 + 1;
      i_13666 = G__13667;
      continue;
    } else {
    }
    break;
  }
  return new_arr;
};
cljs.core.array = function cljs$core$array(var_args) {
  var a = new Array(arguments.length);
  var i = 0;
  while (true) {
    if (i < a.length) {
      a[i] = arguments[i];
      var G__13668 = i + 1;
      i = G__13668;
      continue;
    } else {
      return a;
    }
    break;
  }
};
cljs.core.aget = function cljs$core$aget() {
  var G__13673 = arguments.length;
  switch(G__13673) {
    case 2:
      return cljs.core.aget.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.aget.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5360__auto__);
  }
};
cljs.core.aget.cljs$core$IFn$_invoke$arity$2 = function(array, i) {
  return array[i];
};
cljs.core.aget.cljs$core$IFn$_invoke$arity$variadic = function(array, i, idxs) {
  var G__13674 = cljs.core.aget;
  var G__13675 = array[i];
  var G__13676 = idxs;
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$3 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$3(G__13674, G__13675, G__13676) : cljs.core.apply.call(null, G__13674, G__13675, G__13676);
};
cljs.core.aget.cljs$lang$applyTo = function(seq13669) {
  var G__13670 = cljs.core.first(seq13669);
  var seq13669__$1 = cljs.core.next(seq13669);
  var G__13671 = cljs.core.first(seq13669__$1);
  var seq13669__$2 = cljs.core.next(seq13669__$1);
  return cljs.core.aget.cljs$core$IFn$_invoke$arity$variadic(G__13670, G__13671, seq13669__$2);
};
cljs.core.aget.cljs$lang$maxFixedArity = 2;
cljs.core.aset = function cljs$core$aset() {
  var G__13683 = arguments.length;
  switch(G__13683) {
    case 3:
      return cljs.core.aset.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 3), 0);
      return cljs.core.aset.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5360__auto__);
  }
};
cljs.core.aset.cljs$core$IFn$_invoke$arity$3 = function(array, i, val) {
  return array[i] = val;
};
cljs.core.aset.cljs$core$IFn$_invoke$arity$variadic = function(array, idx, idx2, idxv) {
  var G__13684 = cljs.core.aset;
  var G__13685 = array[idx];
  var G__13686 = idx2;
  var G__13687 = idxv;
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$4 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$4(G__13684, G__13685, G__13686, G__13687) : cljs.core.apply.call(null, G__13684, G__13685, G__13686, G__13687);
};
cljs.core.aset.cljs$lang$applyTo = function(seq13678) {
  var G__13679 = cljs.core.first(seq13678);
  var seq13678__$1 = cljs.core.next(seq13678);
  var G__13680 = cljs.core.first(seq13678__$1);
  var seq13678__$2 = cljs.core.next(seq13678__$1);
  var G__13681 = cljs.core.first(seq13678__$2);
  var seq13678__$3 = cljs.core.next(seq13678__$2);
  return cljs.core.aset.cljs$core$IFn$_invoke$arity$variadic(G__13679, G__13680, G__13681, seq13678__$3);
};
cljs.core.aset.cljs$lang$maxFixedArity = 3;
cljs.core.alength = function cljs$core$alength(array) {
  return array.length;
};
cljs.core.into_array = function cljs$core$into_array() {
  var G__13690 = arguments.length;
  switch(G__13690) {
    case 1:
      return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.into_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.into_array.cljs$core$IFn$_invoke$arity$1 = function(aseq) {
  return cljs.core.into_array.cljs$core$IFn$_invoke$arity$2(null, aseq);
};
cljs.core.into_array.cljs$core$IFn$_invoke$arity$2 = function(type, aseq) {
  var G__13691 = function(a, x) {
    a.push(x);
    return a;
  };
  var G__13692 = [];
  var G__13693 = aseq;
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(G__13691, G__13692, G__13693) : cljs.core.reduce.call(null, G__13691, G__13692, G__13693);
};
cljs.core.into_array.cljs$lang$maxFixedArity = 2;
cljs.core.js_invoke = function cljs$core$js_invoke() {
  var argseq__5349__auto__ = 2 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0) : null;
  return cljs.core.js_invoke.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5349__auto__);
};
cljs.core.js_invoke.cljs$core$IFn$_invoke$arity$variadic = function(obj, s, args) {
  return obj[s].apply(obj, cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(args));
};
cljs.core.js_invoke.cljs$lang$maxFixedArity = 2;
cljs.core.js_invoke.cljs$lang$applyTo = function(seq13695) {
  var G__13696 = cljs.core.first(seq13695);
  var seq13695__$1 = cljs.core.next(seq13695);
  var G__13697 = cljs.core.first(seq13695__$1);
  var seq13695__$2 = cljs.core.next(seq13695__$1);
  return cljs.core.js_invoke.cljs$core$IFn$_invoke$arity$variadic(G__13696, G__13697, seq13695__$2);
};
cljs.core.Fn = function() {
  var obj13699 = {};
  return obj13699;
}();
cljs.core.IFn = function() {
  var obj13701 = {};
  return obj13701;
}();
cljs.core._invoke = function cljs$core$_invoke() {
  var G__13703 = arguments.length;
  switch(G__13703) {
    case 1:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    case 7:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$7(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6]);
      break;
    case 8:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$8(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7]);
      break;
    case 9:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$9(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8]);
      break;
    case 10:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$10(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9]);
      break;
    case 11:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$11(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10]);
      break;
    case 12:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$12(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11]);
      break;
    case 13:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$13(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12]);
      break;
    case 14:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$14(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13]);
      break;
    case 15:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$15(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14]);
      break;
    case 16:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$16(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15]);
      break;
    case 17:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$17(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16]);
      break;
    case 18:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$18(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16], arguments[17]);
      break;
    case 19:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$19(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16], arguments[17], arguments[18]);
      break;
    case 20:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$20(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16], arguments[17], arguments[18], arguments[19]);
      break;
    case 21:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$21(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16], arguments[17], arguments[18], arguments[19], arguments[20]);
      break;
    case 22:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$22(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16], arguments[17], arguments[18], arguments[19], arguments[20], arguments[21]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$1 = function(this$) {
  if (function() {
    var and__4297__auto__ = this$;
    if (and__4297__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$1(this$);
  } else {
    var x__4945__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4309__auto__ = cljs.core._invoke[function() {
        var G__13705 = x__4945__auto__;
        return goog.typeOf(G__13705);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._invoke["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$2 = function(this$, a) {
  if (function() {
    var and__4297__auto__ = this$;
    if (and__4297__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$2;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$2(this$, a);
  } else {
    var x__4945__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4309__auto__ = cljs.core._invoke[function() {
        var G__13707 = x__4945__auto__;
        return goog.typeOf(G__13707);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._invoke["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$3 = function(this$, a, b) {
  if (function() {
    var and__4297__auto__ = this$;
    if (and__4297__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$3;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$3(this$, a, b);
  } else {
    var x__4945__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4309__auto__ = cljs.core._invoke[function() {
        var G__13709 = x__4945__auto__;
        return goog.typeOf(G__13709);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._invoke["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$4 = function(this$, a, b, c) {
  if (function() {
    var and__4297__auto__ = this$;
    if (and__4297__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$4;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$4(this$, a, b, c);
  } else {
    var x__4945__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4309__auto__ = cljs.core._invoke[function() {
        var G__13711 = x__4945__auto__;
        return goog.typeOf(G__13711);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._invoke["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$5 = function(this$, a, b, c, d) {
  if (function() {
    var and__4297__auto__ = this$;
    if (and__4297__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$5;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d);
  } else {
    var x__4945__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4309__auto__ = cljs.core._invoke[function() {
        var G__13713 = x__4945__auto__;
        return goog.typeOf(G__13713);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._invoke["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$6 = function(this$, a, b, c, d, e) {
  if (function() {
    var and__4297__auto__ = this$;
    if (and__4297__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$6;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e);
  } else {
    var x__4945__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4309__auto__ = cljs.core._invoke[function() {
        var G__13715 = x__4945__auto__;
        return goog.typeOf(G__13715);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._invoke["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$7 = function(this$, a, b, c, d, e, f) {
  if (function() {
    var and__4297__auto__ = this$;
    if (and__4297__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$7;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f);
  } else {
    var x__4945__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4309__auto__ = cljs.core._invoke[function() {
        var G__13717 = x__4945__auto__;
        return goog.typeOf(G__13717);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._invoke["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$8 = function(this$, a, b, c, d, e, f, g) {
  if (function() {
    var and__4297__auto__ = this$;
    if (and__4297__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$8;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g);
  } else {
    var x__4945__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4309__auto__ = cljs.core._invoke[function() {
        var G__13719 = x__4945__auto__;
        return goog.typeOf(G__13719);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._invoke["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$9 = function(this$, a, b, c, d, e, f, g, h) {
  if (function() {
    var and__4297__auto__ = this$;
    if (and__4297__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$9;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h);
  } else {
    var x__4945__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4309__auto__ = cljs.core._invoke[function() {
        var G__13721 = x__4945__auto__;
        return goog.typeOf(G__13721);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._invoke["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$10 = function(this$, a, b, c, d, e, f, g, h, i) {
  if (function() {
    var and__4297__auto__ = this$;
    if (and__4297__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$10;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i);
  } else {
    var x__4945__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4309__auto__ = cljs.core._invoke[function() {
        var G__13723 = x__4945__auto__;
        return goog.typeOf(G__13723);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._invoke["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h, i);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$11 = function(this$, a, b, c, d, e, f, g, h, i, j) {
  if (function() {
    var and__4297__auto__ = this$;
    if (and__4297__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$11;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j);
  } else {
    var x__4945__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4309__auto__ = cljs.core._invoke[function() {
        var G__13725 = x__4945__auto__;
        return goog.typeOf(G__13725);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._invoke["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h, i, j);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$12 = function(this$, a, b, c, d, e, f, g, h, i, j, k) {
  if (function() {
    var and__4297__auto__ = this$;
    if (and__4297__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$12;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k);
  } else {
    var x__4945__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4309__auto__ = cljs.core._invoke[function() {
        var G__13727 = x__4945__auto__;
        return goog.typeOf(G__13727);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._invoke["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$13 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l) {
  if (function() {
    var and__4297__auto__ = this$;
    if (and__4297__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$13;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l);
  } else {
    var x__4945__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4309__auto__ = cljs.core._invoke[function() {
        var G__13729 = x__4945__auto__;
        return goog.typeOf(G__13729);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._invoke["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$14 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) {
  if (function() {
    var and__4297__auto__ = this$;
    if (and__4297__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$14;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
  } else {
    var x__4945__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4309__auto__ = cljs.core._invoke[function() {
        var G__13731 = x__4945__auto__;
        return goog.typeOf(G__13731);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._invoke["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$15 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  if (function() {
    var and__4297__auto__ = this$;
    if (and__4297__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$15;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  } else {
    var x__4945__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4309__auto__ = cljs.core._invoke[function() {
        var G__13733 = x__4945__auto__;
        return goog.typeOf(G__13733);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._invoke["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$16 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  if (function() {
    var and__4297__auto__ = this$;
    if (and__4297__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$16;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  } else {
    var x__4945__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4309__auto__ = cljs.core._invoke[function() {
        var G__13735 = x__4945__auto__;
        return goog.typeOf(G__13735);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._invoke["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$17 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  if (function() {
    var and__4297__auto__ = this$;
    if (and__4297__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$17;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  } else {
    var x__4945__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4309__auto__ = cljs.core._invoke[function() {
        var G__13737 = x__4945__auto__;
        return goog.typeOf(G__13737);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._invoke["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$18 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  if (function() {
    var and__4297__auto__ = this$;
    if (and__4297__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$18;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  } else {
    var x__4945__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4309__auto__ = cljs.core._invoke[function() {
        var G__13739 = x__4945__auto__;
        return goog.typeOf(G__13739);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._invoke["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$19 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  if (function() {
    var and__4297__auto__ = this$;
    if (and__4297__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$19;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  } else {
    var x__4945__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4309__auto__ = cljs.core._invoke[function() {
        var G__13741 = x__4945__auto__;
        return goog.typeOf(G__13741);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._invoke["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$20 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  if (function() {
    var and__4297__auto__ = this$;
    if (and__4297__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$20;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  } else {
    var x__4945__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4309__auto__ = cljs.core._invoke[function() {
        var G__13743 = x__4945__auto__;
        return goog.typeOf(G__13743);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._invoke["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$21 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  if (function() {
    var and__4297__auto__ = this$;
    if (and__4297__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$21;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  } else {
    var x__4945__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4309__auto__ = cljs.core._invoke[function() {
        var G__13745 = x__4945__auto__;
        return goog.typeOf(G__13745);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._invoke["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$22 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  if (function() {
    var and__4297__auto__ = this$;
    if (and__4297__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$22;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$22(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
  } else {
    var x__4945__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4309__auto__ = cljs.core._invoke[function() {
        var G__13747 = x__4945__auto__;
        return goog.typeOf(G__13747);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._invoke["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
  }
};
cljs.core._invoke.cljs$lang$maxFixedArity = 22;
cljs.core.ICloneable = function() {
  var obj13750 = {};
  return obj13750;
}();
cljs.core._clone = function cljs$core$_clone(value) {
  if (function() {
    var and__4297__auto__ = value;
    if (and__4297__auto__) {
      return value.cljs$core$ICloneable$_clone$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return value.cljs$core$ICloneable$_clone$arity$1(value);
  } else {
    var x__4945__auto__ = value == null ? null : value;
    return function() {
      var or__4309__auto__ = cljs.core._clone[function() {
        var G__13754 = x__4945__auto__;
        return goog.typeOf(G__13754);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._clone["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ICloneable.-clone", value);
        }
      }
    }().call(null, value);
  }
};
cljs.core.ICounted = function() {
  var obj13756 = {};
  return obj13756;
}();
cljs.core._count = function cljs$core$_count(coll) {
  if (function() {
    var and__4297__auto__ = coll;
    if (and__4297__auto__) {
      return coll.cljs$core$ICounted$_count$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return coll.cljs$core$ICounted$_count$arity$1(coll);
  } else {
    var x__4945__auto__ = coll == null ? null : coll;
    return function() {
      var or__4309__auto__ = cljs.core._count[function() {
        var G__13760 = x__4945__auto__;
        return goog.typeOf(G__13760);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._count["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ICounted.-count", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IEmptyableCollection = function() {
  var obj13762 = {};
  return obj13762;
}();
cljs.core._empty = function cljs$core$_empty(coll) {
  if (function() {
    var and__4297__auto__ = coll;
    if (and__4297__auto__) {
      return coll.cljs$core$IEmptyableCollection$_empty$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return coll.cljs$core$IEmptyableCollection$_empty$arity$1(coll);
  } else {
    var x__4945__auto__ = coll == null ? null : coll;
    return function() {
      var or__4309__auto__ = cljs.core._empty[function() {
        var G__13766 = x__4945__auto__;
        return goog.typeOf(G__13766);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._empty["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEmptyableCollection.-empty", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ICollection = function() {
  var obj13768 = {};
  return obj13768;
}();
cljs.core._conj = function cljs$core$_conj(coll, o) {
  if (function() {
    var and__4297__auto__ = coll;
    if (and__4297__auto__) {
      return coll.cljs$core$ICollection$_conj$arity$2;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return coll.cljs$core$ICollection$_conj$arity$2(coll, o);
  } else {
    var x__4945__auto__ = coll == null ? null : coll;
    return function() {
      var or__4309__auto__ = cljs.core._conj[function() {
        var G__13772 = x__4945__auto__;
        return goog.typeOf(G__13772);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._conj["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ICollection.-conj", coll);
        }
      }
    }().call(null, coll, o);
  }
};
cljs.core.IIndexed = function() {
  var obj13774 = {};
  return obj13774;
}();
cljs.core._nth = function cljs$core$_nth() {
  var G__13776 = arguments.length;
  switch(G__13776) {
    case 2:
      return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core._nth.cljs$core$IFn$_invoke$arity$2 = function(coll, n) {
  if (function() {
    var and__4297__auto__ = coll;
    if (and__4297__auto__) {
      return coll.cljs$core$IIndexed$_nth$arity$2;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return coll.cljs$core$IIndexed$_nth$arity$2(coll, n);
  } else {
    var x__4945__auto__ = coll == null ? null : coll;
    return function() {
      var or__4309__auto__ = cljs.core._nth[function() {
        var G__13778 = x__4945__auto__;
        return goog.typeOf(G__13778);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._nth["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IIndexed.-nth", coll);
        }
      }
    }().call(null, coll, n);
  }
};
cljs.core._nth.cljs$core$IFn$_invoke$arity$3 = function(coll, n, not_found) {
  if (function() {
    var and__4297__auto__ = coll;
    if (and__4297__auto__) {
      return coll.cljs$core$IIndexed$_nth$arity$3;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return coll.cljs$core$IIndexed$_nth$arity$3(coll, n, not_found);
  } else {
    var x__4945__auto__ = coll == null ? null : coll;
    return function() {
      var or__4309__auto__ = cljs.core._nth[function() {
        var G__13780 = x__4945__auto__;
        return goog.typeOf(G__13780);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._nth["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IIndexed.-nth", coll);
        }
      }
    }().call(null, coll, n, not_found);
  }
};
cljs.core._nth.cljs$lang$maxFixedArity = 3;
cljs.core.ASeq = function() {
  var obj13783 = {};
  return obj13783;
}();
cljs.core.ISeq = function() {
  var obj13785 = {};
  return obj13785;
}();
cljs.core._first = function cljs$core$_first(coll) {
  if (function() {
    var and__4297__auto__ = coll;
    if (and__4297__auto__) {
      return coll.cljs$core$ISeq$_first$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_first$arity$1(coll);
  } else {
    var x__4945__auto__ = coll == null ? null : coll;
    return function() {
      var or__4309__auto__ = cljs.core._first[function() {
        var G__13789 = x__4945__auto__;
        return goog.typeOf(G__13789);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._first["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISeq.-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._rest = function cljs$core$_rest(coll) {
  if (function() {
    var and__4297__auto__ = coll;
    if (and__4297__auto__) {
      return coll.cljs$core$ISeq$_rest$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_rest$arity$1(coll);
  } else {
    var x__4945__auto__ = coll == null ? null : coll;
    return function() {
      var or__4309__auto__ = cljs.core._rest[function() {
        var G__13793 = x__4945__auto__;
        return goog.typeOf(G__13793);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._rest["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISeq.-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INext = function() {
  var obj13795 = {};
  return obj13795;
}();
cljs.core._next = function cljs$core$_next(coll) {
  if (function() {
    var and__4297__auto__ = coll;
    if (and__4297__auto__) {
      return coll.cljs$core$INext$_next$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return coll.cljs$core$INext$_next$arity$1(coll);
  } else {
    var x__4945__auto__ = coll == null ? null : coll;
    return function() {
      var or__4309__auto__ = cljs.core._next[function() {
        var G__13799 = x__4945__auto__;
        return goog.typeOf(G__13799);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._next["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("INext.-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ILookup = function() {
  var obj13801 = {};
  return obj13801;
}();
cljs.core._lookup = function cljs$core$_lookup() {
  var G__13803 = arguments.length;
  switch(G__13803) {
    case 2:
      return cljs.core._lookup.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core._lookup.cljs$core$IFn$_invoke$arity$2 = function(o, k) {
  if (function() {
    var and__4297__auto__ = o;
    if (and__4297__auto__) {
      return o.cljs$core$ILookup$_lookup$arity$2;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return o.cljs$core$ILookup$_lookup$arity$2(o, k);
  } else {
    var x__4945__auto__ = o == null ? null : o;
    return function() {
      var or__4309__auto__ = cljs.core._lookup[function() {
        var G__13805 = x__4945__auto__;
        return goog.typeOf(G__13805);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._lookup["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ILookup.-lookup", o);
        }
      }
    }().call(null, o, k);
  }
};
cljs.core._lookup.cljs$core$IFn$_invoke$arity$3 = function(o, k, not_found) {
  if (function() {
    var and__4297__auto__ = o;
    if (and__4297__auto__) {
      return o.cljs$core$ILookup$_lookup$arity$3;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return o.cljs$core$ILookup$_lookup$arity$3(o, k, not_found);
  } else {
    var x__4945__auto__ = o == null ? null : o;
    return function() {
      var or__4309__auto__ = cljs.core._lookup[function() {
        var G__13807 = x__4945__auto__;
        return goog.typeOf(G__13807);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._lookup["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ILookup.-lookup", o);
        }
      }
    }().call(null, o, k, not_found);
  }
};
cljs.core._lookup.cljs$lang$maxFixedArity = 3;
cljs.core.IAssociative = function() {
  var obj13810 = {};
  return obj13810;
}();
cljs.core._contains_key_QMARK_ = function cljs$core$_contains_key_QMARK_(coll, k) {
  if (function() {
    var and__4297__auto__ = coll;
    if (and__4297__auto__) {
      return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2(coll, k);
  } else {
    var x__4945__auto__ = coll == null ? null : coll;
    return function() {
      var or__4309__auto__ = cljs.core._contains_key_QMARK_[function() {
        var G__13814 = x__4945__auto__;
        return goog.typeOf(G__13814);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._contains_key_QMARK_["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IAssociative.-contains-key?", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core._assoc = function cljs$core$_assoc(coll, k, v) {
  if (function() {
    var and__4297__auto__ = coll;
    if (and__4297__auto__) {
      return coll.cljs$core$IAssociative$_assoc$arity$3;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_assoc$arity$3(coll, k, v);
  } else {
    var x__4945__auto__ = coll == null ? null : coll;
    return function() {
      var or__4309__auto__ = cljs.core._assoc[function() {
        var G__13818 = x__4945__auto__;
        return goog.typeOf(G__13818);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._assoc["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IAssociative.-assoc", coll);
        }
      }
    }().call(null, coll, k, v);
  }
};
cljs.core.IMap = function() {
  var obj13820 = {};
  return obj13820;
}();
cljs.core._dissoc = function cljs$core$_dissoc(coll, k) {
  if (function() {
    var and__4297__auto__ = coll;
    if (and__4297__auto__) {
      return coll.cljs$core$IMap$_dissoc$arity$2;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return coll.cljs$core$IMap$_dissoc$arity$2(coll, k);
  } else {
    var x__4945__auto__ = coll == null ? null : coll;
    return function() {
      var or__4309__auto__ = cljs.core._dissoc[function() {
        var G__13824 = x__4945__auto__;
        return goog.typeOf(G__13824);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._dissoc["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMap.-dissoc", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core.IMapEntry = function() {
  var obj13826 = {};
  return obj13826;
}();
cljs.core._key = function cljs$core$_key(coll) {
  if (function() {
    var and__4297__auto__ = coll;
    if (and__4297__auto__) {
      return coll.cljs$core$IMapEntry$_key$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_key$arity$1(coll);
  } else {
    var x__4945__auto__ = coll == null ? null : coll;
    return function() {
      var or__4309__auto__ = cljs.core._key[function() {
        var G__13830 = x__4945__auto__;
        return goog.typeOf(G__13830);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._key["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMapEntry.-key", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._val = function cljs$core$_val(coll) {
  if (function() {
    var and__4297__auto__ = coll;
    if (and__4297__auto__) {
      return coll.cljs$core$IMapEntry$_val$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_val$arity$1(coll);
  } else {
    var x__4945__auto__ = coll == null ? null : coll;
    return function() {
      var or__4309__auto__ = cljs.core._val[function() {
        var G__13834 = x__4945__auto__;
        return goog.typeOf(G__13834);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._val["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMapEntry.-val", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISet = function() {
  var obj13836 = {};
  return obj13836;
}();
cljs.core._disjoin = function cljs$core$_disjoin(coll, v) {
  if (function() {
    var and__4297__auto__ = coll;
    if (and__4297__auto__) {
      return coll.cljs$core$ISet$_disjoin$arity$2;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return coll.cljs$core$ISet$_disjoin$arity$2(coll, v);
  } else {
    var x__4945__auto__ = coll == null ? null : coll;
    return function() {
      var or__4309__auto__ = cljs.core._disjoin[function() {
        var G__13840 = x__4945__auto__;
        return goog.typeOf(G__13840);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._disjoin["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISet.-disjoin", coll);
        }
      }
    }().call(null, coll, v);
  }
};
cljs.core.IStack = function() {
  var obj13842 = {};
  return obj13842;
}();
cljs.core._peek = function cljs$core$_peek(coll) {
  if (function() {
    var and__4297__auto__ = coll;
    if (and__4297__auto__) {
      return coll.cljs$core$IStack$_peek$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_peek$arity$1(coll);
  } else {
    var x__4945__auto__ = coll == null ? null : coll;
    return function() {
      var or__4309__auto__ = cljs.core._peek[function() {
        var G__13846 = x__4945__auto__;
        return goog.typeOf(G__13846);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._peek["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IStack.-peek", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._pop = function cljs$core$_pop(coll) {
  if (function() {
    var and__4297__auto__ = coll;
    if (and__4297__auto__) {
      return coll.cljs$core$IStack$_pop$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_pop$arity$1(coll);
  } else {
    var x__4945__auto__ = coll == null ? null : coll;
    return function() {
      var or__4309__auto__ = cljs.core._pop[function() {
        var G__13850 = x__4945__auto__;
        return goog.typeOf(G__13850);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._pop["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IStack.-pop", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IVector = function() {
  var obj13852 = {};
  return obj13852;
}();
cljs.core._assoc_n = function cljs$core$_assoc_n(coll, n, val) {
  if (function() {
    var and__4297__auto__ = coll;
    if (and__4297__auto__) {
      return coll.cljs$core$IVector$_assoc_n$arity$3;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return coll.cljs$core$IVector$_assoc_n$arity$3(coll, n, val);
  } else {
    var x__4945__auto__ = coll == null ? null : coll;
    return function() {
      var or__4309__auto__ = cljs.core._assoc_n[function() {
        var G__13856 = x__4945__auto__;
        return goog.typeOf(G__13856);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._assoc_n["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IVector.-assoc-n", coll);
        }
      }
    }().call(null, coll, n, val);
  }
};
cljs.core.IDeref = function() {
  var obj13858 = {};
  return obj13858;
}();
cljs.core._deref = function cljs$core$_deref(o) {
  if (function() {
    var and__4297__auto__ = o;
    if (and__4297__auto__) {
      return o.cljs$core$IDeref$_deref$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return o.cljs$core$IDeref$_deref$arity$1(o);
  } else {
    var x__4945__auto__ = o == null ? null : o;
    return function() {
      var or__4309__auto__ = cljs.core._deref[function() {
        var G__13862 = x__4945__auto__;
        return goog.typeOf(G__13862);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._deref["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IDeref.-deref", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IDerefWithTimeout = function() {
  var obj13864 = {};
  return obj13864;
}();
cljs.core._deref_with_timeout = function cljs$core$_deref_with_timeout(o, msec, timeout_val) {
  if (function() {
    var and__4297__auto__ = o;
    if (and__4297__auto__) {
      return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3(o, msec, timeout_val);
  } else {
    var x__4945__auto__ = o == null ? null : o;
    return function() {
      var or__4309__auto__ = cljs.core._deref_with_timeout[function() {
        var G__13868 = x__4945__auto__;
        return goog.typeOf(G__13868);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._deref_with_timeout["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IDerefWithTimeout.-deref-with-timeout", o);
        }
      }
    }().call(null, o, msec, timeout_val);
  }
};
cljs.core.IMeta = function() {
  var obj13870 = {};
  return obj13870;
}();
cljs.core._meta = function cljs$core$_meta(o) {
  if (function() {
    var and__4297__auto__ = o;
    if (and__4297__auto__) {
      return o.cljs$core$IMeta$_meta$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return o.cljs$core$IMeta$_meta$arity$1(o);
  } else {
    var x__4945__auto__ = o == null ? null : o;
    return function() {
      var or__4309__auto__ = cljs.core._meta[function() {
        var G__13874 = x__4945__auto__;
        return goog.typeOf(G__13874);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._meta["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMeta.-meta", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IWithMeta = function() {
  var obj13876 = {};
  return obj13876;
}();
cljs.core._with_meta = function cljs$core$_with_meta(o, meta) {
  if (function() {
    var and__4297__auto__ = o;
    if (and__4297__auto__) {
      return o.cljs$core$IWithMeta$_with_meta$arity$2;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return o.cljs$core$IWithMeta$_with_meta$arity$2(o, meta);
  } else {
    var x__4945__auto__ = o == null ? null : o;
    return function() {
      var or__4309__auto__ = cljs.core._with_meta[function() {
        var G__13880 = x__4945__auto__;
        return goog.typeOf(G__13880);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._with_meta["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWithMeta.-with-meta", o);
        }
      }
    }().call(null, o, meta);
  }
};
cljs.core.IReduce = function() {
  var obj13882 = {};
  return obj13882;
}();
cljs.core._reduce = function cljs$core$_reduce() {
  var G__13884 = arguments.length;
  switch(G__13884) {
    case 2:
      return cljs.core._reduce.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._reduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core._reduce.cljs$core$IFn$_invoke$arity$2 = function(coll, f) {
  if (function() {
    var and__4297__auto__ = coll;
    if (and__4297__auto__) {
      return coll.cljs$core$IReduce$_reduce$arity$2;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return coll.cljs$core$IReduce$_reduce$arity$2(coll, f);
  } else {
    var x__4945__auto__ = coll == null ? null : coll;
    return function() {
      var or__4309__auto__ = cljs.core._reduce[function() {
        var G__13886 = x__4945__auto__;
        return goog.typeOf(G__13886);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._reduce["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IReduce.-reduce", coll);
        }
      }
    }().call(null, coll, f);
  }
};
cljs.core._reduce.cljs$core$IFn$_invoke$arity$3 = function(coll, f, start) {
  if (function() {
    var and__4297__auto__ = coll;
    if (and__4297__auto__) {
      return coll.cljs$core$IReduce$_reduce$arity$3;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return coll.cljs$core$IReduce$_reduce$arity$3(coll, f, start);
  } else {
    var x__4945__auto__ = coll == null ? null : coll;
    return function() {
      var or__4309__auto__ = cljs.core._reduce[function() {
        var G__13888 = x__4945__auto__;
        return goog.typeOf(G__13888);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._reduce["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IReduce.-reduce", coll);
        }
      }
    }().call(null, coll, f, start);
  }
};
cljs.core._reduce.cljs$lang$maxFixedArity = 3;
cljs.core.IKVReduce = function() {
  var obj13891 = {};
  return obj13891;
}();
cljs.core._kv_reduce = function cljs$core$_kv_reduce(coll, f, init) {
  if (function() {
    var and__4297__auto__ = coll;
    if (and__4297__auto__) {
      return coll.cljs$core$IKVReduce$_kv_reduce$arity$3;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return coll.cljs$core$IKVReduce$_kv_reduce$arity$3(coll, f, init);
  } else {
    var x__4945__auto__ = coll == null ? null : coll;
    return function() {
      var or__4309__auto__ = cljs.core._kv_reduce[function() {
        var G__13895 = x__4945__auto__;
        return goog.typeOf(G__13895);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._kv_reduce["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IKVReduce.-kv-reduce", coll);
        }
      }
    }().call(null, coll, f, init);
  }
};
cljs.core.IEquiv = function() {
  var obj13897 = {};
  return obj13897;
}();
cljs.core._equiv = function cljs$core$_equiv(o, other) {
  if (function() {
    var and__4297__auto__ = o;
    if (and__4297__auto__) {
      return o.cljs$core$IEquiv$_equiv$arity$2;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return o.cljs$core$IEquiv$_equiv$arity$2(o, other);
  } else {
    var x__4945__auto__ = o == null ? null : o;
    return function() {
      var or__4309__auto__ = cljs.core._equiv[function() {
        var G__13901 = x__4945__auto__;
        return goog.typeOf(G__13901);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._equiv["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEquiv.-equiv", o);
        }
      }
    }().call(null, o, other);
  }
};
cljs.core.IHash = function() {
  var obj13903 = {};
  return obj13903;
}();
cljs.core._hash = function cljs$core$_hash(o) {
  if (function() {
    var and__4297__auto__ = o;
    if (and__4297__auto__) {
      return o.cljs$core$IHash$_hash$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return o.cljs$core$IHash$_hash$arity$1(o);
  } else {
    var x__4945__auto__ = o == null ? null : o;
    return function() {
      var or__4309__auto__ = cljs.core._hash[function() {
        var G__13907 = x__4945__auto__;
        return goog.typeOf(G__13907);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._hash["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IHash.-hash", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISeqable = function() {
  var obj13909 = {};
  return obj13909;
}();
cljs.core._seq = function cljs$core$_seq(o) {
  if (function() {
    var and__4297__auto__ = o;
    if (and__4297__auto__) {
      return o.cljs$core$ISeqable$_seq$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return o.cljs$core$ISeqable$_seq$arity$1(o);
  } else {
    var x__4945__auto__ = o == null ? null : o;
    return function() {
      var or__4309__auto__ = cljs.core._seq[function() {
        var G__13913 = x__4945__auto__;
        return goog.typeOf(G__13913);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._seq["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISeqable.-seq", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISequential = function() {
  var obj13915 = {};
  return obj13915;
}();
cljs.core.IList = function() {
  var obj13917 = {};
  return obj13917;
}();
cljs.core.IRecord = function() {
  var obj13919 = {};
  return obj13919;
}();
cljs.core.IReversible = function() {
  var obj13921 = {};
  return obj13921;
}();
cljs.core._rseq = function cljs$core$_rseq(coll) {
  if (function() {
    var and__4297__auto__ = coll;
    if (and__4297__auto__) {
      return coll.cljs$core$IReversible$_rseq$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return coll.cljs$core$IReversible$_rseq$arity$1(coll);
  } else {
    var x__4945__auto__ = coll == null ? null : coll;
    return function() {
      var or__4309__auto__ = cljs.core._rseq[function() {
        var G__13925 = x__4945__auto__;
        return goog.typeOf(G__13925);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._rseq["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IReversible.-rseq", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISorted = function() {
  var obj13927 = {};
  return obj13927;
}();
cljs.core._sorted_seq = function cljs$core$_sorted_seq(coll, ascending_QMARK_) {
  if (function() {
    var and__4297__auto__ = coll;
    if (and__4297__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq$arity$2;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq$arity$2(coll, ascending_QMARK_);
  } else {
    var x__4945__auto__ = coll == null ? null : coll;
    return function() {
      var or__4309__auto__ = cljs.core._sorted_seq[function() {
        var G__13931 = x__4945__auto__;
        return goog.typeOf(G__13931);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._sorted_seq["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISorted.-sorted-seq", coll);
        }
      }
    }().call(null, coll, ascending_QMARK_);
  }
};
cljs.core._sorted_seq_from = function cljs$core$_sorted_seq_from(coll, k, ascending_QMARK_) {
  if (function() {
    var and__4297__auto__ = coll;
    if (and__4297__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq_from$arity$3;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq_from$arity$3(coll, k, ascending_QMARK_);
  } else {
    var x__4945__auto__ = coll == null ? null : coll;
    return function() {
      var or__4309__auto__ = cljs.core._sorted_seq_from[function() {
        var G__13935 = x__4945__auto__;
        return goog.typeOf(G__13935);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._sorted_seq_from["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISorted.-sorted-seq-from", coll);
        }
      }
    }().call(null, coll, k, ascending_QMARK_);
  }
};
cljs.core._entry_key = function cljs$core$_entry_key(coll, entry) {
  if (function() {
    var and__4297__auto__ = coll;
    if (and__4297__auto__) {
      return coll.cljs$core$ISorted$_entry_key$arity$2;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_entry_key$arity$2(coll, entry);
  } else {
    var x__4945__auto__ = coll == null ? null : coll;
    return function() {
      var or__4309__auto__ = cljs.core._entry_key[function() {
        var G__13939 = x__4945__auto__;
        return goog.typeOf(G__13939);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._entry_key["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISorted.-entry-key", coll);
        }
      }
    }().call(null, coll, entry);
  }
};
cljs.core._comparator = function cljs$core$_comparator(coll) {
  if (function() {
    var and__4297__auto__ = coll;
    if (and__4297__auto__) {
      return coll.cljs$core$ISorted$_comparator$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_comparator$arity$1(coll);
  } else {
    var x__4945__auto__ = coll == null ? null : coll;
    return function() {
      var or__4309__auto__ = cljs.core._comparator[function() {
        var G__13943 = x__4945__auto__;
        return goog.typeOf(G__13943);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._comparator["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISorted.-comparator", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IWriter = function() {
  var obj13945 = {};
  return obj13945;
}();
cljs.core._write = function cljs$core$_write(writer, s) {
  if (function() {
    var and__4297__auto__ = writer;
    if (and__4297__auto__) {
      return writer.cljs$core$IWriter$_write$arity$2;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_write$arity$2(writer, s);
  } else {
    var x__4945__auto__ = writer == null ? null : writer;
    return function() {
      var or__4309__auto__ = cljs.core._write[function() {
        var G__13949 = x__4945__auto__;
        return goog.typeOf(G__13949);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._write["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWriter.-write", writer);
        }
      }
    }().call(null, writer, s);
  }
};
cljs.core._flush = function cljs$core$_flush(writer) {
  if (function() {
    var and__4297__auto__ = writer;
    if (and__4297__auto__) {
      return writer.cljs$core$IWriter$_flush$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_flush$arity$1(writer);
  } else {
    var x__4945__auto__ = writer == null ? null : writer;
    return function() {
      var or__4309__auto__ = cljs.core._flush[function() {
        var G__13953 = x__4945__auto__;
        return goog.typeOf(G__13953);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._flush["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWriter.-flush", writer);
        }
      }
    }().call(null, writer);
  }
};
cljs.core.IPrintWithWriter = function() {
  var obj13955 = {};
  return obj13955;
}();
cljs.core._pr_writer = function cljs$core$_pr_writer(o, writer, opts) {
  if (function() {
    var and__4297__auto__ = o;
    if (and__4297__auto__) {
      return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3(o, writer, opts);
  } else {
    var x__4945__auto__ = o == null ? null : o;
    return function() {
      var or__4309__auto__ = cljs.core._pr_writer[function() {
        var G__13959 = x__4945__auto__;
        return goog.typeOf(G__13959);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._pr_writer["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IPrintWithWriter.-pr-writer", o);
        }
      }
    }().call(null, o, writer, opts);
  }
};
cljs.core.IPending = function() {
  var obj13961 = {};
  return obj13961;
}();
cljs.core._realized_QMARK_ = function cljs$core$_realized_QMARK_(d) {
  if (function() {
    var and__4297__auto__ = d;
    if (and__4297__auto__) {
      return d.cljs$core$IPending$_realized_QMARK_$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return d.cljs$core$IPending$_realized_QMARK_$arity$1(d);
  } else {
    var x__4945__auto__ = d == null ? null : d;
    return function() {
      var or__4309__auto__ = cljs.core._realized_QMARK_[function() {
        var G__13965 = x__4945__auto__;
        return goog.typeOf(G__13965);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._realized_QMARK_["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IPending.-realized?", d);
        }
      }
    }().call(null, d);
  }
};
cljs.core.IWatchable = function() {
  var obj13967 = {};
  return obj13967;
}();
cljs.core._notify_watches = function cljs$core$_notify_watches(this$, oldval, newval) {
  if (function() {
    var and__4297__auto__ = this$;
    if (and__4297__auto__) {
      return this$.cljs$core$IWatchable$_notify_watches$arity$3;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_notify_watches$arity$3(this$, oldval, newval);
  } else {
    var x__4945__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4309__auto__ = cljs.core._notify_watches[function() {
        var G__13971 = x__4945__auto__;
        return goog.typeOf(G__13971);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._notify_watches["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWatchable.-notify-watches", this$);
        }
      }
    }().call(null, this$, oldval, newval);
  }
};
cljs.core._add_watch = function cljs$core$_add_watch(this$, key, f) {
  if (function() {
    var and__4297__auto__ = this$;
    if (and__4297__auto__) {
      return this$.cljs$core$IWatchable$_add_watch$arity$3;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_add_watch$arity$3(this$, key, f);
  } else {
    var x__4945__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4309__auto__ = cljs.core._add_watch[function() {
        var G__13975 = x__4945__auto__;
        return goog.typeOf(G__13975);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._add_watch["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWatchable.-add-watch", this$);
        }
      }
    }().call(null, this$, key, f);
  }
};
cljs.core._remove_watch = function cljs$core$_remove_watch(this$, key) {
  if (function() {
    var and__4297__auto__ = this$;
    if (and__4297__auto__) {
      return this$.cljs$core$IWatchable$_remove_watch$arity$2;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_remove_watch$arity$2(this$, key);
  } else {
    var x__4945__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4309__auto__ = cljs.core._remove_watch[function() {
        var G__13979 = x__4945__auto__;
        return goog.typeOf(G__13979);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._remove_watch["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWatchable.-remove-watch", this$);
        }
      }
    }().call(null, this$, key);
  }
};
cljs.core.IEditableCollection = function() {
  var obj13981 = {};
  return obj13981;
}();
cljs.core._as_transient = function cljs$core$_as_transient(coll) {
  if (function() {
    var and__4297__auto__ = coll;
    if (and__4297__auto__) {
      return coll.cljs$core$IEditableCollection$_as_transient$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return coll.cljs$core$IEditableCollection$_as_transient$arity$1(coll);
  } else {
    var x__4945__auto__ = coll == null ? null : coll;
    return function() {
      var or__4309__auto__ = cljs.core._as_transient[function() {
        var G__13985 = x__4945__auto__;
        return goog.typeOf(G__13985);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._as_transient["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEditableCollection.-as-transient", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ITransientCollection = function() {
  var obj13987 = {};
  return obj13987;
}();
cljs.core._conj_BANG_ = function cljs$core$_conj_BANG_(tcoll, val) {
  if (function() {
    var and__4297__auto__ = tcoll;
    if (and__4297__auto__) {
      return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2(tcoll, val);
  } else {
    var x__4945__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__4309__auto__ = cljs.core._conj_BANG_[function() {
        var G__13991 = x__4945__auto__;
        return goog.typeOf(G__13991);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._conj_BANG_["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientCollection.-conj!", tcoll);
        }
      }
    }().call(null, tcoll, val);
  }
};
cljs.core._persistent_BANG_ = function cljs$core$_persistent_BANG_(tcoll) {
  if (function() {
    var and__4297__auto__ = tcoll;
    if (and__4297__auto__) {
      return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(tcoll);
  } else {
    var x__4945__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__4309__auto__ = cljs.core._persistent_BANG_[function() {
        var G__13995 = x__4945__auto__;
        return goog.typeOf(G__13995);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._persistent_BANG_["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientCollection.-persistent!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientAssociative = function() {
  var obj13997 = {};
  return obj13997;
}();
cljs.core._assoc_BANG_ = function cljs$core$_assoc_BANG_(tcoll, key, val) {
  if (function() {
    var and__4297__auto__ = tcoll;
    if (and__4297__auto__) {
      return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(tcoll, key, val);
  } else {
    var x__4945__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__4309__auto__ = cljs.core._assoc_BANG_[function() {
        var G__14001 = x__4945__auto__;
        return goog.typeOf(G__14001);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._assoc_BANG_["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientAssociative.-assoc!", tcoll);
        }
      }
    }().call(null, tcoll, key, val);
  }
};
cljs.core.ITransientMap = function() {
  var obj14003 = {};
  return obj14003;
}();
cljs.core._dissoc_BANG_ = function cljs$core$_dissoc_BANG_(tcoll, key) {
  if (function() {
    var and__4297__auto__ = tcoll;
    if (and__4297__auto__) {
      return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2(tcoll, key);
  } else {
    var x__4945__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__4309__auto__ = cljs.core._dissoc_BANG_[function() {
        var G__14007 = x__4945__auto__;
        return goog.typeOf(G__14007);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._dissoc_BANG_["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientMap.-dissoc!", tcoll);
        }
      }
    }().call(null, tcoll, key);
  }
};
cljs.core.ITransientVector = function() {
  var obj14009 = {};
  return obj14009;
}();
cljs.core._assoc_n_BANG_ = function cljs$core$_assoc_n_BANG_(tcoll, n, val) {
  if (function() {
    var and__4297__auto__ = tcoll;
    if (and__4297__auto__) {
      return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3(tcoll, n, val);
  } else {
    var x__4945__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__4309__auto__ = cljs.core._assoc_n_BANG_[function() {
        var G__14013 = x__4945__auto__;
        return goog.typeOf(G__14013);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._assoc_n_BANG_["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientVector.-assoc-n!", tcoll);
        }
      }
    }().call(null, tcoll, n, val);
  }
};
cljs.core._pop_BANG_ = function cljs$core$_pop_BANG_(tcoll) {
  if (function() {
    var and__4297__auto__ = tcoll;
    if (and__4297__auto__) {
      return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1(tcoll);
  } else {
    var x__4945__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__4309__auto__ = cljs.core._pop_BANG_[function() {
        var G__14017 = x__4945__auto__;
        return goog.typeOf(G__14017);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._pop_BANG_["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientVector.-pop!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientSet = function() {
  var obj14019 = {};
  return obj14019;
}();
cljs.core._disjoin_BANG_ = function cljs$core$_disjoin_BANG_(tcoll, v) {
  if (function() {
    var and__4297__auto__ = tcoll;
    if (and__4297__auto__) {
      return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2(tcoll, v);
  } else {
    var x__4945__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__4309__auto__ = cljs.core._disjoin_BANG_[function() {
        var G__14023 = x__4945__auto__;
        return goog.typeOf(G__14023);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._disjoin_BANG_["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientSet.-disjoin!", tcoll);
        }
      }
    }().call(null, tcoll, v);
  }
};
cljs.core.IComparable = function() {
  var obj14025 = {};
  return obj14025;
}();
cljs.core._compare = function cljs$core$_compare(x, y) {
  if (function() {
    var and__4297__auto__ = x;
    if (and__4297__auto__) {
      return x.cljs$core$IComparable$_compare$arity$2;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return x.cljs$core$IComparable$_compare$arity$2(x, y);
  } else {
    var x__4945__auto__ = x == null ? null : x;
    return function() {
      var or__4309__auto__ = cljs.core._compare[function() {
        var G__14029 = x__4945__auto__;
        return goog.typeOf(G__14029);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._compare["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IComparable.-compare", x);
        }
      }
    }().call(null, x, y);
  }
};
cljs.core.IChunk = function() {
  var obj14031 = {};
  return obj14031;
}();
cljs.core._drop_first = function cljs$core$_drop_first(coll) {
  if (function() {
    var and__4297__auto__ = coll;
    if (and__4297__auto__) {
      return coll.cljs$core$IChunk$_drop_first$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return coll.cljs$core$IChunk$_drop_first$arity$1(coll);
  } else {
    var x__4945__auto__ = coll == null ? null : coll;
    return function() {
      var or__4309__auto__ = cljs.core._drop_first[function() {
        var G__14035 = x__4945__auto__;
        return goog.typeOf(G__14035);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._drop_first["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IChunk.-drop-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedSeq = function() {
  var obj14037 = {};
  return obj14037;
}();
cljs.core._chunked_first = function cljs$core$_chunked_first(coll) {
  if (function() {
    var and__4297__auto__ = coll;
    if (and__4297__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1(coll);
  } else {
    var x__4945__auto__ = coll == null ? null : coll;
    return function() {
      var or__4309__auto__ = cljs.core._chunked_first[function() {
        var G__14041 = x__4945__auto__;
        return goog.typeOf(G__14041);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._chunked_first["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IChunkedSeq.-chunked-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._chunked_rest = function cljs$core$_chunked_rest(coll) {
  if (function() {
    var and__4297__auto__ = coll;
    if (and__4297__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1(coll);
  } else {
    var x__4945__auto__ = coll == null ? null : coll;
    return function() {
      var or__4309__auto__ = cljs.core._chunked_rest[function() {
        var G__14045 = x__4945__auto__;
        return goog.typeOf(G__14045);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._chunked_rest["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IChunkedSeq.-chunked-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedNext = function() {
  var obj14047 = {};
  return obj14047;
}();
cljs.core._chunked_next = function cljs$core$_chunked_next(coll) {
  if (function() {
    var and__4297__auto__ = coll;
    if (and__4297__auto__) {
      return coll.cljs$core$IChunkedNext$_chunked_next$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedNext$_chunked_next$arity$1(coll);
  } else {
    var x__4945__auto__ = coll == null ? null : coll;
    return function() {
      var or__4309__auto__ = cljs.core._chunked_next[function() {
        var G__14051 = x__4945__auto__;
        return goog.typeOf(G__14051);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._chunked_next["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IChunkedNext.-chunked-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INamed = function() {
  var obj14053 = {};
  return obj14053;
}();
cljs.core._name = function cljs$core$_name(x) {
  if (function() {
    var and__4297__auto__ = x;
    if (and__4297__auto__) {
      return x.cljs$core$INamed$_name$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_name$arity$1(x);
  } else {
    var x__4945__auto__ = x == null ? null : x;
    return function() {
      var or__4309__auto__ = cljs.core._name[function() {
        var G__14057 = x__4945__auto__;
        return goog.typeOf(G__14057);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._name["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("INamed.-name", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._namespace = function cljs$core$_namespace(x) {
  if (function() {
    var and__4297__auto__ = x;
    if (and__4297__auto__) {
      return x.cljs$core$INamed$_namespace$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_namespace$arity$1(x);
  } else {
    var x__4945__auto__ = x == null ? null : x;
    return function() {
      var or__4309__auto__ = cljs.core._namespace[function() {
        var G__14061 = x__4945__auto__;
        return goog.typeOf(G__14061);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._namespace["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("INamed.-namespace", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.IAtom = function() {
  var obj14063 = {};
  return obj14063;
}();
cljs.core.IReset = function() {
  var obj14065 = {};
  return obj14065;
}();
cljs.core._reset_BANG_ = function cljs$core$_reset_BANG_(o, new_value) {
  if (function() {
    var and__4297__auto__ = o;
    if (and__4297__auto__) {
      return o.cljs$core$IReset$_reset_BANG_$arity$2;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return o.cljs$core$IReset$_reset_BANG_$arity$2(o, new_value);
  } else {
    var x__4945__auto__ = o == null ? null : o;
    return function() {
      var or__4309__auto__ = cljs.core._reset_BANG_[function() {
        var G__14069 = x__4945__auto__;
        return goog.typeOf(G__14069);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._reset_BANG_["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IReset.-reset!", o);
        }
      }
    }().call(null, o, new_value);
  }
};
cljs.core.ISwap = function() {
  var obj14071 = {};
  return obj14071;
}();
cljs.core._swap_BANG_ = function cljs$core$_swap_BANG_() {
  var G__14073 = arguments.length;
  switch(G__14073) {
    case 2:
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$2 = function(o, f) {
  if (function() {
    var and__4297__auto__ = o;
    if (and__4297__auto__) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$2;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return o.cljs$core$ISwap$_swap_BANG_$arity$2(o, f);
  } else {
    var x__4945__auto__ = o == null ? null : o;
    return function() {
      var or__4309__auto__ = cljs.core._swap_BANG_[function() {
        var G__14075 = x__4945__auto__;
        return goog.typeOf(G__14075);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._swap_BANG_["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISwap.-swap!", o);
        }
      }
    }().call(null, o, f);
  }
};
cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$3 = function(o, f, a) {
  if (function() {
    var and__4297__auto__ = o;
    if (and__4297__auto__) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$3;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return o.cljs$core$ISwap$_swap_BANG_$arity$3(o, f, a);
  } else {
    var x__4945__auto__ = o == null ? null : o;
    return function() {
      var or__4309__auto__ = cljs.core._swap_BANG_[function() {
        var G__14077 = x__4945__auto__;
        return goog.typeOf(G__14077);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._swap_BANG_["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISwap.-swap!", o);
        }
      }
    }().call(null, o, f, a);
  }
};
cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$4 = function(o, f, a, b) {
  if (function() {
    var and__4297__auto__ = o;
    if (and__4297__auto__) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$4;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return o.cljs$core$ISwap$_swap_BANG_$arity$4(o, f, a, b);
  } else {
    var x__4945__auto__ = o == null ? null : o;
    return function() {
      var or__4309__auto__ = cljs.core._swap_BANG_[function() {
        var G__14079 = x__4945__auto__;
        return goog.typeOf(G__14079);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._swap_BANG_["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISwap.-swap!", o);
        }
      }
    }().call(null, o, f, a, b);
  }
};
cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$5 = function(o, f, a, b, xs) {
  if (function() {
    var and__4297__auto__ = o;
    if (and__4297__auto__) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$5;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return o.cljs$core$ISwap$_swap_BANG_$arity$5(o, f, a, b, xs);
  } else {
    var x__4945__auto__ = o == null ? null : o;
    return function() {
      var or__4309__auto__ = cljs.core._swap_BANG_[function() {
        var G__14081 = x__4945__auto__;
        return goog.typeOf(G__14081);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._swap_BANG_["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISwap.-swap!", o);
        }
      }
    }().call(null, o, f, a, b, xs);
  }
};
cljs.core._swap_BANG_.cljs$lang$maxFixedArity = 5;
cljs.core.IVolatile = function() {
  var obj14084 = {};
  return obj14084;
}();
cljs.core._vreset_BANG_ = function cljs$core$_vreset_BANG_(o, new_value) {
  if (function() {
    var and__4297__auto__ = o;
    if (and__4297__auto__) {
      return o.cljs$core$IVolatile$_vreset_BANG_$arity$2;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return o.cljs$core$IVolatile$_vreset_BANG_$arity$2(o, new_value);
  } else {
    var x__4945__auto__ = o == null ? null : o;
    return function() {
      var or__4309__auto__ = cljs.core._vreset_BANG_[function() {
        var G__14088 = x__4945__auto__;
        return goog.typeOf(G__14088);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._vreset_BANG_["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IVolatile.-vreset!", o);
        }
      }
    }().call(null, o, new_value);
  }
};
cljs.core.IIterable = function() {
  var obj14090 = {};
  return obj14090;
}();
cljs.core._iterator = function cljs$core$_iterator(coll) {
  if (function() {
    var and__4297__auto__ = coll;
    if (and__4297__auto__) {
      return coll.cljs$core$IIterable$_iterator$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return coll.cljs$core$IIterable$_iterator$arity$1(coll);
  } else {
    var x__4945__auto__ = coll == null ? null : coll;
    return function() {
      var or__4309__auto__ = cljs.core._iterator[function() {
        var G__14094 = x__4945__auto__;
        return goog.typeOf(G__14094);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._iterator["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IIterable.-iterator", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.StringBufferWriter = function(sb) {
  this.sb = sb;
  this.cljs$lang$protocol_mask$partition0$ = 1073741824;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_write$arity$2 = function(_, s) {
  var self__ = this;
  var ___$1 = this;
  return self__.sb.append(s);
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_flush$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return null;
};
cljs.core.StringBufferWriter.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "sb", "sb", -1249746442, null)], null);
};
cljs.core.StringBufferWriter.cljs$lang$type = true;
cljs.core.StringBufferWriter.cljs$lang$ctorStr = "cljs.core/StringBufferWriter";
cljs.core.StringBufferWriter.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/StringBufferWriter");
};
cljs.core.__GT_StringBufferWriter = function cljs$core$__GT_StringBufferWriter(sb) {
  return new cljs.core.StringBufferWriter(sb);
};
cljs.core.pr_str_STAR_ = function cljs$core$pr_str_STAR_(obj) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  obj.cljs$core$IPrintWithWriter$_pr_writer$arity$3(null, writer, cljs.core.pr_opts());
  writer.cljs$core$IWriter$_flush$arity$1(null);
  return [cljs.core.str(sb)].join("");
};
cljs.core.int_rotate_left = function cljs$core$int_rotate_left(x, n) {
  return x << n | x >>> -n;
};
if (typeof Math.imul !== "undefined" && !(function() {
  var G__14097 = 4294967295;
  var G__14098 = 5;
  return Math.imul(G__14097, G__14098);
}() === 0)) {
  cljs.core.imul = function cljs$core$imul(a, b) {
    var G__14101 = a;
    var G__14102 = b;
    return Math.imul(G__14101, G__14102);
  };
} else {
  cljs.core.imul = function cljs$core$imul(a, b) {
    var ah = a >>> 16 & 65535;
    var al = a & 65535;
    var bh = b >>> 16 & 65535;
    var bl = b & 65535;
    return al * bl + (ah * bl + al * bh << 16 >>> 0) | 0;
  };
}
cljs.core.m3_seed = 0;
cljs.core.m3_C1 = 3432918353 | 0;
cljs.core.m3_C2 = 461845907 | 0;
cljs.core.m3_mix_K1 = function cljs$core$m3_mix_K1(k1) {
  return cljs.core.imul(cljs.core.int_rotate_left(cljs.core.imul(k1 | 0, cljs.core.m3_C1), 15), cljs.core.m3_C2);
};
cljs.core.m3_mix_H1 = function cljs$core$m3_mix_H1(h1, k1) {
  return cljs.core.imul(cljs.core.int_rotate_left((h1 | 0) ^ (k1 | 0), 13), 5) + (3864292196 | 0) | 0;
};
cljs.core.m3_fmix = function cljs$core$m3_fmix(h1, len) {
  var h1__$1 = h1 | 0;
  var h1__$2 = h1__$1 ^ len;
  var h1__$3 = h1__$2 ^ h1__$2 >>> 16;
  var h1__$4 = cljs.core.imul(h1__$3, 2246822507 | 0);
  var h1__$5 = h1__$4 ^ h1__$4 >>> 13;
  var h1__$6 = cljs.core.imul(h1__$5, 3266489909 | 0);
  var h1__$7 = h1__$6 ^ h1__$6 >>> 16;
  return h1__$7;
};
cljs.core.m3_hash_int = function cljs$core$m3_hash_int(in$) {
  if (in$ === 0) {
    return in$;
  } else {
    var k1 = cljs.core.m3_mix_K1(in$);
    var h1 = cljs.core.m3_mix_H1(cljs.core.m3_seed, k1);
    return cljs.core.m3_fmix(h1, 4);
  }
};
cljs.core.m3_hash_unencoded_chars = function cljs$core$m3_hash_unencoded_chars(in$) {
  var h1 = function() {
    var i = 1;
    var h1 = cljs.core.m3_seed;
    while (true) {
      if (i < in$.length) {
        var G__14103 = i + 2;
        var G__14104 = cljs.core.m3_mix_H1(h1, cljs.core.m3_mix_K1(in$.charCodeAt(i - 1) | in$.charCodeAt(i) << 16));
        i = G__14103;
        h1 = G__14104;
        continue;
      } else {
        return h1;
      }
      break;
    }
  }();
  var h1__$1 = (in$.length & 1) === 1 ? h1 ^ cljs.core.m3_mix_K1(in$.charCodeAt(in$.length - 1)) : h1;
  return cljs.core.m3_fmix(h1__$1, cljs.core.imul(2, in$.length));
};
cljs.core.string_hash_cache = function() {
  var obj14106 = {};
  return obj14106;
}();
cljs.core.string_hash_cache_count = 0;
cljs.core.hash_string_STAR_ = function cljs$core$hash_string_STAR_(s) {
  if (!(s == null)) {
    var len = s.length;
    if (len > 0) {
      var i = 0;
      var hash = 0;
      while (true) {
        if (i < len) {
          var G__14107 = i + 1;
          var G__14108 = cljs.core.imul(31, hash) + s.charCodeAt(i);
          i = G__14107;
          hash = G__14108;
          continue;
        } else {
          return hash;
        }
        break;
      }
    } else {
      return 0;
    }
  } else {
    return 0;
  }
};
cljs.core.add_to_string_hash_cache = function cljs$core$add_to_string_hash_cache(k) {
  var h = cljs.core.hash_string_STAR_(k);
  cljs.core.string_hash_cache[k] = h;
  cljs.core.string_hash_cache_count = cljs.core.string_hash_cache_count + 1;
  return h;
};
cljs.core.hash_string = function cljs$core$hash_string(k) {
  if (cljs.core.string_hash_cache_count > 255) {
    cljs.core.string_hash_cache = function() {
      var obj14112 = {};
      return obj14112;
    }();
    cljs.core.string_hash_cache_count = 0;
  } else {
  }
  var h = cljs.core.string_hash_cache[k];
  if (typeof h === "number") {
    return h;
  } else {
    return cljs.core.add_to_string_hash_cache(k);
  }
};
cljs.core.hash = function cljs$core$hash(o) {
  if (function() {
    var G__14115 = o;
    if (G__14115) {
      var bit__4976__auto__ = G__14115.cljs$lang$protocol_mask$partition0$ & 4194304;
      if (bit__4976__auto__ || G__14115.cljs$core$IHash$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return o.cljs$core$IHash$_hash$arity$1(null);
  } else {
    if (typeof o === "number") {
      return function() {
        var G__14116 = o;
        return Math.floor(G__14116);
      }() % 2147483647;
    } else {
      if (o === true) {
        return 1;
      } else {
        if (o === false) {
          return 0;
        } else {
          if (typeof o === "string") {
            return cljs.core.m3_hash_int(cljs.core.hash_string(o));
          } else {
            if (o instanceof Date) {
              return o.valueOf();
            } else {
              if (o == null) {
                return 0;
              } else {
                return cljs.core._hash(o);
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.hash_combine = function cljs$core$hash_combine(seed, hash) {
  return seed ^ hash + 2654435769 + (seed << 6) + (seed >> 2);
};
cljs.core.instance_QMARK_ = function cljs$core$instance_QMARK_(t, o) {
  return o instanceof t;
};
cljs.core.symbol_QMARK_ = function cljs$core$symbol_QMARK_(x) {
  return x instanceof cljs.core.Symbol;
};
cljs.core.hash_symbol = function cljs$core$hash_symbol(sym) {
  return cljs.core.hash_combine(cljs.core.m3_hash_unencoded_chars(sym.name), cljs.core.hash_string(sym.ns));
};
cljs.core.compare_symbols = function cljs$core$compare_symbols(a, b) {
  if (a.str === b.str) {
    return 0;
  } else {
    if (cljs.core.truth_(function() {
      var and__4297__auto__ = cljs.core.not(a.ns);
      if (and__4297__auto__) {
        return b.ns;
      } else {
        return and__4297__auto__;
      }
    }())) {
      return -1;
    } else {
      if (cljs.core.truth_(a.ns)) {
        if (cljs.core.not(b.ns)) {
          return 1;
        } else {
          var nsc = function() {
            var G__14123 = a.ns;
            var G__14124 = b.ns;
            return goog.array.defaultCompare(G__14123, G__14124);
          }();
          if (0 === nsc) {
            var G__14125 = a.name;
            var G__14126 = b.name;
            return goog.array.defaultCompare(G__14125, G__14126);
          } else {
            return nsc;
          }
        }
      } else {
        var G__14127 = a.name;
        var G__14128 = b.name;
        return goog.array.defaultCompare(G__14127, G__14128);
      }
    }
  }
};
cljs.core.Symbol = function(ns, name, str, _hash, _meta) {
  this.ns = ns;
  this.name = name;
  this.str = str;
  this._hash = _hash;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 2154168321;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Symbol.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.str;
};
cljs.core.Symbol.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Symbol.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Symbol) {
    return self__.str === other.str;
  } else {
    return false;
  }
};
cljs.core.Symbol.prototype.call = function() {
  var G__14130 = null;
  var G__14130__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll, sym, null);
  };
  var G__14130__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll, sym, not_found);
  };
  G__14130 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__14130__2.call(this, self__, coll);
      case 3:
        return G__14130__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__14130.cljs$core$IFn$_invoke$arity$2 = G__14130__2;
  G__14130.cljs$core$IFn$_invoke$arity$3 = G__14130__3;
  return G__14130;
}();
cljs.core.Symbol.prototype.apply = function(self__, args14129) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args14129)));
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll, sym, null);
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll, sym, not_found);
};
cljs.core.Symbol.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__._meta;
};
cljs.core.Symbol.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Symbol(self__.ns, self__.name, self__.str, self__._hash, new_meta);
};
cljs.core.Symbol.prototype.cljs$core$IHash$_hash$arity$1 = function(sym) {
  var self__ = this;
  var sym__$1 = this;
  var h__4725__auto__ = self__._hash;
  if (!(h__4725__auto__ == null)) {
    return h__4725__auto__;
  } else {
    var h__4725__auto____$1 = cljs.core.hash_symbol(sym__$1);
    self__._hash = h__4725__auto____$1;
    return h__4725__auto____$1;
  }
};
cljs.core.Symbol.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Symbol.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Symbol.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write(writer, self__.str);
};
cljs.core.Symbol.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "ns", "ns", 2082130287, null), new cljs.core.Symbol(null, "name", "name", -810760592, null), new cljs.core.Symbol(null, "str", "str", -1564826950, null), new cljs.core.Symbol(null, "_hash", "_hash", -2130838312, null), new cljs.core.Symbol(null, "_meta", "_meta", -1716892533, null)], null);
};
cljs.core.Symbol.cljs$lang$type = true;
cljs.core.Symbol.cljs$lang$ctorStr = "cljs.core/Symbol";
cljs.core.Symbol.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/Symbol");
};
cljs.core.__GT_Symbol = function cljs$core$__GT_Symbol(ns, name, str, _hash, _meta) {
  return new cljs.core.Symbol(ns, name, str, _hash, _meta);
};
cljs.core.symbol = function cljs$core$symbol() {
  var G__14132 = arguments.length;
  switch(G__14132) {
    case 1:
      return cljs.core.symbol.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.symbol.cljs$core$IFn$_invoke$arity$1 = function(name) {
  if (name instanceof cljs.core.Symbol) {
    return name;
  } else {
    return cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(null, name);
  }
};
cljs.core.symbol.cljs$core$IFn$_invoke$arity$2 = function(ns, name) {
  var sym_str = !(ns == null) ? [cljs.core.str(ns), cljs.core.str("/"), cljs.core.str(name)].join("") : name;
  return new cljs.core.Symbol(ns, name, sym_str, null, null);
};
cljs.core.symbol.cljs$lang$maxFixedArity = 2;
cljs.core.Var = function(val, sym, _meta) {
  this.val = val;
  this.sym = sym;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 163841;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.Var.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
};
cljs.core.Var.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__._meta;
};
cljs.core.Var.prototype.cljs$core$Fn$ = true;
cljs.core.Var.prototype.call = function() {
  var G__14179 = null;
  var G__14179__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null);
  };
  var G__14179__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a);
  };
  var G__14179__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b);
  };
  var G__14179__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c);
  };
  var G__14179__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d);
  };
  var G__14179__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e);
  };
  var G__14179__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f);
  };
  var G__14179__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g);
  };
  var G__14179__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h);
  };
  var G__14179__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i);
  };
  var G__14179__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j);
  };
  var G__14179__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k);
  };
  var G__14179__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  };
  var G__14179__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  };
  var G__14179__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  };
  var G__14179__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  };
  var G__14179__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  };
  var G__14179__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  };
  var G__14179__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  };
  var G__14179__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  };
  var G__14179__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  };
  var G__14179__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__14135 = function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }();
    var G__14136 = a;
    var G__14137 = b;
    var G__14138 = c;
    var G__14139 = d;
    var G__14140 = e;
    var G__14141 = f;
    var G__14142 = g;
    var G__14143 = h;
    var G__14144 = i;
    var G__14145 = j;
    var G__14146 = k;
    var G__14147 = l;
    var G__14148 = m;
    var G__14149 = n;
    var G__14150 = o;
    var G__14151 = p;
    var G__14152 = q;
    var G__14153 = r;
    var G__14154 = s;
    var G__14155 = t;
    var G__14156 = rest;
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(G__14135, G__14136, G__14137, G__14138, G__14139, G__14140, G__14141, G__14142, G__14143, G__14144, G__14145, G__14146, G__14147, G__14148, G__14149, G__14150, G__14151, G__14152, G__14153, G__14154, G__14155, G__14156) : cljs.core.apply.call(null, G__14135, G__14136, G__14137, G__14138, G__14139, G__14140, G__14141, G__14142, G__14143, G__14144, G__14145, G__14146, G__14147, G__14148, G__14149, 
    G__14150, G__14151, G__14152, G__14153, G__14154, G__14155, G__14156);
  };
  G__14179 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__14179__1.call(this, self__);
      case 2:
        return G__14179__2.call(this, self__, a);
      case 3:
        return G__14179__3.call(this, self__, a, b);
      case 4:
        return G__14179__4.call(this, self__, a, b, c);
      case 5:
        return G__14179__5.call(this, self__, a, b, c, d);
      case 6:
        return G__14179__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__14179__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__14179__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__14179__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__14179__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__14179__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__14179__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__14179__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__14179__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__14179__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__14179__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__14179__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__14179__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__14179__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__14179__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__14179__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__14179__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__14179.cljs$core$IFn$_invoke$arity$1 = G__14179__1;
  G__14179.cljs$core$IFn$_invoke$arity$2 = G__14179__2;
  G__14179.cljs$core$IFn$_invoke$arity$3 = G__14179__3;
  G__14179.cljs$core$IFn$_invoke$arity$4 = G__14179__4;
  G__14179.cljs$core$IFn$_invoke$arity$5 = G__14179__5;
  G__14179.cljs$core$IFn$_invoke$arity$6 = G__14179__6;
  G__14179.cljs$core$IFn$_invoke$arity$7 = G__14179__7;
  G__14179.cljs$core$IFn$_invoke$arity$8 = G__14179__8;
  G__14179.cljs$core$IFn$_invoke$arity$9 = G__14179__9;
  G__14179.cljs$core$IFn$_invoke$arity$10 = G__14179__10;
  G__14179.cljs$core$IFn$_invoke$arity$11 = G__14179__11;
  G__14179.cljs$core$IFn$_invoke$arity$12 = G__14179__12;
  G__14179.cljs$core$IFn$_invoke$arity$13 = G__14179__13;
  G__14179.cljs$core$IFn$_invoke$arity$14 = G__14179__14;
  G__14179.cljs$core$IFn$_invoke$arity$15 = G__14179__15;
  G__14179.cljs$core$IFn$_invoke$arity$16 = G__14179__16;
  G__14179.cljs$core$IFn$_invoke$arity$17 = G__14179__17;
  G__14179.cljs$core$IFn$_invoke$arity$18 = G__14179__18;
  G__14179.cljs$core$IFn$_invoke$arity$19 = G__14179__19;
  G__14179.cljs$core$IFn$_invoke$arity$20 = G__14179__20;
  G__14179.cljs$core$IFn$_invoke$arity$21 = G__14179__21;
  G__14179.cljs$core$IFn$_invoke$arity$22 = G__14179__22;
  return G__14179;
}();
cljs.core.Var.prototype.apply = function(self__, args14134) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args14134)));
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var _ = this;
  var G__14157 = function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }();
  var G__14158 = a;
  var G__14159 = b;
  var G__14160 = c;
  var G__14161 = d;
  var G__14162 = e;
  var G__14163 = f;
  var G__14164 = g;
  var G__14165 = h;
  var G__14166 = i;
  var G__14167 = j;
  var G__14168 = k;
  var G__14169 = l;
  var G__14170 = m;
  var G__14171 = n;
  var G__14172 = o;
  var G__14173 = p;
  var G__14174 = q;
  var G__14175 = r;
  var G__14176 = s;
  var G__14177 = t;
  var G__14178 = rest;
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(G__14157, G__14158, G__14159, G__14160, G__14161, G__14162, G__14163, G__14164, G__14165, G__14166, G__14167, G__14168, G__14169, G__14170, G__14171, G__14172, G__14173, G__14174, G__14175, G__14176, G__14177, G__14178) : cljs.core.apply.call(null, G__14157, G__14158, G__14159, G__14160, G__14161, G__14162, G__14163, G__14164, G__14165, G__14166, G__14167, G__14168, G__14169, G__14170, G__14171, 
  G__14172, G__14173, G__14174, G__14175, G__14176, G__14177, G__14178);
};
cljs.core.Var.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "val", "val", 1769233139, null), new cljs.core.Symbol(null, "sym", "sym", 195671222, null), new cljs.core.Symbol(null, "_meta", "_meta", -1716892533, null)], null);
};
cljs.core.Var.cljs$lang$type = true;
cljs.core.Var.cljs$lang$ctorStr = "cljs.core/Var";
cljs.core.Var.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/Var");
};
cljs.core.__GT_Var = function cljs$core$__GT_Var(val, sym, _meta) {
  return new cljs.core.Var(val, sym, _meta);
};
cljs.core.var_QMARK_ = function cljs$core$var_QMARK_(v) {
  return v instanceof cljs.core.Var;
};
cljs.core.iterable_QMARK_ = function cljs$core$iterable_QMARK_(x) {
  var G__14181 = x;
  if (G__14181) {
    var bit__4983__auto__ = null;
    if (cljs.core.truth_(function() {
      var or__4309__auto__ = bit__4983__auto__;
      if (cljs.core.truth_(or__4309__auto__)) {
        return or__4309__auto__;
      } else {
        return G__14181.cljs$core$IIterable$;
      }
    }())) {
      return true;
    } else {
      if (!G__14181.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IIterable, G__14181);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IIterable, G__14181);
  }
};
cljs.core.clone = function cljs$core$clone(value) {
  return cljs.core._clone(value);
};
cljs.core.cloneable_QMARK_ = function cljs$core$cloneable_QMARK_(value) {
  var G__14183 = value;
  if (G__14183) {
    var bit__4983__auto__ = G__14183.cljs$lang$protocol_mask$partition1$ & 8192;
    if (bit__4983__auto__ || G__14183.cljs$core$ICloneable$) {
      return true;
    } else {
      if (!G__14183.cljs$lang$protocol_mask$partition1$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ICloneable, G__14183);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ICloneable, G__14183);
  }
};
cljs.core.seq = function cljs$core$seq(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__14185 = coll;
      if (G__14185) {
        var bit__4976__auto__ = G__14185.cljs$lang$protocol_mask$partition0$ & 8388608;
        if (bit__4976__auto__ || G__14185.cljs$core$ISeqable$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$ISeqable$_seq$arity$1(null);
    } else {
      if (cljs.core.array_QMARK_(coll)) {
        if (coll.length === 0) {
          return null;
        } else {
          return new cljs.core.IndexedSeq(coll, 0);
        }
      } else {
        if (typeof coll === "string") {
          if (coll.length === 0) {
            return null;
          } else {
            return new cljs.core.IndexedSeq(coll, 0);
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.ISeqable, coll)) {
            return cljs.core._seq(coll);
          } else {
            throw new Error([cljs.core.str(coll), cljs.core.str(" is not ISeqable")].join(""));
          }
        }
      }
    }
  }
};
cljs.core.first = function cljs$core$first(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__14187 = coll;
      if (G__14187) {
        var bit__4976__auto__ = G__14187.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4976__auto__ || G__14187.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$ISeq$_first$arity$1(null);
    } else {
      var s = cljs.core.seq(coll);
      if (s == null) {
        return null;
      } else {
        return cljs.core._first(s);
      }
    }
  }
};
cljs.core.rest = function cljs$core$rest(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__14189 = coll;
      if (G__14189) {
        var bit__4976__auto__ = G__14189.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4976__auto__ || G__14189.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$ISeq$_rest$arity$1(null);
    } else {
      var s = cljs.core.seq(coll);
      if (s) {
        return cljs.core._rest(s);
      } else {
        return cljs.core.List.EMPTY;
      }
    }
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.next = function cljs$core$next(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__14191 = coll;
      if (G__14191) {
        var bit__4976__auto__ = G__14191.cljs$lang$protocol_mask$partition0$ & 128;
        if (bit__4976__auto__ || G__14191.cljs$core$INext$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$INext$_next$arity$1(null);
    } else {
      return cljs.core.seq(cljs.core.rest(coll));
    }
  }
};
cljs.core._EQ_ = function cljs$core$_EQ_() {
  var G__14196 = arguments.length;
  switch(G__14196) {
    case 1:
      return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5360__auto__);
  }
};
cljs.core._EQ_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  if (x == null) {
    return y == null;
  } else {
    return x === y || cljs.core._equiv(x, y);
  }
};
cljs.core._EQ_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
      if (cljs.core.next(more)) {
        var G__14198 = y;
        var G__14199 = cljs.core.first(more);
        var G__14200 = cljs.core.next(more);
        x = G__14198;
        y = G__14199;
        more = G__14200;
        continue;
      } else {
        return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(y, cljs.core.first(more));
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._EQ_.cljs$lang$applyTo = function(seq14192) {
  var G__14193 = cljs.core.first(seq14192);
  var seq14192__$1 = cljs.core.next(seq14192);
  var G__14194 = cljs.core.first(seq14192__$1);
  var seq14192__$2 = cljs.core.next(seq14192__$1);
  return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$variadic(G__14193, G__14194, seq14192__$2);
};
cljs.core._EQ_.cljs$lang$maxFixedArity = 2;
cljs.core.ES6Iterator = function(s) {
  this.s = s;
};
cljs.core.ES6Iterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var x = cljs.core.first(self__.s);
    self__.s = cljs.core.next(self__.s);
    return {"value":x, "done":false};
  } else {
    return {"value":null, "done":true};
  }
};
cljs.core.ES6Iterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "s", "s", -948495851, null)], null);
};
cljs.core.ES6Iterator.cljs$lang$type = true;
cljs.core.ES6Iterator.cljs$lang$ctorStr = "cljs.core/ES6Iterator";
cljs.core.ES6Iterator.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/ES6Iterator");
};
cljs.core.__GT_ES6Iterator = function cljs$core$__GT_ES6Iterator(s) {
  return new cljs.core.ES6Iterator(s);
};
cljs.core.es6_iterator = function cljs$core$es6_iterator(coll) {
  return new cljs.core.ES6Iterator(cljs.core.seq(coll));
};
cljs.core.ES6IteratorSeq = function(value, iter, _rest) {
  this.value = value;
  this.iter = iter;
  this._rest = _rest;
  this.cljs$lang$protocol_mask$partition0$ = 8388672;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.value;
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__._rest == null) {
    self__._rest = function() {
      var G__14201 = self__.iter;
      return cljs.core.es6_iterator_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.es6_iterator_seq.cljs$core$IFn$_invoke$arity$1(G__14201) : cljs.core.es6_iterator_seq.call(null, G__14201);
    }();
  } else {
  }
  return self__._rest;
};
cljs.core.ES6IteratorSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "value", "value", 1946509744, null), new cljs.core.Symbol(null, "iter", "iter", -1346195486, null), new cljs.core.Symbol(null, "_rest", "_rest", -2100466189, null)], null);
};
cljs.core.ES6IteratorSeq.cljs$lang$type = true;
cljs.core.ES6IteratorSeq.cljs$lang$ctorStr = "cljs.core/ES6IteratorSeq";
cljs.core.ES6IteratorSeq.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/ES6IteratorSeq");
};
cljs.core.__GT_ES6IteratorSeq = function cljs$core$__GT_ES6IteratorSeq(value, iter, _rest) {
  return new cljs.core.ES6IteratorSeq(value, iter, _rest);
};
cljs.core.es6_iterator_seq = function cljs$core$es6_iterator_seq(iter) {
  var v = iter.next();
  if (cljs.core.truth_(v.done)) {
    return cljs.core.List.EMPTY;
  } else {
    return new cljs.core.ES6IteratorSeq(v.value, iter, null);
  }
};
cljs.core.mix_collection_hash = function cljs$core$mix_collection_hash(hash_basis, count) {
  var h1 = cljs.core.m3_seed;
  var k1 = cljs.core.m3_mix_K1(hash_basis);
  var h1__$1 = cljs.core.m3_mix_H1(h1, k1);
  return cljs.core.m3_fmix(h1__$1, count);
};
cljs.core.hash_ordered_coll = function cljs$core$hash_ordered_coll(coll) {
  var n = 0;
  var hash_code = 1;
  var coll__$1 = cljs.core.seq(coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__14202 = n + 1;
      var G__14203 = cljs.core.imul(31, hash_code) + cljs.core.hash(cljs.core.first(coll__$1)) | 0;
      var G__14204 = cljs.core.next(coll__$1);
      n = G__14202;
      hash_code = G__14203;
      coll__$1 = G__14204;
      continue;
    } else {
      return cljs.core.mix_collection_hash(hash_code, n);
    }
    break;
  }
};
cljs.core.empty_ordered_hash = cljs.core.mix_collection_hash(1, 0);
cljs.core.hash_unordered_coll = function cljs$core$hash_unordered_coll(coll) {
  var n = 0;
  var hash_code = 0;
  var coll__$1 = cljs.core.seq(coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__14205 = n + 1;
      var G__14206 = hash_code + cljs.core.hash(cljs.core.first(coll__$1)) | 0;
      var G__14207 = cljs.core.next(coll__$1);
      n = G__14205;
      hash_code = G__14206;
      coll__$1 = G__14207;
      continue;
    } else {
      return cljs.core.mix_collection_hash(hash_code, n);
    }
    break;
  }
};
cljs.core.empty_unordered_hash = cljs.core.mix_collection_hash(0, 0);
cljs.core.ICounted["null"] = true;
cljs.core._count["null"] = function(_) {
  return 0;
};
Date.prototype.cljs$core$IEquiv$ = true;
Date.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var o__$1 = this;
  return other instanceof Date && o__$1.valueOf() === other.valueOf();
};
Date.prototype.cljs$core$IComparable$ = true;
Date.prototype.cljs$core$IComparable$_compare$arity$2 = function(this$, other) {
  var this$__$1 = this;
  if (other instanceof Date) {
    var G__14208 = this$__$1.valueOf();
    var G__14209 = other.valueOf();
    return goog.array.defaultCompare(G__14208, G__14209);
  } else {
    throw new Error([cljs.core.str("Cannot compare "), cljs.core.str(this$__$1), cljs.core.str(" to "), cljs.core.str(other)].join(""));
  }
};
cljs.core.IEquiv["number"] = true;
cljs.core._equiv["number"] = function(x, o) {
  return x === o;
};
cljs.core.Fn["function"] = true;
cljs.core.IMeta["function"] = true;
cljs.core._meta["function"] = function(_) {
  return null;
};
cljs.core.IHash["_"] = true;
cljs.core._hash["_"] = function(o) {
  var G__14210 = o;
  return goog.getUid(G__14210);
};
cljs.core.inc = function cljs$core$inc(x) {
  return x + 1;
};
cljs.core.Reduced = function(val) {
  this.val = val;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.Reduced.prototype.cljs$core$IDeref$_deref$arity$1 = function(o) {
  var self__ = this;
  var o__$1 = this;
  return self__.val;
};
cljs.core.Reduced.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "val", "val", 1769233139, null)], null);
};
cljs.core.Reduced.cljs$lang$type = true;
cljs.core.Reduced.cljs$lang$ctorStr = "cljs.core/Reduced";
cljs.core.Reduced.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/Reduced");
};
cljs.core.__GT_Reduced = function cljs$core$__GT_Reduced(val) {
  return new cljs.core.Reduced(val);
};
cljs.core.reduced = function cljs$core$reduced(x) {
  return new cljs.core.Reduced(x);
};
cljs.core.reduced_QMARK_ = function cljs$core$reduced_QMARK_(r) {
  return r instanceof cljs.core.Reduced;
};
cljs.core.ensure_reduced = function cljs$core$ensure_reduced(x) {
  if (cljs.core.reduced_QMARK_(x)) {
    return x;
  } else {
    return cljs.core.reduced(x);
  }
};
cljs.core.unreduced = function cljs$core$unreduced(x) {
  if (cljs.core.reduced_QMARK_(x)) {
    var G__14212 = x;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__14212) : cljs.core.deref.call(null, G__14212);
  } else {
    return x;
  }
};
cljs.core.deref = function cljs$core$deref(o) {
  return cljs.core._deref(o);
};
cljs.core.ci_reduce = function cljs$core$ci_reduce() {
  var G__14214 = arguments.length;
  switch(G__14214) {
    case 2:
      return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2 = function(cicoll, f) {
  var cnt = cljs.core._count(cicoll);
  if (cnt === 0) {
    return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
  } else {
    var val = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, 0);
    var n = 1;
    while (true) {
      if (n < cnt) {
        var nval = function() {
          var G__14215 = val;
          var G__14216 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, n);
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__14215, G__14216) : f.call(null, G__14215, G__14216);
        }();
        if (cljs.core.reduced_QMARK_(nval)) {
          return cljs.core.deref(nval);
        } else {
          var G__14222 = nval;
          var G__14223 = n + 1;
          val = G__14222;
          n = G__14223;
          continue;
        }
      } else {
        return val;
      }
      break;
    }
  }
};
cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3 = function(cicoll, f, val) {
  var cnt = cljs.core._count(cicoll);
  var val__$1 = val;
  var n = 0;
  while (true) {
    if (n < cnt) {
      var nval = function() {
        var G__14217 = val__$1;
        var G__14218 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, n);
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__14217, G__14218) : f.call(null, G__14217, G__14218);
      }();
      if (cljs.core.reduced_QMARK_(nval)) {
        return cljs.core.deref(nval);
      } else {
        var G__14224 = nval;
        var G__14225 = n + 1;
        val__$1 = G__14224;
        n = G__14225;
        continue;
      }
    } else {
      return val__$1;
    }
    break;
  }
};
cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$4 = function(cicoll, f, val, idx) {
  var cnt = cljs.core._count(cicoll);
  var val__$1 = val;
  var n = idx;
  while (true) {
    if (n < cnt) {
      var nval = function() {
        var G__14219 = val__$1;
        var G__14220 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, n);
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__14219, G__14220) : f.call(null, G__14219, G__14220);
      }();
      if (cljs.core.reduced_QMARK_(nval)) {
        return cljs.core.deref(nval);
      } else {
        var G__14226 = nval;
        var G__14227 = n + 1;
        val__$1 = G__14226;
        n = G__14227;
        continue;
      }
    } else {
      return val__$1;
    }
    break;
  }
};
cljs.core.ci_reduce.cljs$lang$maxFixedArity = 4;
cljs.core.array_reduce = function cljs$core$array_reduce() {
  var G__14229 = arguments.length;
  switch(G__14229) {
    case 2:
      return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2 = function(arr, f) {
  var cnt = arr.length;
  if (arr.length === 0) {
    return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
  } else {
    var val = arr[0];
    var n = 1;
    while (true) {
      if (n < cnt) {
        var nval = function() {
          var G__14230 = val;
          var G__14231 = arr[n];
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__14230, G__14231) : f.call(null, G__14230, G__14231);
        }();
        if (cljs.core.reduced_QMARK_(nval)) {
          return cljs.core.deref(nval);
        } else {
          var G__14237 = nval;
          var G__14238 = n + 1;
          val = G__14237;
          n = G__14238;
          continue;
        }
      } else {
        return val;
      }
      break;
    }
  }
};
cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3 = function(arr, f, val) {
  var cnt = arr.length;
  var val__$1 = val;
  var n = 0;
  while (true) {
    if (n < cnt) {
      var nval = function() {
        var G__14232 = val__$1;
        var G__14233 = arr[n];
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__14232, G__14233) : f.call(null, G__14232, G__14233);
      }();
      if (cljs.core.reduced_QMARK_(nval)) {
        return cljs.core.deref(nval);
      } else {
        var G__14239 = nval;
        var G__14240 = n + 1;
        val__$1 = G__14239;
        n = G__14240;
        continue;
      }
    } else {
      return val__$1;
    }
    break;
  }
};
cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4 = function(arr, f, val, idx) {
  var cnt = arr.length;
  var val__$1 = val;
  var n = idx;
  while (true) {
    if (n < cnt) {
      var nval = function() {
        var G__14234 = val__$1;
        var G__14235 = arr[n];
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__14234, G__14235) : f.call(null, G__14234, G__14235);
      }();
      if (cljs.core.reduced_QMARK_(nval)) {
        return cljs.core.deref(nval);
      } else {
        var G__14241 = nval;
        var G__14242 = n + 1;
        val__$1 = G__14241;
        n = G__14242;
        continue;
      }
    } else {
      return val__$1;
    }
    break;
  }
};
cljs.core.array_reduce.cljs$lang$maxFixedArity = 4;
cljs.core.counted_QMARK_ = function cljs$core$counted_QMARK_(x) {
  var G__14244 = x;
  if (G__14244) {
    var bit__4983__auto__ = G__14244.cljs$lang$protocol_mask$partition0$ & 2;
    if (bit__4983__auto__ || G__14244.cljs$core$ICounted$) {
      return true;
    } else {
      if (!G__14244.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ICounted, G__14244);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ICounted, G__14244);
  }
};
cljs.core.indexed_QMARK_ = function cljs$core$indexed_QMARK_(x) {
  var G__14246 = x;
  if (G__14246) {
    var bit__4983__auto__ = G__14246.cljs$lang$protocol_mask$partition0$ & 16;
    if (bit__4983__auto__ || G__14246.cljs$core$IIndexed$) {
      return true;
    } else {
      if (!G__14246.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, G__14246);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, G__14246);
  }
};
cljs.core.IndexedSeqIterator = function(arr, i) {
  this.arr = arr;
  this.i = i;
};
cljs.core.IndexedSeqIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.arr.length;
};
cljs.core.IndexedSeqIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.arr[self__.i];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.IndexedSeqIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), new cljs.core.Symbol(null, "i", "i", 253690212, null)], null);
};
cljs.core.IndexedSeqIterator.cljs$lang$type = true;
cljs.core.IndexedSeqIterator.cljs$lang$ctorStr = "cljs.core/IndexedSeqIterator";
cljs.core.IndexedSeqIterator.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/IndexedSeqIterator");
};
cljs.core.__GT_IndexedSeqIterator = function cljs$core$__GT_IndexedSeqIterator(arr, i) {
  return new cljs.core.IndexedSeqIterator(arr, i);
};
cljs.core.IndexedSeq = function(arr, i) {
  this.arr = arr;
  this.i = i;
  this.cljs$lang$protocol_mask$partition0$ = 166199550;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.IndexedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.IndexedSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return not_found;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIterable$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.IndexedSeqIterator(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.IndexedSeq(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$INext$_next$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  var x__4621__auto__ = 0;
  var y__4622__auto__ = self__.arr.length - self__.i;
  return x__4621__auto__ > y__4622__auto__ ? x__4621__auto__ : y__4622__auto__;
};
cljs.core.IndexedSeq.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var c = cljs.core._count(coll__$1);
  if (c > 0) {
    return new cljs.core.RSeq(coll__$1, c - 1, null);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  var G__14247 = coll__$1;
  var G__14248 = other;
  return cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2 ? cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2(G__14247, G__14248) : cljs.core.equiv_sequential.call(null, G__14247, G__14248);
};
cljs.core.IndexedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, self__.arr[self__.i], self__.i + 1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, start, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr[self__.i];
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.i < self__.arr.length) {
    return this$__$1;
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  var G__14249 = o;
  var G__14250 = coll__$1;
  return cljs.core.cons.cljs$core$IFn$_invoke$arity$2 ? cljs.core.cons.cljs$core$IFn$_invoke$arity$2(G__14249, G__14250) : cljs.core.cons.call(null, G__14249, G__14250);
};
cljs.core.IndexedSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), new cljs.core.Symbol(null, "i", "i", 253690212, null)], null);
};
cljs.core.IndexedSeq.cljs$lang$type = true;
cljs.core.IndexedSeq.cljs$lang$ctorStr = "cljs.core/IndexedSeq";
cljs.core.IndexedSeq.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/IndexedSeq");
};
cljs.core.__GT_IndexedSeq = function cljs$core$__GT_IndexedSeq(arr, i) {
  return new cljs.core.IndexedSeq(arr, i);
};
cljs.core.IndexedSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5285__auto__ = this;
  return cljs.core.es6_iterator(this__5285__auto__);
};
cljs.core.prim_seq = function cljs$core$prim_seq() {
  var G__14252 = arguments.length;
  switch(G__14252) {
    case 1:
      return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$1 = function(prim) {
  return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(prim, 0);
};
cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2 = function(prim, i) {
  if (i < prim.length) {
    return new cljs.core.IndexedSeq(prim, i);
  } else {
    return null;
  }
};
cljs.core.prim_seq.cljs$lang$maxFixedArity = 2;
cljs.core.array_seq = function cljs$core$array_seq() {
  var G__14255 = arguments.length;
  switch(G__14255) {
    case 1:
      return cljs.core.array_seq.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.array_seq.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.array_seq.cljs$core$IFn$_invoke$arity$1 = function(array) {
  return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(array, 0);
};
cljs.core.array_seq.cljs$core$IFn$_invoke$arity$2 = function(array, i) {
  return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(array, i);
};
cljs.core.array_seq.cljs$lang$maxFixedArity = 2;
cljs.core.RSeq = function(ci, i, meta) {
  this.ci = ci;
  this.i = i;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.RSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.RSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.RSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.RSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, self__.meta);
};
cljs.core.RSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return null;
  }
};
cljs.core.RSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.i + 1;
};
cljs.core.RSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  var G__14257 = coll__$1;
  var G__14258 = other;
  return cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2 ? cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2(G__14257, G__14258) : cljs.core.equiv_sequential.call(null, G__14257, G__14258);
};
cljs.core.RSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var G__14259 = cljs.core.List.EMPTY;
  var G__14260 = self__.meta;
  return cljs.core.with_meta.cljs$core$IFn$_invoke$arity$2 ? cljs.core.with_meta.cljs$core$IFn$_invoke$arity$2(G__14259, G__14260) : cljs.core.with_meta.call(null, G__14259, G__14260);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(col, f) {
  var self__ = this;
  var col__$1 = this;
  var G__14261 = f;
  var G__14262 = col__$1;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2 ? cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(G__14261, G__14262) : cljs.core.seq_reduce.call(null, G__14261, G__14262);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(col, f, start) {
  var self__ = this;
  var col__$1 = this;
  var G__14263 = f;
  var G__14264 = start;
  var G__14265 = col__$1;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(G__14263, G__14264, G__14265) : cljs.core.seq_reduce.call(null, G__14263, G__14264, G__14265);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.ci, self__.i);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.RSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.RSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, new_meta);
};
cljs.core.RSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  var G__14266 = o;
  var G__14267 = coll__$1;
  return cljs.core.cons.cljs$core$IFn$_invoke$arity$2 ? cljs.core.cons.cljs$core$IFn$_invoke$arity$2(G__14266, G__14267) : cljs.core.cons.call(null, G__14266, G__14267);
};
cljs.core.RSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "ci", "ci", 2049808339, null), new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.Symbol(null, "meta", "meta", -1154898805, null)], null);
};
cljs.core.RSeq.cljs$lang$type = true;
cljs.core.RSeq.cljs$lang$ctorStr = "cljs.core/RSeq";
cljs.core.RSeq.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/RSeq");
};
cljs.core.__GT_RSeq = function cljs$core$__GT_RSeq(ci, i, meta) {
  return new cljs.core.RSeq(ci, i, meta);
};
cljs.core.RSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5285__auto__ = this;
  return cljs.core.es6_iterator(this__5285__auto__);
};
cljs.core.second = function cljs$core$second(coll) {
  return cljs.core.first(cljs.core.next(coll));
};
cljs.core.ffirst = function cljs$core$ffirst(coll) {
  return cljs.core.first(cljs.core.first(coll));
};
cljs.core.nfirst = function cljs$core$nfirst(coll) {
  return cljs.core.next(cljs.core.first(coll));
};
cljs.core.fnext = function cljs$core$fnext(coll) {
  return cljs.core.first(cljs.core.next(coll));
};
cljs.core.nnext = function cljs$core$nnext(coll) {
  return cljs.core.next(cljs.core.next(coll));
};
cljs.core.last = function cljs$core$last(s) {
  while (true) {
    var sn = cljs.core.next(s);
    if (!(sn == null)) {
      var G__14268 = sn;
      s = G__14268;
      continue;
    } else {
      return cljs.core.first(s);
    }
    break;
  }
};
cljs.core.IEquiv["_"] = true;
cljs.core._equiv["_"] = function(x, o) {
  return x === o;
};
cljs.core.conj = function cljs$core$conj() {
  var G__14273 = arguments.length;
  switch(G__14273) {
    case 0:
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5360__auto__);
  }
};
cljs.core.conj.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.conj.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return coll;
};
cljs.core.conj.cljs$core$IFn$_invoke$arity$2 = function(coll, x) {
  if (!(coll == null)) {
    return cljs.core._conj(coll, x);
  } else {
    return cljs.core._conj(cljs.core.List.EMPTY, x);
  }
};
cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic = function(coll, x, xs) {
  while (true) {
    if (cljs.core.truth_(xs)) {
      var G__14275 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(coll, x);
      var G__14276 = cljs.core.first(xs);
      var G__14277 = cljs.core.next(xs);
      coll = G__14275;
      x = G__14276;
      xs = G__14277;
      continue;
    } else {
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(coll, x);
    }
    break;
  }
};
cljs.core.conj.cljs$lang$applyTo = function(seq14269) {
  var G__14270 = cljs.core.first(seq14269);
  var seq14269__$1 = cljs.core.next(seq14269);
  var G__14271 = cljs.core.first(seq14269__$1);
  var seq14269__$2 = cljs.core.next(seq14269__$1);
  return cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(G__14270, G__14271, seq14269__$2);
};
cljs.core.conj.cljs$lang$maxFixedArity = 2;
cljs.core.empty = function cljs$core$empty(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._empty(coll);
  }
};
cljs.core.accumulating_seq_count = function cljs$core$accumulating_seq_count(coll) {
  var s = cljs.core.seq(coll);
  var acc = 0;
  while (true) {
    if (cljs.core.counted_QMARK_(s)) {
      return acc + cljs.core._count(s);
    } else {
      var G__14278 = cljs.core.next(s);
      var G__14279 = acc + 1;
      s = G__14278;
      acc = G__14279;
      continue;
    }
    break;
  }
};
cljs.core.count = function cljs$core$count(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__14281 = coll;
      if (G__14281) {
        var bit__4976__auto__ = G__14281.cljs$lang$protocol_mask$partition0$ & 2;
        if (bit__4976__auto__ || G__14281.cljs$core$ICounted$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$ICounted$_count$arity$1(null);
    } else {
      if (cljs.core.array_QMARK_(coll)) {
        return coll.length;
      } else {
        if (typeof coll === "string") {
          return coll.length;
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.ICounted, coll)) {
            return cljs.core._count(coll);
          } else {
            return cljs.core.accumulating_seq_count(coll);
          }
        }
      }
    }
  } else {
    return 0;
  }
};
cljs.core.linear_traversal_nth = function cljs$core$linear_traversal_nth() {
  var G__14283 = arguments.length;
  switch(G__14283) {
    case 2:
      return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$2 = function(coll, n) {
  while (true) {
    if (coll == null) {
      throw new Error("Index out of bounds");
    } else {
      if (n === 0) {
        if (cljs.core.seq(coll)) {
          return cljs.core.first(coll);
        } else {
          throw new Error("Index out of bounds");
        }
      } else {
        if (cljs.core.indexed_QMARK_(coll)) {
          return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll, n);
        } else {
          if (cljs.core.seq(coll)) {
            var G__14285 = cljs.core.next(coll);
            var G__14286 = n - 1;
            coll = G__14285;
            n = G__14286;
            continue;
          } else {
            throw new Error("Index out of bounds");
          }
        }
      }
    }
    break;
  }
};
cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$3 = function(coll, n, not_found) {
  while (true) {
    if (coll == null) {
      return not_found;
    } else {
      if (n === 0) {
        if (cljs.core.seq(coll)) {
          return cljs.core.first(coll);
        } else {
          return not_found;
        }
      } else {
        if (cljs.core.indexed_QMARK_(coll)) {
          return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll, n, not_found);
        } else {
          if (cljs.core.seq(coll)) {
            var G__14287 = cljs.core.next(coll);
            var G__14288 = n - 1;
            var G__14289 = not_found;
            coll = G__14287;
            n = G__14288;
            not_found = G__14289;
            continue;
          } else {
            return not_found;
          }
        }
      }
    }
    break;
  }
};
cljs.core.linear_traversal_nth.cljs$lang$maxFixedArity = 3;
cljs.core.nth = function cljs$core$nth() {
  var G__14291 = arguments.length;
  switch(G__14291) {
    case 2:
      return cljs.core.nth.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.nth.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.nth.cljs$core$IFn$_invoke$arity$2 = function(coll, n) {
  if (!(typeof n === "number")) {
    throw new Error("index argument to nth must be a number");
  } else {
    if (coll == null) {
      return coll;
    } else {
      if (function() {
        var G__14292 = coll;
        if (G__14292) {
          var bit__4976__auto__ = G__14292.cljs$lang$protocol_mask$partition0$ & 16;
          if (bit__4976__auto__ || G__14292.cljs$core$IIndexed$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return coll.cljs$core$IIndexed$_nth$arity$2(null, n);
      } else {
        if (cljs.core.array_QMARK_(coll)) {
          if (n < coll.length) {
            return coll[n];
          } else {
            return null;
          }
        } else {
          if (typeof coll === "string") {
            if (n < coll.length) {
              return coll[n];
            } else {
              return null;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, coll)) {
              return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll, n);
            } else {
              if (function() {
                var G__14293 = coll;
                if (G__14293) {
                  var bit__4983__auto__ = G__14293.cljs$lang$protocol_mask$partition0$ & 64;
                  if (bit__4983__auto__ || G__14293.cljs$core$ISeq$) {
                    return true;
                  } else {
                    if (!G__14293.cljs$lang$protocol_mask$partition0$) {
                      return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__14293);
                    } else {
                      return false;
                    }
                  }
                } else {
                  return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__14293);
                }
              }()) {
                return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$2(coll, n);
              } else {
                throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str(cljs.core.type(coll)))].join(""));
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.nth.cljs$core$IFn$_invoke$arity$3 = function(coll, n, not_found) {
  if (!(typeof n === "number")) {
    throw new Error("index argument to nth must be a number.");
  } else {
    if (coll == null) {
      return not_found;
    } else {
      if (function() {
        var G__14294 = coll;
        if (G__14294) {
          var bit__4976__auto__ = G__14294.cljs$lang$protocol_mask$partition0$ & 16;
          if (bit__4976__auto__ || G__14294.cljs$core$IIndexed$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return coll.cljs$core$IIndexed$_nth$arity$3(null, n, not_found);
      } else {
        if (cljs.core.array_QMARK_(coll)) {
          if (n < coll.length) {
            return coll[n];
          } else {
            return not_found;
          }
        } else {
          if (typeof coll === "string") {
            if (n < coll.length) {
              return coll[n];
            } else {
              return not_found;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, coll)) {
              return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll, n);
            } else {
              if (function() {
                var G__14295 = coll;
                if (G__14295) {
                  var bit__4983__auto__ = G__14295.cljs$lang$protocol_mask$partition0$ & 64;
                  if (bit__4983__auto__ || G__14295.cljs$core$ISeq$) {
                    return true;
                  } else {
                    if (!G__14295.cljs$lang$protocol_mask$partition0$) {
                      return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__14295);
                    } else {
                      return false;
                    }
                  }
                } else {
                  return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__14295);
                }
              }()) {
                return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$3(coll, n, not_found);
              } else {
                throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str(cljs.core.type(coll)))].join(""));
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.nth.cljs$lang$maxFixedArity = 3;
cljs.core.nthrest = function cljs$core$nthrest(coll, n) {
  var n__$1 = n;
  var xs = coll;
  while (true) {
    if (n__$1 > 0 && cljs.core.seq(xs)) {
      var G__14297 = n__$1 - 1;
      var G__14298 = cljs.core.rest(xs);
      n__$1 = G__14297;
      xs = G__14298;
      continue;
    } else {
      return xs;
    }
    break;
  }
};
cljs.core.get = function cljs$core$get() {
  var G__14300 = arguments.length;
  switch(G__14300) {
    case 2:
      return cljs.core.get.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.get.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.get.cljs$core$IFn$_invoke$arity$2 = function(o, k) {
  if (o == null) {
    return null;
  } else {
    if (function() {
      var G__14301 = o;
      if (G__14301) {
        var bit__4976__auto__ = G__14301.cljs$lang$protocol_mask$partition0$ & 256;
        if (bit__4976__auto__ || G__14301.cljs$core$ILookup$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$2(null, k);
    } else {
      if (cljs.core.array_QMARK_(o)) {
        if (k < o.length) {
          return o[k | 0];
        } else {
          return null;
        }
      } else {
        if (typeof o === "string") {
          if (k < o.length) {
            return o[k | 0];
          } else {
            return null;
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, o)) {
            return cljs.core._lookup.cljs$core$IFn$_invoke$arity$2(o, k);
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.core.get.cljs$core$IFn$_invoke$arity$3 = function(o, k, not_found) {
  if (!(o == null)) {
    if (function() {
      var G__14302 = o;
      if (G__14302) {
        var bit__4976__auto__ = G__14302.cljs$lang$protocol_mask$partition0$ & 256;
        if (bit__4976__auto__ || G__14302.cljs$core$ILookup$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
    } else {
      if (cljs.core.array_QMARK_(o)) {
        if (k < o.length) {
          return o[k];
        } else {
          return not_found;
        }
      } else {
        if (typeof o === "string") {
          if (k < o.length) {
            return o[k];
          } else {
            return not_found;
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, o)) {
            return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(o, k, not_found);
          } else {
            return not_found;
          }
        }
      }
    }
  } else {
    return not_found;
  }
};
cljs.core.get.cljs$lang$maxFixedArity = 3;
cljs.core.assoc = function cljs$core$assoc() {
  var G__14309 = arguments.length;
  switch(G__14309) {
    case 3:
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 3), 0);
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5360__auto__);
  }
};
cljs.core.assoc.cljs$core$IFn$_invoke$arity$3 = function(coll, k, v) {
  if (!(coll == null)) {
    return cljs.core._assoc(coll, k, v);
  } else {
    return cljs.core.PersistentHashMap.fromArrays([k], [v]);
  }
};
cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic = function(coll, k, v, kvs) {
  while (true) {
    var ret = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(coll, k, v);
    if (cljs.core.truth_(kvs)) {
      var G__14311 = ret;
      var G__14312 = cljs.core.first(kvs);
      var G__14313 = cljs.core.second(kvs);
      var G__14314 = cljs.core.nnext(kvs);
      coll = G__14311;
      k = G__14312;
      v = G__14313;
      kvs = G__14314;
      continue;
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.assoc.cljs$lang$applyTo = function(seq14304) {
  var G__14305 = cljs.core.first(seq14304);
  var seq14304__$1 = cljs.core.next(seq14304);
  var G__14306 = cljs.core.first(seq14304__$1);
  var seq14304__$2 = cljs.core.next(seq14304__$1);
  var G__14307 = cljs.core.first(seq14304__$2);
  var seq14304__$3 = cljs.core.next(seq14304__$2);
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(G__14305, G__14306, G__14307, seq14304__$3);
};
cljs.core.assoc.cljs$lang$maxFixedArity = 3;
cljs.core.dissoc = function cljs$core$dissoc() {
  var G__14319 = arguments.length;
  switch(G__14319) {
    case 1:
      return cljs.core.dissoc.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5360__auto__);
  }
};
cljs.core.dissoc.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return coll;
};
cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2 = function(coll, k) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._dissoc(coll, k);
  }
};
cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic = function(coll, k, ks) {
  while (true) {
    if (coll == null) {
      return null;
    } else {
      var ret = cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(coll, k);
      if (cljs.core.truth_(ks)) {
        var G__14321 = ret;
        var G__14322 = cljs.core.first(ks);
        var G__14323 = cljs.core.next(ks);
        coll = G__14321;
        k = G__14322;
        ks = G__14323;
        continue;
      } else {
        return ret;
      }
    }
    break;
  }
};
cljs.core.dissoc.cljs$lang$applyTo = function(seq14315) {
  var G__14316 = cljs.core.first(seq14315);
  var seq14315__$1 = cljs.core.next(seq14315);
  var G__14317 = cljs.core.first(seq14315__$1);
  var seq14315__$2 = cljs.core.next(seq14315__$1);
  return cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic(G__14316, G__14317, seq14315__$2);
};
cljs.core.dissoc.cljs$lang$maxFixedArity = 2;
cljs.core.fn_QMARK_ = function cljs$core$fn_QMARK_(f) {
  var or__4309__auto__ = function() {
    var G__14328 = f;
    return goog.isFunction(G__14328);
  }();
  if (cljs.core.truth_(or__4309__auto__)) {
    return or__4309__auto__;
  } else {
    var G__14329 = f;
    if (G__14329) {
      var bit__4983__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__4309__auto____$1 = bit__4983__auto__;
        if (cljs.core.truth_(or__4309__auto____$1)) {
          return or__4309__auto____$1;
        } else {
          return G__14329.cljs$core$Fn$;
        }
      }())) {
        return true;
      } else {
        if (!G__14329.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.Fn, G__14329);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.Fn, G__14329);
    }
  }
};
cljs.core.MetaFn = function(afn, meta) {
  this.afn = afn;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 393217;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.MetaFn.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.MetaFn.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.MetaFn(self__.afn, new_meta);
};
cljs.core.MetaFn.prototype.cljs$core$Fn$ = true;
cljs.core.MetaFn.prototype.call = function() {
  var G__14795 = null;
  var G__14795__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$0 ? self__.afn.cljs$core$IFn$_invoke$arity$0() : self__.afn.call(null);
  };
  var G__14795__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__14331 = a;
    return self__.afn.cljs$core$IFn$_invoke$arity$1 ? self__.afn.cljs$core$IFn$_invoke$arity$1(G__14331) : self__.afn.call(null, G__14331);
  };
  var G__14795__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__14332 = a;
    var G__14333 = b;
    return self__.afn.cljs$core$IFn$_invoke$arity$2 ? self__.afn.cljs$core$IFn$_invoke$arity$2(G__14332, G__14333) : self__.afn.call(null, G__14332, G__14333);
  };
  var G__14795__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__14334 = a;
    var G__14335 = b;
    var G__14336 = c;
    return self__.afn.cljs$core$IFn$_invoke$arity$3 ? self__.afn.cljs$core$IFn$_invoke$arity$3(G__14334, G__14335, G__14336) : self__.afn.call(null, G__14334, G__14335, G__14336);
  };
  var G__14795__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__14337 = a;
    var G__14338 = b;
    var G__14339 = c;
    var G__14340 = d;
    return self__.afn.cljs$core$IFn$_invoke$arity$4 ? self__.afn.cljs$core$IFn$_invoke$arity$4(G__14337, G__14338, G__14339, G__14340) : self__.afn.call(null, G__14337, G__14338, G__14339, G__14340);
  };
  var G__14795__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__14341 = a;
    var G__14342 = b;
    var G__14343 = c;
    var G__14344 = d;
    var G__14345 = e;
    return self__.afn.cljs$core$IFn$_invoke$arity$5 ? self__.afn.cljs$core$IFn$_invoke$arity$5(G__14341, G__14342, G__14343, G__14344, G__14345) : self__.afn.call(null, G__14341, G__14342, G__14343, G__14344, G__14345);
  };
  var G__14795__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__14346 = a;
    var G__14347 = b;
    var G__14348 = c;
    var G__14349 = d;
    var G__14350 = e;
    var G__14351 = f;
    return self__.afn.cljs$core$IFn$_invoke$arity$6 ? self__.afn.cljs$core$IFn$_invoke$arity$6(G__14346, G__14347, G__14348, G__14349, G__14350, G__14351) : self__.afn.call(null, G__14346, G__14347, G__14348, G__14349, G__14350, G__14351);
  };
  var G__14795__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__14352 = a;
    var G__14353 = b;
    var G__14354 = c;
    var G__14355 = d;
    var G__14356 = e;
    var G__14357 = f;
    var G__14358 = g;
    return self__.afn.cljs$core$IFn$_invoke$arity$7 ? self__.afn.cljs$core$IFn$_invoke$arity$7(G__14352, G__14353, G__14354, G__14355, G__14356, G__14357, G__14358) : self__.afn.call(null, G__14352, G__14353, G__14354, G__14355, G__14356, G__14357, G__14358);
  };
  var G__14795__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__14359 = a;
    var G__14360 = b;
    var G__14361 = c;
    var G__14362 = d;
    var G__14363 = e;
    var G__14364 = f;
    var G__14365 = g;
    var G__14366 = h;
    return self__.afn.cljs$core$IFn$_invoke$arity$8 ? self__.afn.cljs$core$IFn$_invoke$arity$8(G__14359, G__14360, G__14361, G__14362, G__14363, G__14364, G__14365, G__14366) : self__.afn.call(null, G__14359, G__14360, G__14361, G__14362, G__14363, G__14364, G__14365, G__14366);
  };
  var G__14795__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__14367 = a;
    var G__14368 = b;
    var G__14369 = c;
    var G__14370 = d;
    var G__14371 = e;
    var G__14372 = f;
    var G__14373 = g;
    var G__14374 = h;
    var G__14375 = i;
    return self__.afn.cljs$core$IFn$_invoke$arity$9 ? self__.afn.cljs$core$IFn$_invoke$arity$9(G__14367, G__14368, G__14369, G__14370, G__14371, G__14372, G__14373, G__14374, G__14375) : self__.afn.call(null, G__14367, G__14368, G__14369, G__14370, G__14371, G__14372, G__14373, G__14374, G__14375);
  };
  var G__14795__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__14376 = a;
    var G__14377 = b;
    var G__14378 = c;
    var G__14379 = d;
    var G__14380 = e;
    var G__14381 = f;
    var G__14382 = g;
    var G__14383 = h;
    var G__14384 = i;
    var G__14385 = j;
    return self__.afn.cljs$core$IFn$_invoke$arity$10 ? self__.afn.cljs$core$IFn$_invoke$arity$10(G__14376, G__14377, G__14378, G__14379, G__14380, G__14381, G__14382, G__14383, G__14384, G__14385) : self__.afn.call(null, G__14376, G__14377, G__14378, G__14379, G__14380, G__14381, G__14382, G__14383, G__14384, G__14385);
  };
  var G__14795__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__14386 = a;
    var G__14387 = b;
    var G__14388 = c;
    var G__14389 = d;
    var G__14390 = e;
    var G__14391 = f;
    var G__14392 = g;
    var G__14393 = h;
    var G__14394 = i;
    var G__14395 = j;
    var G__14396 = k;
    return self__.afn.cljs$core$IFn$_invoke$arity$11 ? self__.afn.cljs$core$IFn$_invoke$arity$11(G__14386, G__14387, G__14388, G__14389, G__14390, G__14391, G__14392, G__14393, G__14394, G__14395, G__14396) : self__.afn.call(null, G__14386, G__14387, G__14388, G__14389, G__14390, G__14391, G__14392, G__14393, G__14394, G__14395, G__14396);
  };
  var G__14795__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__14397 = a;
    var G__14398 = b;
    var G__14399 = c;
    var G__14400 = d;
    var G__14401 = e;
    var G__14402 = f;
    var G__14403 = g;
    var G__14404 = h;
    var G__14405 = i;
    var G__14406 = j;
    var G__14407 = k;
    var G__14408 = l;
    return self__.afn.cljs$core$IFn$_invoke$arity$12 ? self__.afn.cljs$core$IFn$_invoke$arity$12(G__14397, G__14398, G__14399, G__14400, G__14401, G__14402, G__14403, G__14404, G__14405, G__14406, G__14407, G__14408) : self__.afn.call(null, G__14397, G__14398, G__14399, G__14400, G__14401, G__14402, G__14403, G__14404, G__14405, G__14406, G__14407, G__14408);
  };
  var G__14795__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__14409 = a;
    var G__14410 = b;
    var G__14411 = c;
    var G__14412 = d;
    var G__14413 = e;
    var G__14414 = f;
    var G__14415 = g;
    var G__14416 = h;
    var G__14417 = i;
    var G__14418 = j;
    var G__14419 = k;
    var G__14420 = l;
    var G__14421 = m;
    return self__.afn.cljs$core$IFn$_invoke$arity$13 ? self__.afn.cljs$core$IFn$_invoke$arity$13(G__14409, G__14410, G__14411, G__14412, G__14413, G__14414, G__14415, G__14416, G__14417, G__14418, G__14419, G__14420, G__14421) : self__.afn.call(null, G__14409, G__14410, G__14411, G__14412, G__14413, G__14414, G__14415, G__14416, G__14417, G__14418, G__14419, G__14420, G__14421);
  };
  var G__14795__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__14422 = a;
    var G__14423 = b;
    var G__14424 = c;
    var G__14425 = d;
    var G__14426 = e;
    var G__14427 = f;
    var G__14428 = g;
    var G__14429 = h;
    var G__14430 = i;
    var G__14431 = j;
    var G__14432 = k;
    var G__14433 = l;
    var G__14434 = m;
    var G__14435 = n;
    return self__.afn.cljs$core$IFn$_invoke$arity$14 ? self__.afn.cljs$core$IFn$_invoke$arity$14(G__14422, G__14423, G__14424, G__14425, G__14426, G__14427, G__14428, G__14429, G__14430, G__14431, G__14432, G__14433, G__14434, G__14435) : self__.afn.call(null, G__14422, G__14423, G__14424, G__14425, G__14426, G__14427, G__14428, G__14429, G__14430, G__14431, G__14432, G__14433, G__14434, G__14435);
  };
  var G__14795__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__14436 = a;
    var G__14437 = b;
    var G__14438 = c;
    var G__14439 = d;
    var G__14440 = e;
    var G__14441 = f;
    var G__14442 = g;
    var G__14443 = h;
    var G__14444 = i;
    var G__14445 = j;
    var G__14446 = k;
    var G__14447 = l;
    var G__14448 = m;
    var G__14449 = n;
    var G__14450 = o;
    return self__.afn.cljs$core$IFn$_invoke$arity$15 ? self__.afn.cljs$core$IFn$_invoke$arity$15(G__14436, G__14437, G__14438, G__14439, G__14440, G__14441, G__14442, G__14443, G__14444, G__14445, G__14446, G__14447, G__14448, G__14449, G__14450) : self__.afn.call(null, G__14436, G__14437, G__14438, G__14439, G__14440, G__14441, G__14442, G__14443, G__14444, G__14445, G__14446, G__14447, G__14448, G__14449, G__14450);
  };
  var G__14795__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__14451 = a;
    var G__14452 = b;
    var G__14453 = c;
    var G__14454 = d;
    var G__14455 = e;
    var G__14456 = f;
    var G__14457 = g;
    var G__14458 = h;
    var G__14459 = i;
    var G__14460 = j;
    var G__14461 = k;
    var G__14462 = l;
    var G__14463 = m;
    var G__14464 = n;
    var G__14465 = o;
    var G__14466 = p;
    return self__.afn.cljs$core$IFn$_invoke$arity$16 ? self__.afn.cljs$core$IFn$_invoke$arity$16(G__14451, G__14452, G__14453, G__14454, G__14455, G__14456, G__14457, G__14458, G__14459, G__14460, G__14461, G__14462, G__14463, G__14464, G__14465, G__14466) : self__.afn.call(null, G__14451, G__14452, G__14453, G__14454, G__14455, G__14456, G__14457, G__14458, G__14459, G__14460, G__14461, G__14462, G__14463, G__14464, G__14465, G__14466);
  };
  var G__14795__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__14467 = a;
    var G__14468 = b;
    var G__14469 = c;
    var G__14470 = d;
    var G__14471 = e;
    var G__14472 = f;
    var G__14473 = g;
    var G__14474 = h;
    var G__14475 = i;
    var G__14476 = j;
    var G__14477 = k;
    var G__14478 = l;
    var G__14479 = m;
    var G__14480 = n;
    var G__14481 = o;
    var G__14482 = p;
    var G__14483 = q;
    return self__.afn.cljs$core$IFn$_invoke$arity$17 ? self__.afn.cljs$core$IFn$_invoke$arity$17(G__14467, G__14468, G__14469, G__14470, G__14471, G__14472, G__14473, G__14474, G__14475, G__14476, G__14477, G__14478, G__14479, G__14480, G__14481, G__14482, G__14483) : self__.afn.call(null, G__14467, G__14468, G__14469, G__14470, G__14471, G__14472, G__14473, G__14474, G__14475, G__14476, G__14477, G__14478, G__14479, G__14480, G__14481, G__14482, G__14483);
  };
  var G__14795__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__14484 = a;
    var G__14485 = b;
    var G__14486 = c;
    var G__14487 = d;
    var G__14488 = e;
    var G__14489 = f;
    var G__14490 = g;
    var G__14491 = h;
    var G__14492 = i;
    var G__14493 = j;
    var G__14494 = k;
    var G__14495 = l;
    var G__14496 = m;
    var G__14497 = n;
    var G__14498 = o;
    var G__14499 = p;
    var G__14500 = q;
    var G__14501 = r;
    return self__.afn.cljs$core$IFn$_invoke$arity$18 ? self__.afn.cljs$core$IFn$_invoke$arity$18(G__14484, G__14485, G__14486, G__14487, G__14488, G__14489, G__14490, G__14491, G__14492, G__14493, G__14494, G__14495, G__14496, G__14497, G__14498, G__14499, G__14500, G__14501) : self__.afn.call(null, G__14484, G__14485, G__14486, G__14487, G__14488, G__14489, G__14490, G__14491, G__14492, G__14493, G__14494, G__14495, G__14496, G__14497, G__14498, G__14499, G__14500, G__14501);
  };
  var G__14795__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__14502 = a;
    var G__14503 = b;
    var G__14504 = c;
    var G__14505 = d;
    var G__14506 = e;
    var G__14507 = f;
    var G__14508 = g;
    var G__14509 = h;
    var G__14510 = i;
    var G__14511 = j;
    var G__14512 = k;
    var G__14513 = l;
    var G__14514 = m;
    var G__14515 = n;
    var G__14516 = o;
    var G__14517 = p;
    var G__14518 = q;
    var G__14519 = r;
    var G__14520 = s;
    return self__.afn.cljs$core$IFn$_invoke$arity$19 ? self__.afn.cljs$core$IFn$_invoke$arity$19(G__14502, G__14503, G__14504, G__14505, G__14506, G__14507, G__14508, G__14509, G__14510, G__14511, G__14512, G__14513, G__14514, G__14515, G__14516, G__14517, G__14518, G__14519, G__14520) : self__.afn.call(null, G__14502, G__14503, G__14504, G__14505, G__14506, G__14507, G__14508, G__14509, G__14510, G__14511, G__14512, G__14513, G__14514, G__14515, G__14516, G__14517, G__14518, G__14519, G__14520);
  };
  var G__14795__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__14521 = a;
    var G__14522 = b;
    var G__14523 = c;
    var G__14524 = d;
    var G__14525 = e;
    var G__14526 = f;
    var G__14527 = g;
    var G__14528 = h;
    var G__14529 = i;
    var G__14530 = j;
    var G__14531 = k;
    var G__14532 = l;
    var G__14533 = m;
    var G__14534 = n;
    var G__14535 = o;
    var G__14536 = p;
    var G__14537 = q;
    var G__14538 = r;
    var G__14539 = s;
    var G__14540 = t;
    return self__.afn.cljs$core$IFn$_invoke$arity$20 ? self__.afn.cljs$core$IFn$_invoke$arity$20(G__14521, G__14522, G__14523, G__14524, G__14525, G__14526, G__14527, G__14528, G__14529, G__14530, G__14531, G__14532, G__14533, G__14534, G__14535, G__14536, G__14537, G__14538, G__14539, G__14540) : self__.afn.call(null, G__14521, G__14522, G__14523, G__14524, G__14525, G__14526, G__14527, G__14528, G__14529, G__14530, G__14531, G__14532, G__14533, G__14534, G__14535, G__14536, G__14537, G__14538, 
    G__14539, G__14540);
  };
  var G__14795__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__14541 = self__.afn;
    var G__14542 = a;
    var G__14543 = b;
    var G__14544 = c;
    var G__14545 = d;
    var G__14546 = e;
    var G__14547 = f;
    var G__14548 = g;
    var G__14549 = h;
    var G__14550 = i;
    var G__14551 = j;
    var G__14552 = k;
    var G__14553 = l;
    var G__14554 = m;
    var G__14555 = n;
    var G__14556 = o;
    var G__14557 = p;
    var G__14558 = q;
    var G__14559 = r;
    var G__14560 = s;
    var G__14561 = t;
    var G__14562 = rest;
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(G__14541, G__14542, G__14543, G__14544, G__14545, G__14546, G__14547, G__14548, G__14549, G__14550, G__14551, G__14552, G__14553, G__14554, G__14555, G__14556, G__14557, G__14558, G__14559, G__14560, G__14561, G__14562) : cljs.core.apply.call(null, G__14541, G__14542, G__14543, G__14544, G__14545, G__14546, G__14547, G__14548, G__14549, G__14550, G__14551, G__14552, G__14553, G__14554, G__14555, 
    G__14556, G__14557, G__14558, G__14559, G__14560, G__14561, G__14562);
  };
  G__14795 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__14795__1.call(this, self__);
      case 2:
        return G__14795__2.call(this, self__, a);
      case 3:
        return G__14795__3.call(this, self__, a, b);
      case 4:
        return G__14795__4.call(this, self__, a, b, c);
      case 5:
        return G__14795__5.call(this, self__, a, b, c, d);
      case 6:
        return G__14795__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__14795__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__14795__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__14795__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__14795__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__14795__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__14795__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__14795__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__14795__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__14795__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__14795__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__14795__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__14795__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__14795__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__14795__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__14795__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__14795__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__14795.cljs$core$IFn$_invoke$arity$1 = G__14795__1;
  G__14795.cljs$core$IFn$_invoke$arity$2 = G__14795__2;
  G__14795.cljs$core$IFn$_invoke$arity$3 = G__14795__3;
  G__14795.cljs$core$IFn$_invoke$arity$4 = G__14795__4;
  G__14795.cljs$core$IFn$_invoke$arity$5 = G__14795__5;
  G__14795.cljs$core$IFn$_invoke$arity$6 = G__14795__6;
  G__14795.cljs$core$IFn$_invoke$arity$7 = G__14795__7;
  G__14795.cljs$core$IFn$_invoke$arity$8 = G__14795__8;
  G__14795.cljs$core$IFn$_invoke$arity$9 = G__14795__9;
  G__14795.cljs$core$IFn$_invoke$arity$10 = G__14795__10;
  G__14795.cljs$core$IFn$_invoke$arity$11 = G__14795__11;
  G__14795.cljs$core$IFn$_invoke$arity$12 = G__14795__12;
  G__14795.cljs$core$IFn$_invoke$arity$13 = G__14795__13;
  G__14795.cljs$core$IFn$_invoke$arity$14 = G__14795__14;
  G__14795.cljs$core$IFn$_invoke$arity$15 = G__14795__15;
  G__14795.cljs$core$IFn$_invoke$arity$16 = G__14795__16;
  G__14795.cljs$core$IFn$_invoke$arity$17 = G__14795__17;
  G__14795.cljs$core$IFn$_invoke$arity$18 = G__14795__18;
  G__14795.cljs$core$IFn$_invoke$arity$19 = G__14795__19;
  G__14795.cljs$core$IFn$_invoke$arity$20 = G__14795__20;
  G__14795.cljs$core$IFn$_invoke$arity$21 = G__14795__21;
  G__14795.cljs$core$IFn$_invoke$arity$22 = G__14795__22;
  return G__14795;
}();
cljs.core.MetaFn.prototype.apply = function(self__, args14330) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args14330)));
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$0 ? self__.afn.cljs$core$IFn$_invoke$arity$0() : self__.afn.call(null);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var _ = this;
  var G__14563 = a;
  return self__.afn.cljs$core$IFn$_invoke$arity$1 ? self__.afn.cljs$core$IFn$_invoke$arity$1(G__14563) : self__.afn.call(null, G__14563);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var _ = this;
  var G__14564 = a;
  var G__14565 = b;
  return self__.afn.cljs$core$IFn$_invoke$arity$2 ? self__.afn.cljs$core$IFn$_invoke$arity$2(G__14564, G__14565) : self__.afn.call(null, G__14564, G__14565);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var _ = this;
  var G__14566 = a;
  var G__14567 = b;
  var G__14568 = c;
  return self__.afn.cljs$core$IFn$_invoke$arity$3 ? self__.afn.cljs$core$IFn$_invoke$arity$3(G__14566, G__14567, G__14568) : self__.afn.call(null, G__14566, G__14567, G__14568);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var _ = this;
  var G__14569 = a;
  var G__14570 = b;
  var G__14571 = c;
  var G__14572 = d;
  return self__.afn.cljs$core$IFn$_invoke$arity$4 ? self__.afn.cljs$core$IFn$_invoke$arity$4(G__14569, G__14570, G__14571, G__14572) : self__.afn.call(null, G__14569, G__14570, G__14571, G__14572);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var _ = this;
  var G__14573 = a;
  var G__14574 = b;
  var G__14575 = c;
  var G__14576 = d;
  var G__14577 = e;
  return self__.afn.cljs$core$IFn$_invoke$arity$5 ? self__.afn.cljs$core$IFn$_invoke$arity$5(G__14573, G__14574, G__14575, G__14576, G__14577) : self__.afn.call(null, G__14573, G__14574, G__14575, G__14576, G__14577);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var _ = this;
  var G__14578 = a;
  var G__14579 = b;
  var G__14580 = c;
  var G__14581 = d;
  var G__14582 = e;
  var G__14583 = f;
  return self__.afn.cljs$core$IFn$_invoke$arity$6 ? self__.afn.cljs$core$IFn$_invoke$arity$6(G__14578, G__14579, G__14580, G__14581, G__14582, G__14583) : self__.afn.call(null, G__14578, G__14579, G__14580, G__14581, G__14582, G__14583);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var _ = this;
  var G__14584 = a;
  var G__14585 = b;
  var G__14586 = c;
  var G__14587 = d;
  var G__14588 = e;
  var G__14589 = f;
  var G__14590 = g;
  return self__.afn.cljs$core$IFn$_invoke$arity$7 ? self__.afn.cljs$core$IFn$_invoke$arity$7(G__14584, G__14585, G__14586, G__14587, G__14588, G__14589, G__14590) : self__.afn.call(null, G__14584, G__14585, G__14586, G__14587, G__14588, G__14589, G__14590);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var _ = this;
  var G__14591 = a;
  var G__14592 = b;
  var G__14593 = c;
  var G__14594 = d;
  var G__14595 = e;
  var G__14596 = f;
  var G__14597 = g;
  var G__14598 = h;
  return self__.afn.cljs$core$IFn$_invoke$arity$8 ? self__.afn.cljs$core$IFn$_invoke$arity$8(G__14591, G__14592, G__14593, G__14594, G__14595, G__14596, G__14597, G__14598) : self__.afn.call(null, G__14591, G__14592, G__14593, G__14594, G__14595, G__14596, G__14597, G__14598);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var _ = this;
  var G__14599 = a;
  var G__14600 = b;
  var G__14601 = c;
  var G__14602 = d;
  var G__14603 = e;
  var G__14604 = f;
  var G__14605 = g;
  var G__14606 = h;
  var G__14607 = i;
  return self__.afn.cljs$core$IFn$_invoke$arity$9 ? self__.afn.cljs$core$IFn$_invoke$arity$9(G__14599, G__14600, G__14601, G__14602, G__14603, G__14604, G__14605, G__14606, G__14607) : self__.afn.call(null, G__14599, G__14600, G__14601, G__14602, G__14603, G__14604, G__14605, G__14606, G__14607);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var _ = this;
  var G__14608 = a;
  var G__14609 = b;
  var G__14610 = c;
  var G__14611 = d;
  var G__14612 = e;
  var G__14613 = f;
  var G__14614 = g;
  var G__14615 = h;
  var G__14616 = i;
  var G__14617 = j;
  return self__.afn.cljs$core$IFn$_invoke$arity$10 ? self__.afn.cljs$core$IFn$_invoke$arity$10(G__14608, G__14609, G__14610, G__14611, G__14612, G__14613, G__14614, G__14615, G__14616, G__14617) : self__.afn.call(null, G__14608, G__14609, G__14610, G__14611, G__14612, G__14613, G__14614, G__14615, G__14616, G__14617);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var _ = this;
  var G__14618 = a;
  var G__14619 = b;
  var G__14620 = c;
  var G__14621 = d;
  var G__14622 = e;
  var G__14623 = f;
  var G__14624 = g;
  var G__14625 = h;
  var G__14626 = i;
  var G__14627 = j;
  var G__14628 = k;
  return self__.afn.cljs$core$IFn$_invoke$arity$11 ? self__.afn.cljs$core$IFn$_invoke$arity$11(G__14618, G__14619, G__14620, G__14621, G__14622, G__14623, G__14624, G__14625, G__14626, G__14627, G__14628) : self__.afn.call(null, G__14618, G__14619, G__14620, G__14621, G__14622, G__14623, G__14624, G__14625, G__14626, G__14627, G__14628);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var _ = this;
  var G__14629 = a;
  var G__14630 = b;
  var G__14631 = c;
  var G__14632 = d;
  var G__14633 = e;
  var G__14634 = f;
  var G__14635 = g;
  var G__14636 = h;
  var G__14637 = i;
  var G__14638 = j;
  var G__14639 = k;
  var G__14640 = l;
  return self__.afn.cljs$core$IFn$_invoke$arity$12 ? self__.afn.cljs$core$IFn$_invoke$arity$12(G__14629, G__14630, G__14631, G__14632, G__14633, G__14634, G__14635, G__14636, G__14637, G__14638, G__14639, G__14640) : self__.afn.call(null, G__14629, G__14630, G__14631, G__14632, G__14633, G__14634, G__14635, G__14636, G__14637, G__14638, G__14639, G__14640);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var _ = this;
  var G__14641 = a;
  var G__14642 = b;
  var G__14643 = c;
  var G__14644 = d;
  var G__14645 = e;
  var G__14646 = f;
  var G__14647 = g;
  var G__14648 = h;
  var G__14649 = i;
  var G__14650 = j;
  var G__14651 = k;
  var G__14652 = l;
  var G__14653 = m;
  return self__.afn.cljs$core$IFn$_invoke$arity$13 ? self__.afn.cljs$core$IFn$_invoke$arity$13(G__14641, G__14642, G__14643, G__14644, G__14645, G__14646, G__14647, G__14648, G__14649, G__14650, G__14651, G__14652, G__14653) : self__.afn.call(null, G__14641, G__14642, G__14643, G__14644, G__14645, G__14646, G__14647, G__14648, G__14649, G__14650, G__14651, G__14652, G__14653);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var _ = this;
  var G__14654 = a;
  var G__14655 = b;
  var G__14656 = c;
  var G__14657 = d;
  var G__14658 = e;
  var G__14659 = f;
  var G__14660 = g;
  var G__14661 = h;
  var G__14662 = i;
  var G__14663 = j;
  var G__14664 = k;
  var G__14665 = l;
  var G__14666 = m;
  var G__14667 = n;
  return self__.afn.cljs$core$IFn$_invoke$arity$14 ? self__.afn.cljs$core$IFn$_invoke$arity$14(G__14654, G__14655, G__14656, G__14657, G__14658, G__14659, G__14660, G__14661, G__14662, G__14663, G__14664, G__14665, G__14666, G__14667) : self__.afn.call(null, G__14654, G__14655, G__14656, G__14657, G__14658, G__14659, G__14660, G__14661, G__14662, G__14663, G__14664, G__14665, G__14666, G__14667);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var _ = this;
  var G__14668 = a;
  var G__14669 = b;
  var G__14670 = c;
  var G__14671 = d;
  var G__14672 = e;
  var G__14673 = f;
  var G__14674 = g;
  var G__14675 = h;
  var G__14676 = i;
  var G__14677 = j;
  var G__14678 = k;
  var G__14679 = l;
  var G__14680 = m;
  var G__14681 = n;
  var G__14682 = o;
  return self__.afn.cljs$core$IFn$_invoke$arity$15 ? self__.afn.cljs$core$IFn$_invoke$arity$15(G__14668, G__14669, G__14670, G__14671, G__14672, G__14673, G__14674, G__14675, G__14676, G__14677, G__14678, G__14679, G__14680, G__14681, G__14682) : self__.afn.call(null, G__14668, G__14669, G__14670, G__14671, G__14672, G__14673, G__14674, G__14675, G__14676, G__14677, G__14678, G__14679, G__14680, G__14681, G__14682);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var _ = this;
  var G__14683 = a;
  var G__14684 = b;
  var G__14685 = c;
  var G__14686 = d;
  var G__14687 = e;
  var G__14688 = f;
  var G__14689 = g;
  var G__14690 = h;
  var G__14691 = i;
  var G__14692 = j;
  var G__14693 = k;
  var G__14694 = l;
  var G__14695 = m;
  var G__14696 = n;
  var G__14697 = o;
  var G__14698 = p;
  return self__.afn.cljs$core$IFn$_invoke$arity$16 ? self__.afn.cljs$core$IFn$_invoke$arity$16(G__14683, G__14684, G__14685, G__14686, G__14687, G__14688, G__14689, G__14690, G__14691, G__14692, G__14693, G__14694, G__14695, G__14696, G__14697, G__14698) : self__.afn.call(null, G__14683, G__14684, G__14685, G__14686, G__14687, G__14688, G__14689, G__14690, G__14691, G__14692, G__14693, G__14694, G__14695, G__14696, G__14697, G__14698);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var _ = this;
  var G__14699 = a;
  var G__14700 = b;
  var G__14701 = c;
  var G__14702 = d;
  var G__14703 = e;
  var G__14704 = f;
  var G__14705 = g;
  var G__14706 = h;
  var G__14707 = i;
  var G__14708 = j;
  var G__14709 = k;
  var G__14710 = l;
  var G__14711 = m;
  var G__14712 = n;
  var G__14713 = o;
  var G__14714 = p;
  var G__14715 = q;
  return self__.afn.cljs$core$IFn$_invoke$arity$17 ? self__.afn.cljs$core$IFn$_invoke$arity$17(G__14699, G__14700, G__14701, G__14702, G__14703, G__14704, G__14705, G__14706, G__14707, G__14708, G__14709, G__14710, G__14711, G__14712, G__14713, G__14714, G__14715) : self__.afn.call(null, G__14699, G__14700, G__14701, G__14702, G__14703, G__14704, G__14705, G__14706, G__14707, G__14708, G__14709, G__14710, G__14711, G__14712, G__14713, G__14714, G__14715);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var _ = this;
  var G__14716 = a;
  var G__14717 = b;
  var G__14718 = c;
  var G__14719 = d;
  var G__14720 = e;
  var G__14721 = f;
  var G__14722 = g;
  var G__14723 = h;
  var G__14724 = i;
  var G__14725 = j;
  var G__14726 = k;
  var G__14727 = l;
  var G__14728 = m;
  var G__14729 = n;
  var G__14730 = o;
  var G__14731 = p;
  var G__14732 = q;
  var G__14733 = r;
  return self__.afn.cljs$core$IFn$_invoke$arity$18 ? self__.afn.cljs$core$IFn$_invoke$arity$18(G__14716, G__14717, G__14718, G__14719, G__14720, G__14721, G__14722, G__14723, G__14724, G__14725, G__14726, G__14727, G__14728, G__14729, G__14730, G__14731, G__14732, G__14733) : self__.afn.call(null, G__14716, G__14717, G__14718, G__14719, G__14720, G__14721, G__14722, G__14723, G__14724, G__14725, G__14726, G__14727, G__14728, G__14729, G__14730, G__14731, G__14732, G__14733);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var _ = this;
  var G__14734 = a;
  var G__14735 = b;
  var G__14736 = c;
  var G__14737 = d;
  var G__14738 = e;
  var G__14739 = f;
  var G__14740 = g;
  var G__14741 = h;
  var G__14742 = i;
  var G__14743 = j;
  var G__14744 = k;
  var G__14745 = l;
  var G__14746 = m;
  var G__14747 = n;
  var G__14748 = o;
  var G__14749 = p;
  var G__14750 = q;
  var G__14751 = r;
  var G__14752 = s;
  return self__.afn.cljs$core$IFn$_invoke$arity$19 ? self__.afn.cljs$core$IFn$_invoke$arity$19(G__14734, G__14735, G__14736, G__14737, G__14738, G__14739, G__14740, G__14741, G__14742, G__14743, G__14744, G__14745, G__14746, G__14747, G__14748, G__14749, G__14750, G__14751, G__14752) : self__.afn.call(null, G__14734, G__14735, G__14736, G__14737, G__14738, G__14739, G__14740, G__14741, G__14742, G__14743, G__14744, G__14745, G__14746, G__14747, G__14748, G__14749, G__14750, G__14751, G__14752);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var _ = this;
  var G__14753 = a;
  var G__14754 = b;
  var G__14755 = c;
  var G__14756 = d;
  var G__14757 = e;
  var G__14758 = f;
  var G__14759 = g;
  var G__14760 = h;
  var G__14761 = i;
  var G__14762 = j;
  var G__14763 = k;
  var G__14764 = l;
  var G__14765 = m;
  var G__14766 = n;
  var G__14767 = o;
  var G__14768 = p;
  var G__14769 = q;
  var G__14770 = r;
  var G__14771 = s;
  var G__14772 = t;
  return self__.afn.cljs$core$IFn$_invoke$arity$20 ? self__.afn.cljs$core$IFn$_invoke$arity$20(G__14753, G__14754, G__14755, G__14756, G__14757, G__14758, G__14759, G__14760, G__14761, G__14762, G__14763, G__14764, G__14765, G__14766, G__14767, G__14768, G__14769, G__14770, G__14771, G__14772) : self__.afn.call(null, G__14753, G__14754, G__14755, G__14756, G__14757, G__14758, G__14759, G__14760, G__14761, G__14762, G__14763, G__14764, G__14765, G__14766, G__14767, G__14768, G__14769, G__14770, G__14771, 
  G__14772);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var _ = this;
  var G__14773 = self__.afn;
  var G__14774 = a;
  var G__14775 = b;
  var G__14776 = c;
  var G__14777 = d;
  var G__14778 = e;
  var G__14779 = f;
  var G__14780 = g;
  var G__14781 = h;
  var G__14782 = i;
  var G__14783 = j;
  var G__14784 = k;
  var G__14785 = l;
  var G__14786 = m;
  var G__14787 = n;
  var G__14788 = o;
  var G__14789 = p;
  var G__14790 = q;
  var G__14791 = r;
  var G__14792 = s;
  var G__14793 = t;
  var G__14794 = rest;
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(G__14773, G__14774, G__14775, G__14776, G__14777, G__14778, G__14779, G__14780, G__14781, G__14782, G__14783, G__14784, G__14785, G__14786, G__14787, G__14788, G__14789, G__14790, G__14791, G__14792, G__14793, G__14794) : cljs.core.apply.call(null, G__14773, G__14774, G__14775, G__14776, G__14777, G__14778, G__14779, G__14780, G__14781, G__14782, G__14783, G__14784, G__14785, G__14786, G__14787, 
  G__14788, G__14789, G__14790, G__14791, G__14792, G__14793, G__14794);
};
cljs.core.MetaFn.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "afn", "afn", 216963467, null), new cljs.core.Symbol(null, "meta", "meta", -1154898805, null)], null);
};
cljs.core.MetaFn.cljs$lang$type = true;
cljs.core.MetaFn.cljs$lang$ctorStr = "cljs.core/MetaFn";
cljs.core.MetaFn.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/MetaFn");
};
cljs.core.__GT_MetaFn = function cljs$core$__GT_MetaFn(afn, meta) {
  return new cljs.core.MetaFn(afn, meta);
};
cljs.core.with_meta = function cljs$core$with_meta(o, meta) {
  if (cljs.core.fn_QMARK_(o) && !function() {
    var G__14799 = o;
    if (G__14799) {
      var bit__4983__auto__ = G__14799.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__4983__auto__ || G__14799.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__14799.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IWithMeta, G__14799);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.IWithMeta, G__14799);
    }
  }()) {
    return new cljs.core.MetaFn(o, meta);
  } else {
    if (o == null) {
      return null;
    } else {
      return cljs.core._with_meta(o, meta);
    }
  }
};
cljs.core.meta = function cljs$core$meta(o) {
  if (function() {
    var and__4297__auto__ = !(o == null);
    if (and__4297__auto__) {
      var G__14803 = o;
      if (G__14803) {
        var bit__4983__auto__ = G__14803.cljs$lang$protocol_mask$partition0$ & 131072;
        if (bit__4983__auto__ || G__14803.cljs$core$IMeta$) {
          return true;
        } else {
          if (!G__14803.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_(cljs.core.IMeta, G__14803);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IMeta, G__14803);
      }
    } else {
      return and__4297__auto__;
    }
  }()) {
    return cljs.core._meta(o);
  } else {
    return null;
  }
};
cljs.core.peek = function cljs$core$peek(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._peek(coll);
  }
};
cljs.core.pop = function cljs$core$pop(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._pop(coll);
  }
};
cljs.core.disj = function cljs$core$disj() {
  var G__14808 = arguments.length;
  switch(G__14808) {
    case 1:
      return cljs.core.disj.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.disj.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.disj.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5360__auto__);
  }
};
cljs.core.disj.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return coll;
};
cljs.core.disj.cljs$core$IFn$_invoke$arity$2 = function(coll, k) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._disjoin(coll, k);
  }
};
cljs.core.disj.cljs$core$IFn$_invoke$arity$variadic = function(coll, k, ks) {
  while (true) {
    if (coll == null) {
      return null;
    } else {
      var ret = cljs.core.disj.cljs$core$IFn$_invoke$arity$2(coll, k);
      if (cljs.core.truth_(ks)) {
        var G__14810 = ret;
        var G__14811 = cljs.core.first(ks);
        var G__14812 = cljs.core.next(ks);
        coll = G__14810;
        k = G__14811;
        ks = G__14812;
        continue;
      } else {
        return ret;
      }
    }
    break;
  }
};
cljs.core.disj.cljs$lang$applyTo = function(seq14804) {
  var G__14805 = cljs.core.first(seq14804);
  var seq14804__$1 = cljs.core.next(seq14804);
  var G__14806 = cljs.core.first(seq14804__$1);
  var seq14804__$2 = cljs.core.next(seq14804__$1);
  return cljs.core.disj.cljs$core$IFn$_invoke$arity$variadic(G__14805, G__14806, seq14804__$2);
};
cljs.core.disj.cljs$lang$maxFixedArity = 2;
cljs.core.empty_QMARK_ = function cljs$core$empty_QMARK_(coll) {
  return coll == null || cljs.core.not(cljs.core.seq(coll));
};
cljs.core.coll_QMARK_ = function cljs$core$coll_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__14814 = x;
    if (G__14814) {
      var bit__4983__auto__ = G__14814.cljs$lang$protocol_mask$partition0$ & 8;
      if (bit__4983__auto__ || G__14814.cljs$core$ICollection$) {
        return true;
      } else {
        if (!G__14814.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.ICollection, G__14814);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.ICollection, G__14814);
    }
  }
};
cljs.core.set_QMARK_ = function cljs$core$set_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__14816 = x;
    if (G__14816) {
      var bit__4983__auto__ = G__14816.cljs$lang$protocol_mask$partition0$ & 4096;
      if (bit__4983__auto__ || G__14816.cljs$core$ISet$) {
        return true;
      } else {
        if (!G__14816.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.ISet, G__14816);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.ISet, G__14816);
    }
  }
};
cljs.core.associative_QMARK_ = function cljs$core$associative_QMARK_(x) {
  var G__14818 = x;
  if (G__14818) {
    var bit__4983__auto__ = G__14818.cljs$lang$protocol_mask$partition0$ & 512;
    if (bit__4983__auto__ || G__14818.cljs$core$IAssociative$) {
      return true;
    } else {
      if (!G__14818.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IAssociative, G__14818);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IAssociative, G__14818);
  }
};
cljs.core.sequential_QMARK_ = function cljs$core$sequential_QMARK_(x) {
  var G__14820 = x;
  if (G__14820) {
    var bit__4983__auto__ = G__14820.cljs$lang$protocol_mask$partition0$ & 16777216;
    if (bit__4983__auto__ || G__14820.cljs$core$ISequential$) {
      return true;
    } else {
      if (!G__14820.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ISequential, G__14820);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ISequential, G__14820);
  }
};
cljs.core.sorted_QMARK_ = function cljs$core$sorted_QMARK_(x) {
  var G__14822 = x;
  if (G__14822) {
    var bit__4983__auto__ = G__14822.cljs$lang$protocol_mask$partition0$ & 268435456;
    if (bit__4983__auto__ || G__14822.cljs$core$ISorted$) {
      return true;
    } else {
      if (!G__14822.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ISorted, G__14822);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ISorted, G__14822);
  }
};
cljs.core.reduceable_QMARK_ = function cljs$core$reduceable_QMARK_(x) {
  var G__14824 = x;
  if (G__14824) {
    var bit__4983__auto__ = G__14824.cljs$lang$protocol_mask$partition0$ & 524288;
    if (bit__4983__auto__ || G__14824.cljs$core$IReduce$) {
      return true;
    } else {
      if (!G__14824.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, G__14824);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, G__14824);
  }
};
cljs.core.map_QMARK_ = function cljs$core$map_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__14826 = x;
    if (G__14826) {
      var bit__4983__auto__ = G__14826.cljs$lang$protocol_mask$partition0$ & 1024;
      if (bit__4983__auto__ || G__14826.cljs$core$IMap$) {
        return true;
      } else {
        if (!G__14826.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IMap, G__14826);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.IMap, G__14826);
    }
  }
};
cljs.core.record_QMARK_ = function cljs$core$record_QMARK_(x) {
  var G__14828 = x;
  if (G__14828) {
    var bit__4983__auto__ = G__14828.cljs$lang$protocol_mask$partition0$ & 67108864;
    if (bit__4983__auto__ || G__14828.cljs$core$IRecord$) {
      return true;
    } else {
      if (!G__14828.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IRecord, G__14828);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IRecord, G__14828);
  }
};
cljs.core.vector_QMARK_ = function cljs$core$vector_QMARK_(x) {
  var G__14830 = x;
  if (G__14830) {
    var bit__4983__auto__ = G__14830.cljs$lang$protocol_mask$partition0$ & 16384;
    if (bit__4983__auto__ || G__14830.cljs$core$IVector$) {
      return true;
    } else {
      if (!G__14830.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IVector, G__14830);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IVector, G__14830);
  }
};
cljs.core.chunked_seq_QMARK_ = function cljs$core$chunked_seq_QMARK_(x) {
  var G__14832 = x;
  if (G__14832) {
    var bit__4976__auto__ = G__14832.cljs$lang$protocol_mask$partition1$ & 512;
    if (bit__4976__auto__ || G__14832.cljs$core$IChunkedSeq$) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
};
cljs.core.js_obj = function cljs$core$js_obj() {
  var G__14835 = arguments.length;
  switch(G__14835) {
    case 0:
      return cljs.core.js_obj.cljs$core$IFn$_invoke$arity$0();
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0);
      return cljs.core.js_obj.cljs$core$IFn$_invoke$arity$variadic(argseq__5360__auto__);
  }
};
cljs.core.js_obj.cljs$core$IFn$_invoke$arity$0 = function() {
  var obj14837 = {};
  return obj14837;
};
cljs.core.js_obj.cljs$core$IFn$_invoke$arity$variadic = function(keyvals) {
  var G__14838 = goog.object.create;
  var G__14839 = keyvals;
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$2 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$2(G__14838, G__14839) : cljs.core.apply.call(null, G__14838, G__14839);
};
cljs.core.js_obj.cljs$lang$applyTo = function(seq14833) {
  return cljs.core.js_obj.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq14833));
};
cljs.core.js_obj.cljs$lang$maxFixedArity = 0;
cljs.core.js_keys = function cljs$core$js_keys(obj) {
  var keys = [];
  var G__14843_14845 = obj;
  var G__14844_14846 = function(G__14843_14845, keys) {
    return function(val, key, obj__$1) {
      return keys.push(key);
    };
  }(G__14843_14845, keys);
  goog.object.forEach(G__14843_14845, G__14844_14846);
  return keys;
};
cljs.core.js_delete = function cljs$core$js_delete(obj, key) {
  return delete obj[key];
};
cljs.core.array_copy = function cljs$core$array_copy(from, i, to, j, len) {
  var i__$1 = i;
  var j__$1 = j;
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__14847 = i__$1 + 1;
      var G__14848 = j__$1 + 1;
      var G__14849 = len__$1 - 1;
      i__$1 = G__14847;
      j__$1 = G__14848;
      len__$1 = G__14849;
      continue;
    }
    break;
  }
};
cljs.core.array_copy_downward = function cljs$core$array_copy_downward(from, i, to, j, len) {
  var i__$1 = i + (len - 1);
  var j__$1 = j + (len - 1);
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__14850 = i__$1 - 1;
      var G__14851 = j__$1 - 1;
      var G__14852 = len__$1 - 1;
      i__$1 = G__14850;
      j__$1 = G__14851;
      len__$1 = G__14852;
      continue;
    }
    break;
  }
};
cljs.core.lookup_sentinel = function() {
  var obj14854 = {};
  return obj14854;
}();
cljs.core.false_QMARK_ = function cljs$core$false_QMARK_(x) {
  return x === false;
};
cljs.core.true_QMARK_ = function cljs$core$true_QMARK_(x) {
  return x === true;
};
cljs.core.undefined_QMARK_ = function cljs$core$undefined_QMARK_(x) {
  return void 0 === x;
};
cljs.core.seq_QMARK_ = function cljs$core$seq_QMARK_(s) {
  if (s == null) {
    return false;
  } else {
    var G__14856 = s;
    if (G__14856) {
      var bit__4983__auto__ = G__14856.cljs$lang$protocol_mask$partition0$ & 64;
      if (bit__4983__auto__ || G__14856.cljs$core$ISeq$) {
        return true;
      } else {
        if (!G__14856.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__14856);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__14856);
    }
  }
};
cljs.core.seqable_QMARK_ = function cljs$core$seqable_QMARK_(s) {
  var G__14858 = s;
  if (G__14858) {
    var bit__4983__auto__ = G__14858.cljs$lang$protocol_mask$partition0$ & 8388608;
    if (bit__4983__auto__ || G__14858.cljs$core$ISeqable$) {
      return true;
    } else {
      if (!G__14858.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ISeqable, G__14858);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ISeqable, G__14858);
  }
};
cljs.core.boolean$ = function cljs$core$boolean(x) {
  if (cljs.core.truth_(x)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ifn_QMARK_ = function cljs$core$ifn_QMARK_(f) {
  var or__4309__auto__ = cljs.core.fn_QMARK_(f);
  if (or__4309__auto__) {
    return or__4309__auto__;
  } else {
    var G__14862 = f;
    if (G__14862) {
      var bit__4983__auto__ = G__14862.cljs$lang$protocol_mask$partition0$ & 1;
      if (bit__4983__auto__ || G__14862.cljs$core$IFn$) {
        return true;
      } else {
        if (!G__14862.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IFn, G__14862);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.IFn, G__14862);
    }
  }
};
cljs.core.integer_QMARK_ = function cljs$core$integer_QMARK_(n) {
  return typeof n === "number" && cljs.core.not(function() {
    var G__14875 = n;
    return isNaN(G__14875);
  }()) && !(n === Infinity) && function() {
    var G__14876 = n;
    return parseFloat(G__14876);
  }() === function() {
    var G__14877 = n;
    var G__14878 = 10;
    return parseInt(G__14877, G__14878);
  }();
};
cljs.core.contains_QMARK_ = function cljs$core$contains_QMARK_(coll, v) {
  if (cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return false;
  } else {
    return true;
  }
};
cljs.core.find = function cljs$core$find(coll, k) {
  if (!(coll == null) && cljs.core.associative_QMARK_(coll) && cljs.core.contains_QMARK_(coll, k)) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, k)], null);
  } else {
    return null;
  }
};
cljs.core.distinct_QMARK_ = function cljs$core$distinct_QMARK_() {
  var G__14883 = arguments.length;
  switch(G__14883) {
    case 1:
      return cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5360__auto__);
  }
};
cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return !cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y);
};
cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  if (!cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
    var s = cljs.core.PersistentHashSet.fromArray([x, y], true);
    var xs = more;
    while (true) {
      var x__$1 = cljs.core.first(xs);
      var etc = cljs.core.next(xs);
      if (cljs.core.truth_(xs)) {
        if (cljs.core.contains_QMARK_(s, x__$1)) {
          return false;
        } else {
          var G__14885 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(s, x__$1);
          var G__14886 = etc;
          s = G__14885;
          xs = G__14886;
          continue;
        }
      } else {
        return true;
      }
      break;
    }
  } else {
    return false;
  }
};
cljs.core.distinct_QMARK_.cljs$lang$applyTo = function(seq14879) {
  var G__14880 = cljs.core.first(seq14879);
  var seq14879__$1 = cljs.core.next(seq14879);
  var G__14881 = cljs.core.first(seq14879__$1);
  var seq14879__$2 = cljs.core.next(seq14879__$1);
  return cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic(G__14880, G__14881, seq14879__$2);
};
cljs.core.distinct_QMARK_.cljs$lang$maxFixedArity = 2;
cljs.core.compare = function cljs$core$compare(x, y) {
  if (x === y) {
    return 0;
  } else {
    if (x == null) {
      return -1;
    } else {
      if (y == null) {
        return 1;
      } else {
        if (typeof x === "number") {
          if (typeof y === "number") {
            var G__14892 = x;
            var G__14893 = y;
            return goog.array.defaultCompare(G__14892, G__14893);
          } else {
            throw new Error([cljs.core.str("Cannot compare "), cljs.core.str(x), cljs.core.str(" to "), cljs.core.str(y)].join(""));
          }
        } else {
          if (function() {
            var G__14894 = x;
            if (G__14894) {
              var bit__4983__auto__ = G__14894.cljs$lang$protocol_mask$partition1$ & 2048;
              if (bit__4983__auto__ || G__14894.cljs$core$IComparable$) {
                return true;
              } else {
                if (!G__14894.cljs$lang$protocol_mask$partition1$) {
                  return cljs.core.native_satisfies_QMARK_(cljs.core.IComparable, G__14894);
                } else {
                  return false;
                }
              }
            } else {
              return cljs.core.native_satisfies_QMARK_(cljs.core.IComparable, G__14894);
            }
          }()) {
            return cljs.core._compare(x, y);
          } else {
            if ((typeof x === "string" || cljs.core.array_QMARK_(x) || x === true || x === false) && cljs.core.type(x) === cljs.core.type(y)) {
              var G__14895 = x;
              var G__14896 = y;
              return goog.array.defaultCompare(G__14895, G__14896);
            } else {
              throw new Error([cljs.core.str("Cannot compare "), cljs.core.str(x), cljs.core.str(" to "), cljs.core.str(y)].join(""));
            }
          }
        }
      }
    }
  }
};
cljs.core.compare_indexed = function cljs$core$compare_indexed() {
  var G__14898 = arguments.length;
  switch(G__14898) {
    case 2:
      return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 4:
      return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2 = function(xs, ys) {
  var xl = cljs.core.count(xs);
  var yl = cljs.core.count(ys);
  if (xl < yl) {
    return -1;
  } else {
    if (xl > yl) {
      return 1;
    } else {
      if (xl === 0) {
        return 0;
      } else {
        return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$4(xs, ys, xl, 0);
      }
    }
  }
};
cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$4 = function(xs, ys, len, n) {
  while (true) {
    var d = cljs.core.compare(cljs.core.nth.cljs$core$IFn$_invoke$arity$2(xs, n), cljs.core.nth.cljs$core$IFn$_invoke$arity$2(ys, n));
    if (d === 0 && n + 1 < len) {
      var G__14900 = xs;
      var G__14901 = ys;
      var G__14902 = len;
      var G__14903 = n + 1;
      xs = G__14900;
      ys = G__14901;
      len = G__14902;
      n = G__14903;
      continue;
    } else {
      return d;
    }
    break;
  }
};
cljs.core.compare_indexed.cljs$lang$maxFixedArity = 4;
cljs.core.fn__GT_comparator = function cljs$core$fn__GT_comparator(f) {
  if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(f, cljs.core.compare)) {
    return cljs.core.compare;
  } else {
    return function(x, y) {
      var r = function() {
        var G__14908 = x;
        var G__14909 = y;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__14908, G__14909) : f.call(null, G__14908, G__14909);
      }();
      if (typeof r === "number") {
        return r;
      } else {
        if (cljs.core.truth_(r)) {
          return -1;
        } else {
          if (cljs.core.truth_(function() {
            var G__14910 = y;
            var G__14911 = x;
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__14910, G__14911) : f.call(null, G__14910, G__14911);
          }())) {
            return 1;
          } else {
            return 0;
          }
        }
      }
    };
  }
};
cljs.core.sort = function cljs$core$sort() {
  var G__14913 = arguments.length;
  switch(G__14913) {
    case 1:
      return cljs.core.sort.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.sort.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.sort.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return cljs.core.sort.cljs$core$IFn$_invoke$arity$2(cljs.core.compare, coll);
};
cljs.core.sort.cljs$core$IFn$_invoke$arity$2 = function(comp, coll) {
  if (cljs.core.seq(coll)) {
    var a = function() {
      var G__14914 = coll;
      return cljs.core.to_array.cljs$core$IFn$_invoke$arity$1 ? cljs.core.to_array.cljs$core$IFn$_invoke$arity$1(G__14914) : cljs.core.to_array.call(null, G__14914);
    }();
    var G__14915_14918 = a;
    var G__14916_14919 = cljs.core.fn__GT_comparator(comp);
    goog.array.stableSort(G__14915_14918, G__14916_14919);
    return cljs.core.seq(a);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.sort.cljs$lang$maxFixedArity = 2;
cljs.core.sort_by = function cljs$core$sort_by() {
  var G__14921 = arguments.length;
  switch(G__14921) {
    case 2:
      return cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.sort_by.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2 = function(keyfn, coll) {
  return cljs.core.sort_by.cljs$core$IFn$_invoke$arity$3(keyfn, cljs.core.compare, coll);
};
cljs.core.sort_by.cljs$core$IFn$_invoke$arity$3 = function(keyfn, comp, coll) {
  return cljs.core.sort.cljs$core$IFn$_invoke$arity$2(function(x, y) {
    return cljs.core.fn__GT_comparator(comp).call(null, function() {
      var G__14922 = x;
      return keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(G__14922) : keyfn.call(null, G__14922);
    }(), function() {
      var G__14923 = y;
      return keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(G__14923) : keyfn.call(null, G__14923);
    }());
  }, coll);
};
cljs.core.sort_by.cljs$lang$maxFixedArity = 3;
cljs.core.seq_reduce = function cljs$core$seq_reduce() {
  var G__14926 = arguments.length;
  switch(G__14926) {
    case 2:
      return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  var temp__4420__auto__ = cljs.core.seq(coll);
  if (temp__4420__auto__) {
    var s = temp__4420__auto__;
    var G__14927 = f;
    var G__14928 = cljs.core.first(s);
    var G__14929 = cljs.core.next(s);
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(G__14927, G__14928, G__14929) : cljs.core.reduce.call(null, G__14927, G__14928, G__14929);
  } else {
    return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
  }
};
cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3 = function(f, val, coll) {
  var val__$1 = val;
  var coll__$1 = cljs.core.seq(coll);
  while (true) {
    if (coll__$1) {
      var nval = function() {
        var G__14930 = val__$1;
        var G__14931 = cljs.core.first(coll__$1);
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__14930, G__14931) : f.call(null, G__14930, G__14931);
      }();
      if (cljs.core.reduced_QMARK_(nval)) {
        return cljs.core.deref(nval);
      } else {
        var G__14933 = nval;
        var G__14934 = cljs.core.next(coll__$1);
        val__$1 = G__14933;
        coll__$1 = G__14934;
        continue;
      }
    } else {
      return val__$1;
    }
    break;
  }
};
cljs.core.seq_reduce.cljs$lang$maxFixedArity = 3;
cljs.core.shuffle = function cljs$core$shuffle(coll) {
  var a = function() {
    var G__14938 = coll;
    return cljs.core.to_array.cljs$core$IFn$_invoke$arity$1 ? cljs.core.to_array.cljs$core$IFn$_invoke$arity$1(G__14938) : cljs.core.to_array.call(null, G__14938);
  }();
  var G__14939_14941 = a;
  goog.array.shuffle(G__14939_14941);
  var G__14940 = a;
  return cljs.core.vec.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vec.cljs$core$IFn$_invoke$arity$1(G__14940) : cljs.core.vec.call(null, G__14940);
};
cljs.core.reduce = function cljs$core$reduce() {
  var G__14943 = arguments.length;
  switch(G__14943) {
    case 2:
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.reduce.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  if (function() {
    var G__14944 = coll;
    if (G__14944) {
      var bit__4976__auto__ = G__14944.cljs$lang$protocol_mask$partition0$ & 524288;
      if (bit__4976__auto__ || G__14944.cljs$core$IReduce$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return coll.cljs$core$IReduce$_reduce$arity$2(null, f);
  } else {
    if (cljs.core.array_QMARK_(coll)) {
      return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2(coll, f);
    } else {
      if (typeof coll === "string") {
        return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2(coll, f);
      } else {
        if (cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, coll)) {
          return cljs.core._reduce.cljs$core$IFn$_invoke$arity$2(coll, f);
        } else {
          return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll);
        }
      }
    }
  }
};
cljs.core.reduce.cljs$core$IFn$_invoke$arity$3 = function(f, val, coll) {
  if (function() {
    var G__14945 = coll;
    if (G__14945) {
      var bit__4976__auto__ = G__14945.cljs$lang$protocol_mask$partition0$ & 524288;
      if (bit__4976__auto__ || G__14945.cljs$core$IReduce$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return coll.cljs$core$IReduce$_reduce$arity$3(null, f, val);
  } else {
    if (cljs.core.array_QMARK_(coll)) {
      return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3(coll, f, val);
    } else {
      if (typeof coll === "string") {
        return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3(coll, f, val);
      } else {
        if (cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, coll)) {
          return cljs.core._reduce.cljs$core$IFn$_invoke$arity$3(coll, f, val);
        } else {
          return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, val, coll);
        }
      }
    }
  }
};
cljs.core.reduce.cljs$lang$maxFixedArity = 3;
cljs.core.reduce_kv = function cljs$core$reduce_kv(f, init, coll) {
  if (!(coll == null)) {
    return cljs.core._kv_reduce(coll, f, init);
  } else {
    return init;
  }
};
cljs.core.identity = function cljs$core$identity(x) {
  return x;
};
cljs.core.completing = function cljs$core$completing() {
  var G__14948 = arguments.length;
  switch(G__14948) {
    case 1:
      return cljs.core.completing.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.completing.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.completing.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return cljs.core.completing.cljs$core$IFn$_invoke$arity$2(f, cljs.core.identity);
};
cljs.core.completing.cljs$core$IFn$_invoke$arity$2 = function(f, cf) {
  return function() {
    var G__14953 = null;
    var G__14953__0 = function() {
      return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    };
    var G__14953__1 = function(x) {
      var G__14949 = x;
      return cf.cljs$core$IFn$_invoke$arity$1 ? cf.cljs$core$IFn$_invoke$arity$1(G__14949) : cf.call(null, G__14949);
    };
    var G__14953__2 = function(x, y) {
      var G__14950 = x;
      var G__14951 = y;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__14950, G__14951) : f.call(null, G__14950, G__14951);
    };
    G__14953 = function(x, y) {
      switch(arguments.length) {
        case 0:
          return G__14953__0.call(this);
        case 1:
          return G__14953__1.call(this, x);
        case 2:
          return G__14953__2.call(this, x, y);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__14953.cljs$core$IFn$_invoke$arity$0 = G__14953__0;
    G__14953.cljs$core$IFn$_invoke$arity$1 = G__14953__1;
    G__14953.cljs$core$IFn$_invoke$arity$2 = G__14953__2;
    return G__14953;
  }();
};
cljs.core.completing.cljs$lang$maxFixedArity = 2;
cljs.core.transduce = function cljs$core$transduce() {
  var G__14955 = arguments.length;
  switch(G__14955) {
    case 3:
      return cljs.core.transduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.transduce.cljs$core$IFn$_invoke$arity$3 = function(xform, f, coll) {
  return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(xform, f, function() {
    return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
  }(), coll);
};
cljs.core.transduce.cljs$core$IFn$_invoke$arity$4 = function(xform, f, init, coll) {
  var f__$1 = function() {
    var G__14956 = f;
    return xform.cljs$core$IFn$_invoke$arity$1 ? xform.cljs$core$IFn$_invoke$arity$1(G__14956) : xform.call(null, G__14956);
  }();
  var ret = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(f__$1, init, coll);
  var G__14957 = ret;
  return f__$1.cljs$core$IFn$_invoke$arity$1 ? f__$1.cljs$core$IFn$_invoke$arity$1(G__14957) : f__$1.call(null, G__14957);
};
cljs.core.transduce.cljs$lang$maxFixedArity = 4;
cljs.core._PLUS_ = function cljs$core$_PLUS_() {
  var G__14963 = arguments.length;
  switch(G__14963) {
    case 0:
      return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5360__auto__);
  }
};
cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$0 = function() {
  return 0;
};
cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x + y;
};
cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._PLUS_, x + y, more);
};
cljs.core._PLUS_.cljs$lang$applyTo = function(seq14959) {
  var G__14960 = cljs.core.first(seq14959);
  var seq14959__$1 = cljs.core.next(seq14959);
  var G__14961 = cljs.core.first(seq14959__$1);
  var seq14959__$2 = cljs.core.next(seq14959__$1);
  return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$variadic(G__14960, G__14961, seq14959__$2);
};
cljs.core._PLUS_.cljs$lang$maxFixedArity = 2;
cljs.core._ = function cljs$core$_() {
  var G__14969 = arguments.length;
  switch(G__14969) {
    case 1:
      return cljs.core._.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core._.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5360__auto__);
  }
};
cljs.core._.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return -x;
};
cljs.core._.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x - y;
};
cljs.core._.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._, x - y, more);
};
cljs.core._.cljs$lang$applyTo = function(seq14965) {
  var G__14966 = cljs.core.first(seq14965);
  var seq14965__$1 = cljs.core.next(seq14965);
  var G__14967 = cljs.core.first(seq14965__$1);
  var seq14965__$2 = cljs.core.next(seq14965__$1);
  return cljs.core._.cljs$core$IFn$_invoke$arity$variadic(G__14966, G__14967, seq14965__$2);
};
cljs.core._.cljs$lang$maxFixedArity = 2;
cljs.core._STAR_ = function cljs$core$_STAR_() {
  var G__14975 = arguments.length;
  switch(G__14975) {
    case 0:
      return cljs.core._STAR_.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core._STAR_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._STAR_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core._STAR_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5360__auto__);
  }
};
cljs.core._STAR_.cljs$core$IFn$_invoke$arity$0 = function() {
  return 1;
};
cljs.core._STAR_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core._STAR_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x * y;
};
cljs.core._STAR_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._STAR_, x * y, more);
};
cljs.core._STAR_.cljs$lang$applyTo = function(seq14971) {
  var G__14972 = cljs.core.first(seq14971);
  var seq14971__$1 = cljs.core.next(seq14971);
  var G__14973 = cljs.core.first(seq14971__$1);
  var seq14971__$2 = cljs.core.next(seq14971__$1);
  return cljs.core._STAR_.cljs$core$IFn$_invoke$arity$variadic(G__14972, G__14973, seq14971__$2);
};
cljs.core._STAR_.cljs$lang$maxFixedArity = 2;
cljs.core._SLASH_ = function cljs$core$_SLASH_() {
  var G__14981 = arguments.length;
  switch(G__14981) {
    case 1:
      return cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5360__auto__);
  }
};
cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return 1 / x;
};
cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x / y;
};
cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._SLASH_, x / y, more);
};
cljs.core._SLASH_.cljs$lang$applyTo = function(seq14977) {
  var G__14978 = cljs.core.first(seq14977);
  var seq14977__$1 = cljs.core.next(seq14977);
  var G__14979 = cljs.core.first(seq14977__$1);
  var seq14977__$2 = cljs.core.next(seq14977__$1);
  return cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$variadic(G__14978, G__14979, seq14977__$2);
};
cljs.core._SLASH_.cljs$lang$maxFixedArity = 2;
cljs.core._LT_ = function cljs$core$_LT_() {
  var G__14987 = arguments.length;
  switch(G__14987) {
    case 1:
      return cljs.core._LT_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._LT_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core._LT_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5360__auto__);
  }
};
cljs.core._LT_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._LT_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x < y;
};
cljs.core._LT_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (x < y) {
      if (cljs.core.next(more)) {
        var G__14989 = y;
        var G__14990 = cljs.core.first(more);
        var G__14991 = cljs.core.next(more);
        x = G__14989;
        y = G__14990;
        more = G__14991;
        continue;
      } else {
        return y < cljs.core.first(more);
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._LT_.cljs$lang$applyTo = function(seq14983) {
  var G__14984 = cljs.core.first(seq14983);
  var seq14983__$1 = cljs.core.next(seq14983);
  var G__14985 = cljs.core.first(seq14983__$1);
  var seq14983__$2 = cljs.core.next(seq14983__$1);
  return cljs.core._LT_.cljs$core$IFn$_invoke$arity$variadic(G__14984, G__14985, seq14983__$2);
};
cljs.core._LT_.cljs$lang$maxFixedArity = 2;
cljs.core._LT__EQ_ = function cljs$core$_LT__EQ_() {
  var G__14996 = arguments.length;
  switch(G__14996) {
    case 1:
      return cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5360__auto__);
  }
};
cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x <= y;
};
cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (x <= y) {
      if (cljs.core.next(more)) {
        var G__14998 = y;
        var G__14999 = cljs.core.first(more);
        var G__15000 = cljs.core.next(more);
        x = G__14998;
        y = G__14999;
        more = G__15000;
        continue;
      } else {
        return y <= cljs.core.first(more);
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._LT__EQ_.cljs$lang$applyTo = function(seq14992) {
  var G__14993 = cljs.core.first(seq14992);
  var seq14992__$1 = cljs.core.next(seq14992);
  var G__14994 = cljs.core.first(seq14992__$1);
  var seq14992__$2 = cljs.core.next(seq14992__$1);
  return cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$variadic(G__14993, G__14994, seq14992__$2);
};
cljs.core._LT__EQ_.cljs$lang$maxFixedArity = 2;
cljs.core._GT_ = function cljs$core$_GT_() {
  var G__15005 = arguments.length;
  switch(G__15005) {
    case 1:
      return cljs.core._GT_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._GT_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core._GT_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5360__auto__);
  }
};
cljs.core._GT_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._GT_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x > y;
};
cljs.core._GT_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (x > y) {
      if (cljs.core.next(more)) {
        var G__15007 = y;
        var G__15008 = cljs.core.first(more);
        var G__15009 = cljs.core.next(more);
        x = G__15007;
        y = G__15008;
        more = G__15009;
        continue;
      } else {
        return y > cljs.core.first(more);
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._GT_.cljs$lang$applyTo = function(seq15001) {
  var G__15002 = cljs.core.first(seq15001);
  var seq15001__$1 = cljs.core.next(seq15001);
  var G__15003 = cljs.core.first(seq15001__$1);
  var seq15001__$2 = cljs.core.next(seq15001__$1);
  return cljs.core._GT_.cljs$core$IFn$_invoke$arity$variadic(G__15002, G__15003, seq15001__$2);
};
cljs.core._GT_.cljs$lang$maxFixedArity = 2;
cljs.core._GT__EQ_ = function cljs$core$_GT__EQ_() {
  var G__15014 = arguments.length;
  switch(G__15014) {
    case 1:
      return cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5360__auto__);
  }
};
cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x >= y;
};
cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (x >= y) {
      if (cljs.core.next(more)) {
        var G__15016 = y;
        var G__15017 = cljs.core.first(more);
        var G__15018 = cljs.core.next(more);
        x = G__15016;
        y = G__15017;
        more = G__15018;
        continue;
      } else {
        return y >= cljs.core.first(more);
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._GT__EQ_.cljs$lang$applyTo = function(seq15010) {
  var G__15011 = cljs.core.first(seq15010);
  var seq15010__$1 = cljs.core.next(seq15010);
  var G__15012 = cljs.core.first(seq15010__$1);
  var seq15010__$2 = cljs.core.next(seq15010__$1);
  return cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$variadic(G__15011, G__15012, seq15010__$2);
};
cljs.core._GT__EQ_.cljs$lang$maxFixedArity = 2;
cljs.core.dec = function cljs$core$dec(x) {
  return x - 1;
};
cljs.core.max = function cljs$core$max() {
  var G__15023 = arguments.length;
  switch(G__15023) {
    case 1:
      return cljs.core.max.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.max.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.max.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5360__auto__);
  }
};
cljs.core.max.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.max.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  var x__4621__auto__ = x;
  var y__4622__auto__ = y;
  return x__4621__auto__ > y__4622__auto__ ? x__4621__auto__ : y__4622__auto__;
};
cljs.core.max.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.max, function() {
    var x__4621__auto__ = x;
    var y__4622__auto__ = y;
    return x__4621__auto__ > y__4622__auto__ ? x__4621__auto__ : y__4622__auto__;
  }(), more);
};
cljs.core.max.cljs$lang$applyTo = function(seq15019) {
  var G__15020 = cljs.core.first(seq15019);
  var seq15019__$1 = cljs.core.next(seq15019);
  var G__15021 = cljs.core.first(seq15019__$1);
  var seq15019__$2 = cljs.core.next(seq15019__$1);
  return cljs.core.max.cljs$core$IFn$_invoke$arity$variadic(G__15020, G__15021, seq15019__$2);
};
cljs.core.max.cljs$lang$maxFixedArity = 2;
cljs.core.min = function cljs$core$min() {
  var G__15029 = arguments.length;
  switch(G__15029) {
    case 1:
      return cljs.core.min.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.min.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.min.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5360__auto__);
  }
};
cljs.core.min.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.min.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  var x__4628__auto__ = x;
  var y__4629__auto__ = y;
  return x__4628__auto__ < y__4629__auto__ ? x__4628__auto__ : y__4629__auto__;
};
cljs.core.min.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.min, function() {
    var x__4628__auto__ = x;
    var y__4629__auto__ = y;
    return x__4628__auto__ < y__4629__auto__ ? x__4628__auto__ : y__4629__auto__;
  }(), more);
};
cljs.core.min.cljs$lang$applyTo = function(seq15025) {
  var G__15026 = cljs.core.first(seq15025);
  var seq15025__$1 = cljs.core.next(seq15025);
  var G__15027 = cljs.core.first(seq15025__$1);
  var seq15025__$2 = cljs.core.next(seq15025__$1);
  return cljs.core.min.cljs$core$IFn$_invoke$arity$variadic(G__15026, G__15027, seq15025__$2);
};
cljs.core.min.cljs$lang$maxFixedArity = 2;
cljs.core.byte$ = function cljs$core$byte(x) {
  return x;
};
cljs.core.char$ = function cljs$core$char(x) {
  if (typeof x === "number") {
    return String.fromCharCode(x);
  } else {
    if (typeof x === "string" && x.length === 1) {
      return x;
    } else {
      throw new Error("Argument to char must be a character or number");
    }
  }
};
cljs.core.short$ = function cljs$core$short(x) {
  return x;
};
cljs.core.float$ = function cljs$core$float(x) {
  return x;
};
cljs.core.double$ = function cljs$core$double(x) {
  return x;
};
cljs.core.unchecked_byte = function cljs$core$unchecked_byte(x) {
  return x;
};
cljs.core.unchecked_char = function cljs$core$unchecked_char(x) {
  return x;
};
cljs.core.unchecked_short = function cljs$core$unchecked_short(x) {
  return x;
};
cljs.core.unchecked_float = function cljs$core$unchecked_float(x) {
  return x;
};
cljs.core.unchecked_double = function cljs$core$unchecked_double(x) {
  return x;
};
cljs.core.unchecked_add = function cljs$core$unchecked_add() {
  var G__15035 = arguments.length;
  switch(G__15035) {
    case 0:
      return cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5360__auto__);
  }
};
cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$0 = function() {
  return 0;
};
cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x + y;
};
cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_add, x + y, more);
};
cljs.core.unchecked_add.cljs$lang$applyTo = function(seq15031) {
  var G__15032 = cljs.core.first(seq15031);
  var seq15031__$1 = cljs.core.next(seq15031);
  var G__15033 = cljs.core.first(seq15031__$1);
  var seq15031__$2 = cljs.core.next(seq15031__$1);
  return cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$variadic(G__15032, G__15033, seq15031__$2);
};
cljs.core.unchecked_add.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_add_int = function cljs$core$unchecked_add_int() {
  var G__15041 = arguments.length;
  switch(G__15041) {
    case 0:
      return cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5360__auto__);
  }
};
cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$0 = function() {
  return 0;
};
cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x + y;
};
cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_add_int, x + y, more);
};
cljs.core.unchecked_add_int.cljs$lang$applyTo = function(seq15037) {
  var G__15038 = cljs.core.first(seq15037);
  var seq15037__$1 = cljs.core.next(seq15037);
  var G__15039 = cljs.core.first(seq15037__$1);
  var seq15037__$2 = cljs.core.next(seq15037__$1);
  return cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic(G__15038, G__15039, seq15037__$2);
};
cljs.core.unchecked_add_int.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_dec = function cljs$core$unchecked_dec(x) {
  return x - 1;
};
cljs.core.unchecked_dec_int = function cljs$core$unchecked_dec_int(x) {
  return x - 1;
};
cljs.core.unchecked_divide_int = function cljs$core$unchecked_divide_int() {
  var G__15047 = arguments.length;
  switch(G__15047) {
    case 1:
      return cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5360__auto__);
  }
};
cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return 1 / x;
};
cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x / y;
};
cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_divide_int, x / y, more);
};
cljs.core.unchecked_divide_int.cljs$lang$applyTo = function(seq15043) {
  var G__15044 = cljs.core.first(seq15043);
  var seq15043__$1 = cljs.core.next(seq15043);
  var G__15045 = cljs.core.first(seq15043__$1);
  var seq15043__$2 = cljs.core.next(seq15043__$1);
  return cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic(G__15044, G__15045, seq15043__$2);
};
cljs.core.unchecked_divide_int.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_inc = function cljs$core$unchecked_inc(x) {
  return x + 1;
};
cljs.core.unchecked_inc_int = function cljs$core$unchecked_inc_int(x) {
  return x + 1;
};
cljs.core.unchecked_multiply = function cljs$core$unchecked_multiply() {
  var G__15053 = arguments.length;
  switch(G__15053) {
    case 0:
      return cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5360__auto__);
  }
};
cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$0 = function() {
  return 1;
};
cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x * y;
};
cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_multiply, x * y, more);
};
cljs.core.unchecked_multiply.cljs$lang$applyTo = function(seq15049) {
  var G__15050 = cljs.core.first(seq15049);
  var seq15049__$1 = cljs.core.next(seq15049);
  var G__15051 = cljs.core.first(seq15049__$1);
  var seq15049__$2 = cljs.core.next(seq15049__$1);
  return cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic(G__15050, G__15051, seq15049__$2);
};
cljs.core.unchecked_multiply.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_multiply_int = function cljs$core$unchecked_multiply_int() {
  var G__15059 = arguments.length;
  switch(G__15059) {
    case 0:
      return cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5360__auto__);
  }
};
cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$0 = function() {
  return 1;
};
cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x * y;
};
cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_multiply_int, x * y, more);
};
cljs.core.unchecked_multiply_int.cljs$lang$applyTo = function(seq15055) {
  var G__15056 = cljs.core.first(seq15055);
  var seq15055__$1 = cljs.core.next(seq15055);
  var G__15057 = cljs.core.first(seq15055__$1);
  var seq15055__$2 = cljs.core.next(seq15055__$1);
  return cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic(G__15056, G__15057, seq15055__$2);
};
cljs.core.unchecked_multiply_int.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_negate = function cljs$core$unchecked_negate(x) {
  return -x;
};
cljs.core.unchecked_negate_int = function cljs$core$unchecked_negate_int(x) {
  return -x;
};
cljs.core.unchecked_remainder_int = function cljs$core$unchecked_remainder_int(x, n) {
  var G__15063 = x;
  var G__15064 = n;
  return cljs.core.mod.cljs$core$IFn$_invoke$arity$2 ? cljs.core.mod.cljs$core$IFn$_invoke$arity$2(G__15063, G__15064) : cljs.core.mod.call(null, G__15063, G__15064);
};
cljs.core.unchecked_subtract = function cljs$core$unchecked_subtract() {
  var G__15069 = arguments.length;
  switch(G__15069) {
    case 1:
      return cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5360__auto__);
  }
};
cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return -x;
};
cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x - y;
};
cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_subtract, x - y, more);
};
cljs.core.unchecked_subtract.cljs$lang$applyTo = function(seq15065) {
  var G__15066 = cljs.core.first(seq15065);
  var seq15065__$1 = cljs.core.next(seq15065);
  var G__15067 = cljs.core.first(seq15065__$1);
  var seq15065__$2 = cljs.core.next(seq15065__$1);
  return cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$variadic(G__15066, G__15067, seq15065__$2);
};
cljs.core.unchecked_subtract.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_subtract_int = function cljs$core$unchecked_subtract_int() {
  var G__15075 = arguments.length;
  switch(G__15075) {
    case 1:
      return cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5360__auto__);
  }
};
cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return -x;
};
cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x - y;
};
cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_subtract_int, x - y, more);
};
cljs.core.unchecked_subtract_int.cljs$lang$applyTo = function(seq15071) {
  var G__15072 = cljs.core.first(seq15071);
  var seq15071__$1 = cljs.core.next(seq15071);
  var G__15073 = cljs.core.first(seq15071__$1);
  var seq15071__$2 = cljs.core.next(seq15071__$1);
  return cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$variadic(G__15072, G__15073, seq15071__$2);
};
cljs.core.unchecked_subtract_int.cljs$lang$maxFixedArity = 2;
cljs.core.fix = function cljs$core$fix(q) {
  if (q >= 0) {
    var G__15079 = q;
    return Math.floor(G__15079);
  } else {
    var G__15080 = q;
    return Math.ceil(G__15080);
  }
};
cljs.core.int$ = function cljs$core$int(x) {
  return x | 0;
};
cljs.core.unchecked_int = function cljs$core$unchecked_int(x) {
  return cljs.core.fix(x);
};
cljs.core.long$ = function cljs$core$long(x) {
  return cljs.core.fix(x);
};
cljs.core.unchecked_long = function cljs$core$unchecked_long(x) {
  return cljs.core.fix(x);
};
cljs.core.booleans = function cljs$core$booleans(x) {
  return x;
};
cljs.core.bytes = function cljs$core$bytes(x) {
  return x;
};
cljs.core.chars = function cljs$core$chars(x) {
  return x;
};
cljs.core.shorts = function cljs$core$shorts(x) {
  return x;
};
cljs.core.ints = function cljs$core$ints(x) {
  return x;
};
cljs.core.floats = function cljs$core$floats(x) {
  return x;
};
cljs.core.doubles = function cljs$core$doubles(x) {
  return x;
};
cljs.core.longs = function cljs$core$longs(x) {
  return x;
};
cljs.core.js_mod = function cljs$core$js_mod(n, d) {
  return n % d;
};
cljs.core.mod = function cljs$core$mod(n, d) {
  return (n % d + d) % d;
};
cljs.core.quot = function cljs$core$quot(n, d) {
  var rem = n % d;
  return cljs.core.fix((n - rem) / d);
};
cljs.core.rem = function cljs$core$rem(n, d) {
  var q = cljs.core.quot(n, d);
  return n - d * q;
};
cljs.core.bit_xor = function cljs$core$bit_xor() {
  var G__15085 = arguments.length;
  switch(G__15085) {
    case 2:
      return cljs.core.bit_xor.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.bit_xor.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5360__auto__);
  }
};
cljs.core.bit_xor.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x ^ y;
};
cljs.core.bit_xor.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.bit_xor, x ^ y, more);
};
cljs.core.bit_xor.cljs$lang$applyTo = function(seq15081) {
  var G__15082 = cljs.core.first(seq15081);
  var seq15081__$1 = cljs.core.next(seq15081);
  var G__15083 = cljs.core.first(seq15081__$1);
  var seq15081__$2 = cljs.core.next(seq15081__$1);
  return cljs.core.bit_xor.cljs$core$IFn$_invoke$arity$variadic(G__15082, G__15083, seq15081__$2);
};
cljs.core.bit_xor.cljs$lang$maxFixedArity = 2;
cljs.core.bit_and = function cljs$core$bit_and() {
  var G__15091 = arguments.length;
  switch(G__15091) {
    case 2:
      return cljs.core.bit_and.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.bit_and.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5360__auto__);
  }
};
cljs.core.bit_and.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x & y;
};
cljs.core.bit_and.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.bit_and, x & y, more);
};
cljs.core.bit_and.cljs$lang$applyTo = function(seq15087) {
  var G__15088 = cljs.core.first(seq15087);
  var seq15087__$1 = cljs.core.next(seq15087);
  var G__15089 = cljs.core.first(seq15087__$1);
  var seq15087__$2 = cljs.core.next(seq15087__$1);
  return cljs.core.bit_and.cljs$core$IFn$_invoke$arity$variadic(G__15088, G__15089, seq15087__$2);
};
cljs.core.bit_and.cljs$lang$maxFixedArity = 2;
cljs.core.bit_or = function cljs$core$bit_or() {
  var G__15097 = arguments.length;
  switch(G__15097) {
    case 2:
      return cljs.core.bit_or.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.bit_or.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5360__auto__);
  }
};
cljs.core.bit_or.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x | y;
};
cljs.core.bit_or.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.bit_or, x | y, more);
};
cljs.core.bit_or.cljs$lang$applyTo = function(seq15093) {
  var G__15094 = cljs.core.first(seq15093);
  var seq15093__$1 = cljs.core.next(seq15093);
  var G__15095 = cljs.core.first(seq15093__$1);
  var seq15093__$2 = cljs.core.next(seq15093__$1);
  return cljs.core.bit_or.cljs$core$IFn$_invoke$arity$variadic(G__15094, G__15095, seq15093__$2);
};
cljs.core.bit_or.cljs$lang$maxFixedArity = 2;
cljs.core.bit_and_not = function cljs$core$bit_and_not() {
  var G__15103 = arguments.length;
  switch(G__15103) {
    case 2:
      return cljs.core.bit_and_not.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.bit_and_not.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5360__auto__);
  }
};
cljs.core.bit_and_not.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x & ~y;
};
cljs.core.bit_and_not.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.bit_and_not, x & ~y, more);
};
cljs.core.bit_and_not.cljs$lang$applyTo = function(seq15099) {
  var G__15100 = cljs.core.first(seq15099);
  var seq15099__$1 = cljs.core.next(seq15099);
  var G__15101 = cljs.core.first(seq15099__$1);
  var seq15099__$2 = cljs.core.next(seq15099__$1);
  return cljs.core.bit_and_not.cljs$core$IFn$_invoke$arity$variadic(G__15100, G__15101, seq15099__$2);
};
cljs.core.bit_and_not.cljs$lang$maxFixedArity = 2;
cljs.core.bit_clear = function cljs$core$bit_clear(x, n) {
  return x & ~(1 << n);
};
cljs.core.bit_flip = function cljs$core$bit_flip(x, n) {
  return x ^ 1 << n;
};
cljs.core.bit_not = function cljs$core$bit_not(x) {
  return ~x;
};
cljs.core.bit_set = function cljs$core$bit_set(x, n) {
  return x | 1 << n;
};
cljs.core.bit_test = function cljs$core$bit_test(x, n) {
  return (x & 1 << n) != 0;
};
cljs.core.bit_shift_left = function cljs$core$bit_shift_left(x, n) {
  return x << n;
};
cljs.core.bit_shift_right = function cljs$core$bit_shift_right(x, n) {
  return x >> n;
};
cljs.core.bit_shift_right_zero_fill = function cljs$core$bit_shift_right_zero_fill(x, n) {
  return x >>> n;
};
cljs.core.unsigned_bit_shift_right = function cljs$core$unsigned_bit_shift_right(x, n) {
  return x >>> n;
};
cljs.core.bit_count = function cljs$core$bit_count(v) {
  var v__$1 = v - (v >> 1 & 1431655765);
  var v__$2 = (v__$1 & 858993459) + (v__$1 >> 2 & 858993459);
  return (v__$2 + (v__$2 >> 4) & 252645135) * 16843009 >> 24;
};
cljs.core._EQ__EQ_ = function cljs$core$_EQ__EQ_() {
  var G__15109 = arguments.length;
  switch(G__15109) {
    case 1:
      return cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5360__auto__);
  }
};
cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return cljs.core._equiv(x, y);
};
cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (x === y) {
      if (cljs.core.next(more)) {
        var G__15111 = y;
        var G__15112 = cljs.core.first(more);
        var G__15113 = cljs.core.next(more);
        x = G__15111;
        y = G__15112;
        more = G__15113;
        continue;
      } else {
        return y === cljs.core.first(more);
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._EQ__EQ_.cljs$lang$applyTo = function(seq15105) {
  var G__15106 = cljs.core.first(seq15105);
  var seq15105__$1 = cljs.core.next(seq15105);
  var G__15107 = cljs.core.first(seq15105__$1);
  var seq15105__$2 = cljs.core.next(seq15105__$1);
  return cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic(G__15106, G__15107, seq15105__$2);
};
cljs.core._EQ__EQ_.cljs$lang$maxFixedArity = 2;
cljs.core.pos_QMARK_ = function cljs$core$pos_QMARK_(n) {
  return n > 0;
};
cljs.core.zero_QMARK_ = function cljs$core$zero_QMARK_(n) {
  return n === 0;
};
cljs.core.neg_QMARK_ = function cljs$core$neg_QMARK_(x) {
  return x < 0;
};
cljs.core.nthnext = function cljs$core$nthnext(coll, n) {
  var n__$1 = n;
  var xs = cljs.core.seq(coll);
  while (true) {
    if (xs && n__$1 > 0) {
      var G__15114 = n__$1 - 1;
      var G__15115 = cljs.core.next(xs);
      n__$1 = G__15114;
      xs = G__15115;
      continue;
    } else {
      return xs;
    }
    break;
  }
};
cljs.core.str = function cljs$core$str() {
  var G__15119 = arguments.length;
  switch(G__15119) {
    case 0:
      return cljs.core.str.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0);
      return cljs.core.str.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5360__auto__);
  }
};
cljs.core.str.cljs$core$IFn$_invoke$arity$0 = function() {
  return "";
};
cljs.core.str.cljs$core$IFn$_invoke$arity$1 = function(x) {
  if (x == null) {
    return "";
  } else {
    var G__15120 = x;
    return goog.string.buildString(G__15120);
  }
};
cljs.core.str.cljs$core$IFn$_invoke$arity$variadic = function(x, ys) {
  var sb = new goog.string.StringBuffer([cljs.core.str(x)].join(""));
  var more = ys;
  while (true) {
    if (cljs.core.truth_(more)) {
      var G__15122 = sb.append([cljs.core.str(cljs.core.first(more))].join(""));
      var G__15123 = cljs.core.next(more);
      sb = G__15122;
      more = G__15123;
      continue;
    } else {
      return sb.toString();
    }
    break;
  }
};
cljs.core.str.cljs$lang$applyTo = function(seq15116) {
  var G__15117 = cljs.core.first(seq15116);
  var seq15116__$1 = cljs.core.next(seq15116);
  return cljs.core.str.cljs$core$IFn$_invoke$arity$variadic(G__15117, seq15116__$1);
};
cljs.core.str.cljs$lang$maxFixedArity = 1;
cljs.core.subs = function cljs$core$subs() {
  var G__15125 = arguments.length;
  switch(G__15125) {
    case 2:
      return cljs.core.subs.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.subs.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.subs.cljs$core$IFn$_invoke$arity$2 = function(s, start) {
  return s.substring(start);
};
cljs.core.subs.cljs$core$IFn$_invoke$arity$3 = function(s, start, end) {
  return s.substring(start, end);
};
cljs.core.subs.cljs$lang$maxFixedArity = 3;
cljs.core.equiv_sequential = function cljs$core$equiv_sequential(x, y) {
  return cljs.core.boolean$(cljs.core.sequential_QMARK_(y) ? cljs.core.counted_QMARK_(x) && cljs.core.counted_QMARK_(y) && !(cljs.core.count(x) === cljs.core.count(y)) ? false : function() {
    var xs = cljs.core.seq(x);
    var ys = cljs.core.seq(y);
    while (true) {
      if (xs == null) {
        return ys == null;
      } else {
        if (ys == null) {
          return false;
        } else {
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.first(xs), cljs.core.first(ys))) {
            var G__15127 = cljs.core.next(xs);
            var G__15128 = cljs.core.next(ys);
            xs = G__15127;
            ys = G__15128;
            continue;
          } else {
            return false;
          }
        }
      }
      break;
    }
  }() : null);
};
cljs.core.hash_coll = function cljs$core$hash_coll(coll) {
  if (cljs.core.seq(coll)) {
    var res = cljs.core.hash(cljs.core.first(coll));
    var s = cljs.core.next(coll);
    while (true) {
      if (s == null) {
        return res;
      } else {
        var G__15129 = cljs.core.hash_combine(res, cljs.core.hash(cljs.core.first(s)));
        var G__15130 = cljs.core.next(s);
        res = G__15129;
        s = G__15130;
        continue;
      }
      break;
    }
  } else {
    return 0;
  }
};
cljs.core.hash_imap = function cljs$core$hash_imap(m) {
  var h = 0;
  var s = cljs.core.seq(m);
  while (true) {
    if (s) {
      var e = cljs.core.first(s);
      var G__15135 = (h + (cljs.core.hash(function() {
        var G__15133 = e;
        return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__15133) : cljs.core.key.call(null, G__15133);
      }()) ^ cljs.core.hash(function() {
        var G__15134 = e;
        return cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(G__15134) : cljs.core.val.call(null, G__15134);
      }()))) % 4503599627370496;
      var G__15136 = cljs.core.next(s);
      h = G__15135;
      s = G__15136;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.hash_iset = function cljs$core$hash_iset(s) {
  var h = 0;
  var s__$1 = cljs.core.seq(s);
  while (true) {
    if (s__$1) {
      var e = cljs.core.first(s__$1);
      var G__15137 = (h + cljs.core.hash(e)) % 4503599627370496;
      var G__15138 = cljs.core.next(s__$1);
      h = G__15137;
      s__$1 = G__15138;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.extend_object_BANG_ = function cljs$core$extend_object_BANG_(obj, fn_map) {
  var seq__15149_15159 = cljs.core.seq(fn_map);
  var chunk__15150_15160 = null;
  var count__15151_15161 = 0;
  var i__15152_15162 = 0;
  while (true) {
    if (i__15152_15162 < count__15151_15161) {
      var vec__15153_15163 = chunk__15150_15160.cljs$core$IIndexed$_nth$arity$2(null, i__15152_15162);
      var key_name_15164 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__15153_15163, 0, null);
      var f_15165 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__15153_15163, 1, null);
      var str_name_15166 = function() {
        var G__15154 = key_name_15164;
        return cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(G__15154) : cljs.core.name.call(null, G__15154);
      }();
      obj[str_name_15166] = f_15165;
      var G__15167 = seq__15149_15159;
      var G__15168 = chunk__15150_15160;
      var G__15169 = count__15151_15161;
      var G__15170 = i__15152_15162 + 1;
      seq__15149_15159 = G__15167;
      chunk__15150_15160 = G__15168;
      count__15151_15161 = G__15169;
      i__15152_15162 = G__15170;
      continue;
    } else {
      var temp__4422__auto___15171 = cljs.core.seq(seq__15149_15159);
      if (temp__4422__auto___15171) {
        var seq__15149_15172__$1 = temp__4422__auto___15171;
        if (cljs.core.chunked_seq_QMARK_(seq__15149_15172__$1)) {
          var c__5094__auto___15173 = function() {
            var G__15155 = seq__15149_15172__$1;
            return cljs.core.chunk_first.cljs$core$IFn$_invoke$arity$1 ? cljs.core.chunk_first.cljs$core$IFn$_invoke$arity$1(G__15155) : cljs.core.chunk_first.call(null, G__15155);
          }();
          var G__15174 = function() {
            var G__15156 = seq__15149_15172__$1;
            return cljs.core.chunk_rest.cljs$core$IFn$_invoke$arity$1 ? cljs.core.chunk_rest.cljs$core$IFn$_invoke$arity$1(G__15156) : cljs.core.chunk_rest.call(null, G__15156);
          }();
          var G__15175 = c__5094__auto___15173;
          var G__15176 = cljs.core.count(c__5094__auto___15173);
          var G__15177 = 0;
          seq__15149_15159 = G__15174;
          chunk__15150_15160 = G__15175;
          count__15151_15161 = G__15176;
          i__15152_15162 = G__15177;
          continue;
        } else {
          var vec__15157_15178 = cljs.core.first(seq__15149_15172__$1);
          var key_name_15179 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__15157_15178, 0, null);
          var f_15180 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__15157_15178, 1, null);
          var str_name_15181 = function() {
            var G__15158 = key_name_15179;
            return cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(G__15158) : cljs.core.name.call(null, G__15158);
          }();
          obj[str_name_15181] = f_15180;
          var G__15182 = cljs.core.next(seq__15149_15172__$1);
          var G__15183 = null;
          var G__15184 = 0;
          var G__15185 = 0;
          seq__15149_15159 = G__15182;
          chunk__15150_15160 = G__15183;
          count__15151_15161 = G__15184;
          i__15152_15162 = G__15185;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return obj;
};
cljs.core.List = function(meta, first, rest, count, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.count = count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65937646;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.List.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.List.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.List.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.List.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.List(self__.meta, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return null;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.List.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._rest(coll__$1);
};
cljs.core.List.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4725__auto__ = self__.__hash;
  if (!(h__4725__auto__ == null)) {
    return h__4725__auto__;
  } else {
    var h__4725__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4725__auto____$1;
    return h__4725__auto____$1;
  }
};
cljs.core.List.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.List.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.List.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.List.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(meta__$1, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, coll__$1, self__.count + 1, null);
};
cljs.core.List.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "first", "first", 996428481, null), new cljs.core.Symbol(null, "rest", "rest", 398835108, null), new cljs.core.Symbol(null, "count", "count", -514511684, null), new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null)], null);
};
cljs.core.List.cljs$lang$type = true;
cljs.core.List.cljs$lang$ctorStr = "cljs.core/List";
cljs.core.List.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/List");
};
cljs.core.__GT_List = function cljs$core$__GT_List(meta, first, rest, count, __hash) {
  return new cljs.core.List(meta, first, rest, count, __hash);
};
cljs.core.List.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5285__auto__ = this;
  return cljs.core.es6_iterator(this__5285__auto__);
};
cljs.core.EmptyList = function(meta) {
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 65937614;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.EmptyList.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.EmptyList.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.EmptyList.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.EmptyList.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.EmptyList(self__.meta);
};
cljs.core.EmptyList.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  throw new Error("Can't pop empty list");
};
cljs.core.EmptyList.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.empty_ordered_hash;
};
cljs.core.EmptyList.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.EmptyList.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.EmptyList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.EmptyList(meta__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, null, 1, null);
};
cljs.core.EmptyList.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null)], null);
};
cljs.core.EmptyList.cljs$lang$type = true;
cljs.core.EmptyList.cljs$lang$ctorStr = "cljs.core/EmptyList";
cljs.core.EmptyList.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/EmptyList");
};
cljs.core.__GT_EmptyList = function cljs$core$__GT_EmptyList(meta) {
  return new cljs.core.EmptyList(meta);
};
cljs.core.List.EMPTY = new cljs.core.EmptyList(null);
cljs.core.EmptyList.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5285__auto__ = this;
  return cljs.core.es6_iterator(this__5285__auto__);
};
cljs.core.reversible_QMARK_ = function cljs$core$reversible_QMARK_(coll) {
  var G__15187 = coll;
  if (G__15187) {
    var bit__4983__auto__ = G__15187.cljs$lang$protocol_mask$partition0$ & 134217728;
    if (bit__4983__auto__ || G__15187.cljs$core$IReversible$) {
      return true;
    } else {
      if (!G__15187.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IReversible, G__15187);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IReversible, G__15187);
  }
};
cljs.core.rseq = function cljs$core$rseq(coll) {
  return cljs.core._rseq(coll);
};
cljs.core.reverse = function cljs$core$reverse(coll) {
  if (cljs.core.reversible_QMARK_(coll)) {
    return cljs.core.rseq(coll);
  } else {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj, cljs.core.List.EMPTY, coll);
  }
};
cljs.core.list = function cljs$core$list() {
  var argseq__5349__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.list.cljs$core$IFn$_invoke$arity$variadic(argseq__5349__auto__);
};
cljs.core.list.cljs$core$IFn$_invoke$arity$variadic = function(xs) {
  var arr = xs instanceof cljs.core.IndexedSeq && xs.i === 0 ? xs.arr : function() {
    var arr = [];
    var xs__$1 = xs;
    while (true) {
      if (!(xs__$1 == null)) {
        arr.push(xs__$1.cljs$core$ISeq$_first$arity$1(null));
        var G__15189 = xs__$1.cljs$core$INext$_next$arity$1(null);
        xs__$1 = G__15189;
        continue;
      } else {
        return arr;
      }
      break;
    }
  }();
  var i = arr.length;
  var r = cljs.core.List.EMPTY;
  while (true) {
    if (i > 0) {
      var G__15190 = i - 1;
      var G__15191 = r.cljs$core$ICollection$_conj$arity$2(null, arr[i - 1]);
      i = G__15190;
      r = G__15191;
      continue;
    } else {
      return r;
    }
    break;
  }
};
cljs.core.list.cljs$lang$maxFixedArity = 0;
cljs.core.list.cljs$lang$applyTo = function(seq15188) {
  return cljs.core.list.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq15188));
};
cljs.core.Cons = function(meta, first, rest, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65929452;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Cons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.Cons.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Cons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Cons.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Cons(self__.meta, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core.seq(self__.rest);
  }
};
cljs.core.Cons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4725__auto__ = self__.__hash;
  if (!(h__4725__auto__ == null)) {
    return h__4725__auto__;
  } else {
    var h__4725__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4725__auto____$1;
    return h__4725__auto____$1;
  }
};
cljs.core.Cons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.Cons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.Cons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.Cons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.Cons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(meta__$1, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(null, o, coll__$1, self__.__hash);
};
cljs.core.Cons.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "first", "first", 996428481, null), new cljs.core.Symbol(null, "rest", "rest", 398835108, null), new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null)], null);
};
cljs.core.Cons.cljs$lang$type = true;
cljs.core.Cons.cljs$lang$ctorStr = "cljs.core/Cons";
cljs.core.Cons.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/Cons");
};
cljs.core.__GT_Cons = function cljs$core$__GT_Cons(meta, first, rest, __hash) {
  return new cljs.core.Cons(meta, first, rest, __hash);
};
cljs.core.Cons.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5285__auto__ = this;
  return cljs.core.es6_iterator(this__5285__auto__);
};
cljs.core.cons = function cljs$core$cons(x, coll) {
  if (function() {
    var or__4309__auto__ = coll == null;
    if (or__4309__auto__) {
      return or__4309__auto__;
    } else {
      var G__15195 = coll;
      if (G__15195) {
        var bit__4976__auto__ = G__15195.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4976__auto__ || G__15195.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }
  }()) {
    return new cljs.core.Cons(null, x, coll, null);
  } else {
    return new cljs.core.Cons(null, x, cljs.core.seq(coll), null);
  }
};
cljs.core.list_QMARK_ = function cljs$core$list_QMARK_(x) {
  var G__15197 = x;
  if (G__15197) {
    var bit__4983__auto__ = G__15197.cljs$lang$protocol_mask$partition0$ & 33554432;
    if (bit__4983__auto__ || G__15197.cljs$core$IList$) {
      return true;
    } else {
      if (!G__15197.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IList, G__15197);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IList, G__15197);
  }
};
cljs.core.hash_keyword = function cljs$core$hash_keyword(k) {
  return cljs.core.hash_symbol(k) + 2654435769 | 0;
};
cljs.core.compare_keywords = function cljs$core$compare_keywords(a, b) {
  if (a.fqn === b.fqn) {
    return 0;
  } else {
    if (cljs.core.truth_(function() {
      var and__4297__auto__ = cljs.core.not(a.ns);
      if (and__4297__auto__) {
        return b.ns;
      } else {
        return and__4297__auto__;
      }
    }())) {
      return -1;
    } else {
      if (cljs.core.truth_(a.ns)) {
        if (cljs.core.not(b.ns)) {
          return 1;
        } else {
          var nsc = function() {
            var G__15204 = a.ns;
            var G__15205 = b.ns;
            return goog.array.defaultCompare(G__15204, G__15205);
          }();
          if (0 === nsc) {
            var G__15206 = a.name;
            var G__15207 = b.name;
            return goog.array.defaultCompare(G__15206, G__15207);
          } else {
            return nsc;
          }
        }
      } else {
        var G__15208 = a.name;
        var G__15209 = b.name;
        return goog.array.defaultCompare(G__15208, G__15209);
      }
    }
  }
};
cljs.core.Keyword = function(ns, name, fqn, _hash) {
  this.ns = ns;
  this.name = name;
  this.fqn = fqn;
  this._hash = _hash;
  this.cljs$lang$protocol_mask$partition0$ = 2153775105;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Keyword.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return [cljs.core.str(":"), cljs.core.str(self__.fqn)].join("");
};
cljs.core.Keyword.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Keyword.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Keyword) {
    return self__.fqn === other.fqn;
  } else {
    return false;
  }
};
cljs.core.Keyword.prototype.call = function() {
  var G__15211 = null;
  var G__15211__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, kw);
  };
  var G__15211__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, kw, not_found);
  };
  G__15211 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__15211__2.call(this, self__, coll);
      case 3:
        return G__15211__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__15211.cljs$core$IFn$_invoke$arity$2 = G__15211__2;
  G__15211.cljs$core$IFn$_invoke$arity$3 = G__15211__3;
  return G__15211;
}();
cljs.core.Keyword.prototype.apply = function(self__, args15210) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args15210)));
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, kw);
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, kw, not_found);
};
cljs.core.Keyword.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var h__4725__auto__ = self__._hash;
  if (!(h__4725__auto__ == null)) {
    return h__4725__auto__;
  } else {
    var h__4725__auto____$1 = cljs.core.hash_keyword(this$__$1);
    self__._hash = h__4725__auto____$1;
    return h__4725__auto____$1;
  }
};
cljs.core.Keyword.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Keyword.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Keyword.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write(writer, [cljs.core.str(":"), cljs.core.str(self__.fqn)].join(""));
};
cljs.core.Keyword.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "ns", "ns", 2082130287, null), new cljs.core.Symbol(null, "name", "name", -810760592, null), new cljs.core.Symbol(null, "fqn", "fqn", -1749334463, null), new cljs.core.Symbol(null, "_hash", "_hash", -2130838312, null)], null);
};
cljs.core.Keyword.cljs$lang$type = true;
cljs.core.Keyword.cljs$lang$ctorStr = "cljs.core/Keyword";
cljs.core.Keyword.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/Keyword");
};
cljs.core.__GT_Keyword = function cljs$core$__GT_Keyword(ns, name, fqn, _hash) {
  return new cljs.core.Keyword(ns, name, fqn, _hash);
};
cljs.core.keyword_QMARK_ = function cljs$core$keyword_QMARK_(x) {
  return x instanceof cljs.core.Keyword;
};
cljs.core.keyword_identical_QMARK_ = function cljs$core$keyword_identical_QMARK_(x, y) {
  if (x === y) {
    return true;
  } else {
    if (x instanceof cljs.core.Keyword && y instanceof cljs.core.Keyword) {
      return x.fqn === y.fqn;
    } else {
      return false;
    }
  }
};
cljs.core.namespace = function cljs$core$namespace(x) {
  if (function() {
    var G__15213 = x;
    if (G__15213) {
      var bit__4976__auto__ = G__15213.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__4976__auto__ || G__15213.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return x.cljs$core$INamed$_namespace$arity$1(null);
  } else {
    throw new Error([cljs.core.str("Doesn't support namespace: "), cljs.core.str(x)].join(""));
  }
};
cljs.core.keyword = function cljs$core$keyword() {
  var G__15215 = arguments.length;
  switch(G__15215) {
    case 1:
      return cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.keyword.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.keyword.cljs$core$IFn$_invoke$arity$1 = function(name) {
  if (name instanceof cljs.core.Keyword) {
    return name;
  } else {
    if (name instanceof cljs.core.Symbol) {
      return new cljs.core.Keyword(cljs.core.namespace(name), function() {
        var G__15216 = name;
        return cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(G__15216) : cljs.core.name.call(null, G__15216);
      }(), name.str, null);
    } else {
      if (typeof name === "string") {
        var parts = name.split("/");
        if (parts.length === 2) {
          return new cljs.core.Keyword(parts[0], parts[1], name, null);
        } else {
          return new cljs.core.Keyword(null, parts[0], name, null);
        }
      } else {
        return null;
      }
    }
  }
};
cljs.core.keyword.cljs$core$IFn$_invoke$arity$2 = function(ns, name) {
  return new cljs.core.Keyword(ns, name, [cljs.core.str(cljs.core.truth_(ns) ? [cljs.core.str(ns), cljs.core.str("/")].join("") : null), cljs.core.str(name)].join(""), null);
};
cljs.core.keyword.cljs$lang$maxFixedArity = 2;
cljs.core.LazySeq = function(meta, fn, s, __hash) {
  this.meta = meta;
  this.fn = fn;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.LazySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.LazySeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.LazySeq.prototype.sval = function() {
  var self__ = this;
  var coll = this;
  if (self__.fn == null) {
    return self__.s;
  } else {
    self__.s = function() {
      return self__.fn.cljs$core$IFn$_invoke$arity$0 ? self__.fn.cljs$core$IFn$_invoke$arity$0() : self__.fn.call(null);
    }();
    self__.fn = null;
    return self__.s;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.LazySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq(coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.next(self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4725__auto__ = self__.__hash;
  if (!(h__4725__auto__ == null)) {
    return h__4725__auto__;
  } else {
    var h__4725__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4725__auto____$1;
    return h__4725__auto____$1;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.LazySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq(coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.first(self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq(coll__$1);
  if (!(self__.s == null)) {
    return cljs.core.rest(self__.s);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  coll__$1.sval();
  if (self__.s == null) {
    return null;
  } else {
    var ls = self__.s;
    while (true) {
      if (ls instanceof cljs.core.LazySeq) {
        var G__15218 = ls.sval();
        ls = G__15218;
        continue;
      } else {
        self__.s = ls;
        return cljs.core.seq(self__.s);
      }
      break;
    }
  }
};
cljs.core.LazySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.LazySeq(meta__$1, self__.fn, self__.s, self__.__hash);
};
cljs.core.LazySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.LazySeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "fn", "fn", 465265323, null), new cljs.core.Symbol(null, "s", "s", -948495851, null), new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null)], null);
};
cljs.core.LazySeq.cljs$lang$type = true;
cljs.core.LazySeq.cljs$lang$ctorStr = "cljs.core/LazySeq";
cljs.core.LazySeq.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/LazySeq");
};
cljs.core.__GT_LazySeq = function cljs$core$__GT_LazySeq(meta, fn, s, __hash) {
  return new cljs.core.LazySeq(meta, fn, s, __hash);
};
cljs.core.LazySeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5285__auto__ = this;
  return cljs.core.es6_iterator(this__5285__auto__);
};
cljs.core.ChunkBuffer = function(buf, end) {
  this.buf = buf;
  this.end = end;
  this.cljs$lang$protocol_mask$partition0$ = 2;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.ChunkBuffer.prototype.add = function(o) {
  var self__ = this;
  var _ = this;
  self__.buf[self__.end] = o;
  return self__.end = self__.end + 1;
};
cljs.core.ChunkBuffer.prototype.chunk = function(o) {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.ArrayChunk(self__.buf, 0, self__.end);
  self__.buf = null;
  return ret;
};
cljs.core.ChunkBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end;
};
cljs.core.ChunkBuffer.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "buf", "buf", 1426618187, null), new cljs.core.Symbol(null, "end", "end", 1372345569, null)], null);
};
cljs.core.ChunkBuffer.cljs$lang$type = true;
cljs.core.ChunkBuffer.cljs$lang$ctorStr = "cljs.core/ChunkBuffer";
cljs.core.ChunkBuffer.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/ChunkBuffer");
};
cljs.core.__GT_ChunkBuffer = function cljs$core$__GT_ChunkBuffer(buf, end) {
  return new cljs.core.ChunkBuffer(buf, end);
};
cljs.core.chunk_buffer = function cljs$core$chunk_buffer(capacity) {
  return new cljs.core.ChunkBuffer(new Array(capacity), 0);
};
cljs.core.ArrayChunk = function(arr, off, end) {
  this.arr = arr;
  this.off = off;
  this.end = end;
  this.cljs$lang$protocol_mask$partition0$ = 524306;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.ArrayChunk.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end - self__.off;
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, i) {
  var self__ = this;
  var coll__$1 = this;
  return self__.arr[self__.off + i];
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, i, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (i >= 0 && i < self__.end - self__.off) {
    return self__.arr[self__.off + i];
  } else {
    return not_found;
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$ = true;
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$_drop_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off === self__.end) {
    throw new Error("-drop-first of empty chunk");
  } else {
    return new cljs.core.ArrayChunk(self__.arr, self__.off + 1, self__.end);
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, self__.arr[self__.off], self__.off + 1);
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, start, self__.off);
};
cljs.core.ArrayChunk.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), new cljs.core.Symbol(null, "off", "off", -2047994980, null), new cljs.core.Symbol(null, "end", "end", 1372345569, null)], null);
};
cljs.core.ArrayChunk.cljs$lang$type = true;
cljs.core.ArrayChunk.cljs$lang$ctorStr = "cljs.core/ArrayChunk";
cljs.core.ArrayChunk.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/ArrayChunk");
};
cljs.core.__GT_ArrayChunk = function cljs$core$__GT_ArrayChunk(arr, off, end) {
  return new cljs.core.ArrayChunk(arr, off, end);
};
cljs.core.array_chunk = function cljs$core$array_chunk() {
  var G__15220 = arguments.length;
  switch(G__15220) {
    case 1:
      return cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$1 = function(arr) {
  return new cljs.core.ArrayChunk(arr, 0, arr.length);
};
cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$2 = function(arr, off) {
  return new cljs.core.ArrayChunk(arr, off, arr.length);
};
cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$3 = function(arr, off, end) {
  return new cljs.core.ArrayChunk(arr, off, end);
};
cljs.core.array_chunk.cljs$lang$maxFixedArity = 3;
cljs.core.ChunkedCons = function(chunk, more, meta, __hash) {
  this.chunk = chunk;
  this.more = more;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31850732;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedCons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ChunkedCons.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedCons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count(self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first(self__.chunk), self__.more, self__.meta, null);
  } else {
    var more__$1 = cljs.core._seq(self__.more);
    if (more__$1 == null) {
      return null;
    } else {
      return more__$1;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4725__auto__ = self__.__hash;
  if (!(h__4725__auto__ == null)) {
    return h__4725__auto__;
  } else {
    var h__4725__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4725__auto____$1;
    return h__4725__auto____$1;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.chunk, 0);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count(self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first(self__.chunk), self__.more, self__.meta, null);
  } else {
    if (self__.more == null) {
      return cljs.core.List.EMPTY;
    } else {
      return self__.more;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.chunk;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.more;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ChunkedCons(self__.chunk, self__.more, m, self__.__hash);
};
cljs.core.ChunkedCons.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons(o, this$__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return null;
  } else {
    return self__.more;
  }
};
cljs.core.ChunkedCons.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "chunk", "chunk", 449371907, null), new cljs.core.Symbol(null, "more", "more", -418290273, null), new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null)], null);
};
cljs.core.ChunkedCons.cljs$lang$type = true;
cljs.core.ChunkedCons.cljs$lang$ctorStr = "cljs.core/ChunkedCons";
cljs.core.ChunkedCons.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/ChunkedCons");
};
cljs.core.__GT_ChunkedCons = function cljs$core$__GT_ChunkedCons(chunk, more, meta, __hash) {
  return new cljs.core.ChunkedCons(chunk, more, meta, __hash);
};
cljs.core.ChunkedCons.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5285__auto__ = this;
  return cljs.core.es6_iterator(this__5285__auto__);
};
cljs.core.chunk_cons = function cljs$core$chunk_cons(chunk, rest) {
  if (cljs.core._count(chunk) === 0) {
    return rest;
  } else {
    return new cljs.core.ChunkedCons(chunk, rest, null, null);
  }
};
cljs.core.chunk_append = function cljs$core$chunk_append(b, x) {
  return b.add(x);
};
cljs.core.chunk = function cljs$core$chunk(b) {
  return b.chunk();
};
cljs.core.chunk_first = function cljs$core$chunk_first(s) {
  return cljs.core._chunked_first(s);
};
cljs.core.chunk_rest = function cljs$core$chunk_rest(s) {
  return cljs.core._chunked_rest(s);
};
cljs.core.chunk_next = function cljs$core$chunk_next(s) {
  if (function() {
    var G__15223 = s;
    if (G__15223) {
      var bit__4976__auto__ = G__15223.cljs$lang$protocol_mask$partition1$ & 1024;
      if (bit__4976__auto__ || G__15223.cljs$core$IChunkedNext$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._chunked_next(s);
  } else {
    return cljs.core.seq(cljs.core._chunked_rest(s));
  }
};
cljs.core.to_array = function cljs$core$to_array(s) {
  var ary = [];
  var s__$1 = s;
  while (true) {
    if (cljs.core.seq(s__$1)) {
      ary.push(cljs.core.first(s__$1));
      var G__15224 = cljs.core.next(s__$1);
      s__$1 = G__15224;
      continue;
    } else {
      return ary;
    }
    break;
  }
};
cljs.core.to_array_2d = function cljs$core$to_array_2d(coll) {
  var ret = new Array(cljs.core.count(coll));
  var i_15225 = 0;
  var xs_15226 = cljs.core.seq(coll);
  while (true) {
    if (xs_15226) {
      ret[i_15225] = cljs.core.to_array(cljs.core.first(xs_15226));
      var G__15227 = i_15225 + 1;
      var G__15228 = cljs.core.next(xs_15226);
      i_15225 = G__15227;
      xs_15226 = G__15228;
      continue;
    } else {
    }
    break;
  }
  return ret;
};
cljs.core.int_array = function cljs$core$int_array() {
  var G__15230 = arguments.length;
  switch(G__15230) {
    case 1:
      return cljs.core.int_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.int_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.int_array.cljs$core$IFn$_invoke$arity$1 = function(size_or_seq) {
  if (typeof size_or_seq === "number") {
    return cljs.core.int_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
  } else {
    return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
  }
};
cljs.core.int_array.cljs$core$IFn$_invoke$arity$2 = function(size, init_val_or_seq) {
  var a = new Array(size);
  if (cljs.core.seq_QMARK_(init_val_or_seq)) {
    var s = cljs.core.seq(init_val_or_seq);
    var i = 0;
    var s__$1 = s;
    while (true) {
      if (s__$1 && i < size) {
        a[i] = cljs.core.first(s__$1);
        var G__15232 = i + 1;
        var G__15233 = cljs.core.next(s__$1);
        i = G__15232;
        s__$1 = G__15233;
        continue;
      } else {
        return a;
      }
      break;
    }
  } else {
    var n__5194__auto___15234 = size;
    var i_15235 = 0;
    while (true) {
      if (i_15235 < n__5194__auto___15234) {
        a[i_15235] = init_val_or_seq;
        var G__15236 = i_15235 + 1;
        i_15235 = G__15236;
        continue;
      } else {
      }
      break;
    }
    return a;
  }
};
cljs.core.int_array.cljs$lang$maxFixedArity = 2;
cljs.core.long_array = function cljs$core$long_array() {
  var G__15238 = arguments.length;
  switch(G__15238) {
    case 1:
      return cljs.core.long_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.long_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.long_array.cljs$core$IFn$_invoke$arity$1 = function(size_or_seq) {
  if (typeof size_or_seq === "number") {
    return cljs.core.long_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
  } else {
    return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
  }
};
cljs.core.long_array.cljs$core$IFn$_invoke$arity$2 = function(size, init_val_or_seq) {
  var a = new Array(size);
  if (cljs.core.seq_QMARK_(init_val_or_seq)) {
    var s = cljs.core.seq(init_val_or_seq);
    var i = 0;
    var s__$1 = s;
    while (true) {
      if (s__$1 && i < size) {
        a[i] = cljs.core.first(s__$1);
        var G__15240 = i + 1;
        var G__15241 = cljs.core.next(s__$1);
        i = G__15240;
        s__$1 = G__15241;
        continue;
      } else {
        return a;
      }
      break;
    }
  } else {
    var n__5194__auto___15242 = size;
    var i_15243 = 0;
    while (true) {
      if (i_15243 < n__5194__auto___15242) {
        a[i_15243] = init_val_or_seq;
        var G__15244 = i_15243 + 1;
        i_15243 = G__15244;
        continue;
      } else {
      }
      break;
    }
    return a;
  }
};
cljs.core.long_array.cljs$lang$maxFixedArity = 2;
cljs.core.double_array = function cljs$core$double_array() {
  var G__15246 = arguments.length;
  switch(G__15246) {
    case 1:
      return cljs.core.double_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.double_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.double_array.cljs$core$IFn$_invoke$arity$1 = function(size_or_seq) {
  if (typeof size_or_seq === "number") {
    return cljs.core.double_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
  } else {
    return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
  }
};
cljs.core.double_array.cljs$core$IFn$_invoke$arity$2 = function(size, init_val_or_seq) {
  var a = new Array(size);
  if (cljs.core.seq_QMARK_(init_val_or_seq)) {
    var s = cljs.core.seq(init_val_or_seq);
    var i = 0;
    var s__$1 = s;
    while (true) {
      if (s__$1 && i < size) {
        a[i] = cljs.core.first(s__$1);
        var G__15248 = i + 1;
        var G__15249 = cljs.core.next(s__$1);
        i = G__15248;
        s__$1 = G__15249;
        continue;
      } else {
        return a;
      }
      break;
    }
  } else {
    var n__5194__auto___15250 = size;
    var i_15251 = 0;
    while (true) {
      if (i_15251 < n__5194__auto___15250) {
        a[i_15251] = init_val_or_seq;
        var G__15252 = i_15251 + 1;
        i_15251 = G__15252;
        continue;
      } else {
      }
      break;
    }
    return a;
  }
};
cljs.core.double_array.cljs$lang$maxFixedArity = 2;
cljs.core.object_array = function cljs$core$object_array() {
  var G__15254 = arguments.length;
  switch(G__15254) {
    case 1:
      return cljs.core.object_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.object_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.object_array.cljs$core$IFn$_invoke$arity$1 = function(size_or_seq) {
  if (typeof size_or_seq === "number") {
    return cljs.core.object_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
  } else {
    return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
  }
};
cljs.core.object_array.cljs$core$IFn$_invoke$arity$2 = function(size, init_val_or_seq) {
  var a = new Array(size);
  if (cljs.core.seq_QMARK_(init_val_or_seq)) {
    var s = cljs.core.seq(init_val_or_seq);
    var i = 0;
    var s__$1 = s;
    while (true) {
      if (s__$1 && i < size) {
        a[i] = cljs.core.first(s__$1);
        var G__15256 = i + 1;
        var G__15257 = cljs.core.next(s__$1);
        i = G__15256;
        s__$1 = G__15257;
        continue;
      } else {
        return a;
      }
      break;
    }
  } else {
    var n__5194__auto___15258 = size;
    var i_15259 = 0;
    while (true) {
      if (i_15259 < n__5194__auto___15258) {
        a[i_15259] = init_val_or_seq;
        var G__15260 = i_15259 + 1;
        i_15259 = G__15260;
        continue;
      } else {
      }
      break;
    }
    return a;
  }
};
cljs.core.object_array.cljs$lang$maxFixedArity = 2;
cljs.core.bounded_count = function cljs$core$bounded_count(s, n) {
  if (cljs.core.counted_QMARK_(s)) {
    return cljs.core.count(s);
  } else {
    var s__$1 = s;
    var i = n;
    var sum = 0;
    while (true) {
      if (i > 0 && cljs.core.seq(s__$1)) {
        var G__15261 = cljs.core.next(s__$1);
        var G__15262 = i - 1;
        var G__15263 = sum + 1;
        s__$1 = G__15261;
        i = G__15262;
        sum = G__15263;
        continue;
      } else {
        return sum;
      }
      break;
    }
  }
};
cljs.core.spread = function cljs$core$spread(arglist) {
  if (arglist == null) {
    return null;
  } else {
    if (cljs.core.next(arglist) == null) {
      return cljs.core.seq(cljs.core.first(arglist));
    } else {
      return cljs.core.cons(cljs.core.first(arglist), cljs$core$spread(cljs.core.next(arglist)));
    }
  }
};
cljs.core.concat = function cljs$core$concat() {
  var G__15269 = arguments.length;
  switch(G__15269) {
    case 0:
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5360__auto__);
  }
};
cljs.core.concat.cljs$core$IFn$_invoke$arity$0 = function() {
  return new cljs.core.LazySeq(null, function() {
    return null;
  }, null, null);
};
cljs.core.concat.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return new cljs.core.LazySeq(null, function() {
    return x;
  }, null, null);
};
cljs.core.concat.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return new cljs.core.LazySeq(null, function() {
    var s = cljs.core.seq(x);
    if (s) {
      if (cljs.core.chunked_seq_QMARK_(s)) {
        return cljs.core.chunk_cons(cljs.core.chunk_first(s), cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.chunk_rest(s), y));
      } else {
        return cljs.core.cons(cljs.core.first(s), cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.rest(s), y));
      }
    } else {
      return y;
    }
  }, null, null);
};
cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic = function(x, y, zs) {
  var cat = function cljs$core$cat(xys, zs__$1) {
    return new cljs.core.LazySeq(null, function() {
      var xys__$1 = cljs.core.seq(xys);
      if (xys__$1) {
        if (cljs.core.chunked_seq_QMARK_(xys__$1)) {
          return cljs.core.chunk_cons(cljs.core.chunk_first(xys__$1), cljs$core$cat(cljs.core.chunk_rest(xys__$1), zs__$1));
        } else {
          return cljs.core.cons(cljs.core.first(xys__$1), cljs$core$cat(cljs.core.rest(xys__$1), zs__$1));
        }
      } else {
        if (cljs.core.truth_(zs__$1)) {
          return cljs$core$cat(cljs.core.first(zs__$1), cljs.core.next(zs__$1));
        } else {
          return null;
        }
      }
    }, null, null);
  };
  return cat(cljs.core.concat.cljs$core$IFn$_invoke$arity$2(x, y), zs);
};
cljs.core.concat.cljs$lang$applyTo = function(seq15265) {
  var G__15266 = cljs.core.first(seq15265);
  var seq15265__$1 = cljs.core.next(seq15265);
  var G__15267 = cljs.core.first(seq15265__$1);
  var seq15265__$2 = cljs.core.next(seq15265__$1);
  return cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(G__15266, G__15267, seq15265__$2);
};
cljs.core.concat.cljs$lang$maxFixedArity = 2;
cljs.core.list_STAR_ = function cljs$core$list_STAR_() {
  var G__15283 = arguments.length;
  switch(G__15283) {
    case 1:
      return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 4), 0);
      return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__5360__auto__);
  }
};
cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$1 = function(args) {
  return cljs.core.seq(args);
};
cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$2 = function(a, args) {
  return cljs.core.cons(a, args);
};
cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$3 = function(a, b, args) {
  return cljs.core.cons(a, cljs.core.cons(b, args));
};
cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, args) {
  return cljs.core.cons(a, cljs.core.cons(b, cljs.core.cons(c, args)));
};
cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$variadic = function(a, b, c, d, more) {
  return cljs.core.cons(a, cljs.core.cons(b, cljs.core.cons(c, cljs.core.cons(d, cljs.core.spread(more)))));
};
cljs.core.list_STAR_.cljs$lang$applyTo = function(seq15277) {
  var G__15278 = cljs.core.first(seq15277);
  var seq15277__$1 = cljs.core.next(seq15277);
  var G__15279 = cljs.core.first(seq15277__$1);
  var seq15277__$2 = cljs.core.next(seq15277__$1);
  var G__15280 = cljs.core.first(seq15277__$2);
  var seq15277__$3 = cljs.core.next(seq15277__$2);
  var G__15281 = cljs.core.first(seq15277__$3);
  var seq15277__$4 = cljs.core.next(seq15277__$3);
  return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$variadic(G__15278, G__15279, G__15280, G__15281, seq15277__$4);
};
cljs.core.list_STAR_.cljs$lang$maxFixedArity = 4;
cljs.core.transient$ = function cljs$core$transient(coll) {
  return cljs.core._as_transient(coll);
};
cljs.core.persistent_BANG_ = function cljs$core$persistent_BANG_(tcoll) {
  return cljs.core._persistent_BANG_(tcoll);
};
cljs.core.conj_BANG_ = function cljs$core$conj_BANG_() {
  var G__15289 = arguments.length;
  switch(G__15289) {
    case 0:
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5360__auto__);
  }
};
cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.transient$(cljs.core.PersistentVector.EMPTY);
};
cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return coll;
};
cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2 = function(tcoll, val) {
  return cljs.core._conj_BANG_(tcoll, val);
};
cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(tcoll, val, vals) {
  while (true) {
    var ntcoll = cljs.core._conj_BANG_(tcoll, val);
    if (cljs.core.truth_(vals)) {
      var G__15291 = ntcoll;
      var G__15292 = cljs.core.first(vals);
      var G__15293 = cljs.core.next(vals);
      tcoll = G__15291;
      val = G__15292;
      vals = G__15293;
      continue;
    } else {
      return ntcoll;
    }
    break;
  }
};
cljs.core.conj_BANG_.cljs$lang$applyTo = function(seq15285) {
  var G__15286 = cljs.core.first(seq15285);
  var seq15285__$1 = cljs.core.next(seq15285);
  var G__15287 = cljs.core.first(seq15285__$1);
  var seq15285__$2 = cljs.core.next(seq15285__$1);
  return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__15286, G__15287, seq15285__$2);
};
cljs.core.conj_BANG_.cljs$lang$maxFixedArity = 2;
cljs.core.assoc_BANG_ = function cljs$core$assoc_BANG_() {
  var G__15299 = arguments.length;
  switch(G__15299) {
    case 3:
      return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 3), 0);
      return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5360__auto__);
  }
};
cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3 = function(tcoll, key, val) {
  return cljs.core._assoc_BANG_(tcoll, key, val);
};
cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(tcoll, key, val, kvs) {
  while (true) {
    var ntcoll = cljs.core._assoc_BANG_(tcoll, key, val);
    if (cljs.core.truth_(kvs)) {
      var G__15301 = ntcoll;
      var G__15302 = cljs.core.first(kvs);
      var G__15303 = cljs.core.second(kvs);
      var G__15304 = cljs.core.nnext(kvs);
      tcoll = G__15301;
      key = G__15302;
      val = G__15303;
      kvs = G__15304;
      continue;
    } else {
      return ntcoll;
    }
    break;
  }
};
cljs.core.assoc_BANG_.cljs$lang$applyTo = function(seq15294) {
  var G__15295 = cljs.core.first(seq15294);
  var seq15294__$1 = cljs.core.next(seq15294);
  var G__15296 = cljs.core.first(seq15294__$1);
  var seq15294__$2 = cljs.core.next(seq15294__$1);
  var G__15297 = cljs.core.first(seq15294__$2);
  var seq15294__$3 = cljs.core.next(seq15294__$2);
  return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__15295, G__15296, G__15297, seq15294__$3);
};
cljs.core.assoc_BANG_.cljs$lang$maxFixedArity = 3;
cljs.core.dissoc_BANG_ = function cljs$core$dissoc_BANG_() {
  var G__15309 = arguments.length;
  switch(G__15309) {
    case 2:
      return cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5360__auto__);
  }
};
cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$2 = function(tcoll, key) {
  return cljs.core._dissoc_BANG_(tcoll, key);
};
cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(tcoll, key, ks) {
  while (true) {
    var ntcoll = cljs.core._dissoc_BANG_(tcoll, key);
    if (cljs.core.truth_(ks)) {
      var G__15311 = ntcoll;
      var G__15312 = cljs.core.first(ks);
      var G__15313 = cljs.core.next(ks);
      tcoll = G__15311;
      key = G__15312;
      ks = G__15313;
      continue;
    } else {
      return ntcoll;
    }
    break;
  }
};
cljs.core.dissoc_BANG_.cljs$lang$applyTo = function(seq15305) {
  var G__15306 = cljs.core.first(seq15305);
  var seq15305__$1 = cljs.core.next(seq15305);
  var G__15307 = cljs.core.first(seq15305__$1);
  var seq15305__$2 = cljs.core.next(seq15305__$1);
  return cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__15306, G__15307, seq15305__$2);
};
cljs.core.dissoc_BANG_.cljs$lang$maxFixedArity = 2;
cljs.core.pop_BANG_ = function cljs$core$pop_BANG_(tcoll) {
  return cljs.core._pop_BANG_(tcoll);
};
cljs.core.disj_BANG_ = function cljs$core$disj_BANG_() {
  var G__15318 = arguments.length;
  switch(G__15318) {
    case 2:
      return cljs.core.disj_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.disj_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5360__auto__);
  }
};
cljs.core.disj_BANG_.cljs$core$IFn$_invoke$arity$2 = function(tcoll, val) {
  return cljs.core._disjoin_BANG_(tcoll, val);
};
cljs.core.disj_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(tcoll, val, vals) {
  while (true) {
    var ntcoll = cljs.core._disjoin_BANG_(tcoll, val);
    if (cljs.core.truth_(vals)) {
      var G__15320 = ntcoll;
      var G__15321 = cljs.core.first(vals);
      var G__15322 = cljs.core.next(vals);
      tcoll = G__15320;
      val = G__15321;
      vals = G__15322;
      continue;
    } else {
      return ntcoll;
    }
    break;
  }
};
cljs.core.disj_BANG_.cljs$lang$applyTo = function(seq15314) {
  var G__15315 = cljs.core.first(seq15314);
  var seq15314__$1 = cljs.core.next(seq15314);
  var G__15316 = cljs.core.first(seq15314__$1);
  var seq15314__$2 = cljs.core.next(seq15314__$1);
  return cljs.core.disj_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__15315, G__15316, seq15314__$2);
};
cljs.core.disj_BANG_.cljs$lang$maxFixedArity = 2;
cljs.core.apply_to = function cljs$core$apply_to(f, argc, args) {
  var args__$1 = cljs.core.seq(args);
  if (argc === 0) {
    return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
  } else {
    var a5238 = cljs.core._first(args__$1);
    var args__$2 = cljs.core._rest(args__$1);
    if (argc === 1) {
      if (f.cljs$core$IFn$_invoke$arity$1) {
        return f.cljs$core$IFn$_invoke$arity$1(a5238);
      } else {
        var G__15533 = a5238;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__15533) : f.call(null, G__15533);
      }
    } else {
      var b5239 = cljs.core._first(args__$2);
      var args__$3 = cljs.core._rest(args__$2);
      if (argc === 2) {
        if (f.cljs$core$IFn$_invoke$arity$2) {
          return f.cljs$core$IFn$_invoke$arity$2(a5238, b5239);
        } else {
          var G__15534 = a5238;
          var G__15535 = b5239;
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__15534, G__15535) : f.call(null, G__15534, G__15535);
        }
      } else {
        var c5240 = cljs.core._first(args__$3);
        var args__$4 = cljs.core._rest(args__$3);
        if (argc === 3) {
          if (f.cljs$core$IFn$_invoke$arity$3) {
            return f.cljs$core$IFn$_invoke$arity$3(a5238, b5239, c5240);
          } else {
            var G__15536 = a5238;
            var G__15537 = b5239;
            var G__15538 = c5240;
            return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__15536, G__15537, G__15538) : f.call(null, G__15536, G__15537, G__15538);
          }
        } else {
          var d5241 = cljs.core._first(args__$4);
          var args__$5 = cljs.core._rest(args__$4);
          if (argc === 4) {
            if (f.cljs$core$IFn$_invoke$arity$4) {
              return f.cljs$core$IFn$_invoke$arity$4(a5238, b5239, c5240, d5241);
            } else {
              var G__15539 = a5238;
              var G__15540 = b5239;
              var G__15541 = c5240;
              var G__15542 = d5241;
              return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__15539, G__15540, G__15541, G__15542) : f.call(null, G__15539, G__15540, G__15541, G__15542);
            }
          } else {
            var e5242 = cljs.core._first(args__$5);
            var args__$6 = cljs.core._rest(args__$5);
            if (argc === 5) {
              if (f.cljs$core$IFn$_invoke$arity$5) {
                return f.cljs$core$IFn$_invoke$arity$5(a5238, b5239, c5240, d5241, e5242);
              } else {
                var G__15543 = a5238;
                var G__15544 = b5239;
                var G__15545 = c5240;
                var G__15546 = d5241;
                var G__15547 = e5242;
                return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(G__15543, G__15544, G__15545, G__15546, G__15547) : f.call(null, G__15543, G__15544, G__15545, G__15546, G__15547);
              }
            } else {
              var f5243 = cljs.core._first(args__$6);
              var args__$7 = cljs.core._rest(args__$6);
              if (argc === 6) {
                if (f.cljs$core$IFn$_invoke$arity$6) {
                  return f.cljs$core$IFn$_invoke$arity$6(a5238, b5239, c5240, d5241, e5242, f5243);
                } else {
                  var G__15548 = a5238;
                  var G__15549 = b5239;
                  var G__15550 = c5240;
                  var G__15551 = d5241;
                  var G__15552 = e5242;
                  var G__15553 = f5243;
                  return f.cljs$core$IFn$_invoke$arity$6 ? f.cljs$core$IFn$_invoke$arity$6(G__15548, G__15549, G__15550, G__15551, G__15552, G__15553) : f.call(null, G__15548, G__15549, G__15550, G__15551, G__15552, G__15553);
                }
              } else {
                var g5244 = cljs.core._first(args__$7);
                var args__$8 = cljs.core._rest(args__$7);
                if (argc === 7) {
                  if (f.cljs$core$IFn$_invoke$arity$7) {
                    return f.cljs$core$IFn$_invoke$arity$7(a5238, b5239, c5240, d5241, e5242, f5243, g5244);
                  } else {
                    var G__15554 = a5238;
                    var G__15555 = b5239;
                    var G__15556 = c5240;
                    var G__15557 = d5241;
                    var G__15558 = e5242;
                    var G__15559 = f5243;
                    var G__15560 = g5244;
                    return f.cljs$core$IFn$_invoke$arity$7 ? f.cljs$core$IFn$_invoke$arity$7(G__15554, G__15555, G__15556, G__15557, G__15558, G__15559, G__15560) : f.call(null, G__15554, G__15555, G__15556, G__15557, G__15558, G__15559, G__15560);
                  }
                } else {
                  var h5245 = cljs.core._first(args__$8);
                  var args__$9 = cljs.core._rest(args__$8);
                  if (argc === 8) {
                    if (f.cljs$core$IFn$_invoke$arity$8) {
                      return f.cljs$core$IFn$_invoke$arity$8(a5238, b5239, c5240, d5241, e5242, f5243, g5244, h5245);
                    } else {
                      var G__15561 = a5238;
                      var G__15562 = b5239;
                      var G__15563 = c5240;
                      var G__15564 = d5241;
                      var G__15565 = e5242;
                      var G__15566 = f5243;
                      var G__15567 = g5244;
                      var G__15568 = h5245;
                      return f.cljs$core$IFn$_invoke$arity$8 ? f.cljs$core$IFn$_invoke$arity$8(G__15561, G__15562, G__15563, G__15564, G__15565, G__15566, G__15567, G__15568) : f.call(null, G__15561, G__15562, G__15563, G__15564, G__15565, G__15566, G__15567, G__15568);
                    }
                  } else {
                    var i5246 = cljs.core._first(args__$9);
                    var args__$10 = cljs.core._rest(args__$9);
                    if (argc === 9) {
                      if (f.cljs$core$IFn$_invoke$arity$9) {
                        return f.cljs$core$IFn$_invoke$arity$9(a5238, b5239, c5240, d5241, e5242, f5243, g5244, h5245, i5246);
                      } else {
                        var G__15569 = a5238;
                        var G__15570 = b5239;
                        var G__15571 = c5240;
                        var G__15572 = d5241;
                        var G__15573 = e5242;
                        var G__15574 = f5243;
                        var G__15575 = g5244;
                        var G__15576 = h5245;
                        var G__15577 = i5246;
                        return f.cljs$core$IFn$_invoke$arity$9 ? f.cljs$core$IFn$_invoke$arity$9(G__15569, G__15570, G__15571, G__15572, G__15573, G__15574, G__15575, G__15576, G__15577) : f.call(null, G__15569, G__15570, G__15571, G__15572, G__15573, G__15574, G__15575, G__15576, G__15577);
                      }
                    } else {
                      var j5247 = cljs.core._first(args__$10);
                      var args__$11 = cljs.core._rest(args__$10);
                      if (argc === 10) {
                        if (f.cljs$core$IFn$_invoke$arity$10) {
                          return f.cljs$core$IFn$_invoke$arity$10(a5238, b5239, c5240, d5241, e5242, f5243, g5244, h5245, i5246, j5247);
                        } else {
                          var G__15578 = a5238;
                          var G__15579 = b5239;
                          var G__15580 = c5240;
                          var G__15581 = d5241;
                          var G__15582 = e5242;
                          var G__15583 = f5243;
                          var G__15584 = g5244;
                          var G__15585 = h5245;
                          var G__15586 = i5246;
                          var G__15587 = j5247;
                          return f.cljs$core$IFn$_invoke$arity$10 ? f.cljs$core$IFn$_invoke$arity$10(G__15578, G__15579, G__15580, G__15581, G__15582, G__15583, G__15584, G__15585, G__15586, G__15587) : f.call(null, G__15578, G__15579, G__15580, G__15581, G__15582, G__15583, G__15584, G__15585, G__15586, G__15587);
                        }
                      } else {
                        var k5248 = cljs.core._first(args__$11);
                        var args__$12 = cljs.core._rest(args__$11);
                        if (argc === 11) {
                          if (f.cljs$core$IFn$_invoke$arity$11) {
                            return f.cljs$core$IFn$_invoke$arity$11(a5238, b5239, c5240, d5241, e5242, f5243, g5244, h5245, i5246, j5247, k5248);
                          } else {
                            var G__15588 = a5238;
                            var G__15589 = b5239;
                            var G__15590 = c5240;
                            var G__15591 = d5241;
                            var G__15592 = e5242;
                            var G__15593 = f5243;
                            var G__15594 = g5244;
                            var G__15595 = h5245;
                            var G__15596 = i5246;
                            var G__15597 = j5247;
                            var G__15598 = k5248;
                            return f.cljs$core$IFn$_invoke$arity$11 ? f.cljs$core$IFn$_invoke$arity$11(G__15588, G__15589, G__15590, G__15591, G__15592, G__15593, G__15594, G__15595, G__15596, G__15597, G__15598) : f.call(null, G__15588, G__15589, G__15590, G__15591, G__15592, G__15593, G__15594, G__15595, G__15596, G__15597, G__15598);
                          }
                        } else {
                          var l5249 = cljs.core._first(args__$12);
                          var args__$13 = cljs.core._rest(args__$12);
                          if (argc === 12) {
                            if (f.cljs$core$IFn$_invoke$arity$12) {
                              return f.cljs$core$IFn$_invoke$arity$12(a5238, b5239, c5240, d5241, e5242, f5243, g5244, h5245, i5246, j5247, k5248, l5249);
                            } else {
                              var G__15599 = a5238;
                              var G__15600 = b5239;
                              var G__15601 = c5240;
                              var G__15602 = d5241;
                              var G__15603 = e5242;
                              var G__15604 = f5243;
                              var G__15605 = g5244;
                              var G__15606 = h5245;
                              var G__15607 = i5246;
                              var G__15608 = j5247;
                              var G__15609 = k5248;
                              var G__15610 = l5249;
                              return f.cljs$core$IFn$_invoke$arity$12 ? f.cljs$core$IFn$_invoke$arity$12(G__15599, G__15600, G__15601, G__15602, G__15603, G__15604, G__15605, G__15606, G__15607, G__15608, G__15609, G__15610) : f.call(null, G__15599, G__15600, G__15601, G__15602, G__15603, G__15604, G__15605, G__15606, G__15607, G__15608, G__15609, G__15610);
                            }
                          } else {
                            var m5250 = cljs.core._first(args__$13);
                            var args__$14 = cljs.core._rest(args__$13);
                            if (argc === 13) {
                              if (f.cljs$core$IFn$_invoke$arity$13) {
                                return f.cljs$core$IFn$_invoke$arity$13(a5238, b5239, c5240, d5241, e5242, f5243, g5244, h5245, i5246, j5247, k5248, l5249, m5250);
                              } else {
                                var G__15611 = a5238;
                                var G__15612 = b5239;
                                var G__15613 = c5240;
                                var G__15614 = d5241;
                                var G__15615 = e5242;
                                var G__15616 = f5243;
                                var G__15617 = g5244;
                                var G__15618 = h5245;
                                var G__15619 = i5246;
                                var G__15620 = j5247;
                                var G__15621 = k5248;
                                var G__15622 = l5249;
                                var G__15623 = m5250;
                                return f.cljs$core$IFn$_invoke$arity$13 ? f.cljs$core$IFn$_invoke$arity$13(G__15611, G__15612, G__15613, G__15614, G__15615, G__15616, G__15617, G__15618, G__15619, G__15620, G__15621, G__15622, G__15623) : f.call(null, G__15611, G__15612, G__15613, G__15614, G__15615, G__15616, G__15617, G__15618, G__15619, G__15620, G__15621, G__15622, G__15623);
                              }
                            } else {
                              var n5251 = cljs.core._first(args__$14);
                              var args__$15 = cljs.core._rest(args__$14);
                              if (argc === 14) {
                                if (f.cljs$core$IFn$_invoke$arity$14) {
                                  return f.cljs$core$IFn$_invoke$arity$14(a5238, b5239, c5240, d5241, e5242, f5243, g5244, h5245, i5246, j5247, k5248, l5249, m5250, n5251);
                                } else {
                                  var G__15624 = a5238;
                                  var G__15625 = b5239;
                                  var G__15626 = c5240;
                                  var G__15627 = d5241;
                                  var G__15628 = e5242;
                                  var G__15629 = f5243;
                                  var G__15630 = g5244;
                                  var G__15631 = h5245;
                                  var G__15632 = i5246;
                                  var G__15633 = j5247;
                                  var G__15634 = k5248;
                                  var G__15635 = l5249;
                                  var G__15636 = m5250;
                                  var G__15637 = n5251;
                                  return f.cljs$core$IFn$_invoke$arity$14 ? f.cljs$core$IFn$_invoke$arity$14(G__15624, G__15625, G__15626, G__15627, G__15628, G__15629, G__15630, G__15631, G__15632, G__15633, G__15634, G__15635, G__15636, G__15637) : f.call(null, G__15624, G__15625, G__15626, G__15627, G__15628, G__15629, G__15630, G__15631, G__15632, G__15633, G__15634, G__15635, G__15636, G__15637);
                                }
                              } else {
                                var o5252 = cljs.core._first(args__$15);
                                var args__$16 = cljs.core._rest(args__$15);
                                if (argc === 15) {
                                  if (f.cljs$core$IFn$_invoke$arity$15) {
                                    return f.cljs$core$IFn$_invoke$arity$15(a5238, b5239, c5240, d5241, e5242, f5243, g5244, h5245, i5246, j5247, k5248, l5249, m5250, n5251, o5252);
                                  } else {
                                    var G__15638 = a5238;
                                    var G__15639 = b5239;
                                    var G__15640 = c5240;
                                    var G__15641 = d5241;
                                    var G__15642 = e5242;
                                    var G__15643 = f5243;
                                    var G__15644 = g5244;
                                    var G__15645 = h5245;
                                    var G__15646 = i5246;
                                    var G__15647 = j5247;
                                    var G__15648 = k5248;
                                    var G__15649 = l5249;
                                    var G__15650 = m5250;
                                    var G__15651 = n5251;
                                    var G__15652 = o5252;
                                    return f.cljs$core$IFn$_invoke$arity$15 ? f.cljs$core$IFn$_invoke$arity$15(G__15638, G__15639, G__15640, G__15641, G__15642, G__15643, G__15644, G__15645, G__15646, G__15647, G__15648, G__15649, G__15650, G__15651, G__15652) : f.call(null, G__15638, G__15639, G__15640, G__15641, G__15642, G__15643, G__15644, G__15645, G__15646, G__15647, G__15648, G__15649, G__15650, G__15651, G__15652);
                                  }
                                } else {
                                  var p5253 = cljs.core._first(args__$16);
                                  var args__$17 = cljs.core._rest(args__$16);
                                  if (argc === 16) {
                                    if (f.cljs$core$IFn$_invoke$arity$16) {
                                      return f.cljs$core$IFn$_invoke$arity$16(a5238, b5239, c5240, d5241, e5242, f5243, g5244, h5245, i5246, j5247, k5248, l5249, m5250, n5251, o5252, p5253);
                                    } else {
                                      var G__15653 = a5238;
                                      var G__15654 = b5239;
                                      var G__15655 = c5240;
                                      var G__15656 = d5241;
                                      var G__15657 = e5242;
                                      var G__15658 = f5243;
                                      var G__15659 = g5244;
                                      var G__15660 = h5245;
                                      var G__15661 = i5246;
                                      var G__15662 = j5247;
                                      var G__15663 = k5248;
                                      var G__15664 = l5249;
                                      var G__15665 = m5250;
                                      var G__15666 = n5251;
                                      var G__15667 = o5252;
                                      var G__15668 = p5253;
                                      return f.cljs$core$IFn$_invoke$arity$16 ? f.cljs$core$IFn$_invoke$arity$16(G__15653, G__15654, G__15655, G__15656, G__15657, G__15658, G__15659, G__15660, G__15661, G__15662, G__15663, G__15664, G__15665, G__15666, G__15667, G__15668) : f.call(null, G__15653, G__15654, G__15655, G__15656, G__15657, G__15658, G__15659, G__15660, G__15661, G__15662, G__15663, G__15664, G__15665, G__15666, G__15667, G__15668);
                                    }
                                  } else {
                                    var q5254 = cljs.core._first(args__$17);
                                    var args__$18 = cljs.core._rest(args__$17);
                                    if (argc === 17) {
                                      if (f.cljs$core$IFn$_invoke$arity$17) {
                                        return f.cljs$core$IFn$_invoke$arity$17(a5238, b5239, c5240, d5241, e5242, f5243, g5244, h5245, i5246, j5247, k5248, l5249, m5250, n5251, o5252, p5253, q5254);
                                      } else {
                                        var G__15669 = a5238;
                                        var G__15670 = b5239;
                                        var G__15671 = c5240;
                                        var G__15672 = d5241;
                                        var G__15673 = e5242;
                                        var G__15674 = f5243;
                                        var G__15675 = g5244;
                                        var G__15676 = h5245;
                                        var G__15677 = i5246;
                                        var G__15678 = j5247;
                                        var G__15679 = k5248;
                                        var G__15680 = l5249;
                                        var G__15681 = m5250;
                                        var G__15682 = n5251;
                                        var G__15683 = o5252;
                                        var G__15684 = p5253;
                                        var G__15685 = q5254;
                                        return f.cljs$core$IFn$_invoke$arity$17 ? f.cljs$core$IFn$_invoke$arity$17(G__15669, G__15670, G__15671, G__15672, G__15673, G__15674, G__15675, G__15676, G__15677, G__15678, G__15679, G__15680, G__15681, G__15682, G__15683, G__15684, G__15685) : f.call(null, G__15669, G__15670, G__15671, G__15672, G__15673, G__15674, G__15675, G__15676, G__15677, G__15678, G__15679, G__15680, G__15681, G__15682, G__15683, G__15684, G__15685);
                                      }
                                    } else {
                                      var r5255 = cljs.core._first(args__$18);
                                      var args__$19 = cljs.core._rest(args__$18);
                                      if (argc === 18) {
                                        if (f.cljs$core$IFn$_invoke$arity$18) {
                                          return f.cljs$core$IFn$_invoke$arity$18(a5238, b5239, c5240, d5241, e5242, f5243, g5244, h5245, i5246, j5247, k5248, l5249, m5250, n5251, o5252, p5253, q5254, r5255);
                                        } else {
                                          var G__15686 = a5238;
                                          var G__15687 = b5239;
                                          var G__15688 = c5240;
                                          var G__15689 = d5241;
                                          var G__15690 = e5242;
                                          var G__15691 = f5243;
                                          var G__15692 = g5244;
                                          var G__15693 = h5245;
                                          var G__15694 = i5246;
                                          var G__15695 = j5247;
                                          var G__15696 = k5248;
                                          var G__15697 = l5249;
                                          var G__15698 = m5250;
                                          var G__15699 = n5251;
                                          var G__15700 = o5252;
                                          var G__15701 = p5253;
                                          var G__15702 = q5254;
                                          var G__15703 = r5255;
                                          return f.cljs$core$IFn$_invoke$arity$18 ? f.cljs$core$IFn$_invoke$arity$18(G__15686, G__15687, G__15688, G__15689, G__15690, G__15691, G__15692, G__15693, G__15694, G__15695, G__15696, G__15697, G__15698, G__15699, G__15700, G__15701, G__15702, G__15703) : f.call(null, G__15686, G__15687, G__15688, G__15689, G__15690, G__15691, G__15692, G__15693, G__15694, G__15695, G__15696, G__15697, G__15698, G__15699, G__15700, G__15701, G__15702, G__15703);
                                        }
                                      } else {
                                        var s5256 = cljs.core._first(args__$19);
                                        var args__$20 = cljs.core._rest(args__$19);
                                        if (argc === 19) {
                                          if (f.cljs$core$IFn$_invoke$arity$19) {
                                            return f.cljs$core$IFn$_invoke$arity$19(a5238, b5239, c5240, d5241, e5242, f5243, g5244, h5245, i5246, j5247, k5248, l5249, m5250, n5251, o5252, p5253, q5254, r5255, s5256);
                                          } else {
                                            var G__15704 = a5238;
                                            var G__15705 = b5239;
                                            var G__15706 = c5240;
                                            var G__15707 = d5241;
                                            var G__15708 = e5242;
                                            var G__15709 = f5243;
                                            var G__15710 = g5244;
                                            var G__15711 = h5245;
                                            var G__15712 = i5246;
                                            var G__15713 = j5247;
                                            var G__15714 = k5248;
                                            var G__15715 = l5249;
                                            var G__15716 = m5250;
                                            var G__15717 = n5251;
                                            var G__15718 = o5252;
                                            var G__15719 = p5253;
                                            var G__15720 = q5254;
                                            var G__15721 = r5255;
                                            var G__15722 = s5256;
                                            return f.cljs$core$IFn$_invoke$arity$19 ? f.cljs$core$IFn$_invoke$arity$19(G__15704, G__15705, G__15706, G__15707, G__15708, G__15709, G__15710, G__15711, G__15712, G__15713, G__15714, G__15715, G__15716, G__15717, G__15718, G__15719, G__15720, G__15721, G__15722) : f.call(null, G__15704, G__15705, G__15706, G__15707, G__15708, G__15709, G__15710, G__15711, G__15712, G__15713, G__15714, G__15715, G__15716, G__15717, G__15718, G__15719, G__15720, G__15721, 
                                            G__15722);
                                          }
                                        } else {
                                          var t5257 = cljs.core._first(args__$20);
                                          var args__$21 = cljs.core._rest(args__$20);
                                          if (argc === 20) {
                                            if (f.cljs$core$IFn$_invoke$arity$20) {
                                              return f.cljs$core$IFn$_invoke$arity$20(a5238, b5239, c5240, d5241, e5242, f5243, g5244, h5245, i5246, j5247, k5248, l5249, m5250, n5251, o5252, p5253, q5254, r5255, s5256, t5257);
                                            } else {
                                              var G__15723 = a5238;
                                              var G__15724 = b5239;
                                              var G__15725 = c5240;
                                              var G__15726 = d5241;
                                              var G__15727 = e5242;
                                              var G__15728 = f5243;
                                              var G__15729 = g5244;
                                              var G__15730 = h5245;
                                              var G__15731 = i5246;
                                              var G__15732 = j5247;
                                              var G__15733 = k5248;
                                              var G__15734 = l5249;
                                              var G__15735 = m5250;
                                              var G__15736 = n5251;
                                              var G__15737 = o5252;
                                              var G__15738 = p5253;
                                              var G__15739 = q5254;
                                              var G__15740 = r5255;
                                              var G__15741 = s5256;
                                              var G__15742 = t5257;
                                              return f.cljs$core$IFn$_invoke$arity$20 ? f.cljs$core$IFn$_invoke$arity$20(G__15723, G__15724, G__15725, G__15726, G__15727, G__15728, G__15729, G__15730, G__15731, G__15732, G__15733, G__15734, G__15735, G__15736, G__15737, G__15738, G__15739, G__15740, G__15741, G__15742) : f.call(null, G__15723, G__15724, G__15725, G__15726, G__15727, G__15728, G__15729, G__15730, G__15731, G__15732, G__15733, G__15734, G__15735, G__15736, G__15737, G__15738, G__15739, 
                                              G__15740, G__15741, G__15742);
                                            }
                                          } else {
                                            throw new Error("Only up to 20 arguments supported on functions");
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.apply = function cljs$core$apply() {
  var G__15750 = arguments.length;
  switch(G__15750) {
    case 2:
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 5), 0);
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], argseq__5360__auto__);
  }
};
cljs.core.apply.cljs$core$IFn$_invoke$arity$2 = function(f, args) {
  var fixed_arity = f.cljs$lang$maxFixedArity;
  if (f.cljs$lang$applyTo) {
    var bc = cljs.core.bounded_count(args, fixed_arity + 1);
    if (bc <= fixed_arity) {
      return cljs.core.apply_to(f, bc, args);
    } else {
      return f.cljs$lang$applyTo(args);
    }
  } else {
    return f.apply(f, cljs.core.to_array(args));
  }
};
cljs.core.apply.cljs$core$IFn$_invoke$arity$3 = function(f, x, args) {
  var arglist = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$2(x, args);
  var fixed_arity = f.cljs$lang$maxFixedArity;
  if (f.cljs$lang$applyTo) {
    var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
    if (bc <= fixed_arity) {
      return cljs.core.apply_to(f, bc, arglist);
    } else {
      return f.cljs$lang$applyTo(arglist);
    }
  } else {
    return f.apply(f, cljs.core.to_array(arglist));
  }
};
cljs.core.apply.cljs$core$IFn$_invoke$arity$4 = function(f, x, y, args) {
  var arglist = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$3(x, y, args);
  var fixed_arity = f.cljs$lang$maxFixedArity;
  if (f.cljs$lang$applyTo) {
    var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
    if (bc <= fixed_arity) {
      return cljs.core.apply_to(f, bc, arglist);
    } else {
      return f.cljs$lang$applyTo(arglist);
    }
  } else {
    return f.apply(f, cljs.core.to_array(arglist));
  }
};
cljs.core.apply.cljs$core$IFn$_invoke$arity$5 = function(f, x, y, z, args) {
  var arglist = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(x, y, z, args);
  var fixed_arity = f.cljs$lang$maxFixedArity;
  if (f.cljs$lang$applyTo) {
    var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
    if (bc <= fixed_arity) {
      return cljs.core.apply_to(f, bc, arglist);
    } else {
      return f.cljs$lang$applyTo(arglist);
    }
  } else {
    return f.apply(f, cljs.core.to_array(arglist));
  }
};
cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic = function(f, a, b, c, d, args) {
  var arglist = cljs.core.cons(a, cljs.core.cons(b, cljs.core.cons(c, cljs.core.cons(d, cljs.core.spread(args)))));
  var fixed_arity = f.cljs$lang$maxFixedArity;
  if (f.cljs$lang$applyTo) {
    var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
    if (bc <= fixed_arity) {
      return cljs.core.apply_to(f, bc, arglist);
    } else {
      return f.cljs$lang$applyTo(arglist);
    }
  } else {
    return f.apply(f, cljs.core.to_array(arglist));
  }
};
cljs.core.apply.cljs$lang$applyTo = function(seq15743) {
  var G__15744 = cljs.core.first(seq15743);
  var seq15743__$1 = cljs.core.next(seq15743);
  var G__15745 = cljs.core.first(seq15743__$1);
  var seq15743__$2 = cljs.core.next(seq15743__$1);
  var G__15746 = cljs.core.first(seq15743__$2);
  var seq15743__$3 = cljs.core.next(seq15743__$2);
  var G__15747 = cljs.core.first(seq15743__$3);
  var seq15743__$4 = cljs.core.next(seq15743__$3);
  var G__15748 = cljs.core.first(seq15743__$4);
  var seq15743__$5 = cljs.core.next(seq15743__$4);
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(G__15744, G__15745, G__15746, G__15747, G__15748, seq15743__$5);
};
cljs.core.apply.cljs$lang$maxFixedArity = 5;
cljs.core.vary_meta = function cljs$core$vary_meta() {
  var G__15760 = arguments.length;
  switch(G__15760) {
    case 2:
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 6), 0);
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], argseq__5360__auto__);
  }
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$2 = function(obj, f) {
  return cljs.core.with_meta(obj, function() {
    var G__15761 = cljs.core.meta(obj);
    return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__15761) : f.call(null, G__15761);
  }());
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$3 = function(obj, f, a) {
  return cljs.core.with_meta(obj, function() {
    var G__15762 = cljs.core.meta(obj);
    var G__15763 = a;
    return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__15762, G__15763) : f.call(null, G__15762, G__15763);
  }());
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$4 = function(obj, f, a, b) {
  return cljs.core.with_meta(obj, function() {
    var G__15764 = cljs.core.meta(obj);
    var G__15765 = a;
    var G__15766 = b;
    return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__15764, G__15765, G__15766) : f.call(null, G__15764, G__15765, G__15766);
  }());
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$5 = function(obj, f, a, b, c) {
  return cljs.core.with_meta(obj, function() {
    var G__15767 = cljs.core.meta(obj);
    var G__15768 = a;
    var G__15769 = b;
    var G__15770 = c;
    return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__15767, G__15768, G__15769, G__15770) : f.call(null, G__15767, G__15768, G__15769, G__15770);
  }());
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$6 = function(obj, f, a, b, c, d) {
  return cljs.core.with_meta(obj, function() {
    var G__15771 = cljs.core.meta(obj);
    var G__15772 = a;
    var G__15773 = b;
    var G__15774 = c;
    var G__15775 = d;
    return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(G__15771, G__15772, G__15773, G__15774, G__15775) : f.call(null, G__15771, G__15772, G__15773, G__15774, G__15775);
  }());
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$variadic = function(obj, f, a, b, c, d, args) {
  return cljs.core.with_meta(obj, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.meta(obj), a, b, c, cljs.core.array_seq([d, args], 0)));
};
cljs.core.vary_meta.cljs$lang$applyTo = function(seq15752) {
  var G__15753 = cljs.core.first(seq15752);
  var seq15752__$1 = cljs.core.next(seq15752);
  var G__15754 = cljs.core.first(seq15752__$1);
  var seq15752__$2 = cljs.core.next(seq15752__$1);
  var G__15755 = cljs.core.first(seq15752__$2);
  var seq15752__$3 = cljs.core.next(seq15752__$2);
  var G__15756 = cljs.core.first(seq15752__$3);
  var seq15752__$4 = cljs.core.next(seq15752__$3);
  var G__15757 = cljs.core.first(seq15752__$4);
  var seq15752__$5 = cljs.core.next(seq15752__$4);
  var G__15758 = cljs.core.first(seq15752__$5);
  var seq15752__$6 = cljs.core.next(seq15752__$5);
  return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$variadic(G__15753, G__15754, G__15755, G__15756, G__15757, G__15758, seq15752__$6);
};
cljs.core.vary_meta.cljs$lang$maxFixedArity = 6;
cljs.core.not_EQ_ = function cljs$core$not_EQ_() {
  var G__15781 = arguments.length;
  switch(G__15781) {
    case 1:
      return cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5360__auto__);
  }
};
cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return false;
};
cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return !cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y);
};
cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.not(cljs.core.apply.cljs$core$IFn$_invoke$arity$4(cljs.core._EQ_, x, y, more));
};
cljs.core.not_EQ_.cljs$lang$applyTo = function(seq15777) {
  var G__15778 = cljs.core.first(seq15777);
  var seq15777__$1 = cljs.core.next(seq15777);
  var G__15779 = cljs.core.first(seq15777__$1);
  var seq15777__$2 = cljs.core.next(seq15777__$1);
  return cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$variadic(G__15778, G__15779, seq15777__$2);
};
cljs.core.not_EQ_.cljs$lang$maxFixedArity = 2;
cljs.core.not_empty = function cljs$core$not_empty(coll) {
  if (cljs.core.seq(coll)) {
    return coll;
  } else {
    return null;
  }
};
cljs.core.nil_iter = function cljs$core$nil_iter() {
  if (typeof cljs.core.t15786 !== "undefined") {
  } else {
    cljs.core.t15786 = function(nil_iter, meta15787) {
      this.nil_iter = nil_iter;
      this.meta15787 = meta15787;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.t15786.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_15788, meta15787__$1) {
      var self__ = this;
      var _15788__$1 = this;
      return new cljs.core.t15786(self__.nil_iter, meta15787__$1);
    };
    cljs.core.t15786.prototype.cljs$core$IMeta$_meta$arity$1 = function(_15788) {
      var self__ = this;
      var _15788__$1 = this;
      return self__.meta15787;
    };
    cljs.core.t15786.prototype.hasNext = function() {
      var self__ = this;
      var _ = this;
      return false;
    };
    cljs.core.t15786.prototype.next = function() {
      var self__ = this;
      var _ = this;
      return new Error("No such element");
    };
    cljs.core.t15786.prototype.remove = function() {
      var self__ = this;
      var _ = this;
      return new Error("Unsupported operation");
    };
    cljs.core.t15786.getBasis = function() {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "nil-iter", "nil-iter", 1101030523, null), new cljs.core.Symbol(null, "meta15787", "meta15787", -2062913348, null)], null);
    };
    cljs.core.t15786.cljs$lang$type = true;
    cljs.core.t15786.cljs$lang$ctorStr = "cljs.core/t15786";
    cljs.core.t15786.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
      return cljs.core._write(writer__4889__auto__, "cljs.core/t15786");
    };
    cljs.core.__GT_t15786 = function cljs$core$nil_iter_$___GT_t15786(nil_iter__$1, meta15787) {
      return new cljs.core.t15786(nil_iter__$1, meta15787);
    };
  }
  return new cljs.core.t15786(cljs$core$nil_iter, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.StringIter = function(s, i) {
  this.s = s;
  this.i = i;
};
cljs.core.StringIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.s.length;
};
cljs.core.StringIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.s.charAt(self__.i);
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.StringIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.StringIter.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "s", "s", -948495851, null), new cljs.core.Symbol(null, "i", "i", 253690212, null)], null);
};
cljs.core.StringIter.cljs$lang$type = true;
cljs.core.StringIter.cljs$lang$ctorStr = "cljs.core/StringIter";
cljs.core.StringIter.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/StringIter");
};
cljs.core.__GT_StringIter = function cljs$core$__GT_StringIter(s, i) {
  return new cljs.core.StringIter(s, i);
};
cljs.core.string_iter = function cljs$core$string_iter(x) {
  return new cljs.core.StringIter(x, 0);
};
cljs.core.ArrayIter = function(arr, i) {
  this.arr = arr;
  this.i = i;
};
cljs.core.ArrayIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.arr.length;
};
cljs.core.ArrayIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.arr[self__.i];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.ArrayIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.ArrayIter.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), new cljs.core.Symbol(null, "i", "i", 253690212, null)], null);
};
cljs.core.ArrayIter.cljs$lang$type = true;
cljs.core.ArrayIter.cljs$lang$ctorStr = "cljs.core/ArrayIter";
cljs.core.ArrayIter.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/ArrayIter");
};
cljs.core.__GT_ArrayIter = function cljs$core$__GT_ArrayIter(arr, i) {
  return new cljs.core.ArrayIter(arr, i);
};
cljs.core.array_iter = function cljs$core$array_iter(x) {
  return new cljs.core.ArrayIter(x, 0);
};
cljs.core.INIT = {};
cljs.core.START = {};
cljs.core.SeqIter = function(_seq, _next) {
  this._seq = _seq;
  this._next = _next;
};
cljs.core.SeqIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  if (self__._seq === cljs.core.INIT) {
    self__._seq = cljs.core.START;
    self__._next = cljs.core.seq(self__._next);
  } else {
    if (self__._seq === self__._next) {
      self__._next = cljs.core.next(self__._seq);
    } else {
    }
  }
  return !(self__._next == null);
};
cljs.core.SeqIter.prototype.next = function() {
  var self__ = this;
  var this$ = this;
  if (cljs.core.not(this$.hasNext())) {
    throw new Error("No such element");
  } else {
    self__._seq = self__._next;
    return cljs.core.first(self__._next);
  }
};
cljs.core.SeqIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.SeqIter.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "_seq", "_seq", -449557847, null), new cljs.core.Symbol(null, "_next", "_next", 101877036, null)], null);
};
cljs.core.SeqIter.cljs$lang$type = true;
cljs.core.SeqIter.cljs$lang$ctorStr = "cljs.core/SeqIter";
cljs.core.SeqIter.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/SeqIter");
};
cljs.core.__GT_SeqIter = function cljs$core$__GT_SeqIter(_seq, _next) {
  return new cljs.core.SeqIter(_seq, _next);
};
cljs.core.seq_iter = function cljs$core$seq_iter(coll) {
  return new cljs.core.SeqIter(cljs.core.INIT, coll);
};
cljs.core.iter = function cljs$core$iter(coll) {
  if (coll == null) {
    return cljs.core.nil_iter();
  } else {
    if (typeof coll === "string") {
      return cljs.core.string_iter(coll);
    } else {
      if (cljs.core.array_QMARK_(coll)) {
        return cljs.core.array_iter(coll);
      } else {
        if (cljs.core.truth_(cljs.core.iterable_QMARK_(coll))) {
          return cljs.core._iterator(coll);
        } else {
          if (cljs.core.seqable_QMARK_(coll)) {
            return cljs.core.seq_iter(coll);
          } else {
            throw new Error([cljs.core.str("Cannot create iterator from "), cljs.core.str(coll)].join(""));
          }
        }
      }
    }
  }
};
cljs.core.lazy_transformer = function cljs$core$lazy_transformer(stepper) {
  return new cljs.core.LazyTransformer(stepper, null, null, null);
};
cljs.core.Stepper = function(xform, iter) {
  this.xform = xform;
  this.iter = iter;
};
cljs.core.Stepper.prototype.step = function(lt) {
  var self__ = this;
  var this$ = this;
  while (true) {
    if (cljs.core.truth_(function() {
      var and__4297__auto__ = !(lt.stepper == null);
      if (and__4297__auto__) {
        return self__.iter.hasNext();
      } else {
        return and__4297__auto__;
      }
    }())) {
      if (cljs.core.reduced_QMARK_(function() {
        var G__15789 = lt;
        var G__15790 = self__.iter.next();
        return self__.xform.cljs$core$IFn$_invoke$arity$2 ? self__.xform.cljs$core$IFn$_invoke$arity$2(G__15789, G__15790) : self__.xform.call(null, G__15789, G__15790);
      }())) {
        if (lt.rest == null) {
        } else {
          lt.rest.stepper = null;
        }
      } else {
        continue;
      }
    } else {
    }
    break;
  }
  if (lt.stepper == null) {
    return null;
  } else {
    var G__15791 = lt;
    return self__.xform.cljs$core$IFn$_invoke$arity$1 ? self__.xform.cljs$core$IFn$_invoke$arity$1(G__15791) : self__.xform.call(null, G__15791);
  }
};
cljs.core.Stepper.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "xform", "xform", -85179481, null), new cljs.core.Symbol(null, "iter", "iter", -1346195486, null)], null);
};
cljs.core.Stepper.cljs$lang$type = true;
cljs.core.Stepper.cljs$lang$ctorStr = "cljs.core/Stepper";
cljs.core.Stepper.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/Stepper");
};
cljs.core.__GT_Stepper = function cljs$core$__GT_Stepper(xform, iter) {
  return new cljs.core.Stepper(xform, iter);
};
cljs.core.stepper = function cljs$core$stepper(xform, iter) {
  var stepfn = function() {
    var cljs$core$stepper_$_stepfn = null;
    var cljs$core$stepper_$_stepfn__1 = function(result) {
      var lt = cljs.core.reduced_QMARK_(result) ? cljs.core.deref(result) : result;
      lt.stepper = null;
      return result;
    };
    var cljs$core$stepper_$_stepfn__2 = function(result, input) {
      var lt = result;
      lt.first = input;
      lt.rest = cljs.core.lazy_transformer(lt.stepper);
      lt.stepper = null;
      return lt.rest;
    };
    cljs$core$stepper_$_stepfn = function(result, input) {
      switch(arguments.length) {
        case 1:
          return cljs$core$stepper_$_stepfn__1.call(this, result);
        case 2:
          return cljs$core$stepper_$_stepfn__2.call(this, result, input);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$stepper_$_stepfn.cljs$core$IFn$_invoke$arity$1 = cljs$core$stepper_$_stepfn__1;
    cljs$core$stepper_$_stepfn.cljs$core$IFn$_invoke$arity$2 = cljs$core$stepper_$_stepfn__2;
    return cljs$core$stepper_$_stepfn;
  }();
  return new cljs.core.Stepper(function() {
    var G__15793 = stepfn;
    return xform.cljs$core$IFn$_invoke$arity$1 ? xform.cljs$core$IFn$_invoke$arity$1(G__15793) : xform.call(null, G__15793);
  }(), iter);
};
cljs.core.MultiStepper = function(xform, iters, nexts) {
  this.xform = xform;
  this.iters = iters;
  this.nexts = nexts;
};
cljs.core.MultiStepper.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  var iters__$1 = cljs.core.seq(self__.iters);
  while (true) {
    if (!(iters__$1 == null)) {
      var iter = cljs.core.first(iters__$1);
      if (cljs.core.not(iter.hasNext())) {
        return false;
      } else {
        var G__15795 = cljs.core.next(iters__$1);
        iters__$1 = G__15795;
        continue;
      }
    } else {
      return true;
    }
    break;
  }
};
cljs.core.MultiStepper.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var n__5194__auto___15796 = self__.iters.length;
  var i_15797 = 0;
  while (true) {
    if (i_15797 < n__5194__auto___15796) {
      self__.nexts[i_15797] = self__.iters[i_15797].next();
      var G__15798 = i_15797 + 1;
      i_15797 = G__15798;
      continue;
    } else {
    }
    break;
  }
  return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(self__.nexts, 0);
};
cljs.core.MultiStepper.prototype.step = function(lt) {
  var self__ = this;
  var this$ = this;
  while (true) {
    if (cljs.core.truth_(function() {
      var and__4297__auto__ = !(lt.stepper == null);
      if (and__4297__auto__) {
        return this$.hasNext();
      } else {
        return and__4297__auto__;
      }
    }())) {
      if (cljs.core.reduced_QMARK_(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(self__.xform, cljs.core.cons(lt, this$.next())))) {
        if (lt.rest == null) {
        } else {
          lt.rest.stepper = null;
        }
      } else {
        continue;
      }
    } else {
    }
    break;
  }
  if (lt.stepper == null) {
    return null;
  } else {
    var G__15794 = lt;
    return self__.xform.cljs$core$IFn$_invoke$arity$1 ? self__.xform.cljs$core$IFn$_invoke$arity$1(G__15794) : self__.xform.call(null, G__15794);
  }
};
cljs.core.MultiStepper.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "xform", "xform", -85179481, null), new cljs.core.Symbol(null, "iters", "iters", 719353031, null), new cljs.core.Symbol(null, "nexts", "nexts", -1683579407, null)], null);
};
cljs.core.MultiStepper.cljs$lang$type = true;
cljs.core.MultiStepper.cljs$lang$ctorStr = "cljs.core/MultiStepper";
cljs.core.MultiStepper.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/MultiStepper");
};
cljs.core.__GT_MultiStepper = function cljs$core$__GT_MultiStepper(xform, iters, nexts) {
  return new cljs.core.MultiStepper(xform, iters, nexts);
};
cljs.core.multi_stepper = function cljs$core$multi_stepper() {
  var G__15800 = arguments.length;
  switch(G__15800) {
    case 2:
      return cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$2 = function(xform, iters) {
  return cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$3(xform, iters, new Array(iters.length));
};
cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$3 = function(xform, iters, nexts) {
  var stepfn = function() {
    var cljs$core$stepfn = null;
    var cljs$core$stepfn__1 = function(result) {
      var lt = cljs.core.reduced_QMARK_(result) ? cljs.core.deref(result) : result;
      lt.stepper = null;
      return lt;
    };
    var cljs$core$stepfn__2 = function(result, input) {
      var lt = result;
      lt.first = input;
      lt.rest = cljs.core.lazy_transformer(lt.stepper);
      lt.stepper = null;
      return lt.rest;
    };
    cljs$core$stepfn = function(result, input) {
      switch(arguments.length) {
        case 1:
          return cljs$core$stepfn__1.call(this, result);
        case 2:
          return cljs$core$stepfn__2.call(this, result, input);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$stepfn.cljs$core$IFn$_invoke$arity$1 = cljs$core$stepfn__1;
    cljs$core$stepfn.cljs$core$IFn$_invoke$arity$2 = cljs$core$stepfn__2;
    return cljs$core$stepfn;
  }();
  return new cljs.core.MultiStepper(function() {
    var G__15801 = stepfn;
    return xform.cljs$core$IFn$_invoke$arity$1 ? xform.cljs$core$IFn$_invoke$arity$1(G__15801) : xform.call(null, G__15801);
  }(), iters, nexts);
};
cljs.core.multi_stepper.cljs$lang$maxFixedArity = 3;
cljs.core.LazyTransformer = function(stepper, first, rest, meta) {
  this.stepper = stepper;
  this.first = first;
  this.rest = rest;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 31719628;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.LazyTransformer.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this$, new_meta) {
  var self__ = this;
  var this$__$1 = this;
  return new cljs.core.LazyTransformer(self__.stepper, self__.first, self__.rest, new_meta);
};
cljs.core.LazyTransformer.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons(o, cljs.core._seq(this$__$1));
};
cljs.core.LazyTransformer.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.LazyTransformer.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var self__ = this;
  var this$__$1 = this;
  var s = cljs.core._seq(this$__$1);
  if (!(s == null)) {
    return cljs.core.equiv_sequential(this$__$1, other);
  } else {
    return cljs.core.sequential_QMARK_(other) && cljs.core.seq(other) == null;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.hash_ordered_coll(this$__$1);
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    self__.stepper.step(this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return this$__$1;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq(this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return self__.first;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq(this$__$1);
  }
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$INext$_next$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq(this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core._seq(self__.rest);
  }
};
cljs.core.LazyTransformer.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "stepper", "stepper", 1159163296, null), new cljs.core.Symbol(null, "first", "first", 996428481, null), new cljs.core.Symbol(null, "rest", "rest", 398835108, null), new cljs.core.Symbol(null, "meta", "meta", -1154898805, null)], null);
};
cljs.core.LazyTransformer.cljs$lang$type = true;
cljs.core.LazyTransformer.cljs$lang$ctorStr = "cljs.core/LazyTransformer";
cljs.core.LazyTransformer.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/LazyTransformer");
};
cljs.core.__GT_LazyTransformer = function cljs$core$__GT_LazyTransformer(stepper, first, rest, meta) {
  return new cljs.core.LazyTransformer(stepper, first, rest, meta);
};
cljs.core.LazyTransformer.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5285__auto__ = this;
  return cljs.core.es6_iterator(this__5285__auto__);
};
cljs.core.LazyTransformer.create = function(xform, coll) {
  return new cljs.core.LazyTransformer(cljs.core.stepper(xform, cljs.core.iter(coll)), null, null, null);
};
cljs.core.LazyTransformer.createMulti = function(xform, colls) {
  var iters = [];
  var seq__15803_15807 = cljs.core.seq(colls);
  var chunk__15804_15808 = null;
  var count__15805_15809 = 0;
  var i__15806_15810 = 0;
  while (true) {
    if (i__15806_15810 < count__15805_15809) {
      var coll_15811 = chunk__15804_15808.cljs$core$IIndexed$_nth$arity$2(null, i__15806_15810);
      iters.push(cljs.core.iter(coll_15811));
      var G__15812 = seq__15803_15807;
      var G__15813 = chunk__15804_15808;
      var G__15814 = count__15805_15809;
      var G__15815 = i__15806_15810 + 1;
      seq__15803_15807 = G__15812;
      chunk__15804_15808 = G__15813;
      count__15805_15809 = G__15814;
      i__15806_15810 = G__15815;
      continue;
    } else {
      var temp__4422__auto___15816 = cljs.core.seq(seq__15803_15807);
      if (temp__4422__auto___15816) {
        var seq__15803_15817__$1 = temp__4422__auto___15816;
        if (cljs.core.chunked_seq_QMARK_(seq__15803_15817__$1)) {
          var c__5094__auto___15818 = cljs.core.chunk_first(seq__15803_15817__$1);
          var G__15819 = cljs.core.chunk_rest(seq__15803_15817__$1);
          var G__15820 = c__5094__auto___15818;
          var G__15821 = cljs.core.count(c__5094__auto___15818);
          var G__15822 = 0;
          seq__15803_15807 = G__15819;
          chunk__15804_15808 = G__15820;
          count__15805_15809 = G__15821;
          i__15806_15810 = G__15822;
          continue;
        } else {
          var coll_15823 = cljs.core.first(seq__15803_15817__$1);
          iters.push(cljs.core.iter(coll_15823));
          var G__15824 = cljs.core.next(seq__15803_15817__$1);
          var G__15825 = null;
          var G__15826 = 0;
          var G__15827 = 0;
          seq__15803_15807 = G__15824;
          chunk__15804_15808 = G__15825;
          count__15805_15809 = G__15826;
          i__15806_15810 = G__15827;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return new cljs.core.LazyTransformer(cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$3(xform, iters, new Array(iters.length)), null, null, null);
};
cljs.core.sequence = function cljs$core$sequence() {
  var G__15832 = arguments.length;
  switch(G__15832) {
    case 1:
      return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.sequence.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.sequence.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5360__auto__);
  }
};
cljs.core.sequence.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  if (cljs.core.seq_QMARK_(coll)) {
    return coll;
  } else {
    var or__4309__auto__ = cljs.core.seq(coll);
    if (or__4309__auto__) {
      return or__4309__auto__;
    } else {
      return cljs.core.List.EMPTY;
    }
  }
};
cljs.core.sequence.cljs$core$IFn$_invoke$arity$2 = function(xform, coll) {
  return cljs.core.LazyTransformer.create(xform, coll);
};
cljs.core.sequence.cljs$core$IFn$_invoke$arity$variadic = function(xform, coll, colls) {
  return cljs.core.LazyTransformer.createMulti(xform, cljs.core.to_array(cljs.core.cons(coll, colls)));
};
cljs.core.sequence.cljs$lang$applyTo = function(seq15828) {
  var G__15829 = cljs.core.first(seq15828);
  var seq15828__$1 = cljs.core.next(seq15828);
  var G__15830 = cljs.core.first(seq15828__$1);
  var seq15828__$2 = cljs.core.next(seq15828__$1);
  return cljs.core.sequence.cljs$core$IFn$_invoke$arity$variadic(G__15829, G__15830, seq15828__$2);
};
cljs.core.sequence.cljs$lang$maxFixedArity = 2;
cljs.core.every_QMARK_ = function cljs$core$every_QMARK_(pred, coll) {
  while (true) {
    if (cljs.core.seq(coll) == null) {
      return true;
    } else {
      if (cljs.core.truth_(function() {
        var G__15835 = cljs.core.first(coll);
        return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__15835) : pred.call(null, G__15835);
      }())) {
        var G__15836 = pred;
        var G__15837 = cljs.core.next(coll);
        pred = G__15836;
        coll = G__15837;
        continue;
      } else {
        return false;
      }
    }
    break;
  }
};
cljs.core.not_every_QMARK_ = function cljs$core$not_every_QMARK_(pred, coll) {
  return !cljs.core.every_QMARK_(pred, coll);
};
cljs.core.some = function cljs$core$some(pred, coll) {
  while (true) {
    if (cljs.core.seq(coll)) {
      var or__4309__auto__ = function() {
        var G__15841 = cljs.core.first(coll);
        return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__15841) : pred.call(null, G__15841);
      }();
      if (cljs.core.truth_(or__4309__auto__)) {
        return or__4309__auto__;
      } else {
        var G__15842 = pred;
        var G__15843 = cljs.core.next(coll);
        pred = G__15842;
        coll = G__15843;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.not_any_QMARK_ = function cljs$core$not_any_QMARK_(pred, coll) {
  return cljs.core.not(cljs.core.some(pred, coll));
};
cljs.core.even_QMARK_ = function cljs$core$even_QMARK_(n) {
  if (cljs.core.integer_QMARK_(n)) {
    return (n & 1) === 0;
  } else {
    throw new Error([cljs.core.str("Argument must be an integer: "), cljs.core.str(n)].join(""));
  }
};
cljs.core.odd_QMARK_ = function cljs$core$odd_QMARK_(n) {
  return !cljs.core.even_QMARK_(n);
};
cljs.core.complement = function cljs$core$complement(f) {
  return function() {
    var G__15850 = null;
    var G__15850__0 = function() {
      return cljs.core.not(function() {
        return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
      }());
    };
    var G__15850__1 = function(x) {
      return cljs.core.not(function() {
        var G__15847 = x;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__15847) : f.call(null, G__15847);
      }());
    };
    var G__15850__2 = function(x, y) {
      return cljs.core.not(function() {
        var G__15848 = x;
        var G__15849 = y;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__15848, G__15849) : f.call(null, G__15848, G__15849);
      }());
    };
    var G__15850__3 = function() {
      var G__15851__delegate = function(x, y, zs) {
        return cljs.core.not(cljs.core.apply.cljs$core$IFn$_invoke$arity$4(f, x, y, zs));
      };
      var G__15851 = function(x, y, var_args) {
        var zs = null;
        if (arguments.length > 2) {
          var G__15852__i = 0, G__15852__a = new Array(arguments.length - 2);
          while (G__15852__i < G__15852__a.length) {
            G__15852__a[G__15852__i] = arguments[G__15852__i + 2];
            ++G__15852__i;
          }
          zs = new cljs.core.IndexedSeq(G__15852__a, 0);
        }
        return G__15851__delegate.call(this, x, y, zs);
      };
      G__15851.cljs$lang$maxFixedArity = 2;
      G__15851.cljs$lang$applyTo = function(arglist__15853) {
        var x = cljs.core.first(arglist__15853);
        arglist__15853 = cljs.core.next(arglist__15853);
        var y = cljs.core.first(arglist__15853);
        var zs = cljs.core.rest(arglist__15853);
        return G__15851__delegate(x, y, zs);
      };
      G__15851.cljs$core$IFn$_invoke$arity$variadic = G__15851__delegate;
      return G__15851;
    }();
    G__15850 = function(x, y, var_args) {
      var zs = var_args;
      switch(arguments.length) {
        case 0:
          return G__15850__0.call(this);
        case 1:
          return G__15850__1.call(this, x);
        case 2:
          return G__15850__2.call(this, x, y);
        default:
          var G__15854 = null;
          if (arguments.length > 2) {
            var G__15855__i = 0, G__15855__a = new Array(arguments.length - 2);
            while (G__15855__i < G__15855__a.length) {
              G__15855__a[G__15855__i] = arguments[G__15855__i + 2];
              ++G__15855__i;
            }
            G__15854 = new cljs.core.IndexedSeq(G__15855__a, 0);
          }
          return G__15850__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__15854);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__15850.cljs$lang$maxFixedArity = 2;
    G__15850.cljs$lang$applyTo = G__15850__3.cljs$lang$applyTo;
    G__15850.cljs$core$IFn$_invoke$arity$0 = G__15850__0;
    G__15850.cljs$core$IFn$_invoke$arity$1 = G__15850__1;
    G__15850.cljs$core$IFn$_invoke$arity$2 = G__15850__2;
    G__15850.cljs$core$IFn$_invoke$arity$variadic = G__15850__3.cljs$core$IFn$_invoke$arity$variadic;
    return G__15850;
  }();
};
cljs.core.constantly = function cljs$core$constantly(x) {
  return function() {
    var G__15856__delegate = function(args) {
      return x;
    };
    var G__15856 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        var G__15857__i = 0, G__15857__a = new Array(arguments.length - 0);
        while (G__15857__i < G__15857__a.length) {
          G__15857__a[G__15857__i] = arguments[G__15857__i + 0];
          ++G__15857__i;
        }
        args = new cljs.core.IndexedSeq(G__15857__a, 0);
      }
      return G__15856__delegate.call(this, args);
    };
    G__15856.cljs$lang$maxFixedArity = 0;
    G__15856.cljs$lang$applyTo = function(arglist__15858) {
      var args = cljs.core.seq(arglist__15858);
      return G__15856__delegate(args);
    };
    G__15856.cljs$core$IFn$_invoke$arity$variadic = G__15856__delegate;
    return G__15856;
  }();
};
cljs.core.comp = function cljs$core$comp() {
  var G__15864 = arguments.length;
  switch(G__15864) {
    case 0:
      return cljs.core.comp.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.comp.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.comp.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.comp.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 3), 0);
      return cljs.core.comp.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5360__auto__);
  }
};
cljs.core.comp.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.identity;
};
cljs.core.comp.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return f;
};
cljs.core.comp.cljs$core$IFn$_invoke$arity$2 = function(f, g) {
  return function() {
    var G__15893 = null;
    var G__15893__0 = function() {
      var G__15865 = function() {
        return g.cljs$core$IFn$_invoke$arity$0 ? g.cljs$core$IFn$_invoke$arity$0() : g.call(null);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__15865) : f.call(null, G__15865);
    };
    var G__15893__1 = function(x) {
      var G__15866 = function() {
        var G__15867 = x;
        return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__15867) : g.call(null, G__15867);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__15866) : f.call(null, G__15866);
    };
    var G__15893__2 = function(x, y) {
      var G__15868 = function() {
        var G__15869 = x;
        var G__15870 = y;
        return g.cljs$core$IFn$_invoke$arity$2 ? g.cljs$core$IFn$_invoke$arity$2(G__15869, G__15870) : g.call(null, G__15869, G__15870);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__15868) : f.call(null, G__15868);
    };
    var G__15893__3 = function(x, y, z) {
      var G__15871 = function() {
        var G__15872 = x;
        var G__15873 = y;
        var G__15874 = z;
        return g.cljs$core$IFn$_invoke$arity$3 ? g.cljs$core$IFn$_invoke$arity$3(G__15872, G__15873, G__15874) : g.call(null, G__15872, G__15873, G__15874);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__15871) : f.call(null, G__15871);
    };
    var G__15893__4 = function() {
      var G__15894__delegate = function(x, y, z, args) {
        var G__15875 = cljs.core.apply.cljs$core$IFn$_invoke$arity$5(g, x, y, z, args);
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__15875) : f.call(null, G__15875);
      };
      var G__15894 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__15895__i = 0, G__15895__a = new Array(arguments.length - 3);
          while (G__15895__i < G__15895__a.length) {
            G__15895__a[G__15895__i] = arguments[G__15895__i + 3];
            ++G__15895__i;
          }
          args = new cljs.core.IndexedSeq(G__15895__a, 0);
        }
        return G__15894__delegate.call(this, x, y, z, args);
      };
      G__15894.cljs$lang$maxFixedArity = 3;
      G__15894.cljs$lang$applyTo = function(arglist__15896) {
        var x = cljs.core.first(arglist__15896);
        arglist__15896 = cljs.core.next(arglist__15896);
        var y = cljs.core.first(arglist__15896);
        arglist__15896 = cljs.core.next(arglist__15896);
        var z = cljs.core.first(arglist__15896);
        var args = cljs.core.rest(arglist__15896);
        return G__15894__delegate(x, y, z, args);
      };
      G__15894.cljs$core$IFn$_invoke$arity$variadic = G__15894__delegate;
      return G__15894;
    }();
    G__15893 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__15893__0.call(this);
        case 1:
          return G__15893__1.call(this, x);
        case 2:
          return G__15893__2.call(this, x, y);
        case 3:
          return G__15893__3.call(this, x, y, z);
        default:
          var G__15897 = null;
          if (arguments.length > 3) {
            var G__15898__i = 0, G__15898__a = new Array(arguments.length - 3);
            while (G__15898__i < G__15898__a.length) {
              G__15898__a[G__15898__i] = arguments[G__15898__i + 3];
              ++G__15898__i;
            }
            G__15897 = new cljs.core.IndexedSeq(G__15898__a, 0);
          }
          return G__15893__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__15897);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__15893.cljs$lang$maxFixedArity = 3;
    G__15893.cljs$lang$applyTo = G__15893__4.cljs$lang$applyTo;
    G__15893.cljs$core$IFn$_invoke$arity$0 = G__15893__0;
    G__15893.cljs$core$IFn$_invoke$arity$1 = G__15893__1;
    G__15893.cljs$core$IFn$_invoke$arity$2 = G__15893__2;
    G__15893.cljs$core$IFn$_invoke$arity$3 = G__15893__3;
    G__15893.cljs$core$IFn$_invoke$arity$variadic = G__15893__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__15893;
  }();
};
cljs.core.comp.cljs$core$IFn$_invoke$arity$3 = function(f, g, h) {
  return function() {
    var G__15899 = null;
    var G__15899__0 = function() {
      var G__15876 = function() {
        var G__15877 = function() {
          return h.cljs$core$IFn$_invoke$arity$0 ? h.cljs$core$IFn$_invoke$arity$0() : h.call(null);
        }();
        return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__15877) : g.call(null, G__15877);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__15876) : f.call(null, G__15876);
    };
    var G__15899__1 = function(x) {
      var G__15878 = function() {
        var G__15879 = function() {
          var G__15880 = x;
          return h.cljs$core$IFn$_invoke$arity$1 ? h.cljs$core$IFn$_invoke$arity$1(G__15880) : h.call(null, G__15880);
        }();
        return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__15879) : g.call(null, G__15879);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__15878) : f.call(null, G__15878);
    };
    var G__15899__2 = function(x, y) {
      var G__15881 = function() {
        var G__15882 = function() {
          var G__15883 = x;
          var G__15884 = y;
          return h.cljs$core$IFn$_invoke$arity$2 ? h.cljs$core$IFn$_invoke$arity$2(G__15883, G__15884) : h.call(null, G__15883, G__15884);
        }();
        return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__15882) : g.call(null, G__15882);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__15881) : f.call(null, G__15881);
    };
    var G__15899__3 = function(x, y, z) {
      var G__15885 = function() {
        var G__15886 = function() {
          var G__15887 = x;
          var G__15888 = y;
          var G__15889 = z;
          return h.cljs$core$IFn$_invoke$arity$3 ? h.cljs$core$IFn$_invoke$arity$3(G__15887, G__15888, G__15889) : h.call(null, G__15887, G__15888, G__15889);
        }();
        return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__15886) : g.call(null, G__15886);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__15885) : f.call(null, G__15885);
    };
    var G__15899__4 = function() {
      var G__15900__delegate = function(x, y, z, args) {
        var G__15890 = function() {
          var G__15891 = cljs.core.apply.cljs$core$IFn$_invoke$arity$5(h, x, y, z, args);
          return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__15891) : g.call(null, G__15891);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__15890) : f.call(null, G__15890);
      };
      var G__15900 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__15901__i = 0, G__15901__a = new Array(arguments.length - 3);
          while (G__15901__i < G__15901__a.length) {
            G__15901__a[G__15901__i] = arguments[G__15901__i + 3];
            ++G__15901__i;
          }
          args = new cljs.core.IndexedSeq(G__15901__a, 0);
        }
        return G__15900__delegate.call(this, x, y, z, args);
      };
      G__15900.cljs$lang$maxFixedArity = 3;
      G__15900.cljs$lang$applyTo = function(arglist__15902) {
        var x = cljs.core.first(arglist__15902);
        arglist__15902 = cljs.core.next(arglist__15902);
        var y = cljs.core.first(arglist__15902);
        arglist__15902 = cljs.core.next(arglist__15902);
        var z = cljs.core.first(arglist__15902);
        var args = cljs.core.rest(arglist__15902);
        return G__15900__delegate(x, y, z, args);
      };
      G__15900.cljs$core$IFn$_invoke$arity$variadic = G__15900__delegate;
      return G__15900;
    }();
    G__15899 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__15899__0.call(this);
        case 1:
          return G__15899__1.call(this, x);
        case 2:
          return G__15899__2.call(this, x, y);
        case 3:
          return G__15899__3.call(this, x, y, z);
        default:
          var G__15903 = null;
          if (arguments.length > 3) {
            var G__15904__i = 0, G__15904__a = new Array(arguments.length - 3);
            while (G__15904__i < G__15904__a.length) {
              G__15904__a[G__15904__i] = arguments[G__15904__i + 3];
              ++G__15904__i;
            }
            G__15903 = new cljs.core.IndexedSeq(G__15904__a, 0);
          }
          return G__15899__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__15903);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__15899.cljs$lang$maxFixedArity = 3;
    G__15899.cljs$lang$applyTo = G__15899__4.cljs$lang$applyTo;
    G__15899.cljs$core$IFn$_invoke$arity$0 = G__15899__0;
    G__15899.cljs$core$IFn$_invoke$arity$1 = G__15899__1;
    G__15899.cljs$core$IFn$_invoke$arity$2 = G__15899__2;
    G__15899.cljs$core$IFn$_invoke$arity$3 = G__15899__3;
    G__15899.cljs$core$IFn$_invoke$arity$variadic = G__15899__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__15899;
  }();
};
cljs.core.comp.cljs$core$IFn$_invoke$arity$variadic = function(f1, f2, f3, fs) {
  var fs__$1 = cljs.core.reverse(cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(f1, f2, f3, fs));
  return function(fs__$1) {
    return function() {
      var G__15905__delegate = function(args) {
        var ret = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.first(fs__$1), args);
        var fs__$2 = cljs.core.next(fs__$1);
        while (true) {
          if (fs__$2) {
            var G__15906 = cljs.core.first(fs__$2).call(null, ret);
            var G__15907 = cljs.core.next(fs__$2);
            ret = G__15906;
            fs__$2 = G__15907;
            continue;
          } else {
            return ret;
          }
          break;
        }
      };
      var G__15905 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          var G__15908__i = 0, G__15908__a = new Array(arguments.length - 0);
          while (G__15908__i < G__15908__a.length) {
            G__15908__a[G__15908__i] = arguments[G__15908__i + 0];
            ++G__15908__i;
          }
          args = new cljs.core.IndexedSeq(G__15908__a, 0);
        }
        return G__15905__delegate.call(this, args);
      };
      G__15905.cljs$lang$maxFixedArity = 0;
      G__15905.cljs$lang$applyTo = function(arglist__15909) {
        var args = cljs.core.seq(arglist__15909);
        return G__15905__delegate(args);
      };
      G__15905.cljs$core$IFn$_invoke$arity$variadic = G__15905__delegate;
      return G__15905;
    }();
  }(fs__$1);
};
cljs.core.comp.cljs$lang$applyTo = function(seq15859) {
  var G__15860 = cljs.core.first(seq15859);
  var seq15859__$1 = cljs.core.next(seq15859);
  var G__15861 = cljs.core.first(seq15859__$1);
  var seq15859__$2 = cljs.core.next(seq15859__$1);
  var G__15862 = cljs.core.first(seq15859__$2);
  var seq15859__$3 = cljs.core.next(seq15859__$2);
  return cljs.core.comp.cljs$core$IFn$_invoke$arity$variadic(G__15860, G__15861, G__15862, seq15859__$3);
};
cljs.core.comp.cljs$lang$maxFixedArity = 3;
cljs.core.partial = function cljs$core$partial() {
  var G__15916 = arguments.length;
  switch(G__15916) {
    case 1:
      return cljs.core.partial.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.partial.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.partial.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.partial.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 4), 0);
      return cljs.core.partial.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__5360__auto__);
  }
};
cljs.core.partial.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return f;
};
cljs.core.partial.cljs$core$IFn$_invoke$arity$2 = function(f, arg1) {
  return function() {
    var G__15960 = null;
    var G__15960__0 = function() {
      var G__15917 = arg1;
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__15917) : f.call(null, G__15917);
    };
    var G__15960__1 = function(x) {
      var G__15918 = arg1;
      var G__15919 = x;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__15918, G__15919) : f.call(null, G__15918, G__15919);
    };
    var G__15960__2 = function(x, y) {
      var G__15920 = arg1;
      var G__15921 = x;
      var G__15922 = y;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__15920, G__15921, G__15922) : f.call(null, G__15920, G__15921, G__15922);
    };
    var G__15960__3 = function(x, y, z) {
      var G__15923 = arg1;
      var G__15924 = x;
      var G__15925 = y;
      var G__15926 = z;
      return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__15923, G__15924, G__15925, G__15926) : f.call(null, G__15923, G__15924, G__15925, G__15926);
    };
    var G__15960__4 = function() {
      var G__15961__delegate = function(x, y, z, args) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, arg1, x, y, z, cljs.core.array_seq([args], 0));
      };
      var G__15961 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__15962__i = 0, G__15962__a = new Array(arguments.length - 3);
          while (G__15962__i < G__15962__a.length) {
            G__15962__a[G__15962__i] = arguments[G__15962__i + 3];
            ++G__15962__i;
          }
          args = new cljs.core.IndexedSeq(G__15962__a, 0);
        }
        return G__15961__delegate.call(this, x, y, z, args);
      };
      G__15961.cljs$lang$maxFixedArity = 3;
      G__15961.cljs$lang$applyTo = function(arglist__15963) {
        var x = cljs.core.first(arglist__15963);
        arglist__15963 = cljs.core.next(arglist__15963);
        var y = cljs.core.first(arglist__15963);
        arglist__15963 = cljs.core.next(arglist__15963);
        var z = cljs.core.first(arglist__15963);
        var args = cljs.core.rest(arglist__15963);
        return G__15961__delegate(x, y, z, args);
      };
      G__15961.cljs$core$IFn$_invoke$arity$variadic = G__15961__delegate;
      return G__15961;
    }();
    G__15960 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__15960__0.call(this);
        case 1:
          return G__15960__1.call(this, x);
        case 2:
          return G__15960__2.call(this, x, y);
        case 3:
          return G__15960__3.call(this, x, y, z);
        default:
          var G__15964 = null;
          if (arguments.length > 3) {
            var G__15965__i = 0, G__15965__a = new Array(arguments.length - 3);
            while (G__15965__i < G__15965__a.length) {
              G__15965__a[G__15965__i] = arguments[G__15965__i + 3];
              ++G__15965__i;
            }
            G__15964 = new cljs.core.IndexedSeq(G__15965__a, 0);
          }
          return G__15960__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__15964);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__15960.cljs$lang$maxFixedArity = 3;
    G__15960.cljs$lang$applyTo = G__15960__4.cljs$lang$applyTo;
    G__15960.cljs$core$IFn$_invoke$arity$0 = G__15960__0;
    G__15960.cljs$core$IFn$_invoke$arity$1 = G__15960__1;
    G__15960.cljs$core$IFn$_invoke$arity$2 = G__15960__2;
    G__15960.cljs$core$IFn$_invoke$arity$3 = G__15960__3;
    G__15960.cljs$core$IFn$_invoke$arity$variadic = G__15960__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__15960;
  }();
};
cljs.core.partial.cljs$core$IFn$_invoke$arity$3 = function(f, arg1, arg2) {
  return function() {
    var G__15966 = null;
    var G__15966__0 = function() {
      var G__15927 = arg1;
      var G__15928 = arg2;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__15927, G__15928) : f.call(null, G__15927, G__15928);
    };
    var G__15966__1 = function(x) {
      var G__15929 = arg1;
      var G__15930 = arg2;
      var G__15931 = x;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__15929, G__15930, G__15931) : f.call(null, G__15929, G__15930, G__15931);
    };
    var G__15966__2 = function(x, y) {
      var G__15932 = arg1;
      var G__15933 = arg2;
      var G__15934 = x;
      var G__15935 = y;
      return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__15932, G__15933, G__15934, G__15935) : f.call(null, G__15932, G__15933, G__15934, G__15935);
    };
    var G__15966__3 = function(x, y, z) {
      var G__15936 = arg1;
      var G__15937 = arg2;
      var G__15938 = x;
      var G__15939 = y;
      var G__15940 = z;
      return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(G__15936, G__15937, G__15938, G__15939, G__15940) : f.call(null, G__15936, G__15937, G__15938, G__15939, G__15940);
    };
    var G__15966__4 = function() {
      var G__15967__delegate = function(x, y, z, args) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, x, y, cljs.core.array_seq([z, args], 0));
      };
      var G__15967 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__15968__i = 0, G__15968__a = new Array(arguments.length - 3);
          while (G__15968__i < G__15968__a.length) {
            G__15968__a[G__15968__i] = arguments[G__15968__i + 3];
            ++G__15968__i;
          }
          args = new cljs.core.IndexedSeq(G__15968__a, 0);
        }
        return G__15967__delegate.call(this, x, y, z, args);
      };
      G__15967.cljs$lang$maxFixedArity = 3;
      G__15967.cljs$lang$applyTo = function(arglist__15969) {
        var x = cljs.core.first(arglist__15969);
        arglist__15969 = cljs.core.next(arglist__15969);
        var y = cljs.core.first(arglist__15969);
        arglist__15969 = cljs.core.next(arglist__15969);
        var z = cljs.core.first(arglist__15969);
        var args = cljs.core.rest(arglist__15969);
        return G__15967__delegate(x, y, z, args);
      };
      G__15967.cljs$core$IFn$_invoke$arity$variadic = G__15967__delegate;
      return G__15967;
    }();
    G__15966 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__15966__0.call(this);
        case 1:
          return G__15966__1.call(this, x);
        case 2:
          return G__15966__2.call(this, x, y);
        case 3:
          return G__15966__3.call(this, x, y, z);
        default:
          var G__15970 = null;
          if (arguments.length > 3) {
            var G__15971__i = 0, G__15971__a = new Array(arguments.length - 3);
            while (G__15971__i < G__15971__a.length) {
              G__15971__a[G__15971__i] = arguments[G__15971__i + 3];
              ++G__15971__i;
            }
            G__15970 = new cljs.core.IndexedSeq(G__15971__a, 0);
          }
          return G__15966__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__15970);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__15966.cljs$lang$maxFixedArity = 3;
    G__15966.cljs$lang$applyTo = G__15966__4.cljs$lang$applyTo;
    G__15966.cljs$core$IFn$_invoke$arity$0 = G__15966__0;
    G__15966.cljs$core$IFn$_invoke$arity$1 = G__15966__1;
    G__15966.cljs$core$IFn$_invoke$arity$2 = G__15966__2;
    G__15966.cljs$core$IFn$_invoke$arity$3 = G__15966__3;
    G__15966.cljs$core$IFn$_invoke$arity$variadic = G__15966__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__15966;
  }();
};
cljs.core.partial.cljs$core$IFn$_invoke$arity$4 = function(f, arg1, arg2, arg3) {
  return function() {
    var G__15972 = null;
    var G__15972__0 = function() {
      var G__15941 = arg1;
      var G__15942 = arg2;
      var G__15943 = arg3;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__15941, G__15942, G__15943) : f.call(null, G__15941, G__15942, G__15943);
    };
    var G__15972__1 = function(x) {
      var G__15944 = arg1;
      var G__15945 = arg2;
      var G__15946 = arg3;
      var G__15947 = x;
      return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__15944, G__15945, G__15946, G__15947) : f.call(null, G__15944, G__15945, G__15946, G__15947);
    };
    var G__15972__2 = function(x, y) {
      var G__15948 = arg1;
      var G__15949 = arg2;
      var G__15950 = arg3;
      var G__15951 = x;
      var G__15952 = y;
      return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(G__15948, G__15949, G__15950, G__15951, G__15952) : f.call(null, G__15948, G__15949, G__15950, G__15951, G__15952);
    };
    var G__15972__3 = function(x, y, z) {
      var G__15953 = arg1;
      var G__15954 = arg2;
      var G__15955 = arg3;
      var G__15956 = x;
      var G__15957 = y;
      var G__15958 = z;
      return f.cljs$core$IFn$_invoke$arity$6 ? f.cljs$core$IFn$_invoke$arity$6(G__15953, G__15954, G__15955, G__15956, G__15957, G__15958) : f.call(null, G__15953, G__15954, G__15955, G__15956, G__15957, G__15958);
    };
    var G__15972__4 = function() {
      var G__15973__delegate = function(x, y, z, args) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, arg3, x, cljs.core.array_seq([y, z, args], 0));
      };
      var G__15973 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__15974__i = 0, G__15974__a = new Array(arguments.length - 3);
          while (G__15974__i < G__15974__a.length) {
            G__15974__a[G__15974__i] = arguments[G__15974__i + 3];
            ++G__15974__i;
          }
          args = new cljs.core.IndexedSeq(G__15974__a, 0);
        }
        return G__15973__delegate.call(this, x, y, z, args);
      };
      G__15973.cljs$lang$maxFixedArity = 3;
      G__15973.cljs$lang$applyTo = function(arglist__15975) {
        var x = cljs.core.first(arglist__15975);
        arglist__15975 = cljs.core.next(arglist__15975);
        var y = cljs.core.first(arglist__15975);
        arglist__15975 = cljs.core.next(arglist__15975);
        var z = cljs.core.first(arglist__15975);
        var args = cljs.core.rest(arglist__15975);
        return G__15973__delegate(x, y, z, args);
      };
      G__15973.cljs$core$IFn$_invoke$arity$variadic = G__15973__delegate;
      return G__15973;
    }();
    G__15972 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__15972__0.call(this);
        case 1:
          return G__15972__1.call(this, x);
        case 2:
          return G__15972__2.call(this, x, y);
        case 3:
          return G__15972__3.call(this, x, y, z);
        default:
          var G__15976 = null;
          if (arguments.length > 3) {
            var G__15977__i = 0, G__15977__a = new Array(arguments.length - 3);
            while (G__15977__i < G__15977__a.length) {
              G__15977__a[G__15977__i] = arguments[G__15977__i + 3];
              ++G__15977__i;
            }
            G__15976 = new cljs.core.IndexedSeq(G__15977__a, 0);
          }
          return G__15972__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__15976);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__15972.cljs$lang$maxFixedArity = 3;
    G__15972.cljs$lang$applyTo = G__15972__4.cljs$lang$applyTo;
    G__15972.cljs$core$IFn$_invoke$arity$0 = G__15972__0;
    G__15972.cljs$core$IFn$_invoke$arity$1 = G__15972__1;
    G__15972.cljs$core$IFn$_invoke$arity$2 = G__15972__2;
    G__15972.cljs$core$IFn$_invoke$arity$3 = G__15972__3;
    G__15972.cljs$core$IFn$_invoke$arity$variadic = G__15972__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__15972;
  }();
};
cljs.core.partial.cljs$core$IFn$_invoke$arity$variadic = function(f, arg1, arg2, arg3, more) {
  return function() {
    var G__15978__delegate = function(args) {
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, arg1, arg2, arg3, cljs.core.concat.cljs$core$IFn$_invoke$arity$2(more, args));
    };
    var G__15978 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        var G__15979__i = 0, G__15979__a = new Array(arguments.length - 0);
        while (G__15979__i < G__15979__a.length) {
          G__15979__a[G__15979__i] = arguments[G__15979__i + 0];
          ++G__15979__i;
        }
        args = new cljs.core.IndexedSeq(G__15979__a, 0);
      }
      return G__15978__delegate.call(this, args);
    };
    G__15978.cljs$lang$maxFixedArity = 0;
    G__15978.cljs$lang$applyTo = function(arglist__15980) {
      var args = cljs.core.seq(arglist__15980);
      return G__15978__delegate(args);
    };
    G__15978.cljs$core$IFn$_invoke$arity$variadic = G__15978__delegate;
    return G__15978;
  }();
};
cljs.core.partial.cljs$lang$applyTo = function(seq15910) {
  var G__15911 = cljs.core.first(seq15910);
  var seq15910__$1 = cljs.core.next(seq15910);
  var G__15912 = cljs.core.first(seq15910__$1);
  var seq15910__$2 = cljs.core.next(seq15910__$1);
  var G__15913 = cljs.core.first(seq15910__$2);
  var seq15910__$3 = cljs.core.next(seq15910__$2);
  var G__15914 = cljs.core.first(seq15910__$3);
  var seq15910__$4 = cljs.core.next(seq15910__$3);
  return cljs.core.partial.cljs$core$IFn$_invoke$arity$variadic(G__15911, G__15912, G__15913, G__15914, seq15910__$4);
};
cljs.core.partial.cljs$lang$maxFixedArity = 4;
cljs.core.fnil = function cljs$core$fnil() {
  var G__15982 = arguments.length;
  switch(G__15982) {
    case 2:
      return cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.fnil.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.fnil.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.fnil.cljs$core$IFn$_invoke$arity$2 = function(f, x) {
  return function() {
    var G__16000 = null;
    var G__16000__1 = function(a) {
      var G__15983 = a == null ? x : a;
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__15983) : f.call(null, G__15983);
    };
    var G__16000__2 = function(a, b) {
      var G__15984 = a == null ? x : a;
      var G__15985 = b;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__15984, G__15985) : f.call(null, G__15984, G__15985);
    };
    var G__16000__3 = function(a, b, c) {
      var G__15986 = a == null ? x : a;
      var G__15987 = b;
      var G__15988 = c;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__15986, G__15987, G__15988) : f.call(null, G__15986, G__15987, G__15988);
    };
    var G__16000__4 = function() {
      var G__16001__delegate = function(a, b, c, ds) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a == null ? x : a, b, c, ds);
      };
      var G__16001 = function(a, b, c, var_args) {
        var ds = null;
        if (arguments.length > 3) {
          var G__16002__i = 0, G__16002__a = new Array(arguments.length - 3);
          while (G__16002__i < G__16002__a.length) {
            G__16002__a[G__16002__i] = arguments[G__16002__i + 3];
            ++G__16002__i;
          }
          ds = new cljs.core.IndexedSeq(G__16002__a, 0);
        }
        return G__16001__delegate.call(this, a, b, c, ds);
      };
      G__16001.cljs$lang$maxFixedArity = 3;
      G__16001.cljs$lang$applyTo = function(arglist__16003) {
        var a = cljs.core.first(arglist__16003);
        arglist__16003 = cljs.core.next(arglist__16003);
        var b = cljs.core.first(arglist__16003);
        arglist__16003 = cljs.core.next(arglist__16003);
        var c = cljs.core.first(arglist__16003);
        var ds = cljs.core.rest(arglist__16003);
        return G__16001__delegate(a, b, c, ds);
      };
      G__16001.cljs$core$IFn$_invoke$arity$variadic = G__16001__delegate;
      return G__16001;
    }();
    G__16000 = function(a, b, c, var_args) {
      var ds = var_args;
      switch(arguments.length) {
        case 1:
          return G__16000__1.call(this, a);
        case 2:
          return G__16000__2.call(this, a, b);
        case 3:
          return G__16000__3.call(this, a, b, c);
        default:
          var G__16004 = null;
          if (arguments.length > 3) {
            var G__16005__i = 0, G__16005__a = new Array(arguments.length - 3);
            while (G__16005__i < G__16005__a.length) {
              G__16005__a[G__16005__i] = arguments[G__16005__i + 3];
              ++G__16005__i;
            }
            G__16004 = new cljs.core.IndexedSeq(G__16005__a, 0);
          }
          return G__16000__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, G__16004);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__16000.cljs$lang$maxFixedArity = 3;
    G__16000.cljs$lang$applyTo = G__16000__4.cljs$lang$applyTo;
    G__16000.cljs$core$IFn$_invoke$arity$1 = G__16000__1;
    G__16000.cljs$core$IFn$_invoke$arity$2 = G__16000__2;
    G__16000.cljs$core$IFn$_invoke$arity$3 = G__16000__3;
    G__16000.cljs$core$IFn$_invoke$arity$variadic = G__16000__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__16000;
  }();
};
cljs.core.fnil.cljs$core$IFn$_invoke$arity$3 = function(f, x, y) {
  return function() {
    var G__16006 = null;
    var G__16006__2 = function(a, b) {
      var G__15989 = a == null ? x : a;
      var G__15990 = b == null ? y : b;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__15989, G__15990) : f.call(null, G__15989, G__15990);
    };
    var G__16006__3 = function(a, b, c) {
      var G__15991 = a == null ? x : a;
      var G__15992 = b == null ? y : b;
      var G__15993 = c;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__15991, G__15992, G__15993) : f.call(null, G__15991, G__15992, G__15993);
    };
    var G__16006__4 = function() {
      var G__16007__delegate = function(a, b, c, ds) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a == null ? x : a, b == null ? y : b, c, ds);
      };
      var G__16007 = function(a, b, c, var_args) {
        var ds = null;
        if (arguments.length > 3) {
          var G__16008__i = 0, G__16008__a = new Array(arguments.length - 3);
          while (G__16008__i < G__16008__a.length) {
            G__16008__a[G__16008__i] = arguments[G__16008__i + 3];
            ++G__16008__i;
          }
          ds = new cljs.core.IndexedSeq(G__16008__a, 0);
        }
        return G__16007__delegate.call(this, a, b, c, ds);
      };
      G__16007.cljs$lang$maxFixedArity = 3;
      G__16007.cljs$lang$applyTo = function(arglist__16009) {
        var a = cljs.core.first(arglist__16009);
        arglist__16009 = cljs.core.next(arglist__16009);
        var b = cljs.core.first(arglist__16009);
        arglist__16009 = cljs.core.next(arglist__16009);
        var c = cljs.core.first(arglist__16009);
        var ds = cljs.core.rest(arglist__16009);
        return G__16007__delegate(a, b, c, ds);
      };
      G__16007.cljs$core$IFn$_invoke$arity$variadic = G__16007__delegate;
      return G__16007;
    }();
    G__16006 = function(a, b, c, var_args) {
      var ds = var_args;
      switch(arguments.length) {
        case 2:
          return G__16006__2.call(this, a, b);
        case 3:
          return G__16006__3.call(this, a, b, c);
        default:
          var G__16010 = null;
          if (arguments.length > 3) {
            var G__16011__i = 0, G__16011__a = new Array(arguments.length - 3);
            while (G__16011__i < G__16011__a.length) {
              G__16011__a[G__16011__i] = arguments[G__16011__i + 3];
              ++G__16011__i;
            }
            G__16010 = new cljs.core.IndexedSeq(G__16011__a, 0);
          }
          return G__16006__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, G__16010);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__16006.cljs$lang$maxFixedArity = 3;
    G__16006.cljs$lang$applyTo = G__16006__4.cljs$lang$applyTo;
    G__16006.cljs$core$IFn$_invoke$arity$2 = G__16006__2;
    G__16006.cljs$core$IFn$_invoke$arity$3 = G__16006__3;
    G__16006.cljs$core$IFn$_invoke$arity$variadic = G__16006__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__16006;
  }();
};
cljs.core.fnil.cljs$core$IFn$_invoke$arity$4 = function(f, x, y, z) {
  return function() {
    var G__16012 = null;
    var G__16012__2 = function(a, b) {
      var G__15994 = a == null ? x : a;
      var G__15995 = b == null ? y : b;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__15994, G__15995) : f.call(null, G__15994, G__15995);
    };
    var G__16012__3 = function(a, b, c) {
      var G__15996 = a == null ? x : a;
      var G__15997 = b == null ? y : b;
      var G__15998 = c == null ? z : c;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__15996, G__15997, G__15998) : f.call(null, G__15996, G__15997, G__15998);
    };
    var G__16012__4 = function() {
      var G__16013__delegate = function(a, b, c, ds) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a == null ? x : a, b == null ? y : b, c == null ? z : c, ds);
      };
      var G__16013 = function(a, b, c, var_args) {
        var ds = null;
        if (arguments.length > 3) {
          var G__16014__i = 0, G__16014__a = new Array(arguments.length - 3);
          while (G__16014__i < G__16014__a.length) {
            G__16014__a[G__16014__i] = arguments[G__16014__i + 3];
            ++G__16014__i;
          }
          ds = new cljs.core.IndexedSeq(G__16014__a, 0);
        }
        return G__16013__delegate.call(this, a, b, c, ds);
      };
      G__16013.cljs$lang$maxFixedArity = 3;
      G__16013.cljs$lang$applyTo = function(arglist__16015) {
        var a = cljs.core.first(arglist__16015);
        arglist__16015 = cljs.core.next(arglist__16015);
        var b = cljs.core.first(arglist__16015);
        arglist__16015 = cljs.core.next(arglist__16015);
        var c = cljs.core.first(arglist__16015);
        var ds = cljs.core.rest(arglist__16015);
        return G__16013__delegate(a, b, c, ds);
      };
      G__16013.cljs$core$IFn$_invoke$arity$variadic = G__16013__delegate;
      return G__16013;
    }();
    G__16012 = function(a, b, c, var_args) {
      var ds = var_args;
      switch(arguments.length) {
        case 2:
          return G__16012__2.call(this, a, b);
        case 3:
          return G__16012__3.call(this, a, b, c);
        default:
          var G__16016 = null;
          if (arguments.length > 3) {
            var G__16017__i = 0, G__16017__a = new Array(arguments.length - 3);
            while (G__16017__i < G__16017__a.length) {
              G__16017__a[G__16017__i] = arguments[G__16017__i + 3];
              ++G__16017__i;
            }
            G__16016 = new cljs.core.IndexedSeq(G__16017__a, 0);
          }
          return G__16012__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, G__16016);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__16012.cljs$lang$maxFixedArity = 3;
    G__16012.cljs$lang$applyTo = G__16012__4.cljs$lang$applyTo;
    G__16012.cljs$core$IFn$_invoke$arity$2 = G__16012__2;
    G__16012.cljs$core$IFn$_invoke$arity$3 = G__16012__3;
    G__16012.cljs$core$IFn$_invoke$arity$variadic = G__16012__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__16012;
  }();
};
cljs.core.fnil.cljs$lang$maxFixedArity = 4;
cljs.core.map_indexed = function cljs$core$map_indexed() {
  var G__16019 = arguments.length;
  switch(G__16019) {
    case 1:
      return cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function(rf) {
    var i = function() {
      var G__16020 = -1;
      return cljs.core.volatile_BANG_.cljs$core$IFn$_invoke$arity$1 ? cljs.core.volatile_BANG_.cljs$core$IFn$_invoke$arity$1(G__16020) : cljs.core.volatile_BANG_.call(null, G__16020);
    }();
    return function(i) {
      return function() {
        var G__16051 = null;
        var G__16051__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__16051__1 = function(result) {
          var G__16021 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__16021) : rf.call(null, G__16021);
        };
        var G__16051__2 = function(result, input) {
          var G__16022 = result;
          var G__16023 = function() {
            var G__16024 = cljs.core._vreset_BANG_(i, cljs.core._deref(i) + 1);
            var G__16025 = input;
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__16024, G__16025) : f.call(null, G__16024, G__16025);
          }();
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__16022, G__16023) : rf.call(null, G__16022, G__16023);
        };
        G__16051 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__16051__0.call(this);
            case 1:
              return G__16051__1.call(this, result);
            case 2:
              return G__16051__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__16051.cljs$core$IFn$_invoke$arity$0 = G__16051__0;
        G__16051.cljs$core$IFn$_invoke$arity$1 = G__16051__1;
        G__16051.cljs$core$IFn$_invoke$arity$2 = G__16051__2;
        return G__16051;
      }();
    }(i);
  };
};
cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  var mapi = function cljs$core$mapi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4422__auto__ = cljs.core.seq(coll__$1);
      if (temp__4422__auto__) {
        var s = temp__4422__auto__;
        if (cljs.core.chunked_seq_QMARK_(s)) {
          var c = cljs.core.chunk_first(s);
          var size = cljs.core.count(c);
          var b = cljs.core.chunk_buffer(size);
          var n__5194__auto___16052 = size;
          var i_16053 = 0;
          while (true) {
            if (i_16053 < n__5194__auto___16052) {
              cljs.core.chunk_append(b, function() {
                var G__16046 = idx + i_16053;
                var G__16047 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_16053);
                return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__16046, G__16047) : f.call(null, G__16046, G__16047);
              }());
              var G__16054 = i_16053 + 1;
              i_16053 = G__16054;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons(cljs.core.chunk(b), cljs$core$mapi(idx + size, cljs.core.chunk_rest(s)));
        } else {
          return cljs.core.cons(function() {
            var G__16048 = idx;
            var G__16049 = cljs.core.first(s);
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__16048, G__16049) : f.call(null, G__16048, G__16049);
          }(), cljs$core$mapi(idx + 1, cljs.core.rest(s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return mapi(0, coll);
};
cljs.core.map_indexed.cljs$lang$maxFixedArity = 2;
cljs.core.keep = function cljs$core$keep() {
  var G__16056 = arguments.length;
  switch(G__16056) {
    case 1:
      return cljs.core.keep.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.keep.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.keep.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function(rf) {
    return function() {
      var G__16064 = null;
      var G__16064__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__16064__1 = function(result) {
        var G__16057 = result;
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__16057) : rf.call(null, G__16057);
      };
      var G__16064__2 = function(result, input) {
        var v = function() {
          var G__16058 = input;
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__16058) : f.call(null, G__16058);
        }();
        if (v == null) {
          return result;
        } else {
          var G__16059 = result;
          var G__16060 = v;
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__16059, G__16060) : rf.call(null, G__16059, G__16060);
        }
      };
      G__16064 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__16064__0.call(this);
          case 1:
            return G__16064__1.call(this, result);
          case 2:
            return G__16064__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__16064.cljs$core$IFn$_invoke$arity$0 = G__16064__0;
      G__16064.cljs$core$IFn$_invoke$arity$1 = G__16064__1;
      G__16064.cljs$core$IFn$_invoke$arity$2 = G__16064__2;
      return G__16064;
    }();
  };
};
cljs.core.keep.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4422__auto__ = cljs.core.seq(coll);
    if (temp__4422__auto__) {
      var s = temp__4422__auto__;
      if (cljs.core.chunked_seq_QMARK_(s)) {
        var c = cljs.core.chunk_first(s);
        var size = cljs.core.count(c);
        var b = cljs.core.chunk_buffer(size);
        var n__5194__auto___16065 = size;
        var i_16066 = 0;
        while (true) {
          if (i_16066 < n__5194__auto___16065) {
            var x_16067 = function() {
              var G__16061 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_16066);
              return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__16061) : f.call(null, G__16061);
            }();
            if (x_16067 == null) {
            } else {
              cljs.core.chunk_append(b, x_16067);
            }
            var G__16068 = i_16066 + 1;
            i_16066 = G__16068;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons(cljs.core.chunk(b), cljs.core.keep.cljs$core$IFn$_invoke$arity$2(f, cljs.core.chunk_rest(s)));
      } else {
        var x = function() {
          var G__16062 = cljs.core.first(s);
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__16062) : f.call(null, G__16062);
        }();
        if (x == null) {
          return cljs.core.keep.cljs$core$IFn$_invoke$arity$2(f, cljs.core.rest(s));
        } else {
          return cljs.core.cons(x, cljs.core.keep.cljs$core$IFn$_invoke$arity$2(f, cljs.core.rest(s)));
        }
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.keep.cljs$lang$maxFixedArity = 2;
cljs.core.Atom = function(state, meta, validator, watches) {
  this.state = state;
  this.meta = meta;
  this.validator = validator;
  this.watches = watches;
  this.cljs$lang$protocol_mask$partition1$ = 16386;
  this.cljs$lang$protocol_mask$partition0$ = 6455296;
};
cljs.core.Atom.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Atom.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return o__$1 === other;
};
cljs.core.Atom.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
cljs.core.Atom.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  var seq__16069 = cljs.core.seq(self__.watches);
  var chunk__16070 = null;
  var count__16071 = 0;
  var i__16072 = 0;
  while (true) {
    if (i__16072 < count__16071) {
      var vec__16073 = chunk__16070.cljs$core$IIndexed$_nth$arity$2(null, i__16072);
      var key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16073, 0, null);
      var f = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16073, 1, null);
      var G__16074_16084 = key;
      var G__16075_16085 = this$__$1;
      var G__16076_16086 = oldval;
      var G__16077_16087 = newval;
      f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__16074_16084, G__16075_16085, G__16076_16086, G__16077_16087) : f.call(null, G__16074_16084, G__16075_16085, G__16076_16086, G__16077_16087);
      var G__16088 = seq__16069;
      var G__16089 = chunk__16070;
      var G__16090 = count__16071;
      var G__16091 = i__16072 + 1;
      seq__16069 = G__16088;
      chunk__16070 = G__16089;
      count__16071 = G__16090;
      i__16072 = G__16091;
      continue;
    } else {
      var temp__4422__auto__ = cljs.core.seq(seq__16069);
      if (temp__4422__auto__) {
        var seq__16069__$1 = temp__4422__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__16069__$1)) {
          var c__5094__auto__ = cljs.core.chunk_first(seq__16069__$1);
          var G__16092 = cljs.core.chunk_rest(seq__16069__$1);
          var G__16093 = c__5094__auto__;
          var G__16094 = cljs.core.count(c__5094__auto__);
          var G__16095 = 0;
          seq__16069 = G__16092;
          chunk__16070 = G__16093;
          count__16071 = G__16094;
          i__16072 = G__16095;
          continue;
        } else {
          var vec__16078 = cljs.core.first(seq__16069__$1);
          var key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16078, 0, null);
          var f = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16078, 1, null);
          var G__16079_16096 = key;
          var G__16080_16097 = this$__$1;
          var G__16081_16098 = oldval;
          var G__16082_16099 = newval;
          f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__16079_16096, G__16080_16097, G__16081_16098, G__16082_16099) : f.call(null, G__16079_16096, G__16080_16097, G__16081_16098, G__16082_16099);
          var G__16100 = cljs.core.next(seq__16069__$1);
          var G__16101 = null;
          var G__16102 = 0;
          var G__16103 = 0;
          seq__16069 = G__16100;
          chunk__16070 = G__16101;
          count__16071 = G__16102;
          i__16072 = G__16103;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  this$__$1.watches = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.watches, key, f);
  return this$__$1;
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.watches = cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(self__.watches, key);
};
cljs.core.Atom.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var G__16083 = this$__$1;
  return goog.getUid(G__16083);
};
cljs.core.Atom.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "state", "state", -348086572, null), new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "validator", "validator", -325659154, null), new cljs.core.Symbol(null, "watches", "watches", 1367433992, null)], null);
};
cljs.core.Atom.cljs$lang$type = true;
cljs.core.Atom.cljs$lang$ctorStr = "cljs.core/Atom";
cljs.core.Atom.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/Atom");
};
cljs.core.__GT_Atom = function cljs$core$__GT_Atom(state, meta, validator, watches) {
  return new cljs.core.Atom(state, meta, validator, watches);
};
cljs.core.atom = function cljs$core$atom() {
  var G__16107 = arguments.length;
  switch(G__16107) {
    case 1:
      return cljs.core.atom.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0);
      return cljs.core.atom.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5360__auto__);
  }
};
cljs.core.atom.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return new cljs.core.Atom(x, null, null, null);
};
cljs.core.atom.cljs$core$IFn$_invoke$arity$variadic = function(x, p__16108) {
  var map__16109 = p__16108;
  var map__16109__$1 = cljs.core.seq_QMARK_(map__16109) ? cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map, map__16109) : map__16109;
  var meta = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__16109__$1, new cljs.core.Keyword(null, "meta", "meta", 1499536964));
  var validator = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__16109__$1, new cljs.core.Keyword(null, "validator", "validator", -1966190681));
  return new cljs.core.Atom(x, meta, validator, null);
};
cljs.core.atom.cljs$lang$applyTo = function(seq16104) {
  var G__16105 = cljs.core.first(seq16104);
  var seq16104__$1 = cljs.core.next(seq16104);
  return cljs.core.atom.cljs$core$IFn$_invoke$arity$variadic(G__16105, seq16104__$1);
};
cljs.core.atom.cljs$lang$maxFixedArity = 1;
cljs.core.reset_BANG_ = function cljs$core$reset_BANG_(a, new_value) {
  if (a instanceof cljs.core.Atom) {
    var validate = a.validator;
    if (validate == null) {
    } else {
      if (cljs.core.truth_(function() {
        var G__16113 = new_value;
        return validate.cljs$core$IFn$_invoke$arity$1 ? validate.cljs$core$IFn$_invoke$arity$1(G__16113) : validate.call(null, G__16113);
      }())) {
      } else {
        throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Validator rejected reference state"), cljs.core.str("\n"), cljs.core.str(function() {
          var G__16114 = cljs.core.list(new cljs.core.Symbol(null, "validate", "validate", 1439230700, null), new cljs.core.Symbol(null, "new-value", "new-value", -1567397401, null));
          return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$1 ? cljs.core.pr_str.cljs$core$IFn$_invoke$arity$1(G__16114) : cljs.core.pr_str.call(null, G__16114);
        }())].join(""));
      }
    }
    var old_value = a.state;
    a.state = new_value;
    if (a.watches == null) {
    } else {
      cljs.core._notify_watches(a, old_value, new_value);
    }
    return new_value;
  } else {
    return cljs.core._reset_BANG_(a, new_value);
  }
};
cljs.core.swap_BANG_ = function cljs$core$swap_BANG_() {
  var G__16121 = arguments.length;
  switch(G__16121) {
    case 2:
      return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 4), 0);
      return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__5360__auto__);
  }
};
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2 = function(a, f) {
  if (a instanceof cljs.core.Atom) {
    return cljs.core.reset_BANG_(a, function() {
      var G__16122 = a.state;
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__16122) : f.call(null, G__16122);
    }());
  } else {
    return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$2(a, f);
  }
};
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3 = function(a, f, x) {
  if (a instanceof cljs.core.Atom) {
    return cljs.core.reset_BANG_(a, function() {
      var G__16123 = a.state;
      var G__16124 = x;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__16123, G__16124) : f.call(null, G__16123, G__16124);
    }());
  } else {
    return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$3(a, f, x);
  }
};
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4 = function(a, f, x, y) {
  if (a instanceof cljs.core.Atom) {
    return cljs.core.reset_BANG_(a, function() {
      var G__16125 = a.state;
      var G__16126 = x;
      var G__16127 = y;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__16125, G__16126, G__16127) : f.call(null, G__16125, G__16126, G__16127);
    }());
  } else {
    return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$4(a, f, x, y);
  }
};
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(a, f, x, y, more) {
  if (a instanceof cljs.core.Atom) {
    return cljs.core.reset_BANG_(a, cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a.state, x, y, more));
  } else {
    return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$5(a, f, x, y, more);
  }
};
cljs.core.swap_BANG_.cljs$lang$applyTo = function(seq16115) {
  var G__16116 = cljs.core.first(seq16115);
  var seq16115__$1 = cljs.core.next(seq16115);
  var G__16117 = cljs.core.first(seq16115__$1);
  var seq16115__$2 = cljs.core.next(seq16115__$1);
  var G__16118 = cljs.core.first(seq16115__$2);
  var seq16115__$3 = cljs.core.next(seq16115__$2);
  var G__16119 = cljs.core.first(seq16115__$3);
  var seq16115__$4 = cljs.core.next(seq16115__$3);
  return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__16116, G__16117, G__16118, G__16119, seq16115__$4);
};
cljs.core.swap_BANG_.cljs$lang$maxFixedArity = 4;
cljs.core.compare_and_set_BANG_ = function cljs$core$compare_and_set_BANG_(a, oldval, newval) {
  if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(a.cljs$core$IDeref$_deref$arity$1(null), oldval)) {
    cljs.core.reset_BANG_(a, newval);
    return true;
  } else {
    return false;
  }
};
cljs.core.set_validator_BANG_ = function cljs$core$set_validator_BANG_(iref, val) {
  return iref.validator = val;
};
cljs.core.get_validator = function cljs$core$get_validator(iref) {
  return iref.validator;
};
cljs.core.Volatile = function(state) {
  this.state = state;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.Volatile.prototype.cljs$core$IVolatile$ = true;
cljs.core.Volatile.prototype.cljs$core$IVolatile$_vreset_BANG_$arity$2 = function(_, new_state) {
  var self__ = this;
  var ___$1 = this;
  return self__.state = new_state;
};
cljs.core.Volatile.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
cljs.core.Volatile.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "state", "state", -348086572, null)], null);
};
cljs.core.Volatile.cljs$lang$type = true;
cljs.core.Volatile.cljs$lang$ctorStr = "cljs.core/Volatile";
cljs.core.Volatile.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/Volatile");
};
cljs.core.__GT_Volatile = function cljs$core$__GT_Volatile(state) {
  return new cljs.core.Volatile(state);
};
cljs.core.volatile_BANG_ = function cljs$core$volatile_BANG_(val) {
  return new cljs.core.Volatile(val);
};
cljs.core.volatile_QMARK_ = function cljs$core$volatile_QMARK_(x) {
  return x instanceof cljs.core.Volatile;
};
cljs.core.vreset_BANG_ = function cljs$core$vreset_BANG_(vol, newval) {
  return cljs.core._vreset_BANG_(vol, newval);
};
cljs.core.keep_indexed = function cljs$core$keep_indexed() {
  var G__16130 = arguments.length;
  switch(G__16130) {
    case 1:
      return cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function(rf) {
    var ia = cljs.core.volatile_BANG_(-1);
    return function(ia) {
      return function() {
        var G__16165 = null;
        var G__16165__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__16165__1 = function(result) {
          var G__16131 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__16131) : rf.call(null, G__16131);
        };
        var G__16165__2 = function(result, input) {
          var i = cljs.core._vreset_BANG_(ia, cljs.core._deref(ia) + 1);
          var v = function() {
            var G__16132 = i;
            var G__16133 = input;
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__16132, G__16133) : f.call(null, G__16132, G__16133);
          }();
          if (v == null) {
            return result;
          } else {
            var G__16134 = result;
            var G__16135 = v;
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__16134, G__16135) : rf.call(null, G__16134, G__16135);
          }
        };
        G__16165 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__16165__0.call(this);
            case 1:
              return G__16165__1.call(this, result);
            case 2:
              return G__16165__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__16165.cljs$core$IFn$_invoke$arity$0 = G__16165__0;
        G__16165.cljs$core$IFn$_invoke$arity$1 = G__16165__1;
        G__16165.cljs$core$IFn$_invoke$arity$2 = G__16165__2;
        return G__16165;
      }();
    }(ia);
  };
};
cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  var keepi = function cljs$core$keepi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4422__auto__ = cljs.core.seq(coll__$1);
      if (temp__4422__auto__) {
        var s = temp__4422__auto__;
        if (cljs.core.chunked_seq_QMARK_(s)) {
          var c = cljs.core.chunk_first(s);
          var size = cljs.core.count(c);
          var b = cljs.core.chunk_buffer(size);
          var n__5194__auto___16166 = size;
          var i_16167 = 0;
          while (true) {
            if (i_16167 < n__5194__auto___16166) {
              var x_16168 = function() {
                var G__16160 = idx + i_16167;
                var G__16161 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_16167);
                return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__16160, G__16161) : f.call(null, G__16160, G__16161);
              }();
              if (x_16168 == null) {
              } else {
                cljs.core.chunk_append(b, x_16168);
              }
              var G__16169 = i_16167 + 1;
              i_16167 = G__16169;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons(cljs.core.chunk(b), cljs$core$keepi(idx + size, cljs.core.chunk_rest(s)));
        } else {
          var x = function() {
            var G__16162 = idx;
            var G__16163 = cljs.core.first(s);
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__16162, G__16163) : f.call(null, G__16162, G__16163);
          }();
          if (x == null) {
            return cljs$core$keepi(idx + 1, cljs.core.rest(s));
          } else {
            return cljs.core.cons(x, cljs$core$keepi(idx + 1, cljs.core.rest(s)));
          }
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return keepi(0, coll);
};
cljs.core.keep_indexed.cljs$lang$maxFixedArity = 2;
cljs.core.every_pred = function cljs$core$every_pred() {
  var G__16181 = arguments.length;
  switch(G__16181) {
    case 1:
      return cljs.core.every_pred.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.every_pred.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.every_pred.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 3), 0);
      return cljs.core.every_pred.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5360__auto__);
  }
};
cljs.core.every_pred.cljs$core$IFn$_invoke$arity$1 = function(p) {
  return function() {
    var cljs$core$ep1 = null;
    var cljs$core$ep1__0 = function() {
      return true;
    };
    var cljs$core$ep1__1 = function(x) {
      return cljs.core.boolean$(function() {
        var G__16197 = x;
        return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__16197) : p.call(null, G__16197);
      }());
    };
    var cljs$core$ep1__2 = function(x, y) {
      return cljs.core.boolean$(function() {
        var and__4297__auto__ = function() {
          var G__16199 = x;
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__16199) : p.call(null, G__16199);
        }();
        if (cljs.core.truth_(and__4297__auto__)) {
          var G__16200 = y;
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__16200) : p.call(null, G__16200);
        } else {
          return and__4297__auto__;
        }
      }());
    };
    var cljs$core$ep1__3 = function(x, y, z) {
      return cljs.core.boolean$(function() {
        var and__4297__auto__ = function() {
          var G__16202 = x;
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__16202) : p.call(null, G__16202);
        }();
        if (cljs.core.truth_(and__4297__auto__)) {
          var and__4297__auto____$1 = function() {
            var G__16204 = y;
            return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__16204) : p.call(null, G__16204);
          }();
          if (cljs.core.truth_(and__4297__auto____$1)) {
            var G__16205 = z;
            return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__16205) : p.call(null, G__16205);
          } else {
            return and__4297__auto____$1;
          }
        } else {
          return and__4297__auto__;
        }
      }());
    };
    var cljs$core$ep1__4 = function() {
      var G__16367__delegate = function(x, y, z, args) {
        return cljs.core.boolean$(function() {
          var and__4297__auto__ = cljs$core$ep1.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(and__4297__auto__)) {
            return cljs.core.every_QMARK_(p, args);
          } else {
            return and__4297__auto__;
          }
        }());
      };
      var G__16367 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__16368__i = 0, G__16368__a = new Array(arguments.length - 3);
          while (G__16368__i < G__16368__a.length) {
            G__16368__a[G__16368__i] = arguments[G__16368__i + 3];
            ++G__16368__i;
          }
          args = new cljs.core.IndexedSeq(G__16368__a, 0);
        }
        return G__16367__delegate.call(this, x, y, z, args);
      };
      G__16367.cljs$lang$maxFixedArity = 3;
      G__16367.cljs$lang$applyTo = function(arglist__16369) {
        var x = cljs.core.first(arglist__16369);
        arglist__16369 = cljs.core.next(arglist__16369);
        var y = cljs.core.first(arglist__16369);
        arglist__16369 = cljs.core.next(arglist__16369);
        var z = cljs.core.first(arglist__16369);
        var args = cljs.core.rest(arglist__16369);
        return G__16367__delegate(x, y, z, args);
      };
      G__16367.cljs$core$IFn$_invoke$arity$variadic = G__16367__delegate;
      return G__16367;
    }();
    cljs$core$ep1 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$ep1__0.call(this);
        case 1:
          return cljs$core$ep1__1.call(this, x);
        case 2:
          return cljs$core$ep1__2.call(this, x, y);
        case 3:
          return cljs$core$ep1__3.call(this, x, y, z);
        default:
          var G__16370 = null;
          if (arguments.length > 3) {
            var G__16371__i = 0, G__16371__a = new Array(arguments.length - 3);
            while (G__16371__i < G__16371__a.length) {
              G__16371__a[G__16371__i] = arguments[G__16371__i + 3];
              ++G__16371__i;
            }
            G__16370 = new cljs.core.IndexedSeq(G__16371__a, 0);
          }
          return cljs$core$ep1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__16370);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$ep1.cljs$lang$maxFixedArity = 3;
    cljs$core$ep1.cljs$lang$applyTo = cljs$core$ep1__4.cljs$lang$applyTo;
    cljs$core$ep1.cljs$core$IFn$_invoke$arity$0 = cljs$core$ep1__0;
    cljs$core$ep1.cljs$core$IFn$_invoke$arity$1 = cljs$core$ep1__1;
    cljs$core$ep1.cljs$core$IFn$_invoke$arity$2 = cljs$core$ep1__2;
    cljs$core$ep1.cljs$core$IFn$_invoke$arity$3 = cljs$core$ep1__3;
    cljs$core$ep1.cljs$core$IFn$_invoke$arity$variadic = cljs$core$ep1__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$ep1;
  }();
};
cljs.core.every_pred.cljs$core$IFn$_invoke$arity$2 = function(p1, p2) {
  return function() {
    var cljs$core$ep2 = null;
    var cljs$core$ep2__0 = function() {
      return true;
    };
    var cljs$core$ep2__1 = function(x) {
      return cljs.core.boolean$(function() {
        var and__4297__auto__ = function() {
          var G__16237 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__16237) : p1.call(null, G__16237);
        }();
        if (cljs.core.truth_(and__4297__auto__)) {
          var G__16238 = x;
          return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__16238) : p2.call(null, G__16238);
        } else {
          return and__4297__auto__;
        }
      }());
    };
    var cljs$core$ep2__2 = function(x, y) {
      return cljs.core.boolean$(function() {
        var and__4297__auto__ = function() {
          var G__16240 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__16240) : p1.call(null, G__16240);
        }();
        if (cljs.core.truth_(and__4297__auto__)) {
          var and__4297__auto____$1 = function() {
            var G__16242 = y;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__16242) : p1.call(null, G__16242);
          }();
          if (cljs.core.truth_(and__4297__auto____$1)) {
            var and__4297__auto____$2 = function() {
              var G__16244 = x;
              return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__16244) : p2.call(null, G__16244);
            }();
            if (cljs.core.truth_(and__4297__auto____$2)) {
              var G__16245 = y;
              return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__16245) : p2.call(null, G__16245);
            } else {
              return and__4297__auto____$2;
            }
          } else {
            return and__4297__auto____$1;
          }
        } else {
          return and__4297__auto__;
        }
      }());
    };
    var cljs$core$ep2__3 = function(x, y, z) {
      return cljs.core.boolean$(function() {
        var and__4297__auto__ = function() {
          var G__16247 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__16247) : p1.call(null, G__16247);
        }();
        if (cljs.core.truth_(and__4297__auto__)) {
          var and__4297__auto____$1 = function() {
            var G__16249 = y;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__16249) : p1.call(null, G__16249);
          }();
          if (cljs.core.truth_(and__4297__auto____$1)) {
            var and__4297__auto____$2 = function() {
              var G__16251 = z;
              return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__16251) : p1.call(null, G__16251);
            }();
            if (cljs.core.truth_(and__4297__auto____$2)) {
              var and__4297__auto____$3 = function() {
                var G__16253 = x;
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__16253) : p2.call(null, G__16253);
              }();
              if (cljs.core.truth_(and__4297__auto____$3)) {
                var and__4297__auto____$4 = function() {
                  var G__16255 = y;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__16255) : p2.call(null, G__16255);
                }();
                if (cljs.core.truth_(and__4297__auto____$4)) {
                  var G__16256 = z;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__16256) : p2.call(null, G__16256);
                } else {
                  return and__4297__auto____$4;
                }
              } else {
                return and__4297__auto____$3;
              }
            } else {
              return and__4297__auto____$2;
            }
          } else {
            return and__4297__auto____$1;
          }
        } else {
          return and__4297__auto__;
        }
      }());
    };
    var cljs$core$ep2__4 = function() {
      var G__16372__delegate = function(x, y, z, args) {
        return cljs.core.boolean$(function() {
          var and__4297__auto__ = cljs$core$ep2.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(and__4297__auto__)) {
            return cljs.core.every_QMARK_(function(and__4297__auto__) {
              return function(p1__16170_SHARP_) {
                var and__4297__auto____$1 = function() {
                  var G__16258 = p1__16170_SHARP_;
                  return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__16258) : p1.call(null, G__16258);
                }();
                if (cljs.core.truth_(and__4297__auto____$1)) {
                  var G__16259 = p1__16170_SHARP_;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__16259) : p2.call(null, G__16259);
                } else {
                  return and__4297__auto____$1;
                }
              };
            }(and__4297__auto__), args);
          } else {
            return and__4297__auto__;
          }
        }());
      };
      var G__16372 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__16373__i = 0, G__16373__a = new Array(arguments.length - 3);
          while (G__16373__i < G__16373__a.length) {
            G__16373__a[G__16373__i] = arguments[G__16373__i + 3];
            ++G__16373__i;
          }
          args = new cljs.core.IndexedSeq(G__16373__a, 0);
        }
        return G__16372__delegate.call(this, x, y, z, args);
      };
      G__16372.cljs$lang$maxFixedArity = 3;
      G__16372.cljs$lang$applyTo = function(arglist__16374) {
        var x = cljs.core.first(arglist__16374);
        arglist__16374 = cljs.core.next(arglist__16374);
        var y = cljs.core.first(arglist__16374);
        arglist__16374 = cljs.core.next(arglist__16374);
        var z = cljs.core.first(arglist__16374);
        var args = cljs.core.rest(arglist__16374);
        return G__16372__delegate(x, y, z, args);
      };
      G__16372.cljs$core$IFn$_invoke$arity$variadic = G__16372__delegate;
      return G__16372;
    }();
    cljs$core$ep2 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$ep2__0.call(this);
        case 1:
          return cljs$core$ep2__1.call(this, x);
        case 2:
          return cljs$core$ep2__2.call(this, x, y);
        case 3:
          return cljs$core$ep2__3.call(this, x, y, z);
        default:
          var G__16375 = null;
          if (arguments.length > 3) {
            var G__16376__i = 0, G__16376__a = new Array(arguments.length - 3);
            while (G__16376__i < G__16376__a.length) {
              G__16376__a[G__16376__i] = arguments[G__16376__i + 3];
              ++G__16376__i;
            }
            G__16375 = new cljs.core.IndexedSeq(G__16376__a, 0);
          }
          return cljs$core$ep2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__16375);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$ep2.cljs$lang$maxFixedArity = 3;
    cljs$core$ep2.cljs$lang$applyTo = cljs$core$ep2__4.cljs$lang$applyTo;
    cljs$core$ep2.cljs$core$IFn$_invoke$arity$0 = cljs$core$ep2__0;
    cljs$core$ep2.cljs$core$IFn$_invoke$arity$1 = cljs$core$ep2__1;
    cljs$core$ep2.cljs$core$IFn$_invoke$arity$2 = cljs$core$ep2__2;
    cljs$core$ep2.cljs$core$IFn$_invoke$arity$3 = cljs$core$ep2__3;
    cljs$core$ep2.cljs$core$IFn$_invoke$arity$variadic = cljs$core$ep2__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$ep2;
  }();
};
cljs.core.every_pred.cljs$core$IFn$_invoke$arity$3 = function(p1, p2, p3) {
  return function() {
    var cljs$core$ep3 = null;
    var cljs$core$ep3__0 = function() {
      return true;
    };
    var cljs$core$ep3__1 = function(x) {
      return cljs.core.boolean$(function() {
        var and__4297__auto__ = function() {
          var G__16305 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__16305) : p1.call(null, G__16305);
        }();
        if (cljs.core.truth_(and__4297__auto__)) {
          var and__4297__auto____$1 = function() {
            var G__16307 = x;
            return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__16307) : p2.call(null, G__16307);
          }();
          if (cljs.core.truth_(and__4297__auto____$1)) {
            var G__16308 = x;
            return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__16308) : p3.call(null, G__16308);
          } else {
            return and__4297__auto____$1;
          }
        } else {
          return and__4297__auto__;
        }
      }());
    };
    var cljs$core$ep3__2 = function(x, y) {
      return cljs.core.boolean$(function() {
        var and__4297__auto__ = function() {
          var G__16310 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__16310) : p1.call(null, G__16310);
        }();
        if (cljs.core.truth_(and__4297__auto__)) {
          var and__4297__auto____$1 = function() {
            var G__16312 = x;
            return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__16312) : p2.call(null, G__16312);
          }();
          if (cljs.core.truth_(and__4297__auto____$1)) {
            var and__4297__auto____$2 = function() {
              var G__16314 = x;
              return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__16314) : p3.call(null, G__16314);
            }();
            if (cljs.core.truth_(and__4297__auto____$2)) {
              var and__4297__auto____$3 = function() {
                var G__16316 = y;
                return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__16316) : p1.call(null, G__16316);
              }();
              if (cljs.core.truth_(and__4297__auto____$3)) {
                var and__4297__auto____$4 = function() {
                  var G__16318 = y;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__16318) : p2.call(null, G__16318);
                }();
                if (cljs.core.truth_(and__4297__auto____$4)) {
                  var G__16319 = y;
                  return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__16319) : p3.call(null, G__16319);
                } else {
                  return and__4297__auto____$4;
                }
              } else {
                return and__4297__auto____$3;
              }
            } else {
              return and__4297__auto____$2;
            }
          } else {
            return and__4297__auto____$1;
          }
        } else {
          return and__4297__auto__;
        }
      }());
    };
    var cljs$core$ep3__3 = function(x, y, z) {
      return cljs.core.boolean$(function() {
        var and__4297__auto__ = function() {
          var G__16321 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__16321) : p1.call(null, G__16321);
        }();
        if (cljs.core.truth_(and__4297__auto__)) {
          var and__4297__auto____$1 = function() {
            var G__16323 = x;
            return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__16323) : p2.call(null, G__16323);
          }();
          if (cljs.core.truth_(and__4297__auto____$1)) {
            var and__4297__auto____$2 = function() {
              var G__16325 = x;
              return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__16325) : p3.call(null, G__16325);
            }();
            if (cljs.core.truth_(and__4297__auto____$2)) {
              var and__4297__auto____$3 = function() {
                var G__16327 = y;
                return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__16327) : p1.call(null, G__16327);
              }();
              if (cljs.core.truth_(and__4297__auto____$3)) {
                var and__4297__auto____$4 = function() {
                  var G__16329 = y;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__16329) : p2.call(null, G__16329);
                }();
                if (cljs.core.truth_(and__4297__auto____$4)) {
                  var and__4297__auto____$5 = function() {
                    var G__16331 = y;
                    return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__16331) : p3.call(null, G__16331);
                  }();
                  if (cljs.core.truth_(and__4297__auto____$5)) {
                    var and__4297__auto____$6 = function() {
                      var G__16333 = z;
                      return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__16333) : p1.call(null, G__16333);
                    }();
                    if (cljs.core.truth_(and__4297__auto____$6)) {
                      var and__4297__auto____$7 = function() {
                        var G__16335 = z;
                        return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__16335) : p2.call(null, G__16335);
                      }();
                      if (cljs.core.truth_(and__4297__auto____$7)) {
                        var G__16336 = z;
                        return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__16336) : p3.call(null, G__16336);
                      } else {
                        return and__4297__auto____$7;
                      }
                    } else {
                      return and__4297__auto____$6;
                    }
                  } else {
                    return and__4297__auto____$5;
                  }
                } else {
                  return and__4297__auto____$4;
                }
              } else {
                return and__4297__auto____$3;
              }
            } else {
              return and__4297__auto____$2;
            }
          } else {
            return and__4297__auto____$1;
          }
        } else {
          return and__4297__auto__;
        }
      }());
    };
    var cljs$core$ep3__4 = function() {
      var G__16377__delegate = function(x, y, z, args) {
        return cljs.core.boolean$(function() {
          var and__4297__auto__ = cljs$core$ep3.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(and__4297__auto__)) {
            return cljs.core.every_QMARK_(function(and__4297__auto__) {
              return function(p1__16171_SHARP_) {
                var and__4297__auto____$1 = function() {
                  var G__16338 = p1__16171_SHARP_;
                  return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__16338) : p1.call(null, G__16338);
                }();
                if (cljs.core.truth_(and__4297__auto____$1)) {
                  var and__4297__auto____$2 = function() {
                    var G__16340 = p1__16171_SHARP_;
                    return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__16340) : p2.call(null, G__16340);
                  }();
                  if (cljs.core.truth_(and__4297__auto____$2)) {
                    var G__16341 = p1__16171_SHARP_;
                    return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__16341) : p3.call(null, G__16341);
                  } else {
                    return and__4297__auto____$2;
                  }
                } else {
                  return and__4297__auto____$1;
                }
              };
            }(and__4297__auto__), args);
          } else {
            return and__4297__auto__;
          }
        }());
      };
      var G__16377 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__16378__i = 0, G__16378__a = new Array(arguments.length - 3);
          while (G__16378__i < G__16378__a.length) {
            G__16378__a[G__16378__i] = arguments[G__16378__i + 3];
            ++G__16378__i;
          }
          args = new cljs.core.IndexedSeq(G__16378__a, 0);
        }
        return G__16377__delegate.call(this, x, y, z, args);
      };
      G__16377.cljs$lang$maxFixedArity = 3;
      G__16377.cljs$lang$applyTo = function(arglist__16379) {
        var x = cljs.core.first(arglist__16379);
        arglist__16379 = cljs.core.next(arglist__16379);
        var y = cljs.core.first(arglist__16379);
        arglist__16379 = cljs.core.next(arglist__16379);
        var z = cljs.core.first(arglist__16379);
        var args = cljs.core.rest(arglist__16379);
        return G__16377__delegate(x, y, z, args);
      };
      G__16377.cljs$core$IFn$_invoke$arity$variadic = G__16377__delegate;
      return G__16377;
    }();
    cljs$core$ep3 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$ep3__0.call(this);
        case 1:
          return cljs$core$ep3__1.call(this, x);
        case 2:
          return cljs$core$ep3__2.call(this, x, y);
        case 3:
          return cljs$core$ep3__3.call(this, x, y, z);
        default:
          var G__16380 = null;
          if (arguments.length > 3) {
            var G__16381__i = 0, G__16381__a = new Array(arguments.length - 3);
            while (G__16381__i < G__16381__a.length) {
              G__16381__a[G__16381__i] = arguments[G__16381__i + 3];
              ++G__16381__i;
            }
            G__16380 = new cljs.core.IndexedSeq(G__16381__a, 0);
          }
          return cljs$core$ep3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__16380);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$ep3.cljs$lang$maxFixedArity = 3;
    cljs$core$ep3.cljs$lang$applyTo = cljs$core$ep3__4.cljs$lang$applyTo;
    cljs$core$ep3.cljs$core$IFn$_invoke$arity$0 = cljs$core$ep3__0;
    cljs$core$ep3.cljs$core$IFn$_invoke$arity$1 = cljs$core$ep3__1;
    cljs$core$ep3.cljs$core$IFn$_invoke$arity$2 = cljs$core$ep3__2;
    cljs$core$ep3.cljs$core$IFn$_invoke$arity$3 = cljs$core$ep3__3;
    cljs$core$ep3.cljs$core$IFn$_invoke$arity$variadic = cljs$core$ep3__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$ep3;
  }();
};
cljs.core.every_pred.cljs$core$IFn$_invoke$arity$variadic = function(p1, p2, p3, ps) {
  var ps__$1 = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(p1, p2, p3, ps);
  return function(ps__$1) {
    return function() {
      var cljs$core$epn = null;
      var cljs$core$epn__0 = function() {
        return true;
      };
      var cljs$core$epn__1 = function(x) {
        return cljs.core.every_QMARK_(function(ps__$1) {
          return function(p1__16172_SHARP_) {
            var G__16357 = x;
            return p1__16172_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__16172_SHARP_.cljs$core$IFn$_invoke$arity$1(G__16357) : p1__16172_SHARP_.call(null, G__16357);
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$epn__2 = function(x, y) {
        return cljs.core.every_QMARK_(function(ps__$1) {
          return function(p1__16173_SHARP_) {
            var and__4297__auto__ = function() {
              var G__16359 = x;
              return p1__16173_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__16173_SHARP_.cljs$core$IFn$_invoke$arity$1(G__16359) : p1__16173_SHARP_.call(null, G__16359);
            }();
            if (cljs.core.truth_(and__4297__auto__)) {
              var G__16360 = y;
              return p1__16173_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__16173_SHARP_.cljs$core$IFn$_invoke$arity$1(G__16360) : p1__16173_SHARP_.call(null, G__16360);
            } else {
              return and__4297__auto__;
            }
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$epn__3 = function(x, y, z) {
        return cljs.core.every_QMARK_(function(ps__$1) {
          return function(p1__16174_SHARP_) {
            var and__4297__auto__ = function() {
              var G__16362 = x;
              return p1__16174_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__16174_SHARP_.cljs$core$IFn$_invoke$arity$1(G__16362) : p1__16174_SHARP_.call(null, G__16362);
            }();
            if (cljs.core.truth_(and__4297__auto__)) {
              var and__4297__auto____$1 = function() {
                var G__16364 = y;
                return p1__16174_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__16174_SHARP_.cljs$core$IFn$_invoke$arity$1(G__16364) : p1__16174_SHARP_.call(null, G__16364);
              }();
              if (cljs.core.truth_(and__4297__auto____$1)) {
                var G__16365 = z;
                return p1__16174_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__16174_SHARP_.cljs$core$IFn$_invoke$arity$1(G__16365) : p1__16174_SHARP_.call(null, G__16365);
              } else {
                return and__4297__auto____$1;
              }
            } else {
              return and__4297__auto__;
            }
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$epn__4 = function() {
        var G__16382__delegate = function(x, y, z, args) {
          return cljs.core.boolean$(function() {
            var and__4297__auto__ = cljs$core$epn.cljs$core$IFn$_invoke$arity$3(x, y, z);
            if (cljs.core.truth_(and__4297__auto__)) {
              return cljs.core.every_QMARK_(function(and__4297__auto__, ps__$1) {
                return function(p1__16175_SHARP_) {
                  return cljs.core.every_QMARK_(p1__16175_SHARP_, args);
                };
              }(and__4297__auto__, ps__$1), ps__$1);
            } else {
              return and__4297__auto__;
            }
          }());
        };
        var G__16382 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__16383__i = 0, G__16383__a = new Array(arguments.length - 3);
            while (G__16383__i < G__16383__a.length) {
              G__16383__a[G__16383__i] = arguments[G__16383__i + 3];
              ++G__16383__i;
            }
            args = new cljs.core.IndexedSeq(G__16383__a, 0);
          }
          return G__16382__delegate.call(this, x, y, z, args);
        };
        G__16382.cljs$lang$maxFixedArity = 3;
        G__16382.cljs$lang$applyTo = function(arglist__16384) {
          var x = cljs.core.first(arglist__16384);
          arglist__16384 = cljs.core.next(arglist__16384);
          var y = cljs.core.first(arglist__16384);
          arglist__16384 = cljs.core.next(arglist__16384);
          var z = cljs.core.first(arglist__16384);
          var args = cljs.core.rest(arglist__16384);
          return G__16382__delegate(x, y, z, args);
        };
        G__16382.cljs$core$IFn$_invoke$arity$variadic = G__16382__delegate;
        return G__16382;
      }();
      cljs$core$epn = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return cljs$core$epn__0.call(this);
          case 1:
            return cljs$core$epn__1.call(this, x);
          case 2:
            return cljs$core$epn__2.call(this, x, y);
          case 3:
            return cljs$core$epn__3.call(this, x, y, z);
          default:
            var G__16385 = null;
            if (arguments.length > 3) {
              var G__16386__i = 0, G__16386__a = new Array(arguments.length - 3);
              while (G__16386__i < G__16386__a.length) {
                G__16386__a[G__16386__i] = arguments[G__16386__i + 3];
                ++G__16386__i;
              }
              G__16385 = new cljs.core.IndexedSeq(G__16386__a, 0);
            }
            return cljs$core$epn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__16385);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      cljs$core$epn.cljs$lang$maxFixedArity = 3;
      cljs$core$epn.cljs$lang$applyTo = cljs$core$epn__4.cljs$lang$applyTo;
      cljs$core$epn.cljs$core$IFn$_invoke$arity$0 = cljs$core$epn__0;
      cljs$core$epn.cljs$core$IFn$_invoke$arity$1 = cljs$core$epn__1;
      cljs$core$epn.cljs$core$IFn$_invoke$arity$2 = cljs$core$epn__2;
      cljs$core$epn.cljs$core$IFn$_invoke$arity$3 = cljs$core$epn__3;
      cljs$core$epn.cljs$core$IFn$_invoke$arity$variadic = cljs$core$epn__4.cljs$core$IFn$_invoke$arity$variadic;
      return cljs$core$epn;
    }();
  }(ps__$1);
};
cljs.core.every_pred.cljs$lang$applyTo = function(seq16176) {
  var G__16177 = cljs.core.first(seq16176);
  var seq16176__$1 = cljs.core.next(seq16176);
  var G__16178 = cljs.core.first(seq16176__$1);
  var seq16176__$2 = cljs.core.next(seq16176__$1);
  var G__16179 = cljs.core.first(seq16176__$2);
  var seq16176__$3 = cljs.core.next(seq16176__$2);
  return cljs.core.every_pred.cljs$core$IFn$_invoke$arity$variadic(G__16177, G__16178, G__16179, seq16176__$3);
};
cljs.core.every_pred.cljs$lang$maxFixedArity = 3;
cljs.core.some_fn = function cljs$core$some_fn() {
  var G__16398 = arguments.length;
  switch(G__16398) {
    case 1:
      return cljs.core.some_fn.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.some_fn.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.some_fn.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 3), 0);
      return cljs.core.some_fn.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5360__auto__);
  }
};
cljs.core.some_fn.cljs$core$IFn$_invoke$arity$1 = function(p) {
  return function() {
    var cljs$core$sp1 = null;
    var cljs$core$sp1__0 = function() {
      return null;
    };
    var cljs$core$sp1__1 = function(x) {
      var G__16414 = x;
      return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__16414) : p.call(null, G__16414);
    };
    var cljs$core$sp1__2 = function(x, y) {
      var or__4309__auto__ = function() {
        var G__16416 = x;
        return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__16416) : p.call(null, G__16416);
      }();
      if (cljs.core.truth_(or__4309__auto__)) {
        return or__4309__auto__;
      } else {
        var G__16417 = y;
        return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__16417) : p.call(null, G__16417);
      }
    };
    var cljs$core$sp1__3 = function(x, y, z) {
      var or__4309__auto__ = function() {
        var G__16419 = x;
        return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__16419) : p.call(null, G__16419);
      }();
      if (cljs.core.truth_(or__4309__auto__)) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = function() {
          var G__16421 = y;
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__16421) : p.call(null, G__16421);
        }();
        if (cljs.core.truth_(or__4309__auto____$1)) {
          return or__4309__auto____$1;
        } else {
          var G__16422 = z;
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__16422) : p.call(null, G__16422);
        }
      }
    };
    var cljs$core$sp1__4 = function() {
      var G__16584__delegate = function(x, y, z, args) {
        var or__4309__auto__ = cljs$core$sp1.cljs$core$IFn$_invoke$arity$3(x, y, z);
        if (cljs.core.truth_(or__4309__auto__)) {
          return or__4309__auto__;
        } else {
          return cljs.core.some(p, args);
        }
      };
      var G__16584 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__16585__i = 0, G__16585__a = new Array(arguments.length - 3);
          while (G__16585__i < G__16585__a.length) {
            G__16585__a[G__16585__i] = arguments[G__16585__i + 3];
            ++G__16585__i;
          }
          args = new cljs.core.IndexedSeq(G__16585__a, 0);
        }
        return G__16584__delegate.call(this, x, y, z, args);
      };
      G__16584.cljs$lang$maxFixedArity = 3;
      G__16584.cljs$lang$applyTo = function(arglist__16586) {
        var x = cljs.core.first(arglist__16586);
        arglist__16586 = cljs.core.next(arglist__16586);
        var y = cljs.core.first(arglist__16586);
        arglist__16586 = cljs.core.next(arglist__16586);
        var z = cljs.core.first(arglist__16586);
        var args = cljs.core.rest(arglist__16586);
        return G__16584__delegate(x, y, z, args);
      };
      G__16584.cljs$core$IFn$_invoke$arity$variadic = G__16584__delegate;
      return G__16584;
    }();
    cljs$core$sp1 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$sp1__0.call(this);
        case 1:
          return cljs$core$sp1__1.call(this, x);
        case 2:
          return cljs$core$sp1__2.call(this, x, y);
        case 3:
          return cljs$core$sp1__3.call(this, x, y, z);
        default:
          var G__16587 = null;
          if (arguments.length > 3) {
            var G__16588__i = 0, G__16588__a = new Array(arguments.length - 3);
            while (G__16588__i < G__16588__a.length) {
              G__16588__a[G__16588__i] = arguments[G__16588__i + 3];
              ++G__16588__i;
            }
            G__16587 = new cljs.core.IndexedSeq(G__16588__a, 0);
          }
          return cljs$core$sp1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__16587);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$sp1.cljs$lang$maxFixedArity = 3;
    cljs$core$sp1.cljs$lang$applyTo = cljs$core$sp1__4.cljs$lang$applyTo;
    cljs$core$sp1.cljs$core$IFn$_invoke$arity$0 = cljs$core$sp1__0;
    cljs$core$sp1.cljs$core$IFn$_invoke$arity$1 = cljs$core$sp1__1;
    cljs$core$sp1.cljs$core$IFn$_invoke$arity$2 = cljs$core$sp1__2;
    cljs$core$sp1.cljs$core$IFn$_invoke$arity$3 = cljs$core$sp1__3;
    cljs$core$sp1.cljs$core$IFn$_invoke$arity$variadic = cljs$core$sp1__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$sp1;
  }();
};
cljs.core.some_fn.cljs$core$IFn$_invoke$arity$2 = function(p1, p2) {
  return function() {
    var cljs$core$sp2 = null;
    var cljs$core$sp2__0 = function() {
      return null;
    };
    var cljs$core$sp2__1 = function(x) {
      var or__4309__auto__ = function() {
        var G__16454 = x;
        return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__16454) : p1.call(null, G__16454);
      }();
      if (cljs.core.truth_(or__4309__auto__)) {
        return or__4309__auto__;
      } else {
        var G__16455 = x;
        return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__16455) : p2.call(null, G__16455);
      }
    };
    var cljs$core$sp2__2 = function(x, y) {
      var or__4309__auto__ = function() {
        var G__16457 = x;
        return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__16457) : p1.call(null, G__16457);
      }();
      if (cljs.core.truth_(or__4309__auto__)) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = function() {
          var G__16459 = y;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__16459) : p1.call(null, G__16459);
        }();
        if (cljs.core.truth_(or__4309__auto____$1)) {
          return or__4309__auto____$1;
        } else {
          var or__4309__auto____$2 = function() {
            var G__16461 = x;
            return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__16461) : p2.call(null, G__16461);
          }();
          if (cljs.core.truth_(or__4309__auto____$2)) {
            return or__4309__auto____$2;
          } else {
            var G__16462 = y;
            return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__16462) : p2.call(null, G__16462);
          }
        }
      }
    };
    var cljs$core$sp2__3 = function(x, y, z) {
      var or__4309__auto__ = function() {
        var G__16464 = x;
        return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__16464) : p1.call(null, G__16464);
      }();
      if (cljs.core.truth_(or__4309__auto__)) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = function() {
          var G__16466 = y;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__16466) : p1.call(null, G__16466);
        }();
        if (cljs.core.truth_(or__4309__auto____$1)) {
          return or__4309__auto____$1;
        } else {
          var or__4309__auto____$2 = function() {
            var G__16468 = z;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__16468) : p1.call(null, G__16468);
          }();
          if (cljs.core.truth_(or__4309__auto____$2)) {
            return or__4309__auto____$2;
          } else {
            var or__4309__auto____$3 = function() {
              var G__16470 = x;
              return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__16470) : p2.call(null, G__16470);
            }();
            if (cljs.core.truth_(or__4309__auto____$3)) {
              return or__4309__auto____$3;
            } else {
              var or__4309__auto____$4 = function() {
                var G__16472 = y;
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__16472) : p2.call(null, G__16472);
              }();
              if (cljs.core.truth_(or__4309__auto____$4)) {
                return or__4309__auto____$4;
              } else {
                var G__16473 = z;
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__16473) : p2.call(null, G__16473);
              }
            }
          }
        }
      }
    };
    var cljs$core$sp2__4 = function() {
      var G__16589__delegate = function(x, y, z, args) {
        var or__4309__auto__ = cljs$core$sp2.cljs$core$IFn$_invoke$arity$3(x, y, z);
        if (cljs.core.truth_(or__4309__auto__)) {
          return or__4309__auto__;
        } else {
          return cljs.core.some(function(or__4309__auto__) {
            return function(p1__16387_SHARP_) {
              var or__4309__auto____$1 = function() {
                var G__16475 = p1__16387_SHARP_;
                return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__16475) : p1.call(null, G__16475);
              }();
              if (cljs.core.truth_(or__4309__auto____$1)) {
                return or__4309__auto____$1;
              } else {
                var G__16476 = p1__16387_SHARP_;
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__16476) : p2.call(null, G__16476);
              }
            };
          }(or__4309__auto__), args);
        }
      };
      var G__16589 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__16590__i = 0, G__16590__a = new Array(arguments.length - 3);
          while (G__16590__i < G__16590__a.length) {
            G__16590__a[G__16590__i] = arguments[G__16590__i + 3];
            ++G__16590__i;
          }
          args = new cljs.core.IndexedSeq(G__16590__a, 0);
        }
        return G__16589__delegate.call(this, x, y, z, args);
      };
      G__16589.cljs$lang$maxFixedArity = 3;
      G__16589.cljs$lang$applyTo = function(arglist__16591) {
        var x = cljs.core.first(arglist__16591);
        arglist__16591 = cljs.core.next(arglist__16591);
        var y = cljs.core.first(arglist__16591);
        arglist__16591 = cljs.core.next(arglist__16591);
        var z = cljs.core.first(arglist__16591);
        var args = cljs.core.rest(arglist__16591);
        return G__16589__delegate(x, y, z, args);
      };
      G__16589.cljs$core$IFn$_invoke$arity$variadic = G__16589__delegate;
      return G__16589;
    }();
    cljs$core$sp2 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$sp2__0.call(this);
        case 1:
          return cljs$core$sp2__1.call(this, x);
        case 2:
          return cljs$core$sp2__2.call(this, x, y);
        case 3:
          return cljs$core$sp2__3.call(this, x, y, z);
        default:
          var G__16592 = null;
          if (arguments.length > 3) {
            var G__16593__i = 0, G__16593__a = new Array(arguments.length - 3);
            while (G__16593__i < G__16593__a.length) {
              G__16593__a[G__16593__i] = arguments[G__16593__i + 3];
              ++G__16593__i;
            }
            G__16592 = new cljs.core.IndexedSeq(G__16593__a, 0);
          }
          return cljs$core$sp2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__16592);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$sp2.cljs$lang$maxFixedArity = 3;
    cljs$core$sp2.cljs$lang$applyTo = cljs$core$sp2__4.cljs$lang$applyTo;
    cljs$core$sp2.cljs$core$IFn$_invoke$arity$0 = cljs$core$sp2__0;
    cljs$core$sp2.cljs$core$IFn$_invoke$arity$1 = cljs$core$sp2__1;
    cljs$core$sp2.cljs$core$IFn$_invoke$arity$2 = cljs$core$sp2__2;
    cljs$core$sp2.cljs$core$IFn$_invoke$arity$3 = cljs$core$sp2__3;
    cljs$core$sp2.cljs$core$IFn$_invoke$arity$variadic = cljs$core$sp2__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$sp2;
  }();
};
cljs.core.some_fn.cljs$core$IFn$_invoke$arity$3 = function(p1, p2, p3) {
  return function() {
    var cljs$core$sp3 = null;
    var cljs$core$sp3__0 = function() {
      return null;
    };
    var cljs$core$sp3__1 = function(x) {
      var or__4309__auto__ = function() {
        var G__16522 = x;
        return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__16522) : p1.call(null, G__16522);
      }();
      if (cljs.core.truth_(or__4309__auto__)) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = function() {
          var G__16524 = x;
          return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__16524) : p2.call(null, G__16524);
        }();
        if (cljs.core.truth_(or__4309__auto____$1)) {
          return or__4309__auto____$1;
        } else {
          var G__16525 = x;
          return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__16525) : p3.call(null, G__16525);
        }
      }
    };
    var cljs$core$sp3__2 = function(x, y) {
      var or__4309__auto__ = function() {
        var G__16527 = x;
        return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__16527) : p1.call(null, G__16527);
      }();
      if (cljs.core.truth_(or__4309__auto__)) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = function() {
          var G__16529 = x;
          return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__16529) : p2.call(null, G__16529);
        }();
        if (cljs.core.truth_(or__4309__auto____$1)) {
          return or__4309__auto____$1;
        } else {
          var or__4309__auto____$2 = function() {
            var G__16531 = x;
            return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__16531) : p3.call(null, G__16531);
          }();
          if (cljs.core.truth_(or__4309__auto____$2)) {
            return or__4309__auto____$2;
          } else {
            var or__4309__auto____$3 = function() {
              var G__16533 = y;
              return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__16533) : p1.call(null, G__16533);
            }();
            if (cljs.core.truth_(or__4309__auto____$3)) {
              return or__4309__auto____$3;
            } else {
              var or__4309__auto____$4 = function() {
                var G__16535 = y;
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__16535) : p2.call(null, G__16535);
              }();
              if (cljs.core.truth_(or__4309__auto____$4)) {
                return or__4309__auto____$4;
              } else {
                var G__16536 = y;
                return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__16536) : p3.call(null, G__16536);
              }
            }
          }
        }
      }
    };
    var cljs$core$sp3__3 = function(x, y, z) {
      var or__4309__auto__ = function() {
        var G__16538 = x;
        return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__16538) : p1.call(null, G__16538);
      }();
      if (cljs.core.truth_(or__4309__auto__)) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = function() {
          var G__16540 = x;
          return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__16540) : p2.call(null, G__16540);
        }();
        if (cljs.core.truth_(or__4309__auto____$1)) {
          return or__4309__auto____$1;
        } else {
          var or__4309__auto____$2 = function() {
            var G__16542 = x;
            return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__16542) : p3.call(null, G__16542);
          }();
          if (cljs.core.truth_(or__4309__auto____$2)) {
            return or__4309__auto____$2;
          } else {
            var or__4309__auto____$3 = function() {
              var G__16544 = y;
              return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__16544) : p1.call(null, G__16544);
            }();
            if (cljs.core.truth_(or__4309__auto____$3)) {
              return or__4309__auto____$3;
            } else {
              var or__4309__auto____$4 = function() {
                var G__16546 = y;
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__16546) : p2.call(null, G__16546);
              }();
              if (cljs.core.truth_(or__4309__auto____$4)) {
                return or__4309__auto____$4;
              } else {
                var or__4309__auto____$5 = function() {
                  var G__16548 = y;
                  return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__16548) : p3.call(null, G__16548);
                }();
                if (cljs.core.truth_(or__4309__auto____$5)) {
                  return or__4309__auto____$5;
                } else {
                  var or__4309__auto____$6 = function() {
                    var G__16550 = z;
                    return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__16550) : p1.call(null, G__16550);
                  }();
                  if (cljs.core.truth_(or__4309__auto____$6)) {
                    return or__4309__auto____$6;
                  } else {
                    var or__4309__auto____$7 = function() {
                      var G__16552 = z;
                      return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__16552) : p2.call(null, G__16552);
                    }();
                    if (cljs.core.truth_(or__4309__auto____$7)) {
                      return or__4309__auto____$7;
                    } else {
                      var G__16553 = z;
                      return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__16553) : p3.call(null, G__16553);
                    }
                  }
                }
              }
            }
          }
        }
      }
    };
    var cljs$core$sp3__4 = function() {
      var G__16594__delegate = function(x, y, z, args) {
        var or__4309__auto__ = cljs$core$sp3.cljs$core$IFn$_invoke$arity$3(x, y, z);
        if (cljs.core.truth_(or__4309__auto__)) {
          return or__4309__auto__;
        } else {
          return cljs.core.some(function(or__4309__auto__) {
            return function(p1__16388_SHARP_) {
              var or__4309__auto____$1 = function() {
                var G__16555 = p1__16388_SHARP_;
                return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__16555) : p1.call(null, G__16555);
              }();
              if (cljs.core.truth_(or__4309__auto____$1)) {
                return or__4309__auto____$1;
              } else {
                var or__4309__auto____$2 = function() {
                  var G__16557 = p1__16388_SHARP_;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__16557) : p2.call(null, G__16557);
                }();
                if (cljs.core.truth_(or__4309__auto____$2)) {
                  return or__4309__auto____$2;
                } else {
                  var G__16558 = p1__16388_SHARP_;
                  return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__16558) : p3.call(null, G__16558);
                }
              }
            };
          }(or__4309__auto__), args);
        }
      };
      var G__16594 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__16595__i = 0, G__16595__a = new Array(arguments.length - 3);
          while (G__16595__i < G__16595__a.length) {
            G__16595__a[G__16595__i] = arguments[G__16595__i + 3];
            ++G__16595__i;
          }
          args = new cljs.core.IndexedSeq(G__16595__a, 0);
        }
        return G__16594__delegate.call(this, x, y, z, args);
      };
      G__16594.cljs$lang$maxFixedArity = 3;
      G__16594.cljs$lang$applyTo = function(arglist__16596) {
        var x = cljs.core.first(arglist__16596);
        arglist__16596 = cljs.core.next(arglist__16596);
        var y = cljs.core.first(arglist__16596);
        arglist__16596 = cljs.core.next(arglist__16596);
        var z = cljs.core.first(arglist__16596);
        var args = cljs.core.rest(arglist__16596);
        return G__16594__delegate(x, y, z, args);
      };
      G__16594.cljs$core$IFn$_invoke$arity$variadic = G__16594__delegate;
      return G__16594;
    }();
    cljs$core$sp3 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$sp3__0.call(this);
        case 1:
          return cljs$core$sp3__1.call(this, x);
        case 2:
          return cljs$core$sp3__2.call(this, x, y);
        case 3:
          return cljs$core$sp3__3.call(this, x, y, z);
        default:
          var G__16597 = null;
          if (arguments.length > 3) {
            var G__16598__i = 0, G__16598__a = new Array(arguments.length - 3);
            while (G__16598__i < G__16598__a.length) {
              G__16598__a[G__16598__i] = arguments[G__16598__i + 3];
              ++G__16598__i;
            }
            G__16597 = new cljs.core.IndexedSeq(G__16598__a, 0);
          }
          return cljs$core$sp3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__16597);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$sp3.cljs$lang$maxFixedArity = 3;
    cljs$core$sp3.cljs$lang$applyTo = cljs$core$sp3__4.cljs$lang$applyTo;
    cljs$core$sp3.cljs$core$IFn$_invoke$arity$0 = cljs$core$sp3__0;
    cljs$core$sp3.cljs$core$IFn$_invoke$arity$1 = cljs$core$sp3__1;
    cljs$core$sp3.cljs$core$IFn$_invoke$arity$2 = cljs$core$sp3__2;
    cljs$core$sp3.cljs$core$IFn$_invoke$arity$3 = cljs$core$sp3__3;
    cljs$core$sp3.cljs$core$IFn$_invoke$arity$variadic = cljs$core$sp3__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$sp3;
  }();
};
cljs.core.some_fn.cljs$core$IFn$_invoke$arity$variadic = function(p1, p2, p3, ps) {
  var ps__$1 = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(p1, p2, p3, ps);
  return function(ps__$1) {
    return function() {
      var cljs$core$spn = null;
      var cljs$core$spn__0 = function() {
        return null;
      };
      var cljs$core$spn__1 = function(x) {
        return cljs.core.some(function(ps__$1) {
          return function(p1__16389_SHARP_) {
            var G__16574 = x;
            return p1__16389_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__16389_SHARP_.cljs$core$IFn$_invoke$arity$1(G__16574) : p1__16389_SHARP_.call(null, G__16574);
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$spn__2 = function(x, y) {
        return cljs.core.some(function(ps__$1) {
          return function(p1__16390_SHARP_) {
            var or__4309__auto__ = function() {
              var G__16576 = x;
              return p1__16390_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__16390_SHARP_.cljs$core$IFn$_invoke$arity$1(G__16576) : p1__16390_SHARP_.call(null, G__16576);
            }();
            if (cljs.core.truth_(or__4309__auto__)) {
              return or__4309__auto__;
            } else {
              var G__16577 = y;
              return p1__16390_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__16390_SHARP_.cljs$core$IFn$_invoke$arity$1(G__16577) : p1__16390_SHARP_.call(null, G__16577);
            }
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$spn__3 = function(x, y, z) {
        return cljs.core.some(function(ps__$1) {
          return function(p1__16391_SHARP_) {
            var or__4309__auto__ = function() {
              var G__16579 = x;
              return p1__16391_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__16391_SHARP_.cljs$core$IFn$_invoke$arity$1(G__16579) : p1__16391_SHARP_.call(null, G__16579);
            }();
            if (cljs.core.truth_(or__4309__auto__)) {
              return or__4309__auto__;
            } else {
              var or__4309__auto____$1 = function() {
                var G__16581 = y;
                return p1__16391_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__16391_SHARP_.cljs$core$IFn$_invoke$arity$1(G__16581) : p1__16391_SHARP_.call(null, G__16581);
              }();
              if (cljs.core.truth_(or__4309__auto____$1)) {
                return or__4309__auto____$1;
              } else {
                var G__16582 = z;
                return p1__16391_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__16391_SHARP_.cljs$core$IFn$_invoke$arity$1(G__16582) : p1__16391_SHARP_.call(null, G__16582);
              }
            }
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$spn__4 = function() {
        var G__16599__delegate = function(x, y, z, args) {
          var or__4309__auto__ = cljs$core$spn.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(or__4309__auto__)) {
            return or__4309__auto__;
          } else {
            return cljs.core.some(function(or__4309__auto__, ps__$1) {
              return function(p1__16392_SHARP_) {
                return cljs.core.some(p1__16392_SHARP_, args);
              };
            }(or__4309__auto__, ps__$1), ps__$1);
          }
        };
        var G__16599 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__16600__i = 0, G__16600__a = new Array(arguments.length - 3);
            while (G__16600__i < G__16600__a.length) {
              G__16600__a[G__16600__i] = arguments[G__16600__i + 3];
              ++G__16600__i;
            }
            args = new cljs.core.IndexedSeq(G__16600__a, 0);
          }
          return G__16599__delegate.call(this, x, y, z, args);
        };
        G__16599.cljs$lang$maxFixedArity = 3;
        G__16599.cljs$lang$applyTo = function(arglist__16601) {
          var x = cljs.core.first(arglist__16601);
          arglist__16601 = cljs.core.next(arglist__16601);
          var y = cljs.core.first(arglist__16601);
          arglist__16601 = cljs.core.next(arglist__16601);
          var z = cljs.core.first(arglist__16601);
          var args = cljs.core.rest(arglist__16601);
          return G__16599__delegate(x, y, z, args);
        };
        G__16599.cljs$core$IFn$_invoke$arity$variadic = G__16599__delegate;
        return G__16599;
      }();
      cljs$core$spn = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return cljs$core$spn__0.call(this);
          case 1:
            return cljs$core$spn__1.call(this, x);
          case 2:
            return cljs$core$spn__2.call(this, x, y);
          case 3:
            return cljs$core$spn__3.call(this, x, y, z);
          default:
            var G__16602 = null;
            if (arguments.length > 3) {
              var G__16603__i = 0, G__16603__a = new Array(arguments.length - 3);
              while (G__16603__i < G__16603__a.length) {
                G__16603__a[G__16603__i] = arguments[G__16603__i + 3];
                ++G__16603__i;
              }
              G__16602 = new cljs.core.IndexedSeq(G__16603__a, 0);
            }
            return cljs$core$spn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__16602);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      cljs$core$spn.cljs$lang$maxFixedArity = 3;
      cljs$core$spn.cljs$lang$applyTo = cljs$core$spn__4.cljs$lang$applyTo;
      cljs$core$spn.cljs$core$IFn$_invoke$arity$0 = cljs$core$spn__0;
      cljs$core$spn.cljs$core$IFn$_invoke$arity$1 = cljs$core$spn__1;
      cljs$core$spn.cljs$core$IFn$_invoke$arity$2 = cljs$core$spn__2;
      cljs$core$spn.cljs$core$IFn$_invoke$arity$3 = cljs$core$spn__3;
      cljs$core$spn.cljs$core$IFn$_invoke$arity$variadic = cljs$core$spn__4.cljs$core$IFn$_invoke$arity$variadic;
      return cljs$core$spn;
    }();
  }(ps__$1);
};
cljs.core.some_fn.cljs$lang$applyTo = function(seq16393) {
  var G__16394 = cljs.core.first(seq16393);
  var seq16393__$1 = cljs.core.next(seq16393);
  var G__16395 = cljs.core.first(seq16393__$1);
  var seq16393__$2 = cljs.core.next(seq16393__$1);
  var G__16396 = cljs.core.first(seq16393__$2);
  var seq16393__$3 = cljs.core.next(seq16393__$2);
  return cljs.core.some_fn.cljs$core$IFn$_invoke$arity$variadic(G__16394, G__16395, G__16396, seq16393__$3);
};
cljs.core.some_fn.cljs$lang$maxFixedArity = 3;
cljs.core.map = function cljs$core$map() {
  var G__16611 = arguments.length;
  switch(G__16611) {
    case 1:
      return cljs.core.map.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.map.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.map.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.map.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 4), 0);
      return cljs.core.map.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__5360__auto__);
  }
};
cljs.core.map.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function(rf) {
    return function() {
      var G__16627 = null;
      var G__16627__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__16627__1 = function(result) {
        var G__16612 = result;
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__16612) : rf.call(null, G__16612);
      };
      var G__16627__2 = function(result, input) {
        var G__16613 = result;
        var G__16614 = function() {
          var G__16615 = input;
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__16615) : f.call(null, G__16615);
        }();
        return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__16613, G__16614) : rf.call(null, G__16613, G__16614);
      };
      var G__16627__3 = function() {
        var G__16628__delegate = function(result, input, inputs) {
          var G__16616 = result;
          var G__16617 = cljs.core.apply.cljs$core$IFn$_invoke$arity$3(f, input, inputs);
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__16616, G__16617) : rf.call(null, G__16616, G__16617);
        };
        var G__16628 = function(result, input, var_args) {
          var inputs = null;
          if (arguments.length > 2) {
            var G__16629__i = 0, G__16629__a = new Array(arguments.length - 2);
            while (G__16629__i < G__16629__a.length) {
              G__16629__a[G__16629__i] = arguments[G__16629__i + 2];
              ++G__16629__i;
            }
            inputs = new cljs.core.IndexedSeq(G__16629__a, 0);
          }
          return G__16628__delegate.call(this, result, input, inputs);
        };
        G__16628.cljs$lang$maxFixedArity = 2;
        G__16628.cljs$lang$applyTo = function(arglist__16630) {
          var result = cljs.core.first(arglist__16630);
          arglist__16630 = cljs.core.next(arglist__16630);
          var input = cljs.core.first(arglist__16630);
          var inputs = cljs.core.rest(arglist__16630);
          return G__16628__delegate(result, input, inputs);
        };
        G__16628.cljs$core$IFn$_invoke$arity$variadic = G__16628__delegate;
        return G__16628;
      }();
      G__16627 = function(result, input, var_args) {
        var inputs = var_args;
        switch(arguments.length) {
          case 0:
            return G__16627__0.call(this);
          case 1:
            return G__16627__1.call(this, result);
          case 2:
            return G__16627__2.call(this, result, input);
          default:
            var G__16631 = null;
            if (arguments.length > 2) {
              var G__16632__i = 0, G__16632__a = new Array(arguments.length - 2);
              while (G__16632__i < G__16632__a.length) {
                G__16632__a[G__16632__i] = arguments[G__16632__i + 2];
                ++G__16632__i;
              }
              G__16631 = new cljs.core.IndexedSeq(G__16632__a, 0);
            }
            return G__16627__3.cljs$core$IFn$_invoke$arity$variadic(result, input, G__16631);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__16627.cljs$lang$maxFixedArity = 2;
      G__16627.cljs$lang$applyTo = G__16627__3.cljs$lang$applyTo;
      G__16627.cljs$core$IFn$_invoke$arity$0 = G__16627__0;
      G__16627.cljs$core$IFn$_invoke$arity$1 = G__16627__1;
      G__16627.cljs$core$IFn$_invoke$arity$2 = G__16627__2;
      G__16627.cljs$core$IFn$_invoke$arity$variadic = G__16627__3.cljs$core$IFn$_invoke$arity$variadic;
      return G__16627;
    }();
  };
};
cljs.core.map.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4422__auto__ = cljs.core.seq(coll);
    if (temp__4422__auto__) {
      var s = temp__4422__auto__;
      if (cljs.core.chunked_seq_QMARK_(s)) {
        var c = cljs.core.chunk_first(s);
        var size = cljs.core.count(c);
        var b = cljs.core.chunk_buffer(size);
        var n__5194__auto___16633 = size;
        var i_16634 = 0;
        while (true) {
          if (i_16634 < n__5194__auto___16633) {
            cljs.core.chunk_append(b, function() {
              var G__16618 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_16634);
              return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__16618) : f.call(null, G__16618);
            }());
            var G__16635 = i_16634 + 1;
            i_16634 = G__16635;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons(cljs.core.chunk(b), cljs.core.map.cljs$core$IFn$_invoke$arity$2(f, cljs.core.chunk_rest(s)));
      } else {
        return cljs.core.cons(function() {
          var G__16619 = cljs.core.first(s);
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__16619) : f.call(null, G__16619);
        }(), cljs.core.map.cljs$core$IFn$_invoke$arity$2(f, cljs.core.rest(s)));
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.map.cljs$core$IFn$_invoke$arity$3 = function(f, c1, c2) {
  return new cljs.core.LazySeq(null, function() {
    var s1 = cljs.core.seq(c1);
    var s2 = cljs.core.seq(c2);
    if (s1 && s2) {
      return cljs.core.cons(function() {
        var G__16620 = cljs.core.first(s1);
        var G__16621 = cljs.core.first(s2);
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__16620, G__16621) : f.call(null, G__16620, G__16621);
      }(), cljs.core.map.cljs$core$IFn$_invoke$arity$3(f, cljs.core.rest(s1), cljs.core.rest(s2)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.map.cljs$core$IFn$_invoke$arity$4 = function(f, c1, c2, c3) {
  return new cljs.core.LazySeq(null, function() {
    var s1 = cljs.core.seq(c1);
    var s2 = cljs.core.seq(c2);
    var s3 = cljs.core.seq(c3);
    if (s1 && s2 && s3) {
      return cljs.core.cons(function() {
        var G__16622 = cljs.core.first(s1);
        var G__16623 = cljs.core.first(s2);
        var G__16624 = cljs.core.first(s3);
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__16622, G__16623, G__16624) : f.call(null, G__16622, G__16623, G__16624);
      }(), cljs.core.map.cljs$core$IFn$_invoke$arity$4(f, cljs.core.rest(s1), cljs.core.rest(s2), cljs.core.rest(s3)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.map.cljs$core$IFn$_invoke$arity$variadic = function(f, c1, c2, c3, colls) {
  var step = function cljs$core$step(cs) {
    return new cljs.core.LazySeq(null, function() {
      var ss = cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.seq, cs);
      if (cljs.core.every_QMARK_(cljs.core.identity, ss)) {
        return cljs.core.cons(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.first, ss), cljs$core$step(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.rest, ss)));
      } else {
        return null;
      }
    }, null, null);
  };
  return cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(step) {
    return function(p1__16604_SHARP_) {
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f, p1__16604_SHARP_);
    };
  }(step), step(cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(colls, c3, cljs.core.array_seq([c2, c1], 0))));
};
cljs.core.map.cljs$lang$applyTo = function(seq16605) {
  var G__16606 = cljs.core.first(seq16605);
  var seq16605__$1 = cljs.core.next(seq16605);
  var G__16607 = cljs.core.first(seq16605__$1);
  var seq16605__$2 = cljs.core.next(seq16605__$1);
  var G__16608 = cljs.core.first(seq16605__$2);
  var seq16605__$3 = cljs.core.next(seq16605__$2);
  var G__16609 = cljs.core.first(seq16605__$3);
  var seq16605__$4 = cljs.core.next(seq16605__$3);
  return cljs.core.map.cljs$core$IFn$_invoke$arity$variadic(G__16606, G__16607, G__16608, G__16609, seq16605__$4);
};
cljs.core.map.cljs$lang$maxFixedArity = 4;
cljs.core.take = function cljs$core$take() {
  var G__16637 = arguments.length;
  switch(G__16637) {
    case 1:
      return cljs.core.take.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.take.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.take.cljs$core$IFn$_invoke$arity$1 = function(n) {
  return function(rf) {
    var na = cljs.core.volatile_BANG_(n);
    return function(na) {
      return function() {
        var G__16642 = null;
        var G__16642__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__16642__1 = function(result) {
          var G__16638 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__16638) : rf.call(null, G__16638);
        };
        var G__16642__2 = function(result, input) {
          var n__$1 = cljs.core.deref(na);
          var nn = cljs.core._vreset_BANG_(na, cljs.core._deref(na) - 1);
          var result__$1 = n__$1 > 0 ? function() {
            var G__16639 = result;
            var G__16640 = input;
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__16639, G__16640) : rf.call(null, G__16639, G__16640);
          }() : result;
          if (!(nn > 0)) {
            return cljs.core.ensure_reduced(result__$1);
          } else {
            return result__$1;
          }
        };
        G__16642 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__16642__0.call(this);
            case 1:
              return G__16642__1.call(this, result);
            case 2:
              return G__16642__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__16642.cljs$core$IFn$_invoke$arity$0 = G__16642__0;
        G__16642.cljs$core$IFn$_invoke$arity$1 = G__16642__1;
        G__16642.cljs$core$IFn$_invoke$arity$2 = G__16642__2;
        return G__16642;
      }();
    }(na);
  };
};
cljs.core.take.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  return new cljs.core.LazySeq(null, function() {
    if (n > 0) {
      var temp__4422__auto__ = cljs.core.seq(coll);
      if (temp__4422__auto__) {
        var s = temp__4422__auto__;
        return cljs.core.cons(cljs.core.first(s), cljs.core.take.cljs$core$IFn$_invoke$arity$2(n - 1, cljs.core.rest(s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.take.cljs$lang$maxFixedArity = 2;
cljs.core.drop = function cljs$core$drop() {
  var G__16644 = arguments.length;
  switch(G__16644) {
    case 1:
      return cljs.core.drop.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.drop.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.drop.cljs$core$IFn$_invoke$arity$1 = function(n) {
  return function(rf) {
    var na = cljs.core.volatile_BANG_(n);
    return function(na) {
      return function() {
        var G__16649 = null;
        var G__16649__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__16649__1 = function(result) {
          var G__16645 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__16645) : rf.call(null, G__16645);
        };
        var G__16649__2 = function(result, input) {
          var n__$1 = cljs.core.deref(na);
          cljs.core._vreset_BANG_(na, cljs.core._deref(na) - 1);
          if (n__$1 > 0) {
            return result;
          } else {
            var G__16646 = result;
            var G__16647 = input;
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__16646, G__16647) : rf.call(null, G__16646, G__16647);
          }
        };
        G__16649 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__16649__0.call(this);
            case 1:
              return G__16649__1.call(this, result);
            case 2:
              return G__16649__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__16649.cljs$core$IFn$_invoke$arity$0 = G__16649__0;
        G__16649.cljs$core$IFn$_invoke$arity$1 = G__16649__1;
        G__16649.cljs$core$IFn$_invoke$arity$2 = G__16649__2;
        return G__16649;
      }();
    }(na);
  };
};
cljs.core.drop.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  var step = function(n__$1, coll__$1) {
    while (true) {
      var s = cljs.core.seq(coll__$1);
      if (n__$1 > 0 && s) {
        var G__16650 = n__$1 - 1;
        var G__16651 = cljs.core.rest(s);
        n__$1 = G__16650;
        coll__$1 = G__16651;
        continue;
      } else {
        return s;
      }
      break;
    }
  };
  return new cljs.core.LazySeq(null, function(step) {
    return function() {
      return step(n, coll);
    };
  }(step), null, null);
};
cljs.core.drop.cljs$lang$maxFixedArity = 2;
cljs.core.drop_last = function cljs$core$drop_last() {
  var G__16653 = arguments.length;
  switch(G__16653) {
    case 1:
      return cljs.core.drop_last.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.drop_last.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.drop_last.cljs$core$IFn$_invoke$arity$1 = function(s) {
  return cljs.core.drop_last.cljs$core$IFn$_invoke$arity$2(1, s);
};
cljs.core.drop_last.cljs$core$IFn$_invoke$arity$2 = function(n, s) {
  return cljs.core.map.cljs$core$IFn$_invoke$arity$3(function(x, _) {
    return x;
  }, s, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, s));
};
cljs.core.drop_last.cljs$lang$maxFixedArity = 2;
cljs.core.take_last = function cljs$core$take_last(n, coll) {
  var s = cljs.core.seq(coll);
  var lead = cljs.core.seq(cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, coll));
  while (true) {
    if (lead) {
      var G__16655 = cljs.core.next(s);
      var G__16656 = cljs.core.next(lead);
      s = G__16655;
      lead = G__16656;
      continue;
    } else {
      return s;
    }
    break;
  }
};
cljs.core.drop_while = function cljs$core$drop_while() {
  var G__16658 = arguments.length;
  switch(G__16658) {
    case 1:
      return cljs.core.drop_while.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.drop_while.cljs$core$IFn$_invoke$arity$1 = function(pred) {
  return function(rf) {
    var da = cljs.core.volatile_BANG_(true);
    return function(da) {
      return function() {
        var G__16666 = null;
        var G__16666__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__16666__1 = function(result) {
          var G__16659 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__16659) : rf.call(null, G__16659);
        };
        var G__16666__2 = function(result, input) {
          var drop_QMARK_ = cljs.core.deref(da);
          if (cljs.core.truth_(function() {
            var and__4297__auto__ = drop_QMARK_;
            if (cljs.core.truth_(and__4297__auto__)) {
              var G__16660 = input;
              return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__16660) : pred.call(null, G__16660);
            } else {
              return and__4297__auto__;
            }
          }())) {
            return result;
          } else {
            cljs.core.vreset_BANG_(da, null);
            var G__16661 = result;
            var G__16662 = input;
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__16661, G__16662) : rf.call(null, G__16661, G__16662);
          }
        };
        G__16666 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__16666__0.call(this);
            case 1:
              return G__16666__1.call(this, result);
            case 2:
              return G__16666__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__16666.cljs$core$IFn$_invoke$arity$0 = G__16666__0;
        G__16666.cljs$core$IFn$_invoke$arity$1 = G__16666__1;
        G__16666.cljs$core$IFn$_invoke$arity$2 = G__16666__2;
        return G__16666;
      }();
    }(da);
  };
};
cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2 = function(pred, coll) {
  var step = function(pred__$1, coll__$1) {
    while (true) {
      var s = cljs.core.seq(coll__$1);
      if (cljs.core.truth_(function() {
        var and__4297__auto__ = s;
        if (and__4297__auto__) {
          var G__16664 = cljs.core.first(s);
          return pred__$1.cljs$core$IFn$_invoke$arity$1 ? pred__$1.cljs$core$IFn$_invoke$arity$1(G__16664) : pred__$1.call(null, G__16664);
        } else {
          return and__4297__auto__;
        }
      }())) {
        var G__16667 = pred__$1;
        var G__16668 = cljs.core.rest(s);
        pred__$1 = G__16667;
        coll__$1 = G__16668;
        continue;
      } else {
        return s;
      }
      break;
    }
  };
  return new cljs.core.LazySeq(null, function(step) {
    return function() {
      return step(pred, coll);
    };
  }(step), null, null);
};
cljs.core.drop_while.cljs$lang$maxFixedArity = 2;
cljs.core.cycle = function cljs$core$cycle(coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4422__auto__ = cljs.core.seq(coll);
    if (temp__4422__auto__) {
      var s = temp__4422__auto__;
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$2(s, cljs$core$cycle(s));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.split_at = function cljs$core$split_at(n, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, coll), cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, coll)], null);
};
cljs.core.repeat = function cljs$core$repeat() {
  var G__16671 = arguments.length;
  switch(G__16671) {
    case 1:
      return cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.repeat.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.repeat.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return new cljs.core.LazySeq(null, function() {
    return cljs.core.cons(x, cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(x));
  }, null, null);
};
cljs.core.repeat.cljs$core$IFn$_invoke$arity$2 = function(n, x) {
  return cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(x));
};
cljs.core.repeat.cljs$lang$maxFixedArity = 2;
cljs.core.replicate = function cljs$core$replicate(n, x) {
  return cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(x));
};
cljs.core.repeatedly = function cljs$core$repeatedly() {
  var G__16674 = arguments.length;
  switch(G__16674) {
    case 1:
      return cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return new cljs.core.LazySeq(null, function() {
    return cljs.core.cons(function() {
      return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    }(), cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$1(f));
  }, null, null);
};
cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$2 = function(n, f) {
  return cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$1(f));
};
cljs.core.repeatedly.cljs$lang$maxFixedArity = 2;
cljs.core.iterate = function cljs$core$iterate(f, x) {
  return cljs.core.cons(x, new cljs.core.LazySeq(null, function() {
    return cljs$core$iterate(f, function() {
      var G__16679 = x;
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__16679) : f.call(null, G__16679);
    }());
  }, null, null));
};
cljs.core.interleave = function cljs$core$interleave() {
  var G__16684 = arguments.length;
  switch(G__16684) {
    case 2:
      return cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.interleave.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5360__auto__);
  }
};
cljs.core.interleave.cljs$core$IFn$_invoke$arity$2 = function(c1, c2) {
  return new cljs.core.LazySeq(null, function() {
    var s1 = cljs.core.seq(c1);
    var s2 = cljs.core.seq(c2);
    if (s1 && s2) {
      return cljs.core.cons(cljs.core.first(s1), cljs.core.cons(cljs.core.first(s2), cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(cljs.core.rest(s1), cljs.core.rest(s2))));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.interleave.cljs$core$IFn$_invoke$arity$variadic = function(c1, c2, colls) {
  return new cljs.core.LazySeq(null, function() {
    var ss = cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.seq, cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(colls, c2, cljs.core.array_seq([c1], 0)));
    if (cljs.core.every_QMARK_(cljs.core.identity, ss)) {
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.first, ss), cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.interleave, cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.rest, ss)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.interleave.cljs$lang$applyTo = function(seq16680) {
  var G__16681 = cljs.core.first(seq16680);
  var seq16680__$1 = cljs.core.next(seq16680);
  var G__16682 = cljs.core.first(seq16680__$1);
  var seq16680__$2 = cljs.core.next(seq16680__$1);
  return cljs.core.interleave.cljs$core$IFn$_invoke$arity$variadic(G__16681, G__16682, seq16680__$2);
};
cljs.core.interleave.cljs$lang$maxFixedArity = 2;
cljs.core.interpose = function cljs$core$interpose() {
  var G__16687 = arguments.length;
  switch(G__16687) {
    case 1:
      return cljs.core.interpose.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.interpose.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.interpose.cljs$core$IFn$_invoke$arity$1 = function(sep) {
  return function(rf) {
    var started = cljs.core.volatile_BANG_(false);
    return function(started) {
      return function() {
        var G__16696 = null;
        var G__16696__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__16696__1 = function(result) {
          var G__16688 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__16688) : rf.call(null, G__16688);
        };
        var G__16696__2 = function(result, input) {
          if (cljs.core.truth_(cljs.core.deref(started))) {
            var sepr = function() {
              var G__16689 = result;
              var G__16690 = sep;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__16689, G__16690) : rf.call(null, G__16689, G__16690);
            }();
            if (cljs.core.reduced_QMARK_(sepr)) {
              return sepr;
            } else {
              var G__16691 = sepr;
              var G__16692 = input;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__16691, G__16692) : rf.call(null, G__16691, G__16692);
            }
          } else {
            cljs.core.vreset_BANG_(started, true);
            var G__16693 = result;
            var G__16694 = input;
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__16693, G__16694) : rf.call(null, G__16693, G__16694);
          }
        };
        G__16696 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__16696__0.call(this);
            case 1:
              return G__16696__1.call(this, result);
            case 2:
              return G__16696__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__16696.cljs$core$IFn$_invoke$arity$0 = G__16696__0;
        G__16696.cljs$core$IFn$_invoke$arity$1 = G__16696__1;
        G__16696.cljs$core$IFn$_invoke$arity$2 = G__16696__2;
        return G__16696;
      }();
    }(started);
  };
};
cljs.core.interpose.cljs$core$IFn$_invoke$arity$2 = function(sep, coll) {
  return cljs.core.drop.cljs$core$IFn$_invoke$arity$2(1, cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(sep), coll));
};
cljs.core.interpose.cljs$lang$maxFixedArity = 2;
cljs.core.flatten1 = function cljs$core$flatten1(colls) {
  var cat = function cljs$core$flatten1_$_cat(coll, colls__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4420__auto__ = cljs.core.seq(coll);
      if (temp__4420__auto__) {
        var coll__$1 = temp__4420__auto__;
        return cljs.core.cons(cljs.core.first(coll__$1), cljs$core$flatten1_$_cat(cljs.core.rest(coll__$1), colls__$1));
      } else {
        if (cljs.core.seq(colls__$1)) {
          return cljs$core$flatten1_$_cat(cljs.core.first(colls__$1), cljs.core.rest(colls__$1));
        } else {
          return null;
        }
      }
    }, null, null);
  };
  return cat(null, colls);
};
cljs.core.mapcat = function cljs$core$mapcat() {
  var G__16708 = arguments.length;
  switch(G__16708) {
    case 1:
      return cljs.core.mapcat.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0);
      return cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5360__auto__);
  }
};
cljs.core.mapcat.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return cljs.core.comp.cljs$core$IFn$_invoke$arity$2(cljs.core.map.cljs$core$IFn$_invoke$arity$1(f), cljs.core.cat);
};
cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic = function(f, colls) {
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.concat, cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.map, f, colls));
};
cljs.core.mapcat.cljs$lang$applyTo = function(seq16705) {
  var G__16706 = cljs.core.first(seq16705);
  var seq16705__$1 = cljs.core.next(seq16705);
  return cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(G__16706, seq16705__$1);
};
cljs.core.mapcat.cljs$lang$maxFixedArity = 1;
cljs.core.filter = function cljs$core$filter() {
  var G__16711 = arguments.length;
  switch(G__16711) {
    case 1:
      return cljs.core.filter.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.filter.cljs$core$IFn$_invoke$arity$1 = function(pred) {
  return function(rf) {
    return function() {
      var G__16719 = null;
      var G__16719__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__16719__1 = function(result) {
        var G__16712 = result;
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__16712) : rf.call(null, G__16712);
      };
      var G__16719__2 = function(result, input) {
        if (cljs.core.truth_(function() {
          var G__16713 = input;
          return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__16713) : pred.call(null, G__16713);
        }())) {
          var G__16714 = result;
          var G__16715 = input;
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__16714, G__16715) : rf.call(null, G__16714, G__16715);
        } else {
          return result;
        }
      };
      G__16719 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__16719__0.call(this);
          case 1:
            return G__16719__1.call(this, result);
          case 2:
            return G__16719__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__16719.cljs$core$IFn$_invoke$arity$0 = G__16719__0;
      G__16719.cljs$core$IFn$_invoke$arity$1 = G__16719__1;
      G__16719.cljs$core$IFn$_invoke$arity$2 = G__16719__2;
      return G__16719;
    }();
  };
};
cljs.core.filter.cljs$core$IFn$_invoke$arity$2 = function(pred, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4422__auto__ = cljs.core.seq(coll);
    if (temp__4422__auto__) {
      var s = temp__4422__auto__;
      if (cljs.core.chunked_seq_QMARK_(s)) {
        var c = cljs.core.chunk_first(s);
        var size = cljs.core.count(c);
        var b = cljs.core.chunk_buffer(size);
        var n__5194__auto___16720 = size;
        var i_16721 = 0;
        while (true) {
          if (i_16721 < n__5194__auto___16720) {
            if (cljs.core.truth_(function() {
              var G__16716 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_16721);
              return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__16716) : pred.call(null, G__16716);
            }())) {
              cljs.core.chunk_append(b, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_16721));
            } else {
            }
            var G__16722 = i_16721 + 1;
            i_16721 = G__16722;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons(cljs.core.chunk(b), cljs.core.filter.cljs$core$IFn$_invoke$arity$2(pred, cljs.core.chunk_rest(s)));
      } else {
        var f = cljs.core.first(s);
        var r = cljs.core.rest(s);
        if (cljs.core.truth_(function() {
          var G__16717 = f;
          return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__16717) : pred.call(null, G__16717);
        }())) {
          return cljs.core.cons(f, cljs.core.filter.cljs$core$IFn$_invoke$arity$2(pred, r));
        } else {
          return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(pred, r);
        }
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.filter.cljs$lang$maxFixedArity = 2;
cljs.core.remove = function cljs$core$remove() {
  var G__16724 = arguments.length;
  switch(G__16724) {
    case 1:
      return cljs.core.remove.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.remove.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.remove.cljs$core$IFn$_invoke$arity$1 = function(pred) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$1(cljs.core.complement(pred));
};
cljs.core.remove.cljs$core$IFn$_invoke$arity$2 = function(pred, coll) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(cljs.core.complement(pred), coll);
};
cljs.core.remove.cljs$lang$maxFixedArity = 2;
cljs.core.tree_seq = function cljs$core$tree_seq(branch_QMARK_, children, root) {
  var walk = function cljs$core$tree_seq_$_walk(node) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons(node, cljs.core.truth_(function() {
        var G__16732 = node;
        return branch_QMARK_.cljs$core$IFn$_invoke$arity$1 ? branch_QMARK_.cljs$core$IFn$_invoke$arity$1(G__16732) : branch_QMARK_.call(null, G__16732);
      }()) ? cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(cljs$core$tree_seq_$_walk, cljs.core.array_seq([function() {
        var G__16733 = node;
        return children.cljs$core$IFn$_invoke$arity$1 ? children.cljs$core$IFn$_invoke$arity$1(G__16733) : children.call(null, G__16733);
      }()], 0)) : null);
    }, null, null);
  };
  return walk(root);
};
cljs.core.flatten = function cljs$core$flatten(x) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(function(p1__16734_SHARP_) {
    return !cljs.core.sequential_QMARK_(p1__16734_SHARP_);
  }, cljs.core.rest(cljs.core.tree_seq(cljs.core.sequential_QMARK_, cljs.core.seq, x)));
};
cljs.core.into = function cljs$core$into() {
  var G__16736 = arguments.length;
  switch(G__16736) {
    case 2:
      return cljs.core.into.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.into.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.into.cljs$core$IFn$_invoke$arity$2 = function(to, from) {
  if (!(to == null)) {
    if (function() {
      var G__16737 = to;
      if (G__16737) {
        var bit__4976__auto__ = G__16737.cljs$lang$protocol_mask$partition1$ & 4;
        if (bit__4976__auto__ || G__16737.cljs$core$IEditableCollection$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core.with_meta(cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj_BANG_, cljs.core.transient$(to), from)), cljs.core.meta(to));
    } else {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, to, from);
    }
  } else {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj, cljs.core.List.EMPTY, from);
  }
};
cljs.core.into.cljs$core$IFn$_invoke$arity$3 = function(to, xform, from) {
  if (function() {
    var G__16738 = to;
    if (G__16738) {
      var bit__4976__auto__ = G__16738.cljs$lang$protocol_mask$partition1$ & 4;
      if (bit__4976__auto__ || G__16738.cljs$core$IEditableCollection$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core.with_meta(cljs.core.persistent_BANG_(cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(xform, cljs.core.conj_BANG_, cljs.core.transient$(to), from)), cljs.core.meta(to));
  } else {
    return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(xform, cljs.core.conj, to, from);
  }
};
cljs.core.into.cljs$lang$maxFixedArity = 3;
cljs.core.mapv = function cljs$core$mapv() {
  var G__16746 = arguments.length;
  switch(G__16746) {
    case 2:
      return cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.mapv.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.mapv.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 4), 0);
      return cljs.core.mapv.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__5360__auto__);
  }
};
cljs.core.mapv.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(v, o) {
    return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(v, function() {
      var G__16747 = o;
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__16747) : f.call(null, G__16747);
    }());
  }, cljs.core.transient$(cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.mapv.cljs$core$IFn$_invoke$arity$3 = function(f, c1, c2) {
  return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY, cljs.core.map.cljs$core$IFn$_invoke$arity$3(f, c1, c2));
};
cljs.core.mapv.cljs$core$IFn$_invoke$arity$4 = function(f, c1, c2, c3) {
  return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY, cljs.core.map.cljs$core$IFn$_invoke$arity$4(f, c1, c2, c3));
};
cljs.core.mapv.cljs$core$IFn$_invoke$arity$variadic = function(f, c1, c2, c3, colls) {
  return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(cljs.core.map, f, c1, c2, c3, cljs.core.array_seq([colls], 0)));
};
cljs.core.mapv.cljs$lang$applyTo = function(seq16740) {
  var G__16741 = cljs.core.first(seq16740);
  var seq16740__$1 = cljs.core.next(seq16740);
  var G__16742 = cljs.core.first(seq16740__$1);
  var seq16740__$2 = cljs.core.next(seq16740__$1);
  var G__16743 = cljs.core.first(seq16740__$2);
  var seq16740__$3 = cljs.core.next(seq16740__$2);
  var G__16744 = cljs.core.first(seq16740__$3);
  var seq16740__$4 = cljs.core.next(seq16740__$3);
  return cljs.core.mapv.cljs$core$IFn$_invoke$arity$variadic(G__16741, G__16742, G__16743, G__16744, seq16740__$4);
};
cljs.core.mapv.cljs$lang$maxFixedArity = 4;
cljs.core.filterv = function cljs$core$filterv(pred, coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(v, o) {
    if (cljs.core.truth_(function() {
      var G__16750 = o;
      return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__16750) : pred.call(null, G__16750);
    }())) {
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(v, o);
    } else {
      return v;
    }
  }, cljs.core.transient$(cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.partition = function cljs$core$partition() {
  var G__16752 = arguments.length;
  switch(G__16752) {
    case 2:
      return cljs.core.partition.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.partition.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.partition.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.partition.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  return cljs.core.partition.cljs$core$IFn$_invoke$arity$3(n, n, coll);
};
cljs.core.partition.cljs$core$IFn$_invoke$arity$3 = function(n, step, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4422__auto__ = cljs.core.seq(coll);
    if (temp__4422__auto__) {
      var s = temp__4422__auto__;
      var p = cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, s);
      if (n === cljs.core.count(p)) {
        return cljs.core.cons(p, cljs.core.partition.cljs$core$IFn$_invoke$arity$3(n, step, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(step, s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.partition.cljs$core$IFn$_invoke$arity$4 = function(n, step, pad, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4422__auto__ = cljs.core.seq(coll);
    if (temp__4422__auto__) {
      var s = temp__4422__auto__;
      var p = cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, s);
      if (n === cljs.core.count(p)) {
        return cljs.core.cons(p, cljs.core.partition.cljs$core$IFn$_invoke$arity$4(n, step, pad, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(step, s)));
      } else {
        return cljs.core._conj(cljs.core.List.EMPTY, cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.concat.cljs$core$IFn$_invoke$arity$2(p, pad)));
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.partition.cljs$lang$maxFixedArity = 4;
cljs.core.get_in = function cljs$core$get_in() {
  var G__16755 = arguments.length;
  switch(G__16755) {
    case 2:
      return cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.get_in.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.get_in.cljs$core$IFn$_invoke$arity$2 = function(m, ks) {
  return cljs.core.get_in.cljs$core$IFn$_invoke$arity$3(m, ks, null);
};
cljs.core.get_in.cljs$core$IFn$_invoke$arity$3 = function(m, ks, not_found) {
  var sentinel = cljs.core.lookup_sentinel;
  var m__$1 = m;
  var ks__$1 = cljs.core.seq(ks);
  while (true) {
    if (ks__$1) {
      if (!function() {
        var G__16756 = m__$1;
        if (G__16756) {
          var bit__4983__auto__ = G__16756.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__4983__auto__ || G__16756.cljs$core$ILookup$) {
            return true;
          } else {
            if (!G__16756.cljs$lang$protocol_mask$partition0$) {
              return cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, G__16756);
            } else {
              return false;
            }
          }
        } else {
          return cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, G__16756);
        }
      }()) {
        return not_found;
      } else {
        var m__$2 = cljs.core.get.cljs$core$IFn$_invoke$arity$3(m__$1, cljs.core.first(ks__$1), sentinel);
        if (sentinel === m__$2) {
          return not_found;
        } else {
          var G__16758 = sentinel;
          var G__16759 = m__$2;
          var G__16760 = cljs.core.next(ks__$1);
          sentinel = G__16758;
          m__$1 = G__16759;
          ks__$1 = G__16760;
          continue;
        }
      }
    } else {
      return m__$1;
    }
    break;
  }
};
cljs.core.get_in.cljs$lang$maxFixedArity = 3;
cljs.core.assoc_in = function cljs$core$assoc_in(m, p__16761, v) {
  var vec__16766 = p__16761;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16766, 0, null);
  var ks = cljs.core.nthnext(vec__16766, 1);
  if (cljs.core.truth_(ks)) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs$core$assoc_in(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, v));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, v);
  }
};
cljs.core.update_in = function cljs$core$update_in() {
  var G__16775 = arguments.length;
  switch(G__16775) {
    case 3:
      return cljs.core.update_in.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.update_in.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.update_in.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return cljs.core.update_in.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 6), 0);
      return cljs.core.update_in.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], argseq__5360__auto__);
  }
};
cljs.core.update_in.cljs$core$IFn$_invoke$arity$3 = function(m, p__16776, f) {
  var vec__16777 = p__16776;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16777, 0, null);
  var ks = cljs.core.nthnext(vec__16777, 1);
  if (cljs.core.truth_(ks)) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.update_in.cljs$core$IFn$_invoke$arity$3(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__16778 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__16778) : f.call(null, G__16778);
    }());
  }
};
cljs.core.update_in.cljs$core$IFn$_invoke$arity$4 = function(m, p__16779, f, a) {
  var vec__16780 = p__16779;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16780, 0, null);
  var ks = cljs.core.nthnext(vec__16780, 1);
  if (cljs.core.truth_(ks)) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.update_in.cljs$core$IFn$_invoke$arity$4(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__16781 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      var G__16782 = a;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__16781, G__16782) : f.call(null, G__16781, G__16782);
    }());
  }
};
cljs.core.update_in.cljs$core$IFn$_invoke$arity$5 = function(m, p__16783, f, a, b) {
  var vec__16784 = p__16783;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16784, 0, null);
  var ks = cljs.core.nthnext(vec__16784, 1);
  if (cljs.core.truth_(ks)) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.update_in.cljs$core$IFn$_invoke$arity$5(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a, b));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__16785 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      var G__16786 = a;
      var G__16787 = b;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__16785, G__16786, G__16787) : f.call(null, G__16785, G__16786, G__16787);
    }());
  }
};
cljs.core.update_in.cljs$core$IFn$_invoke$arity$6 = function(m, p__16788, f, a, b, c) {
  var vec__16789 = p__16788;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16789, 0, null);
  var ks = cljs.core.nthnext(vec__16789, 1);
  if (cljs.core.truth_(ks)) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.update_in.cljs$core$IFn$_invoke$arity$6(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a, b, c));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__16790 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      var G__16791 = a;
      var G__16792 = b;
      var G__16793 = c;
      return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__16790, G__16791, G__16792, G__16793) : f.call(null, G__16790, G__16791, G__16792, G__16793);
    }());
  }
};
cljs.core.update_in.cljs$core$IFn$_invoke$arity$variadic = function(m, p__16794, f, a, b, c, args) {
  var vec__16795 = p__16794;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16795, 0, null);
  var ks = cljs.core.nthnext(vec__16795, 1);
  if (cljs.core.truth_(ks)) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(cljs.core.update_in, cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a, cljs.core.array_seq([b, c, args], 0)));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), a, b, c, cljs.core.array_seq([args], 0)));
  }
};
cljs.core.update_in.cljs$lang$applyTo = function(seq16767) {
  var G__16768 = cljs.core.first(seq16767);
  var seq16767__$1 = cljs.core.next(seq16767);
  var G__16769 = cljs.core.first(seq16767__$1);
  var seq16767__$2 = cljs.core.next(seq16767__$1);
  var G__16770 = cljs.core.first(seq16767__$2);
  var seq16767__$3 = cljs.core.next(seq16767__$2);
  var G__16771 = cljs.core.first(seq16767__$3);
  var seq16767__$4 = cljs.core.next(seq16767__$3);
  var G__16772 = cljs.core.first(seq16767__$4);
  var seq16767__$5 = cljs.core.next(seq16767__$4);
  var G__16773 = cljs.core.first(seq16767__$5);
  var seq16767__$6 = cljs.core.next(seq16767__$5);
  return cljs.core.update_in.cljs$core$IFn$_invoke$arity$variadic(G__16768, G__16769, G__16770, G__16771, G__16772, G__16773, seq16767__$6);
};
cljs.core.update_in.cljs$lang$maxFixedArity = 6;
cljs.core.update = function cljs$core$update() {
  var G__16805 = arguments.length;
  switch(G__16805) {
    case 3:
      return cljs.core.update.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.update.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.update.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return cljs.core.update.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 6), 0);
      return cljs.core.update.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], argseq__5360__auto__);
  }
};
cljs.core.update.cljs$core$IFn$_invoke$arity$3 = function(m, k, f) {
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
    var G__16806 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
    return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__16806) : f.call(null, G__16806);
  }());
};
cljs.core.update.cljs$core$IFn$_invoke$arity$4 = function(m, k, f, x) {
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
    var G__16807 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
    var G__16808 = x;
    return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__16807, G__16808) : f.call(null, G__16807, G__16808);
  }());
};
cljs.core.update.cljs$core$IFn$_invoke$arity$5 = function(m, k, f, x, y) {
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
    var G__16809 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
    var G__16810 = x;
    var G__16811 = y;
    return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__16809, G__16810, G__16811) : f.call(null, G__16809, G__16810, G__16811);
  }());
};
cljs.core.update.cljs$core$IFn$_invoke$arity$6 = function(m, k, f, x, y, z) {
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
    var G__16812 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
    var G__16813 = x;
    var G__16814 = y;
    var G__16815 = z;
    return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__16812, G__16813, G__16814, G__16815) : f.call(null, G__16812, G__16813, G__16814, G__16815);
  }());
};
cljs.core.update.cljs$core$IFn$_invoke$arity$variadic = function(m, k, f, x, y, z, more) {
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), x, y, z, cljs.core.array_seq([more], 0)));
};
cljs.core.update.cljs$lang$applyTo = function(seq16797) {
  var G__16798 = cljs.core.first(seq16797);
  var seq16797__$1 = cljs.core.next(seq16797);
  var G__16799 = cljs.core.first(seq16797__$1);
  var seq16797__$2 = cljs.core.next(seq16797__$1);
  var G__16800 = cljs.core.first(seq16797__$2);
  var seq16797__$3 = cljs.core.next(seq16797__$2);
  var G__16801 = cljs.core.first(seq16797__$3);
  var seq16797__$4 = cljs.core.next(seq16797__$3);
  var G__16802 = cljs.core.first(seq16797__$4);
  var seq16797__$5 = cljs.core.next(seq16797__$4);
  var G__16803 = cljs.core.first(seq16797__$5);
  var seq16797__$6 = cljs.core.next(seq16797__$5);
  return cljs.core.update.cljs$core$IFn$_invoke$arity$variadic(G__16798, G__16799, G__16800, G__16801, G__16802, G__16803, seq16797__$6);
};
cljs.core.update.cljs$lang$maxFixedArity = 6;
cljs.core.VectorNode = function(edit, arr) {
  this.edit = edit;
  this.arr = arr;
};
cljs.core.VectorNode.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "edit", "edit", -1302639, null), new cljs.core.Symbol(null, "arr", "arr", 2115492975, null)], null);
};
cljs.core.VectorNode.cljs$lang$type = true;
cljs.core.VectorNode.cljs$lang$ctorStr = "cljs.core/VectorNode";
cljs.core.VectorNode.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/VectorNode");
};
cljs.core.__GT_VectorNode = function cljs$core$__GT_VectorNode(edit, arr) {
  return new cljs.core.VectorNode(edit, arr);
};
cljs.core.pv_fresh_node = function cljs$core$pv_fresh_node(edit) {
  return new cljs.core.VectorNode(edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
};
cljs.core.pv_aget = function cljs$core$pv_aget(node, idx) {
  return node.arr[idx];
};
cljs.core.pv_aset = function cljs$core$pv_aset(node, idx, val) {
  return node.arr[idx] = val;
};
cljs.core.pv_clone_node = function cljs$core$pv_clone_node(node) {
  return new cljs.core.VectorNode(node.edit, cljs.core.aclone(node.arr));
};
cljs.core.tail_off = function cljs$core$tail_off(pv) {
  var cnt = pv.cnt;
  if (cnt < 32) {
    return 0;
  } else {
    return cnt - 1 >>> 5 << 5;
  }
};
cljs.core.new_path = function cljs$core$new_path(edit, level, node) {
  var ll = level;
  var ret = node;
  while (true) {
    if (ll === 0) {
      return ret;
    } else {
      var embed = ret;
      var r = cljs.core.pv_fresh_node(edit);
      var _ = cljs.core.pv_aset(r, 0, embed);
      var G__16817 = ll - 5;
      var G__16818 = r;
      ll = G__16817;
      ret = G__16818;
      continue;
    }
    break;
  }
};
cljs.core.push_tail = function cljs$core$push_tail(pv, level, parent, tailnode) {
  var ret = cljs.core.pv_clone_node(parent);
  var subidx = pv.cnt - 1 >>> level & 31;
  if (5 === level) {
    cljs.core.pv_aset(ret, subidx, tailnode);
    return ret;
  } else {
    var child = cljs.core.pv_aget(parent, subidx);
    if (!(child == null)) {
      var node_to_insert = cljs$core$push_tail(pv, level - 5, child, tailnode);
      cljs.core.pv_aset(ret, subidx, node_to_insert);
      return ret;
    } else {
      var node_to_insert = cljs.core.new_path(null, level - 5, tailnode);
      cljs.core.pv_aset(ret, subidx, node_to_insert);
      return ret;
    }
  }
};
cljs.core.vector_index_out_of_bounds = function cljs$core$vector_index_out_of_bounds(i, cnt) {
  throw new Error([cljs.core.str("No item "), cljs.core.str(i), cljs.core.str(" in vector of length "), cljs.core.str(cnt)].join(""));
};
cljs.core.first_array_for_longvec = function cljs$core$first_array_for_longvec(pv) {
  var node = pv.root;
  var level = pv.shift;
  while (true) {
    if (level > 0) {
      var G__16823 = cljs.core.pv_aget(node, 0);
      var G__16824 = level - 5;
      node = G__16823;
      level = G__16824;
      continue;
    } else {
      return node.arr;
    }
    break;
  }
};
cljs.core.unchecked_array_for = function cljs$core$unchecked_array_for(pv, i) {
  if (i >= cljs.core.tail_off(pv)) {
    return pv.tail;
  } else {
    var node = pv.root;
    var level = pv.shift;
    while (true) {
      if (level > 0) {
        var G__16825 = cljs.core.pv_aget(node, i >>> level & 31);
        var G__16826 = level - 5;
        node = G__16825;
        level = G__16826;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.array_for = function cljs$core$array_for(pv, i) {
  if (0 <= i && i < pv.cnt) {
    return cljs.core.unchecked_array_for(pv, i);
  } else {
    return cljs.core.vector_index_out_of_bounds(i, pv.cnt);
  }
};
cljs.core.do_assoc = function cljs$core$do_assoc(pv, level, node, i, val) {
  var ret = cljs.core.pv_clone_node(node);
  if (level === 0) {
    cljs.core.pv_aset(ret, i & 31, val);
    return ret;
  } else {
    var subidx = i >>> level & 31;
    cljs.core.pv_aset(ret, subidx, cljs$core$do_assoc(pv, level - 5, cljs.core.pv_aget(node, subidx), i, val));
    return ret;
  }
};
cljs.core.pop_tail = function cljs$core$pop_tail(pv, level, node) {
  var subidx = pv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = cljs$core$pop_tail(pv, level - 5, cljs.core.pv_aget(node, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node(node);
      cljs.core.pv_aset(ret, subidx, new_child);
      return ret;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node(node);
      cljs.core.pv_aset(ret, subidx, null);
      return ret;
    }
  }
};
cljs.core.RangedIterator = function(i, base, arr, v, start, end) {
  this.i = i;
  this.base = base;
  this.arr = arr;
  this.v = v;
  this.start = start;
  this.end = end;
};
cljs.core.RangedIterator.prototype.hasNext = function() {
  var self__ = this;
  var this$ = this;
  return self__.i < self__.end;
};
cljs.core.RangedIterator.prototype.next = function() {
  var self__ = this;
  var this$ = this;
  if (self__.i - self__.base === 32) {
    self__.arr = cljs.core.unchecked_array_for(self__.v, self__.i);
    self__.base = self__.base + 32;
  } else {
  }
  var ret = self__.arr[self__.i & 31];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.RangedIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.Symbol(null, "base", "base", 1825810849, null), new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), new cljs.core.Symbol(null, "v", "v", 1661996586, null), new cljs.core.Symbol(null, "start", "start", 1285322546, null), new cljs.core.Symbol(null, "end", "end", 1372345569, null)], null);
};
cljs.core.RangedIterator.cljs$lang$type = true;
cljs.core.RangedIterator.cljs$lang$ctorStr = "cljs.core/RangedIterator";
cljs.core.RangedIterator.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/RangedIterator");
};
cljs.core.__GT_RangedIterator = function cljs$core$__GT_RangedIterator(i, base, arr, v, start, end) {
  return new cljs.core.RangedIterator(i, base, arr, v, start, end);
};
cljs.core.ranged_iterator = function cljs$core$ranged_iterator(v, start, end) {
  var i = start;
  return new cljs.core.RangedIterator(i, i - i % 32, start < cljs.core.count(v) ? cljs.core.unchecked_array_for(v, i) : null, v, start, end);
};
cljs.core.PersistentVector = function(meta, cnt, shift, root, tail, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 167668511;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentVector.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentVector.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.unchecked_array_for(v__$1, i);
      var len = arr.length;
      var init__$2 = function() {
        var j = 0;
        var init__$2 = init__$1;
        while (true) {
          if (j < len) {
            var init__$3 = function() {
              var G__16836 = init__$2;
              var G__16837 = j + i;
              var G__16838 = arr[j];
              return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__16836, G__16837, G__16838) : f.call(null, G__16836, G__16837, G__16838);
            }();
            if (cljs.core.reduced_QMARK_(init__$3)) {
              return init__$3;
            } else {
              var G__16849 = j + 1;
              var G__16850 = init__$3;
              j = G__16849;
              init__$2 = G__16850;
              continue;
            }
          } else {
            return init__$2;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__16839 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__16839) : cljs.core.deref.call(null, G__16839);
      } else {
        var G__16851 = i + len;
        var G__16852 = init__$2;
        i = G__16851;
        init__$1 = G__16852;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_for(coll__$1, n)[n & 31];
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core.unchecked_array_for(coll__$1, n)[n & 31];
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    if (cljs.core.tail_off(coll__$1) <= n) {
      var new_tail = cljs.core.aclone(self__.tail);
      new_tail[n & 31] = val;
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, new_tail, null);
    } else {
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, cljs.core.do_assoc(coll__$1, self__.shift, self__.root, n, val), self__.tail, null);
    }
  } else {
    if (n === self__.cnt) {
      return cljs.core._conj(coll__$1, val);
    } else {
      throw new Error([cljs.core.str("Index "), cljs.core.str(n), cljs.core.str(" out of bounds  [0,"), cljs.core.str(self__.cnt), cljs.core.str("]")].join(""));
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IIterable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IIterable$_iterator$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.ranged_iterator(this$__$1, 0, self__.cnt);
};
cljs.core.PersistentVector.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentVector.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_key$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, 0);
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_val$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, 1);
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, self__.cnt - 1);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    throw new Error("Can't pop empty vector");
  } else {
    if (1 === self__.cnt) {
      return cljs.core._with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
    } else {
      if (1 < self__.cnt - cljs.core.tail_off(coll__$1)) {
        return new cljs.core.PersistentVector(self__.meta, self__.cnt - 1, self__.shift, self__.root, self__.tail.slice(0, -1), null);
      } else {
        var new_tail = cljs.core.unchecked_array_for(coll__$1, self__.cnt - 2);
        var nr = cljs.core.pop_tail(coll__$1, self__.shift, self__.root);
        var new_root = nr == null ? cljs.core.PersistentVector.EMPTY_NODE : nr;
        var cnt_1 = self__.cnt - 1;
        if (5 < self__.shift && cljs.core.pv_aget(new_root, 1) == null) {
          return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift - 5, cljs.core.pv_aget(new_root, 0), new_tail, null);
        } else {
          return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift, new_root, new_tail, null);
        }
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return new cljs.core.RSeq(coll__$1, self__.cnt - 1, null);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4725__auto__ = self__.__hash;
  if (!(h__4725__auto__ == null)) {
    return h__4725__auto__;
  } else {
    var h__4725__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4725__auto____$1;
    return h__4725__auto____$1;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  if (other instanceof cljs.core.PersistentVector) {
    if (self__.cnt === cljs.core.count(other)) {
      var me_iter = cljs.core._iterator(coll__$1);
      var you_iter = cljs.core._iterator(other);
      while (true) {
        if (cljs.core.truth_(me_iter.hasNext())) {
          var x = me_iter.next();
          var y = you_iter.next();
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
            continue;
          } else {
            return false;
          }
        } else {
          return true;
        }
        break;
      }
    } else {
      return false;
    }
  } else {
    return cljs.core.equiv_sequential(coll__$1, other);
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientVector(self__.cnt, self__.shift, function() {
    var G__16840 = self__.root;
    return cljs.core.tv_editable_root.cljs$core$IFn$_invoke$arity$1 ? cljs.core.tv_editable_root.cljs$core$IFn$_invoke$arity$1(G__16840) : cljs.core.tv_editable_root.call(null, G__16840);
  }(), function() {
    var G__16841 = self__.tail;
    return cljs.core.tv_editable_tail.cljs$core$IFn$_invoke$arity$1 ? cljs.core.tv_editable_tail.cljs$core$IFn$_invoke$arity$1(G__16841) : cljs.core.tv_editable_tail.call(null, G__16841);
  }());
};
cljs.core.PersistentVector.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$2 = function(v, f) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(v__$1, f);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.unchecked_array_for(v__$1, i);
      var len = arr.length;
      var init__$2 = function() {
        var j = 0;
        var init__$2 = init__$1;
        while (true) {
          if (j < len) {
            var init__$3 = function() {
              var G__16842 = init__$2;
              var G__16843 = arr[j];
              return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__16842, G__16843) : f.call(null, G__16842, G__16843);
            }();
            if (cljs.core.reduced_QMARK_(init__$3)) {
              return init__$3;
            } else {
              var G__16853 = j + 1;
              var G__16854 = init__$3;
              j = G__16853;
              init__$2 = G__16854;
              continue;
            }
          } else {
            return init__$2;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__16844 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__16844) : cljs.core.deref.call(null, G__16844);
      } else {
        var G__16855 = i + len;
        var G__16856 = init__$2;
        i = G__16855;
        init__$1 = G__16856;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._assoc_n(coll__$1, k, v);
  } else {
    throw new Error("Vector's key for assoc must be a number.");
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    return null;
  } else {
    if (self__.cnt <= 32) {
      return new cljs.core.IndexedSeq(self__.tail, 0);
    } else {
      var G__16845 = coll__$1;
      var G__16846 = cljs.core.first_array_for_longvec(coll__$1);
      var G__16847 = 0;
      var G__16848 = 0;
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__16845, G__16846, G__16847, G__16848) : cljs.core.chunked_seq.call(null, G__16845, G__16846, G__16847, G__16848);
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(meta__$1, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt - cljs.core.tail_off(coll__$1) < 32) {
    var len = self__.tail.length;
    var new_tail = new Array(len + 1);
    var n__5194__auto___16857 = len;
    var i_16858 = 0;
    while (true) {
      if (i_16858 < n__5194__auto___16857) {
        new_tail[i_16858] = self__.tail[i_16858];
        var G__16859 = i_16858 + 1;
        i_16858 = G__16859;
        continue;
      } else {
      }
      break;
    }
    new_tail[len] = o;
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, self__.shift, self__.root, new_tail, null);
  } else {
    var root_overflow_QMARK_ = self__.cnt >>> 5 > 1 << self__.shift;
    var new_shift = root_overflow_QMARK_ ? self__.shift + 5 : self__.shift;
    var new_root = root_overflow_QMARK_ ? function() {
      var n_r = cljs.core.pv_fresh_node(null);
      cljs.core.pv_aset(n_r, 0, self__.root);
      cljs.core.pv_aset(n_r, 1, cljs.core.new_path(null, self__.shift, new cljs.core.VectorNode(null, self__.tail)));
      return n_r;
    }() : cljs.core.push_tail(coll__$1, self__.shift, self__.root, new cljs.core.VectorNode(null, self__.tail));
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, new_shift, new_root, [o], null);
  }
};
cljs.core.PersistentVector.prototype.call = function() {
  var G__16860 = null;
  var G__16860__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__16860__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__16860 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__16860__2.call(this, self__, k);
      case 3:
        return G__16860__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__16860.cljs$core$IFn$_invoke$arity$2 = G__16860__2;
  G__16860.cljs$core$IFn$_invoke$arity$3 = G__16860__3;
  return G__16860;
}();
cljs.core.PersistentVector.prototype.apply = function(self__, args16835) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args16835)));
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.PersistentVector.getBasis = function() {
  return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null), new cljs.core.Symbol(null, "shift", "shift", -1657295705, null), new cljs.core.Symbol(null, "root", "root", 1191874074, null), new cljs.core.Symbol(null, "tail", "tail", 494507963, null), new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null)], null);
};
cljs.core.PersistentVector.cljs$lang$type = true;
cljs.core.PersistentVector.cljs$lang$ctorStr = "cljs.core/PersistentVector";
cljs.core.PersistentVector.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/PersistentVector");
};
cljs.core.__GT_PersistentVector = function cljs$core$__GT_PersistentVector(meta, cnt, shift, root, tail, __hash) {
  return new cljs.core.PersistentVector(meta, cnt, shift, root, tail, __hash);
};
cljs.core.PersistentVector.EMPTY_NODE = new cljs.core.VectorNode(null, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
cljs.core.PersistentVector.EMPTY = new cljs.core.PersistentVector(null, 0, 5, cljs.core.PersistentVector.EMPTY_NODE, [], cljs.core.empty_ordered_hash);
cljs.core.PersistentVector.fromArray = function(xs, no_clone) {
  var l = xs.length;
  var xs__$1 = no_clone ? xs : cljs.core.aclone(xs);
  if (l < 32) {
    return new cljs.core.PersistentVector(null, l, 5, cljs.core.PersistentVector.EMPTY_NODE, xs__$1, null);
  } else {
    var node = xs__$1.slice(0, 32);
    var v = new cljs.core.PersistentVector(null, 32, 5, cljs.core.PersistentVector.EMPTY_NODE, node, null);
    var i = 32;
    var out = v.cljs$core$IEditableCollection$_as_transient$arity$1(null);
    while (true) {
      if (i < l) {
        var G__16861 = i + 1;
        var G__16862 = cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(out, xs__$1[i]);
        i = G__16861;
        out = G__16862;
        continue;
      } else {
        return cljs.core.persistent_BANG_(out);
      }
      break;
    }
  }
};
cljs.core.PersistentVector.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5285__auto__ = this;
  return cljs.core.es6_iterator(this__5285__auto__);
};
cljs.core.vec = function cljs$core$vec(coll) {
  if (cljs.core.array_QMARK_(coll)) {
    return cljs.core.PersistentVector.fromArray(coll, true);
  } else {
    return cljs.core._persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj_BANG_, cljs.core._as_transient(cljs.core.PersistentVector.EMPTY), coll));
  }
};
cljs.core.vector = function cljs$core$vector() {
  var argseq__5349__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.vector.cljs$core$IFn$_invoke$arity$variadic(argseq__5349__auto__);
};
cljs.core.vector.cljs$core$IFn$_invoke$arity$variadic = function(args) {
  if (args instanceof cljs.core.IndexedSeq && args.i === 0) {
    return cljs.core.PersistentVector.fromArray(args.arr, true);
  } else {
    return cljs.core.vec(args);
  }
};
cljs.core.vector.cljs$lang$maxFixedArity = 0;
cljs.core.vector.cljs$lang$applyTo = function(seq16863) {
  return cljs.core.vector.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq16863));
};
cljs.core.ChunkedSeq = function(vec, node, i, off, meta, __hash) {
  this.vec = vec;
  this.node = node;
  this.i = i;
  this.off = off;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375020;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ChunkedSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = function() {
      var G__16864 = self__.vec;
      var G__16865 = self__.node;
      var G__16866 = self__.i;
      var G__16867 = self__.off + 1;
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__16864, G__16865, G__16866, G__16867) : cljs.core.chunked_seq.call(null, G__16864, G__16865, G__16866, G__16867);
    }();
    if (s == null) {
      return null;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_next(coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4725__auto__ = self__.__hash;
  if (!(h__4725__auto__ == null)) {
    return h__4725__auto__;
  } else {
    var h__4725__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4725__auto____$1;
    return h__4725__auto____$1;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(function() {
    var G__16868 = self__.vec;
    var G__16869 = self__.i + self__.off;
    var G__16870 = cljs.core.count(self__.vec);
    return cljs.core.subvec.cljs$core$IFn$_invoke$arity$3 ? cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(G__16868, G__16869, G__16870) : cljs.core.subvec.call(null, G__16868, G__16869, G__16870);
  }(), f);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(function() {
    var G__16871 = self__.vec;
    var G__16872 = self__.i + self__.off;
    var G__16873 = cljs.core.count(self__.vec);
    return cljs.core.subvec.cljs$core$IFn$_invoke$arity$3 ? cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(G__16871, G__16872, G__16873) : cljs.core.subvec.call(null, G__16871, G__16872, G__16873);
  }(), f, start);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.node[self__.off];
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = function() {
      var G__16874 = self__.vec;
      var G__16875 = self__.node;
      var G__16876 = self__.i;
      var G__16877 = self__.off + 1;
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__16874, G__16875, G__16876, G__16877) : cljs.core.chunked_seq.call(null, G__16874, G__16875, G__16876, G__16877);
    }();
    if (s == null) {
      return cljs.core.List.EMPTY;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_rest(coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$2(self__.node, self__.off);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count(self__.vec)) {
    var G__16878 = self__.vec;
    var G__16879 = cljs.core.unchecked_array_for(self__.vec, end);
    var G__16880 = end;
    var G__16881 = 0;
    return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__16878, G__16879, G__16880, G__16881) : cljs.core.chunked_seq.call(null, G__16878, G__16879, G__16880, G__16881);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  var G__16882 = self__.vec;
  var G__16883 = self__.node;
  var G__16884 = self__.i;
  var G__16885 = self__.off;
  var G__16886 = m;
  return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5(G__16882, G__16883, G__16884, G__16885, G__16886) : cljs.core.chunked_seq.call(null, G__16882, G__16883, G__16884, G__16885, G__16886);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count(self__.vec)) {
    var G__16887 = self__.vec;
    var G__16888 = cljs.core.unchecked_array_for(self__.vec, end);
    var G__16889 = end;
    var G__16890 = 0;
    return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__16887, G__16888, G__16889, G__16890) : cljs.core.chunked_seq.call(null, G__16887, G__16888, G__16889, G__16890);
  } else {
    return null;
  }
};
cljs.core.ChunkedSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "vec", "vec", 982683596, null), new cljs.core.Symbol(null, "node", "node", -2073234571, null), new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.Symbol(null, "off", "off", -2047994980, null), new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null)], null);
};
cljs.core.ChunkedSeq.cljs$lang$type = true;
cljs.core.ChunkedSeq.cljs$lang$ctorStr = "cljs.core/ChunkedSeq";
cljs.core.ChunkedSeq.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/ChunkedSeq");
};
cljs.core.__GT_ChunkedSeq = function cljs$core$__GT_ChunkedSeq(vec, node, i, off, meta, __hash) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, meta, __hash);
};
cljs.core.ChunkedSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5285__auto__ = this;
  return cljs.core.es6_iterator(this__5285__auto__);
};
cljs.core.chunked_seq = function cljs$core$chunked_seq() {
  var G__16892 = arguments.length;
  switch(G__16892) {
    case 3:
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$3 = function(vec, i, off) {
  return new cljs.core.ChunkedSeq(vec, cljs.core.array_for(vec, i), i, off, null, null);
};
cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 = function(vec, node, i, off) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, null, null);
};
cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5 = function(vec, node, i, off, meta) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, meta, null);
};
cljs.core.chunked_seq.cljs$lang$maxFixedArity = 5;
cljs.core.Subvec = function(meta, v, start, end, __hash) {
  this.meta = meta;
  this.v = v;
  this.start = start;
  this.end = end;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 167666463;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Subvec.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.Subvec.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.Subvec.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var i = self__.start;
  var j = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.end) {
      var init__$2 = function() {
        var G__16895 = init__$1;
        var G__16896 = j;
        var G__16897 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, i);
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__16895, G__16896, G__16897) : f.call(null, G__16895, G__16896, G__16897);
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__16898 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__16898) : cljs.core.deref.call(null, G__16898);
      } else {
        var G__16920 = i + 1;
        var G__16921 = j + 1;
        var G__16922 = init__$2;
        i = G__16920;
        j = G__16921;
        init__$1 = G__16922;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return cljs.core.vector_index_out_of_bounds(n, self__.end - self__.start);
  } else {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, self__.start + n);
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return not_found;
  } else {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(self__.v, self__.start + n, not_found);
  }
};
cljs.core.Subvec.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  var v_pos = self__.start + n;
  var G__16899 = self__.meta;
  var G__16900 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.v, v_pos, val);
  var G__16901 = self__.start;
  var G__16902 = function() {
    var x__4621__auto__ = self__.end;
    var y__4622__auto__ = v_pos + 1;
    return x__4621__auto__ > y__4622__auto__ ? x__4621__auto__ : y__4622__auto__;
  }();
  var G__16903 = null;
  return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__16899, G__16900, G__16901, G__16902, G__16903) : cljs.core.build_subvec.call(null, G__16899, G__16900, G__16901, G__16902, G__16903);
};
cljs.core.Subvec.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Subvec.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Subvec(self__.meta, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.end - self__.start;
};
cljs.core.Subvec.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, self__.end - 1);
};
cljs.core.Subvec.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.start === self__.end) {
    throw new Error("Can't pop empty vector");
  } else {
    var G__16904 = self__.meta;
    var G__16905 = self__.v;
    var G__16906 = self__.start;
    var G__16907 = self__.end - 1;
    var G__16908 = null;
    return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__16904, G__16905, G__16906, G__16907, G__16908) : cljs.core.build_subvec.call(null, G__16904, G__16905, G__16906, G__16907, G__16908);
  }
};
cljs.core.Subvec.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.start === self__.end)) {
    return new cljs.core.RSeq(coll__$1, self__.end - self__.start - 1, null);
  } else {
    return null;
  }
};
cljs.core.Subvec.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4725__auto__ = self__.__hash;
  if (!(h__4725__auto__ == null)) {
    return h__4725__auto__;
  } else {
    var h__4725__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4725__auto____$1;
    return h__4725__auto____$1;
  }
};
cljs.core.Subvec.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.Subvec.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(coll__$1, f);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(coll__$1, f, start__$1);
};
cljs.core.Subvec.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, key, val) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n(coll__$1, key, val);
  } else {
    throw new Error("Subvec's key for assoc must be a number.");
  }
};
cljs.core.Subvec.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var subvec_seq = function(coll__$1) {
    return function cljs$core$subvec_seq(i) {
      if (i === self__.end) {
        return null;
      } else {
        return cljs.core.cons(cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, i), new cljs.core.LazySeq(null, function(coll__$1) {
          return function() {
            return cljs$core$subvec_seq(i + 1);
          };
        }(coll__$1), null, null));
      }
    };
  }(coll__$1);
  return subvec_seq(self__.start);
};
cljs.core.Subvec.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  var G__16910 = meta__$1;
  var G__16911 = self__.v;
  var G__16912 = self__.start;
  var G__16913 = self__.end;
  var G__16914 = self__.__hash;
  return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__16910, G__16911, G__16912, G__16913, G__16914) : cljs.core.build_subvec.call(null, G__16910, G__16911, G__16912, G__16913, G__16914);
};
cljs.core.Subvec.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  var G__16915 = self__.meta;
  var G__16916 = cljs.core._assoc_n(self__.v, self__.end, o);
  var G__16917 = self__.start;
  var G__16918 = self__.end + 1;
  var G__16919 = null;
  return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__16915, G__16916, G__16917, G__16918, G__16919) : cljs.core.build_subvec.call(null, G__16915, G__16916, G__16917, G__16918, G__16919);
};
cljs.core.Subvec.prototype.call = function() {
  var G__16923 = null;
  var G__16923__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__16923__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__16923 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__16923__2.call(this, self__, k);
      case 3:
        return G__16923__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__16923.cljs$core$IFn$_invoke$arity$2 = G__16923__2;
  G__16923.cljs$core$IFn$_invoke$arity$3 = G__16923__3;
  return G__16923;
}();
cljs.core.Subvec.prototype.apply = function(self__, args16894) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args16894)));
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.Subvec.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "v", "v", 1661996586, null), new cljs.core.Symbol(null, "start", "start", 1285322546, null), new cljs.core.Symbol(null, "end", "end", 1372345569, null), new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null)], null);
};
cljs.core.Subvec.cljs$lang$type = true;
cljs.core.Subvec.cljs$lang$ctorStr = "cljs.core/Subvec";
cljs.core.Subvec.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/Subvec");
};
cljs.core.__GT_Subvec = function cljs$core$__GT_Subvec(meta, v, start, end, __hash) {
  return new cljs.core.Subvec(meta, v, start, end, __hash);
};
cljs.core.Subvec.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5285__auto__ = this;
  return cljs.core.es6_iterator(this__5285__auto__);
};
cljs.core.build_subvec = function cljs$core$build_subvec(meta, v, start, end, __hash) {
  while (true) {
    if (v instanceof cljs.core.Subvec) {
      var G__16924 = meta;
      var G__16925 = v.v;
      var G__16926 = v.start + start;
      var G__16927 = v.start + end;
      var G__16928 = __hash;
      meta = G__16924;
      v = G__16925;
      start = G__16926;
      end = G__16927;
      __hash = G__16928;
      continue;
    } else {
      var c = cljs.core.count(v);
      if (start < 0 || end < 0 || start > c || end > c) {
        throw new Error("Index out of bounds");
      } else {
      }
      return new cljs.core.Subvec(meta, v, start, end, __hash);
    }
    break;
  }
};
cljs.core.subvec = function cljs$core$subvec() {
  var G__16930 = arguments.length;
  switch(G__16930) {
    case 2:
      return cljs.core.subvec.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.subvec.cljs$core$IFn$_invoke$arity$2 = function(v, start) {
  return cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(v, start, cljs.core.count(v));
};
cljs.core.subvec.cljs$core$IFn$_invoke$arity$3 = function(v, start, end) {
  return cljs.core.build_subvec(null, v, start, end, null);
};
cljs.core.subvec.cljs$lang$maxFixedArity = 3;
cljs.core.tv_ensure_editable = function cljs$core$tv_ensure_editable(edit, node) {
  if (edit === node.edit) {
    return node;
  } else {
    return new cljs.core.VectorNode(edit, cljs.core.aclone(node.arr));
  }
};
cljs.core.tv_editable_root = function cljs$core$tv_editable_root(node) {
  return new cljs.core.VectorNode(function() {
    var obj16935 = {};
    return obj16935;
  }(), cljs.core.aclone(node.arr));
};
cljs.core.tv_editable_tail = function cljs$core$tv_editable_tail(tl) {
  var ret = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
  cljs.core.array_copy(tl, 0, ret, 0, tl.length);
  return ret;
};
cljs.core.tv_push_tail = function cljs$core$tv_push_tail(tv, level, parent, tail_node) {
  var ret = cljs.core.tv_ensure_editable(tv.root.edit, parent);
  var subidx = tv.cnt - 1 >>> level & 31;
  cljs.core.pv_aset(ret, subidx, level === 5 ? tail_node : function() {
    var child = cljs.core.pv_aget(ret, subidx);
    if (!(child == null)) {
      return cljs$core$tv_push_tail(tv, level - 5, child, tail_node);
    } else {
      return cljs.core.new_path(tv.root.edit, level - 5, tail_node);
    }
  }());
  return ret;
};
cljs.core.tv_pop_tail = function cljs$core$tv_pop_tail(tv, level, node) {
  var node__$1 = cljs.core.tv_ensure_editable(tv.root.edit, node);
  var subidx = tv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = cljs$core$tv_pop_tail(tv, level - 5, cljs.core.pv_aget(node__$1, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset(node__$1, subidx, new_child);
      return node__$1;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset(node__$1, subidx, null);
      return node__$1;
    }
  }
};
cljs.core.unchecked_editable_array_for = function cljs$core$unchecked_editable_array_for(tv, i) {
  if (i >= cljs.core.tail_off(tv)) {
    return tv.tail;
  } else {
    var root = tv.root;
    var node = root;
    var level = tv.shift;
    while (true) {
      if (level > 0) {
        var G__16943 = cljs.core.tv_ensure_editable(root.edit, cljs.core.pv_aget(node, i >>> level & 31));
        var G__16944 = level - 5;
        node = G__16943;
        level = G__16944;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.TransientVector = function(cnt, shift, root, tail) {
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.cljs$lang$protocol_mask$partition1$ = 88;
  this.cljs$lang$protocol_mask$partition0$ = 275;
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt - cljs.core.tail_off(tcoll__$1) < 32) {
      self__.tail[self__.cnt & 31] = o;
      self__.cnt = self__.cnt + 1;
      return tcoll__$1;
    } else {
      var tail_node = new cljs.core.VectorNode(self__.root.edit, self__.tail);
      var new_tail = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      new_tail[0] = o;
      self__.tail = new_tail;
      if (self__.cnt >>> 5 > 1 << self__.shift) {
        var new_root_array = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var new_shift = self__.shift + 5;
        new_root_array[0] = self__.root;
        new_root_array[1] = cljs.core.new_path(self__.root.edit, self__.shift, tail_node);
        self__.root = new cljs.core.VectorNode(self__.root.edit, new_root_array);
        self__.shift = new_shift;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      } else {
        var new_root = cljs.core.tv_push_tail(tcoll__$1, self__.shift, self__.root, tail_node);
        self__.root = new_root;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    self__.root.edit = null;
    var len = self__.cnt - cljs.core.tail_off(tcoll__$1);
    var trimmed_tail = new Array(len);
    cljs.core.array_copy(self__.tail, 0, trimmed_tail, 0, len);
    return new cljs.core.PersistentVector(null, self__.cnt, self__.shift, self__.root, trimmed_tail, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n_BANG_(tcoll__$1, key, val);
  } else {
    throw new Error("TransientVector's key for assoc! must be a number.");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3 = function(tcoll, n, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (0 <= n && n < self__.cnt) {
      if (cljs.core.tail_off(tcoll__$1) <= n) {
        self__.tail[n & 31] = val;
        return tcoll__$1;
      } else {
        var new_root = function(tcoll__$1) {
          return function cljs$core$go(level, node) {
            var node__$1 = cljs.core.tv_ensure_editable(self__.root.edit, node);
            if (level === 0) {
              cljs.core.pv_aset(node__$1, n & 31, val);
              return node__$1;
            } else {
              var subidx = n >>> level & 31;
              cljs.core.pv_aset(node__$1, subidx, cljs$core$go(level - 5, cljs.core.pv_aget(node__$1, subidx)));
              return node__$1;
            }
          };
        }(tcoll__$1).call(null, self__.shift, self__.root);
        self__.root = new_root;
        return tcoll__$1;
      }
    } else {
      if (n === self__.cnt) {
        return cljs.core._conj_BANG_(tcoll__$1, val);
      } else {
        throw new Error([cljs.core.str("Index "), cljs.core.str(n), cljs.core.str(" out of bounds for TransientVector of length"), cljs.core.str(self__.cnt)].join(""));
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_pop_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt === 0) {
      throw new Error("Can't pop empty vector");
    } else {
      if (1 === self__.cnt) {
        self__.cnt = 0;
        return tcoll__$1;
      } else {
        if ((self__.cnt - 1 & 31) > 0) {
          self__.cnt = self__.cnt - 1;
          return tcoll__$1;
        } else {
          var new_tail = cljs.core.unchecked_editable_array_for(tcoll__$1, self__.cnt - 2);
          var new_root = function() {
            var nr = cljs.core.tv_pop_tail(tcoll__$1, self__.shift, self__.root);
            if (!(nr == null)) {
              return nr;
            } else {
              return new cljs.core.VectorNode(self__.root.edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
            }
          }();
          if (5 < self__.shift && cljs.core.pv_aget(new_root, 1) == null) {
            var new_root__$1 = cljs.core.tv_ensure_editable(self__.root.edit, cljs.core.pv_aget(new_root, 0));
            self__.root = new_root__$1;
            self__.shift = self__.shift - 5;
            self__.cnt = self__.cnt - 1;
            self__.tail = new_tail;
            return tcoll__$1;
          } else {
            self__.root = new_root;
            self__.cnt = self__.cnt - 1;
            self__.tail = new_tail;
            return tcoll__$1;
          }
        }
      }
    }
  } else {
    throw new Error("pop! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return self__.cnt;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return cljs.core.array_for(coll__$1, n)[n & 31];
  } else {
    throw new Error("nth after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, n);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.call = function() {
  var G__16948 = null;
  var G__16948__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__16948__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__16948 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__16948__2.call(this, self__, k);
      case 3:
        return G__16948__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__16948.cljs$core$IFn$_invoke$arity$2 = G__16948__2;
  G__16948.cljs$core$IFn$_invoke$arity$3 = G__16948__3;
  return G__16948;
}();
cljs.core.TransientVector.prototype.apply = function(self__, args16945) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args16945)));
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.TransientVector.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null), new cljs.core.Symbol(null, "shift", "shift", -1657295705, null), new cljs.core.Symbol(null, "root", "root", 1191874074, null), new cljs.core.Symbol(null, "tail", "tail", 494507963, null)], null);
};
cljs.core.TransientVector.cljs$lang$type = true;
cljs.core.TransientVector.cljs$lang$ctorStr = "cljs.core/TransientVector";
cljs.core.TransientVector.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/TransientVector");
};
cljs.core.__GT_TransientVector = function cljs$core$__GT_TransientVector(cnt, shift, root, tail) {
  return new cljs.core.TransientVector(cnt, shift, root, tail);
};
cljs.core.PersistentQueueSeq = function(meta, front, rear, __hash) {
  this.meta = meta;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31850572;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.PersistentQueueSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentQueueSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4725__auto__ = self__.__hash;
  if (!(h__4725__auto__ == null)) {
    return h__4725__auto__;
  } else {
    var h__4725__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4725__auto____$1;
    return h__4725__auto____$1;
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.front);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var temp__4420__auto__ = cljs.core.next(self__.front);
  if (temp__4420__auto__) {
    var f1 = temp__4420__auto__;
    return new cljs.core.PersistentQueueSeq(self__.meta, f1, self__.rear, null);
  } else {
    if (self__.rear == null) {
      return cljs.core._empty(coll__$1);
    } else {
      return new cljs.core.PersistentQueueSeq(self__.meta, self__.rear, null, null);
    }
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueueSeq(meta__$1, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.PersistentQueueSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "front", "front", 117022539, null), new cljs.core.Symbol(null, "rear", "rear", -900164830, null), new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null)], null);
};
cljs.core.PersistentQueueSeq.cljs$lang$type = true;
cljs.core.PersistentQueueSeq.cljs$lang$ctorStr = "cljs.core/PersistentQueueSeq";
cljs.core.PersistentQueueSeq.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/PersistentQueueSeq");
};
cljs.core.__GT_PersistentQueueSeq = function cljs$core$__GT_PersistentQueueSeq(meta, front, rear, __hash) {
  return new cljs.core.PersistentQueueSeq(meta, front, rear, __hash);
};
cljs.core.PersistentQueueSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5285__auto__ = this;
  return cljs.core.es6_iterator(this__5285__auto__);
};
cljs.core.PersistentQueue = function(meta, count, front, rear, __hash) {
  this.meta = meta;
  this.count = count;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31858766;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentQueue.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentQueue.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueue.prototype.cljs$core$ICloneable$_clone$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(self__.meta, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    var temp__4420__auto__ = cljs.core.next(self__.front);
    if (temp__4420__auto__) {
      var f1 = temp__4420__auto__;
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, f1, self__.rear, null);
    } else {
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, cljs.core.seq(self__.rear), cljs.core.PersistentVector.EMPTY, null);
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4725__auto__ = self__.__hash;
  if (!(h__4725__auto__ == null)) {
    return h__4725__auto__;
  } else {
    var h__4725__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4725__auto____$1;
    return h__4725__auto____$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentQueue.EMPTY, self__.meta);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.rest(cljs.core.seq(coll__$1));
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var rear__$1 = cljs.core.seq(self__.rear);
  if (cljs.core.truth_(function() {
    var or__4309__auto__ = self__.front;
    if (cljs.core.truth_(or__4309__auto__)) {
      return or__4309__auto__;
    } else {
      return rear__$1;
    }
  }())) {
    return new cljs.core.PersistentQueueSeq(null, self__.front, cljs.core.seq(rear__$1), null);
  } else {
    return null;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(meta__$1, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, self__.front, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(function() {
      var or__4309__auto__ = self__.rear;
      if (cljs.core.truth_(or__4309__auto__)) {
        return or__4309__auto__;
      } else {
        return cljs.core.PersistentVector.EMPTY;
      }
    }(), o), null);
  } else {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(self__.front, o), cljs.core.PersistentVector.EMPTY, null);
  }
};
cljs.core.PersistentQueue.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "count", "count", -514511684, null), new cljs.core.Symbol(null, "front", "front", 117022539, null), new cljs.core.Symbol(null, "rear", "rear", -900164830, null), new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null)], null);
};
cljs.core.PersistentQueue.cljs$lang$type = true;
cljs.core.PersistentQueue.cljs$lang$ctorStr = "cljs.core/PersistentQueue";
cljs.core.PersistentQueue.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/PersistentQueue");
};
cljs.core.__GT_PersistentQueue = function cljs$core$__GT_PersistentQueue(meta, count, front, rear, __hash) {
  return new cljs.core.PersistentQueue(meta, count, front, rear, __hash);
};
cljs.core.PersistentQueue.EMPTY = new cljs.core.PersistentQueue(null, 0, null, cljs.core.PersistentVector.EMPTY, cljs.core.empty_ordered_hash);
cljs.core.PersistentQueue.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5285__auto__ = this;
  return cljs.core.es6_iterator(this__5285__auto__);
};
cljs.core.NeverEquiv = function() {
  this.cljs$lang$protocol_mask$partition0$ = 2097152;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.NeverEquiv.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.NeverEquiv.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return false;
};
cljs.core.NeverEquiv.getBasis = function() {
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.NeverEquiv.cljs$lang$type = true;
cljs.core.NeverEquiv.cljs$lang$ctorStr = "cljs.core/NeverEquiv";
cljs.core.NeverEquiv.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/NeverEquiv");
};
cljs.core.__GT_NeverEquiv = function cljs$core$__GT_NeverEquiv() {
  return new cljs.core.NeverEquiv;
};
cljs.core.never_equiv = new cljs.core.NeverEquiv;
cljs.core.equiv_map = function cljs$core$equiv_map(x, y) {
  return cljs.core.boolean$(cljs.core.map_QMARK_(y) ? cljs.core.count(x) === cljs.core.count(y) ? cljs.core.every_QMARK_(cljs.core.identity, cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(xkv) {
    return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(y, cljs.core.first(xkv), cljs.core.never_equiv), cljs.core.second(xkv));
  }, x)) : null : null);
};
cljs.core.scan_array = function cljs$core$scan_array(incr, k, array) {
  var len = array.length;
  var i = 0;
  while (true) {
    if (i < len) {
      if (k === array[i]) {
        return i;
      } else {
        var G__16949 = i + incr;
        i = G__16949;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.obj_map_compare_keys = function cljs$core$obj_map_compare_keys(a, b) {
  var a__$1 = cljs.core.hash(a);
  var b__$1 = cljs.core.hash(b);
  if (a__$1 < b__$1) {
    return -1;
  } else {
    if (a__$1 > b__$1) {
      return 1;
    } else {
      return 0;
    }
  }
};
cljs.core.obj_map__GT_hash_map = function cljs$core$obj_map__GT_hash_map(m, k, v) {
  var ks = m.keys;
  var len = ks.length;
  var so = m.strobj;
  var mm = cljs.core.meta(m);
  var i = 0;
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var k__$1 = ks[i];
      var G__16950 = i + 1;
      var G__16951 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, k__$1, so[k__$1]);
      i = G__16950;
      out = G__16951;
      continue;
    } else {
      return cljs.core.with_meta(cljs.core.persistent_BANG_(cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, k, v)), mm);
    }
    break;
  }
};
cljs.core.obj_clone = function cljs$core$obj_clone(obj, ks) {
  var new_obj = function() {
    var obj16955 = {};
    return obj16955;
  }();
  var l = ks.length;
  var i_16956 = 0;
  while (true) {
    if (i_16956 < l) {
      var k_16957 = ks[i_16956];
      new_obj[k_16957] = obj[k_16957];
      var G__16958 = i_16956 + 1;
      i_16956 = G__16958;
      continue;
    } else {
    }
    break;
  }
  return new_obj;
};
cljs.core.ObjMap = function(meta, keys, strobj, update_count, __hash) {
  this.meta = meta;
  this.keys = keys;
  this.strobj = strobj;
  this.update_count = update_count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
  this.cljs$lang$protocol_mask$partition1$ = 4;
};
cljs.core.ObjMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ObjMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(function() {
    var and__4297__auto__ = function() {
      var G__16962 = k;
      return goog.isString(G__16962);
    }();
    if (cljs.core.truth_(and__4297__auto__)) {
      return !(cljs.core.scan_array(1, k, self__.keys) == null);
    } else {
      return and__4297__auto__;
    }
  }())) {
    return self__.strobj[k];
  } else {
    return not_found;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.keys.length;
  var keys__$1 = self__.keys.sort(cljs.core.obj_map_compare_keys);
  var init__$1 = init;
  while (true) {
    if (cljs.core.seq(keys__$1)) {
      var k = cljs.core.first(keys__$1);
      var init__$2 = function() {
        var G__16963 = init__$1;
        var G__16964 = k;
        var G__16965 = self__.strobj[k];
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__16963, G__16964, G__16965) : f.call(null, G__16963, G__16964, G__16965);
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__16966 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__16966) : cljs.core.deref.call(null, G__16966);
      } else {
        var G__16972 = cljs.core.rest(keys__$1);
        var G__16973 = init__$2;
        keys__$1 = G__16972;
        init__$1 = G__16973;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ObjMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.keys.length;
};
cljs.core.ObjMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4725__auto__ = self__.__hash;
  if (!(h__4725__auto__ == null)) {
    return h__4725__auto__;
  } else {
    var h__4725__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4725__auto____$1;
    return h__4725__auto____$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map(coll__$1, other);
};
cljs.core.ObjMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.transient$(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentHashMap.EMPTY, coll__$1));
};
cljs.core.ObjMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.ObjMap.EMPTY, self__.meta);
};
cljs.core.ObjMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(function() {
    var and__4297__auto__ = function() {
      var G__16968 = k;
      return goog.isString(G__16968);
    }();
    if (cljs.core.truth_(and__4297__auto__)) {
      return !(cljs.core.scan_array(1, k, self__.keys) == null);
    } else {
      return and__4297__auto__;
    }
  }())) {
    var new_keys = cljs.core.aclone(self__.keys);
    var new_strobj = cljs.core.obj_clone(self__.strobj, self__.keys);
    new_keys.splice(cljs.core.scan_array(1, k, new_keys), 1);
    delete new_strobj[k];
    return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
  } else {
    return coll__$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(function() {
    var G__16969 = k;
    return goog.isString(G__16969);
  }())) {
    if (self__.update_count > cljs.core.ObjMap.HASHMAP_THRESHOLD || self__.keys.length >= cljs.core.ObjMap.HASHMAP_THRESHOLD) {
      return cljs.core.obj_map__GT_hash_map(coll__$1, k, v);
    } else {
      if (!(cljs.core.scan_array(1, k, self__.keys) == null)) {
        var new_strobj = cljs.core.obj_clone(self__.strobj, self__.keys);
        new_strobj[k] = v;
        return new cljs.core.ObjMap(self__.meta, self__.keys, new_strobj, self__.update_count + 1, null);
      } else {
        var new_strobj = cljs.core.obj_clone(self__.strobj, self__.keys);
        var new_keys = cljs.core.aclone(self__.keys);
        new_strobj[k] = v;
        new_keys.push(k);
        return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
      }
    }
  } else {
    return cljs.core.obj_map__GT_hash_map(coll__$1, k, v);
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(function() {
    var and__4297__auto__ = function() {
      var G__16971 = k;
      return goog.isString(G__16971);
    }();
    if (cljs.core.truth_(and__4297__auto__)) {
      return !(cljs.core.scan_array(1, k, self__.keys) == null);
    } else {
      return and__4297__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.keys.length > 0) {
    return cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(coll__$1) {
      return function(p1__16959_SHARP_) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__16959_SHARP_, self__.strobj[p1__16959_SHARP_]], null);
      };
    }(coll__$1), self__.keys.sort(cljs.core.obj_map_compare_keys));
  } else {
    return null;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ObjMap(meta__$1, self__.keys, self__.strobj, self__.update_count, self__.__hash);
};
cljs.core.ObjMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.ObjMap.prototype.call = function() {
  var G__16974 = null;
  var G__16974__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__16974__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__16974 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__16974__2.call(this, self__, k);
      case 3:
        return G__16974__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__16974.cljs$core$IFn$_invoke$arity$2 = G__16974__2;
  G__16974.cljs$core$IFn$_invoke$arity$3 = G__16974__3;
  return G__16974;
}();
cljs.core.ObjMap.prototype.apply = function(self__, args16960) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args16960)));
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.ObjMap.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "keys", "keys", -1586012071, null), new cljs.core.Symbol(null, "strobj", "strobj", 1088091283, null), new cljs.core.Symbol(null, "update-count", "update-count", -411982269, null), new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null)], null);
};
cljs.core.ObjMap.cljs$lang$type = true;
cljs.core.ObjMap.cljs$lang$ctorStr = "cljs.core/ObjMap";
cljs.core.ObjMap.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/ObjMap");
};
cljs.core.__GT_ObjMap = function cljs$core$__GT_ObjMap(meta, keys, strobj, update_count, __hash) {
  return new cljs.core.ObjMap(meta, keys, strobj, update_count, __hash);
};
cljs.core.ObjMap.EMPTY = new cljs.core.ObjMap(null, [], function() {
  var obj16976 = {};
  return obj16976;
}(), 0, cljs.core.empty_unordered_hash);
cljs.core.ObjMap.HASHMAP_THRESHOLD = 8;
cljs.core.ObjMap.fromObject = function(ks, obj) {
  return new cljs.core.ObjMap(null, ks, obj, 0, null);
};
cljs.core.ES6EntriesIterator = function(s) {
  this.s = s;
};
cljs.core.ES6EntriesIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var vec__16977 = cljs.core.first(self__.s);
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16977, 0, null);
    var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16977, 1, null);
    self__.s = cljs.core.next(self__.s);
    return {"value":[k, v], "done":false};
  } else {
    return {"value":null, "done":true};
  }
};
cljs.core.ES6EntriesIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "s", "s", -948495851, null)], null);
};
cljs.core.ES6EntriesIterator.cljs$lang$type = true;
cljs.core.ES6EntriesIterator.cljs$lang$ctorStr = "cljs.core/ES6EntriesIterator";
cljs.core.ES6EntriesIterator.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/ES6EntriesIterator");
};
cljs.core.__GT_ES6EntriesIterator = function cljs$core$__GT_ES6EntriesIterator(s) {
  return new cljs.core.ES6EntriesIterator(s);
};
cljs.core.es6_entries_iterator = function cljs$core$es6_entries_iterator(coll) {
  return new cljs.core.ES6EntriesIterator(cljs.core.seq(coll));
};
cljs.core.ES6SetEntriesIterator = function(s) {
  this.s = s;
};
cljs.core.ES6SetEntriesIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var x = cljs.core.first(self__.s);
    self__.s = cljs.core.next(self__.s);
    return {"value":[x, x], "done":false};
  } else {
    return {"value":null, "done":true};
  }
};
cljs.core.ES6SetEntriesIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "s", "s", -948495851, null)], null);
};
cljs.core.ES6SetEntriesIterator.cljs$lang$type = true;
cljs.core.ES6SetEntriesIterator.cljs$lang$ctorStr = "cljs.core/ES6SetEntriesIterator";
cljs.core.ES6SetEntriesIterator.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/ES6SetEntriesIterator");
};
cljs.core.__GT_ES6SetEntriesIterator = function cljs$core$__GT_ES6SetEntriesIterator(s) {
  return new cljs.core.ES6SetEntriesIterator(s);
};
cljs.core.es6_set_entries_iterator = function cljs$core$es6_set_entries_iterator(coll) {
  return new cljs.core.ES6SetEntriesIterator(cljs.core.seq(coll));
};
cljs.core.array_index_of_nil_QMARK_ = function cljs$core$array_index_of_nil_QMARK_(arr) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return -1;
    } else {
      if (arr[i] == null) {
        return i;
      } else {
        var G__16978 = i + 2;
        i = G__16978;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_index_of_keyword_QMARK_ = function cljs$core$array_index_of_keyword_QMARK_(arr, k) {
  var len = arr.length;
  var kstr = k.fqn;
  var i = 0;
  while (true) {
    if (len <= i) {
      return -1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Keyword && kstr === k_SINGLEQUOTE_.fqn;
      }()) {
        return i;
      } else {
        var G__16979 = i + 2;
        i = G__16979;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_index_of_symbol_QMARK_ = function cljs$core$array_index_of_symbol_QMARK_(arr, k) {
  var len = arr.length;
  var kstr = k.str;
  var i = 0;
  while (true) {
    if (len <= i) {
      return -1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Symbol && kstr === k_SINGLEQUOTE_.str;
      }()) {
        return i;
      } else {
        var G__16980 = i + 2;
        i = G__16980;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_index_of_identical_QMARK_ = function cljs$core$array_index_of_identical_QMARK_(arr, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return -1;
    } else {
      if (k === arr[i]) {
        return i;
      } else {
        var G__16981 = i + 2;
        i = G__16981;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_index_of_equiv_QMARK_ = function cljs$core$array_index_of_equiv_QMARK_(arr, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return -1;
    } else {
      if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(k, arr[i])) {
        return i;
      } else {
        var G__16982 = i + 2;
        i = G__16982;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_index_of = function cljs$core$array_index_of(arr, k) {
  if (k instanceof cljs.core.Keyword) {
    return cljs.core.array_index_of_keyword_QMARK_(arr, k);
  } else {
    if (cljs.core.truth_(function() {
      var or__4309__auto__ = function() {
        var G__16986 = k;
        return goog.isString(G__16986);
      }();
      if (cljs.core.truth_(or__4309__auto__)) {
        return or__4309__auto__;
      } else {
        return typeof k === "number";
      }
    }())) {
      return cljs.core.array_index_of_identical_QMARK_(arr, k);
    } else {
      if (k instanceof cljs.core.Symbol) {
        return cljs.core.array_index_of_symbol_QMARK_(arr, k);
      } else {
        if (k == null) {
          return cljs.core.array_index_of_nil_QMARK_(arr);
        } else {
          return cljs.core.array_index_of_equiv_QMARK_(arr, k);
        }
      }
    }
  }
};
cljs.core.array_map_index_of = function cljs$core$array_map_index_of(m, k) {
  return cljs.core.array_index_of(m.arr, k);
};
cljs.core.array_extend_kv = function cljs$core$array_extend_kv(arr, k, v) {
  var l = arr.length;
  var narr = new Array(l + 2);
  var i_16987 = 0;
  while (true) {
    if (i_16987 < l) {
      narr[i_16987] = arr[i_16987];
      var G__16988 = i_16987 + 1;
      i_16987 = G__16988;
      continue;
    } else {
    }
    break;
  }
  narr[l] = k;
  narr[l + 1] = v;
  return narr;
};
cljs.core.array_map_extend_kv = function cljs$core$array_map_extend_kv(m, k, v) {
  return cljs.core.array_extend_kv(m.arr, k, v);
};
cljs.core.PersistentArrayMapSeq = function(arr, i, _meta) {
  this.arr = arr;
  this.i = i;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.PersistentArrayMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentArrayMapSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return (self__.arr.length - self__.i) / 2;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__._meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i, new_meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.PersistentArrayMapSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.Symbol(null, "_meta", "_meta", -1716892533, null)], null);
};
cljs.core.PersistentArrayMapSeq.cljs$lang$type = true;
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapSeq";
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/PersistentArrayMapSeq");
};
cljs.core.__GT_PersistentArrayMapSeq = function cljs$core$__GT_PersistentArrayMapSeq(arr, i, _meta) {
  return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
};
cljs.core.PersistentArrayMapSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5285__auto__ = this;
  return cljs.core.es6_iterator(this__5285__auto__);
};
cljs.core.persistent_array_map_seq = function cljs$core$persistent_array_map_seq(arr, i, _meta) {
  if (i <= arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapIterator = function(arr, i, cnt) {
  this.arr = arr;
  this.i = i;
  this.cnt = cnt;
};
cljs.core.PersistentArrayMapIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.cnt;
};
cljs.core.PersistentArrayMapIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
  self__.i = self__.i + 2;
  return ret;
};
cljs.core.PersistentArrayMapIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null)], null);
};
cljs.core.PersistentArrayMapIterator.cljs$lang$type = true;
cljs.core.PersistentArrayMapIterator.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapIterator";
cljs.core.PersistentArrayMapIterator.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/PersistentArrayMapIterator");
};
cljs.core.__GT_PersistentArrayMapIterator = function cljs$core$__GT_PersistentArrayMapIterator(arr, i, cnt) {
  return new cljs.core.PersistentArrayMapIterator(arr, i, cnt);
};
cljs.core.PersistentArrayMap = function(meta, cnt, arr, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.arr = arr;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16647951;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentArrayMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentArrayMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentArrayMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__16990 = coll;
    return cljs.core.keys.cljs$core$IFn$_invoke$arity$1 ? cljs.core.keys.cljs$core$IFn$_invoke$arity$1(G__16990) : cljs.core.keys.call(null, G__16990);
  }());
};
cljs.core.PersistentArrayMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentArrayMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__16991 = coll;
    return cljs.core.vals.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vals.cljs$core$IFn$_invoke$arity$1(G__16991) : cljs.core.vals.call(null, G__16991);
  }());
};
cljs.core.PersistentArrayMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentArrayMap.prototype.get = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentArrayMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__16992 = cljs.core.seq(coll);
  var chunk__16993 = null;
  var count__16994 = 0;
  var i__16995 = 0;
  while (true) {
    if (i__16995 < count__16994) {
      var vec__16996 = chunk__16993.cljs$core$IIndexed$_nth$arity$2(null, i__16995);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16996, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16996, 1, null);
      var G__16997_17010 = v;
      var G__16998_17011 = k;
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__16997_17010, G__16998_17011) : f.call(null, G__16997_17010, G__16998_17011);
      var G__17012 = seq__16992;
      var G__17013 = chunk__16993;
      var G__17014 = count__16994;
      var G__17015 = i__16995 + 1;
      seq__16992 = G__17012;
      chunk__16993 = G__17013;
      count__16994 = G__17014;
      i__16995 = G__17015;
      continue;
    } else {
      var temp__4422__auto__ = cljs.core.seq(seq__16992);
      if (temp__4422__auto__) {
        var seq__16992__$1 = temp__4422__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__16992__$1)) {
          var c__5094__auto__ = cljs.core.chunk_first(seq__16992__$1);
          var G__17016 = cljs.core.chunk_rest(seq__16992__$1);
          var G__17017 = c__5094__auto__;
          var G__17018 = cljs.core.count(c__5094__auto__);
          var G__17019 = 0;
          seq__16992 = G__17016;
          chunk__16993 = G__17017;
          count__16994 = G__17018;
          i__16995 = G__17019;
          continue;
        } else {
          var vec__16999 = cljs.core.first(seq__16992__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16999, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16999, 1, null);
          var G__17000_17020 = v;
          var G__17001_17021 = k;
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__17000_17020, G__17001_17021) : f.call(null, G__17000_17020, G__17001_17021);
          var G__17022 = cljs.core.next(seq__16992__$1);
          var G__17023 = null;
          var G__17024 = 0;
          var G__17025 = 0;
          seq__16992 = G__17022;
          chunk__16993 = G__17023;
          count__16994 = G__17024;
          i__16995 = G__17025;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of(coll__$1, k);
  if (idx === -1) {
    return not_found;
  } else {
    return self__.arr[idx + 1];
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = function() {
        var G__17002 = init__$1;
        var G__17003 = self__.arr[i];
        var G__17004 = self__.arr[i + 1];
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__17002, G__17003, G__17004) : f.call(null, G__17002, G__17003, G__17004);
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__17005 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__17005) : cljs.core.deref.call(null, G__17005);
      } else {
        var G__17026 = i + 2;
        var G__17027 = init__$2;
        i = G__17026;
        init__$1 = G__17027;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IIterable$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IIterable$_iterator$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return new cljs.core.PersistentArrayMapIterator(self__.arr, 0, self__.cnt * 2);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4725__auto__ = self__.__hash;
  if (!(h__4725__auto__ == null)) {
    return h__4725__auto__;
  } else {
    var h__4725__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4725__auto____$1;
    return h__4725__auto____$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  if (function() {
    var G__17006 = other;
    if (G__17006) {
      var bit__4976__auto__ = G__17006.cljs$lang$protocol_mask$partition0$ & 1024;
      if (bit__4976__auto__ || G__17006.cljs$core$IMap$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    var alen = self__.arr.length;
    var other__$1 = other;
    if (self__.cnt === other__$1.cljs$core$ICounted$_count$arity$1(null)) {
      var i = 0;
      while (true) {
        if (i < alen) {
          var v = other__$1.cljs$core$ILookup$_lookup$arity$3(null, self__.arr[i], cljs.core.lookup_sentinel);
          if (!(v === cljs.core.lookup_sentinel)) {
            if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.arr[i + 1], v)) {
              var G__17028 = i + 2;
              i = G__17028;
              continue;
            } else {
              return false;
            }
          } else {
            return false;
          }
        } else {
          return true;
        }
        break;
      }
    } else {
      return false;
    }
  } else {
    return cljs.core.equiv_map(coll__$1, other);
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientArrayMap(function() {
    var obj17008 = {};
    return obj17008;
  }(), self__.arr.length, cljs.core.aclone(self__.arr));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta(cljs.core.PersistentArrayMap.EMPTY, self__.meta);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of(coll__$1, k);
  if (idx >= 0) {
    var len = self__.arr.length;
    var new_len = len - 2;
    if (new_len === 0) {
      return cljs.core._empty(coll__$1);
    } else {
      var new_arr = new Array(new_len);
      var s = 0;
      var d = 0;
      while (true) {
        if (s >= len) {
          return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt - 1, new_arr, null);
        } else {
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(k, self__.arr[s])) {
            var G__17029 = s + 2;
            var G__17030 = d;
            s = G__17029;
            d = G__17030;
            continue;
          } else {
            new_arr[d] = self__.arr[s];
            new_arr[d + 1] = self__.arr[s + 1];
            var G__17031 = s + 2;
            var G__17032 = d + 2;
            s = G__17031;
            d = G__17032;
            continue;
          }
        }
        break;
      }
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of(coll__$1, k);
  if (idx === -1) {
    if (self__.cnt < cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
      var arr__$1 = cljs.core.array_map_extend_kv(coll__$1, k, v);
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt + 1, arr__$1, null);
    } else {
      return cljs.core._with_meta(cljs.core._assoc(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentHashMap.EMPTY, coll__$1), k, v), self__.meta);
    }
  } else {
    if (v === self__.arr[idx + 1]) {
      return coll__$1;
    } else {
      var arr__$1 = function() {
        var G__17009 = cljs.core.aclone(self__.arr);
        G__17009[idx + 1] = v;
        return G__17009;
      }();
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, arr__$1, null);
    }
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return !(cljs.core.array_map_index_of(coll__$1, k) === -1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.persistent_array_map_seq(self__.arr, 0, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMap(meta__$1, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq(entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first(es);
        if (cljs.core.vector_QMARK_(e)) {
          var G__17033 = cljs.core._assoc(ret, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 1));
          var G__17034 = cljs.core.next(es);
          ret = G__17033;
          es = G__17034;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentArrayMap.prototype.call = function() {
  var G__17035 = null;
  var G__17035__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__17035__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__17035 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__17035__2.call(this, self__, k);
      case 3:
        return G__17035__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__17035.cljs$core$IFn$_invoke$arity$2 = G__17035__2;
  G__17035.cljs$core$IFn$_invoke$arity$3 = G__17035__3;
  return G__17035;
}();
cljs.core.PersistentArrayMap.prototype.apply = function(self__, args16989) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args16989)));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentArrayMap.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null), new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null)], null);
};
cljs.core.PersistentArrayMap.cljs$lang$type = true;
cljs.core.PersistentArrayMap.cljs$lang$ctorStr = "cljs.core/PersistentArrayMap";
cljs.core.PersistentArrayMap.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/PersistentArrayMap");
};
cljs.core.__GT_PersistentArrayMap = function cljs$core$__GT_PersistentArrayMap(meta, cnt, arr, __hash) {
  return new cljs.core.PersistentArrayMap(meta, cnt, arr, __hash);
};
cljs.core.PersistentArrayMap.EMPTY = new cljs.core.PersistentArrayMap(null, 0, [], cljs.core.empty_unordered_hash);
cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD = 8;
cljs.core.PersistentArrayMap.fromArray = function(arr, no_clone, no_check) {
  var arr__$1 = no_clone ? arr : cljs.core.aclone(arr);
  var arr__$2 = no_check ? arr__$1 : function() {
    var ret = [];
    var i_17036 = 0;
    while (true) {
      if (i_17036 < arr__$1.length) {
        var k_17037 = arr__$1[i_17036];
        var v_17038 = arr__$1[i_17036 + 1];
        var idx_17039 = cljs.core.array_index_of(ret, k_17037);
        if (idx_17039 === -1) {
          ret.push(k_17037);
          ret.push(v_17038);
        } else {
        }
        var G__17040 = i_17036 + 2;
        i_17036 = G__17040;
        continue;
      } else {
      }
      break;
    }
    return ret;
  }();
  var arr__$3 = function() {
    var cnt = arr__$2.length / 2;
    return new cljs.core.PersistentArrayMap(null, cnt, arr__$2, null);
  }();
  return arr__$3;
};
cljs.core.PersistentArrayMap.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5285__auto__ = this;
  return cljs.core.es6_iterator(this__5285__auto__);
};
cljs.core.TransientArrayMap = function(editable_QMARK_, len, arr) {
  this.editable_QMARK_ = editable_QMARK_;
  this.len = len;
  this.arr = arr;
  this.cljs$lang$protocol_mask$partition0$ = 258;
  this.cljs$lang$protocol_mask$partition1$ = 56;
};
cljs.core.TransientArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    return cljs.core.quot(self__.len, 2);
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(tcoll__$1, k, null);
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of(tcoll__$1, k);
    if (idx === -1) {
      return not_found;
    } else {
      return self__.arr[idx + 1];
    }
  } else {
    throw new Error("lookup after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    if (function() {
      var G__17041 = o;
      if (G__17041) {
        var bit__4983__auto__ = G__17041.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__4983__auto__ || G__17041.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__17041.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, G__17041);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, G__17041);
      }
    }()) {
      return cljs.core._assoc_BANG_(tcoll__$1, function() {
        var G__17042 = o;
        return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__17042) : cljs.core.key.call(null, G__17042);
      }(), function() {
        var G__17043 = o;
        return cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(G__17043) : cljs.core.val.call(null, G__17043);
      }());
    } else {
      var es = cljs.core.seq(o);
      var tcoll__$2 = tcoll__$1;
      while (true) {
        var temp__4420__auto__ = cljs.core.first(es);
        if (cljs.core.truth_(temp__4420__auto__)) {
          var e = temp__4420__auto__;
          var G__17049 = cljs.core.next(es);
          var G__17050 = cljs.core._assoc_BANG_(tcoll__$2, function() {
            var G__17044 = e;
            return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__17044) : cljs.core.key.call(null, G__17044);
          }(), function() {
            var G__17045 = e;
            return cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(G__17045) : cljs.core.val.call(null, G__17045);
          }());
          es = G__17049;
          tcoll__$2 = G__17050;
          continue;
        } else {
          return tcoll__$2;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    self__.editable_QMARK_ = false;
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot(self__.len, 2), self__.arr, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of(tcoll__$1, key);
    if (idx === -1) {
      if (self__.len + 2 <= 2 * cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
        self__.len = self__.len + 2;
        self__.arr.push(key);
        self__.arr.push(val);
        return tcoll__$1;
      } else {
        return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(function() {
          var G__17046 = self__.len;
          var G__17047 = self__.arr;
          return cljs.core.array__GT_transient_hash_map.cljs$core$IFn$_invoke$arity$2 ? cljs.core.array__GT_transient_hash_map.cljs$core$IFn$_invoke$arity$2(G__17046, G__17047) : cljs.core.array__GT_transient_hash_map.call(null, G__17046, G__17047);
        }(), key, val);
      }
    } else {
      if (val === self__.arr[idx + 1]) {
        return tcoll__$1;
      } else {
        self__.arr[idx + 1] = val;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of(tcoll__$1, key);
    if (idx >= 0) {
      self__.arr[idx] = self__.arr[self__.len - 2];
      self__.arr[idx + 1] = self__.arr[self__.len - 1];
      var G__17048_17051 = self__.arr;
      G__17048_17051.pop();
      G__17048_17051.pop();
      self__.len = self__.len - 2;
    } else {
    }
    return tcoll__$1;
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "editable?", "editable?", -164945806, null), new cljs.core.Symbol(null, "len", "len", -1230778691, null), new cljs.core.Symbol(null, "arr", "arr", 2115492975, null)], null);
};
cljs.core.TransientArrayMap.cljs$lang$type = true;
cljs.core.TransientArrayMap.cljs$lang$ctorStr = "cljs.core/TransientArrayMap";
cljs.core.TransientArrayMap.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/TransientArrayMap");
};
cljs.core.__GT_TransientArrayMap = function cljs$core$__GT_TransientArrayMap(editable_QMARK_, len, arr) {
  return new cljs.core.TransientArrayMap(editable_QMARK_, len, arr);
};
cljs.core.array__GT_transient_hash_map = function cljs$core$array__GT_transient_hash_map(len, arr) {
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  var i = 0;
  while (true) {
    if (i < len) {
      var G__17052 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, arr[i], arr[i + 1]);
      var G__17053 = i + 2;
      out = G__17052;
      i = G__17053;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.Box = function(val) {
  this.val = val;
};
cljs.core.Box.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "val", "val", 1769233139, null)], null);
};
cljs.core.Box.cljs$lang$type = true;
cljs.core.Box.cljs$lang$ctorStr = "cljs.core/Box";
cljs.core.Box.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/Box");
};
cljs.core.__GT_Box = function cljs$core$__GT_Box(val) {
  return new cljs.core.Box(val);
};
cljs.core.key_test = function cljs$core$key_test(key, other) {
  if (key === other) {
    return true;
  } else {
    if (cljs.core.keyword_identical_QMARK_(key, other)) {
      return true;
    } else {
      return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(key, other);
    }
  }
};
cljs.core.mask = function cljs$core$mask(hash, shift) {
  return hash >>> shift & 31;
};
cljs.core.clone_and_set = function cljs$core$clone_and_set() {
  var G__17055 = arguments.length;
  switch(G__17055) {
    case 3:
      return cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 5:
      return cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3 = function(arr, i, a) {
  var G__17056 = cljs.core.aclone(arr);
  G__17056[i] = a;
  return G__17056;
};
cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$5 = function(arr, i, a, j, b) {
  var G__17057 = cljs.core.aclone(arr);
  G__17057[i] = a;
  G__17057[j] = b;
  return G__17057;
};
cljs.core.clone_and_set.cljs$lang$maxFixedArity = 5;
cljs.core.remove_pair = function cljs$core$remove_pair(arr, i) {
  var new_arr = new Array(arr.length - 2);
  cljs.core.array_copy(arr, 0, new_arr, 0, 2 * i);
  cljs.core.array_copy(arr, 2 * (i + 1), new_arr, 2 * i, new_arr.length - 2 * i);
  return new_arr;
};
cljs.core.bitmap_indexed_node_index = function cljs$core$bitmap_indexed_node_index(bitmap, bit) {
  return cljs.core.bit_count(bitmap & bit - 1);
};
cljs.core.bitpos = function cljs$core$bitpos(hash, shift) {
  return 1 << (hash >>> shift & 31);
};
cljs.core.edit_and_set = function cljs$core$edit_and_set() {
  var G__17060 = arguments.length;
  switch(G__17060) {
    case 4:
      return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 6:
      return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4 = function(inode, edit, i, a) {
  var editable = inode.ensure_editable(edit);
  editable.arr[i] = a;
  return editable;
};
cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6 = function(inode, edit, i, a, j, b) {
  var editable = inode.ensure_editable(edit);
  editable.arr[i] = a;
  editable.arr[j] = b;
  return editable;
};
cljs.core.edit_and_set.cljs$lang$maxFixedArity = 6;
cljs.core.inode_kv_reduce = function cljs$core$inode_kv_reduce(arr, f, init) {
  var len = arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = function() {
        var k = arr[i];
        if (!(k == null)) {
          var G__17066 = init__$1;
          var G__17067 = k;
          var G__17068 = arr[i + 1];
          return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__17066, G__17067, G__17068) : f.call(null, G__17066, G__17067, G__17068);
        } else {
          var node = arr[i + 1];
          if (!(node == null)) {
            return node.kv_reduce(f, init__$1);
          } else {
            return init__$1;
          }
        }
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__17069 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__17069) : cljs.core.deref.call(null, G__17069);
      } else {
        var G__17070 = i + 2;
        var G__17071 = init__$2;
        i = G__17070;
        init__$1 = G__17071;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.BitmapIndexedNode = function(edit, bitmap, arr) {
  this.edit = edit;
  this.bitmap = bitmap;
  this.arr = arr;
};
cljs.core.BitmapIndexedNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var n = cljs.core.bit_count(self__.bitmap);
    var new_arr = new Array(n < 0 ? 4 : 2 * (n + 1));
    cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * n);
    return new cljs.core.BitmapIndexedNode(e, self__.bitmap, new_arr);
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, 2 * idx + 1, n);
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            return inode.edit_and_remove_pair(edit__$1, bit, idx);
          }
        }
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        removed_leaf_QMARK_[0] = true;
        return inode.edit_and_remove_pair(edit__$1, bit, idx);
      } else {
        return inode;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.edit_and_remove_pair = function(e, bit, i) {
  var self__ = this;
  var inode = this;
  if (self__.bitmap === bit) {
    return null;
  } else {
    var editable = inode.ensure_editable(e);
    var earr = editable.arr;
    var len = earr.length;
    editable.bitmap = bit ^ editable.bitmap;
    cljs.core.array_copy(earr, 2 * (i + 1), earr, 2 * i, len - 2 * (i + 1));
    earr[len - 2] = null;
    earr[len - 1] = null;
    return editable;
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  var G__17072 = self__.arr;
  return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1(G__17072) : cljs.core.create_inode_seq.call(null, G__17072);
};
cljs.core.BitmapIndexedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce(self__.arr, f, init);
};
cljs.core.BitmapIndexedNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_lookup(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        return val_or_node;
      } else {
        return not_found;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count(self__.bitmap);
    if (2 * n < self__.arr.length) {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      added_leaf_QMARK_.val = true;
      cljs.core.array_copy_downward(earr, 2 * idx, earr, 2 * (idx + 1), 2 * (n - idx));
      earr[2 * idx] = key;
      earr[2 * idx + 1] = val;
      editable.bitmap = editable.bitmap | bit;
      return editable;
    } else {
      if (n >= 16) {
        var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var jdx = hash >>> shift & 31;
        nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
        var i_17086 = 0;
        var j_17087 = 0;
        while (true) {
          if (i_17086 < 32) {
            if ((self__.bitmap >>> i_17086 & 1) === 0) {
              var G__17088 = i_17086 + 1;
              var G__17089 = j_17087;
              i_17086 = G__17088;
              j_17087 = G__17089;
              continue;
            } else {
              nodes[i_17086] = !(self__.arr[j_17087] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, cljs.core.hash(self__.arr[j_17087]), self__.arr[j_17087], self__.arr[j_17087 + 1], added_leaf_QMARK_) : self__.arr[j_17087 + 1];
              var G__17090 = i_17086 + 1;
              var G__17091 = j_17087 + 2;
              i_17086 = G__17090;
              j_17087 = G__17091;
              continue;
            }
          } else {
          }
          break;
        }
        return new cljs.core.ArrayNode(edit__$1, n + 1, nodes);
      } else {
        var new_arr = new Array(2 * (n + 4));
        cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * idx);
        new_arr[2 * idx] = key;
        new_arr[2 * idx + 1] = val;
        cljs.core.array_copy(self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
        added_leaf_QMARK_.val = true;
        var editable = inode.ensure_editable(edit__$1);
        editable.arr = new_arr;
        editable.bitmap = editable.bitmap | bit;
        return editable;
      }
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, 2 * idx + 1, n);
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, 2 * idx + 1, val);
        }
      } else {
        added_leaf_QMARK_.val = true;
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6(inode, edit__$1, 2 * idx, null, 2 * idx + 1, function() {
          var G__17073 = edit__$1;
          var G__17074 = shift + 5;
          var G__17075 = key_or_nil;
          var G__17076 = val_or_node;
          var G__17077 = hash;
          var G__17078 = key;
          var G__17079 = val;
          return cljs.core.create_node.cljs$core$IFn$_invoke$arity$7 ? cljs.core.create_node.cljs$core$IFn$_invoke$arity$7(G__17073, G__17074, G__17075, G__17076, G__17077, G__17078, G__17079) : cljs.core.create_node.call(null, G__17073, G__17074, G__17075, G__17076, G__17077, G__17078, G__17079);
        }());
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count(self__.bitmap);
    if (n >= 16) {
      var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      var jdx = hash >>> shift & 31;
      nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      var i_17092 = 0;
      var j_17093 = 0;
      while (true) {
        if (i_17092 < 32) {
          if ((self__.bitmap >>> i_17092 & 1) === 0) {
            var G__17094 = i_17092 + 1;
            var G__17095 = j_17093;
            i_17092 = G__17094;
            j_17093 = G__17095;
            continue;
          } else {
            nodes[i_17092] = !(self__.arr[j_17093] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, cljs.core.hash(self__.arr[j_17093]), self__.arr[j_17093], self__.arr[j_17093 + 1], added_leaf_QMARK_) : self__.arr[j_17093 + 1];
            var G__17096 = i_17092 + 1;
            var G__17097 = j_17093 + 2;
            i_17092 = G__17096;
            j_17093 = G__17097;
            continue;
          }
        } else {
        }
        break;
      }
      return new cljs.core.ArrayNode(null, n + 1, nodes);
    } else {
      var new_arr = new Array(2 * (n + 1));
      cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * idx);
      new_arr[2 * idx] = key;
      new_arr[2 * idx + 1] = val;
      cljs.core.array_copy(self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
      added_leaf_QMARK_.val = true;
      return new cljs.core.BitmapIndexedNode(null, self__.bitmap | bit, new_arr);
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, 2 * idx + 1, n));
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, 2 * idx + 1, val));
        }
      } else {
        added_leaf_QMARK_.val = true;
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$5(self__.arr, 2 * idx, null, 2 * idx + 1, function() {
          var G__17080 = shift + 5;
          var G__17081 = key_or_nil;
          var G__17082 = val_or_node;
          var G__17083 = hash;
          var G__17084 = key;
          var G__17085 = val;
          return cljs.core.create_node.cljs$core$IFn$_invoke$arity$6 ? cljs.core.create_node.cljs$core$IFn$_invoke$arity$6(G__17080, G__17081, G__17082, G__17083, G__17084, G__17085) : cljs.core.create_node.call(null, G__17080, G__17081, G__17082, G__17083, G__17084, G__17085);
        }()));
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_find(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [key_or_nil, val_or_node], null);
      } else {
        return not_found;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without(shift + 5, hash, key);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, 2 * idx + 1, n));
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair(self__.arr, idx));
          }
        }
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair(self__.arr, idx));
      } else {
        return inode;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "edit", "edit", -1302639, null), new cljs.core.Symbol(null, "bitmap", "bitmap", 501334601, null), new cljs.core.Symbol(null, "arr", "arr", 2115492975, null)], null);
};
cljs.core.BitmapIndexedNode.cljs$lang$type = true;
cljs.core.BitmapIndexedNode.cljs$lang$ctorStr = "cljs.core/BitmapIndexedNode";
cljs.core.BitmapIndexedNode.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/BitmapIndexedNode");
};
cljs.core.__GT_BitmapIndexedNode = function cljs$core$__GT_BitmapIndexedNode(edit, bitmap, arr) {
  return new cljs.core.BitmapIndexedNode(edit, bitmap, arr);
};
cljs.core.BitmapIndexedNode.EMPTY = new cljs.core.BitmapIndexedNode(null, 0, []);
cljs.core.pack_array_node = function cljs$core$pack_array_node(array_node, edit, idx) {
  var arr = array_node.arr;
  var len = arr.length;
  var new_arr = new Array(2 * (array_node.cnt - 1));
  var i = 0;
  var j = 1;
  var bitmap = 0;
  while (true) {
    if (i < len) {
      if (!(i === idx) && !(arr[i] == null)) {
        new_arr[j] = arr[i];
        var G__17098 = i + 1;
        var G__17099 = j + 2;
        var G__17100 = bitmap | 1 << i;
        i = G__17098;
        j = G__17099;
        bitmap = G__17100;
        continue;
      } else {
        var G__17101 = i + 1;
        var G__17102 = j;
        var G__17103 = bitmap;
        i = G__17101;
        j = G__17102;
        bitmap = G__17103;
        continue;
      }
    } else {
      return new cljs.core.BitmapIndexedNode(edit, bitmap, new_arr);
    }
    break;
  }
};
cljs.core.ArrayNode = function(edit, cnt, arr) {
  this.edit = edit;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.ArrayNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    return new cljs.core.ArrayNode(e, self__.cnt, cljs.core.aclone(self__.arr));
  }
};
cljs.core.ArrayNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return inode;
  } else {
    var n = node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node(inode, edit__$1, idx);
        } else {
          var editable = cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, n);
          editable.cnt = editable.cnt - 1;
          return editable;
        }
      } else {
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, n);
      }
    }
  }
};
cljs.core.ArrayNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  var G__17104 = self__.arr;
  return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1(G__17104) : cljs.core.create_array_node_seq.call(null, G__17104);
};
cljs.core.ArrayNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var node = self__.arr[i];
      if (!(node == null)) {
        var init__$2 = node.kv_reduce(f, init__$1);
        if (cljs.core.reduced_QMARK_(init__$2)) {
          var G__17105 = init__$2;
          return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__17105) : cljs.core.deref.call(null, G__17105);
        } else {
          var G__17106 = i + 1;
          var G__17107 = init__$2;
          i = G__17106;
          init__$1 = G__17107;
          continue;
        }
      } else {
        var G__17108 = i + 1;
        var G__17109 = init__$1;
        i = G__17108;
        init__$1 = G__17109;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ArrayNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_lookup(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    var editable = cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_));
    editable.cnt = editable.cnt + 1;
    return editable;
  } else {
    var n = node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, n);
    }
  }
};
cljs.core.ArrayNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return new cljs.core.ArrayNode(null, self__.cnt + 1, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_)));
  } else {
    var n = node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, n));
    }
  }
};
cljs.core.ArrayNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_find(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    var n = node.inode_without(shift + 5, hash, key);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node(inode, null, idx);
        } else {
          return new cljs.core.ArrayNode(null, self__.cnt - 1, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, n));
        }
      } else {
        return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, n));
      }
    }
  } else {
    return inode;
  }
};
cljs.core.ArrayNode.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "edit", "edit", -1302639, null), new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null), new cljs.core.Symbol(null, "arr", "arr", 2115492975, null)], null);
};
cljs.core.ArrayNode.cljs$lang$type = true;
cljs.core.ArrayNode.cljs$lang$ctorStr = "cljs.core/ArrayNode";
cljs.core.ArrayNode.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/ArrayNode");
};
cljs.core.__GT_ArrayNode = function cljs$core$__GT_ArrayNode(edit, cnt, arr) {
  return new cljs.core.ArrayNode(edit, cnt, arr);
};
cljs.core.hash_collision_node_find_index = function cljs$core$hash_collision_node_find_index(arr, cnt, key) {
  var lim = 2 * cnt;
  var i = 0;
  while (true) {
    if (i < lim) {
      if (cljs.core.key_test(key, arr[i])) {
        return i;
      } else {
        var G__17110 = i + 2;
        i = G__17110;
        continue;
      }
    } else {
      return -1;
    }
    break;
  }
};
cljs.core.HashCollisionNode = function(edit, collision_hash, cnt, arr) {
  this.edit = edit;
  this.collision_hash = collision_hash;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.HashCollisionNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var new_arr = new Array(2 * (self__.cnt + 1));
    cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * self__.cnt);
    return new cljs.core.HashCollisionNode(e, self__.collision_hash, self__.cnt, new_arr);
  }
};
cljs.core.HashCollisionNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    removed_leaf_QMARK_[0] = true;
    if (self__.cnt === 1) {
      return null;
    } else {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      earr[idx] = earr[2 * self__.cnt - 2];
      earr[idx + 1] = earr[2 * self__.cnt - 1];
      earr[2 * self__.cnt - 1] = null;
      earr[2 * self__.cnt - 2] = null;
      editable.cnt = editable.cnt - 1;
      return editable;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  var G__17111 = self__.arr;
  return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1(G__17111) : cljs.core.create_inode_seq.call(null, G__17111);
};
cljs.core.HashCollisionNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce(self__.arr, f, init);
};
cljs.core.HashCollisionNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test(key, self__.arr[idx])) {
      return self__.arr[idx + 1];
    } else {
      return not_found;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
    if (idx === -1) {
      if (self__.arr.length > 2 * self__.cnt) {
        var editable = cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6(inode, edit__$1, 2 * self__.cnt, key, 2 * self__.cnt + 1, val);
        added_leaf_QMARK_.val = true;
        editable.cnt = editable.cnt + 1;
        return editable;
      } else {
        var len = self__.arr.length;
        var new_arr = new Array(len + 2);
        cljs.core.array_copy(self__.arr, 0, new_arr, 0, len);
        new_arr[len] = key;
        new_arr[len + 1] = val;
        added_leaf_QMARK_.val = true;
        return inode.ensure_editable_array(edit__$1, self__.cnt + 1, new_arr);
      }
    } else {
      if (self__.arr[idx + 1] === val) {
        return inode;
      } else {
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx + 1, val);
      }
    }
  } else {
    return (new cljs.core.BitmapIndexedNode(edit__$1, 1 << (self__.collision_hash >>> shift & 31), [null, inode, null, null])).inode_assoc_BANG_(edit__$1, shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
    if (idx === -1) {
      var len = 2 * self__.cnt;
      var new_arr = new Array(len + 2);
      cljs.core.array_copy(self__.arr, 0, new_arr, 0, len);
      new_arr[len] = key;
      new_arr[len + 1] = val;
      added_leaf_QMARK_.val = true;
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt + 1, new_arr);
    } else {
      if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.arr[idx], val)) {
        return inode;
      } else {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx + 1, val));
      }
    }
  } else {
    return (new cljs.core.BitmapIndexedNode(null, 1 << (self__.collision_hash >>> shift & 31), [null, inode])).inode_assoc(shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable_array = function(e, count, array) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    self__.arr = array;
    self__.cnt = count;
    return inode;
  } else {
    return new cljs.core.HashCollisionNode(self__.edit, self__.collision_hash, count, array);
  }
};
cljs.core.HashCollisionNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test(key, self__.arr[idx])) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[idx], self__.arr[idx + 1]], null);
    } else {
      return not_found;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    if (self__.cnt === 1) {
      return null;
    } else {
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt - 1, cljs.core.remove_pair(self__.arr, cljs.core.quot(idx, 2)));
    }
  }
};
cljs.core.HashCollisionNode.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "edit", "edit", -1302639, null), new cljs.core.Symbol(null, "collision-hash", "collision-hash", -35831342, null), new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null), new cljs.core.Symbol(null, "arr", "arr", 2115492975, null)], null);
};
cljs.core.HashCollisionNode.cljs$lang$type = true;
cljs.core.HashCollisionNode.cljs$lang$ctorStr = "cljs.core/HashCollisionNode";
cljs.core.HashCollisionNode.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/HashCollisionNode");
};
cljs.core.__GT_HashCollisionNode = function cljs$core$__GT_HashCollisionNode(edit, collision_hash, cnt, arr) {
  return new cljs.core.HashCollisionNode(edit, collision_hash, cnt, arr);
};
cljs.core.create_node = function cljs$core$create_node() {
  var G__17113 = arguments.length;
  switch(G__17113) {
    case 6:
      return cljs.core.create_node.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    case 7:
      return cljs.core.create_node.cljs$core$IFn$_invoke$arity$7(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.create_node.cljs$core$IFn$_invoke$arity$6 = function(shift, key1, val1, key2hash, key2, val2) {
  var key1hash = cljs.core.hash(key1);
  if (key1hash === key2hash) {
    return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc(shift, key2hash, key2, val2, added_leaf_QMARK_);
  }
};
cljs.core.create_node.cljs$core$IFn$_invoke$arity$7 = function(edit, shift, key1, val1, key2hash, key2, val2) {
  var key1hash = cljs.core.hash(key1);
  if (key1hash === key2hash) {
    return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit, shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc_BANG_(edit, shift, key2hash, key2, val2, added_leaf_QMARK_);
  }
};
cljs.core.create_node.cljs$lang$maxFixedArity = 7;
cljs.core.NodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.NodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.NodeSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.NodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4725__auto__ = self__.__hash;
  if (!(h__4725__auto__ == null)) {
    return h__4725__auto__;
  } else {
    var h__4725__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4725__auto____$1;
    return h__4725__auto____$1;
  }
};
cljs.core.NodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.nodes[self__.i], self__.nodes[self__.i + 1]], null);
  } else {
    return cljs.core.first(self__.s);
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    var G__17115 = self__.nodes;
    var G__17116 = self__.i + 2;
    var G__17117 = null;
    return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(G__17115, G__17116, G__17117) : cljs.core.create_inode_seq.call(null, G__17115, G__17116, G__17117);
  } else {
    var G__17118 = self__.nodes;
    var G__17119 = self__.i;
    var G__17120 = cljs.core.next(self__.s);
    return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(G__17118, G__17119, G__17120) : cljs.core.create_inode_seq.call(null, G__17118, G__17119, G__17120);
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.NodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.NodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.NodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.NodeSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "nodes", "nodes", -459054278, null), new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.Symbol(null, "s", "s", -948495851, null), new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null)], null);
};
cljs.core.NodeSeq.cljs$lang$type = true;
cljs.core.NodeSeq.cljs$lang$ctorStr = "cljs.core/NodeSeq";
cljs.core.NodeSeq.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/NodeSeq");
};
cljs.core.__GT_NodeSeq = function cljs$core$__GT_NodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.NodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.NodeSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5285__auto__ = this;
  return cljs.core.es6_iterator(this__5285__auto__);
};
cljs.core.create_inode_seq = function cljs$core$create_inode_seq() {
  var G__17122 = arguments.length;
  switch(G__17122) {
    case 1:
      return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 3:
      return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1 = function(nodes) {
  return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(nodes, 0, null);
};
cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3 = function(nodes, i, s) {
  if (s == null) {
    var len = nodes.length;
    var j = i;
    while (true) {
      if (j < len) {
        if (!(nodes[j] == null)) {
          return new cljs.core.NodeSeq(null, nodes, j, null, null);
        } else {
          var temp__4420__auto__ = nodes[j + 1];
          if (cljs.core.truth_(temp__4420__auto__)) {
            var node = temp__4420__auto__;
            var temp__4420__auto____$1 = node.inode_seq();
            if (cljs.core.truth_(temp__4420__auto____$1)) {
              var node_seq = temp__4420__auto____$1;
              return new cljs.core.NodeSeq(null, nodes, j + 2, node_seq, null);
            } else {
              var G__17124 = j + 2;
              j = G__17124;
              continue;
            }
          } else {
            var G__17125 = j + 2;
            j = G__17125;
            continue;
          }
        }
      } else {
        return null;
      }
      break;
    }
  } else {
    return new cljs.core.NodeSeq(null, nodes, i, s, null);
  }
};
cljs.core.create_inode_seq.cljs$lang$maxFixedArity = 3;
cljs.core.ArrayNodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.ArrayNodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ArrayNodeSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4725__auto__ = self__.__hash;
  if (!(h__4725__auto__ == null)) {
    return h__4725__auto__;
  } else {
    var h__4725__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4725__auto____$1;
    return h__4725__auto____$1;
  }
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.s);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var G__17126 = null;
  var G__17127 = self__.nodes;
  var G__17128 = self__.i;
  var G__17129 = cljs.core.next(self__.s);
  return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4(G__17126, G__17127, G__17128, G__17129) : cljs.core.create_array_node_seq.call(null, G__17126, G__17127, G__17128, G__17129);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ArrayNodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.ArrayNodeSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "nodes", "nodes", -459054278, null), new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.Symbol(null, "s", "s", -948495851, null), new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null)], null);
};
cljs.core.ArrayNodeSeq.cljs$lang$type = true;
cljs.core.ArrayNodeSeq.cljs$lang$ctorStr = "cljs.core/ArrayNodeSeq";
cljs.core.ArrayNodeSeq.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/ArrayNodeSeq");
};
cljs.core.__GT_ArrayNodeSeq = function cljs$core$__GT_ArrayNodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.ArrayNodeSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5285__auto__ = this;
  return cljs.core.es6_iterator(this__5285__auto__);
};
cljs.core.create_array_node_seq = function cljs$core$create_array_node_seq() {
  var G__17131 = arguments.length;
  switch(G__17131) {
    case 1:
      return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 4:
      return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1 = function(nodes) {
  return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4(null, nodes, 0, null);
};
cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4 = function(meta, nodes, i, s) {
  if (s == null) {
    var len = nodes.length;
    var j = i;
    while (true) {
      if (j < len) {
        var temp__4420__auto__ = nodes[j];
        if (cljs.core.truth_(temp__4420__auto__)) {
          var nj = temp__4420__auto__;
          var temp__4420__auto____$1 = nj.inode_seq();
          if (cljs.core.truth_(temp__4420__auto____$1)) {
            var ns = temp__4420__auto____$1;
            return new cljs.core.ArrayNodeSeq(meta, nodes, j + 1, ns, null);
          } else {
            var G__17133 = j + 1;
            j = G__17133;
            continue;
          }
        } else {
          var G__17134 = j + 1;
          j = G__17134;
          continue;
        }
      } else {
        return null;
      }
      break;
    }
  } else {
    return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, null);
  }
};
cljs.core.create_array_node_seq.cljs$lang$maxFixedArity = 4;
cljs.core.PersistentHashMap = function(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.root = root;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentHashMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentHashMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentHashMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__17136 = coll;
    return cljs.core.keys.cljs$core$IFn$_invoke$arity$1 ? cljs.core.keys.cljs$core$IFn$_invoke$arity$1(G__17136) : cljs.core.keys.call(null, G__17136);
  }());
};
cljs.core.PersistentHashMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__17137 = coll;
    return cljs.core.vals.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vals.cljs$core$IFn$_invoke$arity$1(G__17137) : cljs.core.vals.call(null, G__17137);
  }());
};
cljs.core.PersistentHashMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentHashMap.prototype.get = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__17138 = cljs.core.seq(coll);
  var chunk__17139 = null;
  var count__17140 = 0;
  var i__17141 = 0;
  while (true) {
    if (i__17141 < count__17140) {
      var vec__17142 = chunk__17139.cljs$core$IIndexed$_nth$arity$2(null, i__17141);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__17142, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__17142, 1, null);
      var G__17143_17154 = v;
      var G__17144_17155 = k;
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__17143_17154, G__17144_17155) : f.call(null, G__17143_17154, G__17144_17155);
      var G__17156 = seq__17138;
      var G__17157 = chunk__17139;
      var G__17158 = count__17140;
      var G__17159 = i__17141 + 1;
      seq__17138 = G__17156;
      chunk__17139 = G__17157;
      count__17140 = G__17158;
      i__17141 = G__17159;
      continue;
    } else {
      var temp__4422__auto__ = cljs.core.seq(seq__17138);
      if (temp__4422__auto__) {
        var seq__17138__$1 = temp__4422__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__17138__$1)) {
          var c__5094__auto__ = cljs.core.chunk_first(seq__17138__$1);
          var G__17160 = cljs.core.chunk_rest(seq__17138__$1);
          var G__17161 = c__5094__auto__;
          var G__17162 = cljs.core.count(c__5094__auto__);
          var G__17163 = 0;
          seq__17138 = G__17160;
          chunk__17139 = G__17161;
          count__17140 = G__17162;
          i__17141 = G__17163;
          continue;
        } else {
          var vec__17145 = cljs.core.first(seq__17138__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__17145, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__17145, 1, null);
          var G__17146_17164 = v;
          var G__17147_17165 = k;
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__17146_17164, G__17147_17165) : f.call(null, G__17146_17164, G__17147_17165);
          var G__17166 = cljs.core.next(seq__17138__$1);
          var G__17167 = null;
          var G__17168 = 0;
          var G__17169 = 0;
          seq__17138 = G__17166;
          chunk__17139 = G__17167;
          count__17140 = G__17168;
          i__17141 = G__17169;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash(k), k, not_found);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var init__$1 = self__.has_nil_QMARK_ ? function() {
    var G__17148 = init;
    var G__17149 = null;
    var G__17150 = self__.nil_val;
    return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__17148, G__17149, G__17150) : f.call(null, G__17148, G__17149, G__17150);
  }() : init;
  if (cljs.core.reduced_QMARK_(init__$1)) {
    var G__17151 = init__$1;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__17151) : cljs.core.deref.call(null, G__17151);
  } else {
    if (!(self__.root == null)) {
      return self__.root.kv_reduce(f, init__$1);
    } else {
      return init__$1;
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashMap(self__.meta, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentHashMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4725__auto__ = self__.__hash;
  if (!(h__4725__auto__ == null)) {
    return h__4725__auto__;
  } else {
    var h__4725__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4725__auto____$1;
    return h__4725__auto____$1;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map(coll__$1, other);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashMap(function() {
    var obj17153 = {};
    return obj17153;
  }(), self__.root, self__.cnt, self__.has_nil_QMARK_, self__.nil_val);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta(cljs.core.PersistentHashMap.EMPTY, self__.meta);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, self__.root, false, null, null);
    } else {
      return coll__$1;
    }
  } else {
    if (self__.root == null) {
      return coll__$1;
    } else {
      var new_root = self__.root.inode_without(0, cljs.core.hash(k), k);
      if (new_root === self__.root) {
        return coll__$1;
      } else {
        return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_ && v === self__.nil_val) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, self__.has_nil_QMARK_ ? self__.cnt : self__.cnt + 1, self__.root, true, v, null);
    }
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    var new_root = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc(0, cljs.core.hash(k), k, v, added_leaf_QMARK_);
    if (new_root === self__.root) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, added_leaf_QMARK_.val ? self__.cnt + 1 : self__.cnt, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    return self__.has_nil_QMARK_;
  } else {
    if (self__.root == null) {
      return false;
    } else {
      return !(self__.root.inode_lookup(0, cljs.core.hash(k), k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var s = !(self__.root == null) ? self__.root.inode_seq() : null;
    if (self__.has_nil_QMARK_) {
      return cljs.core.cons(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, self__.nil_val], null), s);
    } else {
      return s;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashMap(meta__$1, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq(entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first(es);
        if (cljs.core.vector_QMARK_(e)) {
          var G__17170 = cljs.core._assoc(ret, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 1));
          var G__17171 = cljs.core.next(es);
          ret = G__17170;
          es = G__17171;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentHashMap.prototype.call = function() {
  var G__17172 = null;
  var G__17172__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__17172__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__17172 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__17172__2.call(this, self__, k);
      case 3:
        return G__17172__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__17172.cljs$core$IFn$_invoke$arity$2 = G__17172__2;
  G__17172.cljs$core$IFn$_invoke$arity$3 = G__17172__3;
  return G__17172;
}();
cljs.core.PersistentHashMap.prototype.apply = function(self__, args17135) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args17135)));
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashMap.getBasis = function() {
  return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null), new cljs.core.Symbol(null, "root", "root", 1191874074, null), new cljs.core.Symbol(null, "has-nil?", "has-nil?", 825886722, null), new cljs.core.Symbol(null, "nil-val", "nil-val", -513933559, null), new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null)], null);
};
cljs.core.PersistentHashMap.cljs$lang$type = true;
cljs.core.PersistentHashMap.cljs$lang$ctorStr = "cljs.core/PersistentHashMap";
cljs.core.PersistentHashMap.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/PersistentHashMap");
};
cljs.core.__GT_PersistentHashMap = function cljs$core$__GT_PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  return new cljs.core.PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash);
};
cljs.core.PersistentHashMap.EMPTY = new cljs.core.PersistentHashMap(null, 0, null, false, null, cljs.core.empty_unordered_hash);
cljs.core.PersistentHashMap.fromArray = function(arr, no_clone) {
  var arr__$1 = no_clone ? arr : cljs.core.aclone(arr);
  var len = arr__$1.length;
  var i = 0;
  var ret = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var G__17173 = i + 2;
      var G__17174 = cljs.core._assoc_BANG_(ret, arr__$1[i], arr__$1[i + 1]);
      i = G__17173;
      ret = G__17174;
      continue;
    } else {
      return cljs.core._persistent_BANG_(ret);
    }
    break;
  }
};
cljs.core.PersistentHashMap.fromArrays = function(ks, vs) {
  var len = ks.length;
  var i = 0;
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var G__17175 = i + 1;
      var G__17176 = out.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(null, ks[i], vs[i]);
      i = G__17175;
      out = G__17176;
      continue;
    } else {
      return cljs.core.persistent_BANG_(out);
    }
    break;
  }
};
cljs.core.PersistentHashMap.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5285__auto__ = this;
  return cljs.core.es6_iterator(this__5285__auto__);
};
cljs.core.TransientHashMap = function(edit, root, count, has_nil_QMARK_, nil_val) {
  this.edit = edit;
  this.root = root;
  this.count = count;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.cljs$lang$protocol_mask$partition0$ = 258;
  this.cljs$lang$protocol_mask$partition1$ = 56;
};
cljs.core.TransientHashMap.prototype.conj_BANG_ = function(o) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (function() {
      var G__17177 = o;
      if (G__17177) {
        var bit__4983__auto__ = G__17177.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__4983__auto__ || G__17177.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__17177.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, G__17177);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, G__17177);
      }
    }()) {
      return tcoll.assoc_BANG_(function() {
        var G__17178 = o;
        return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__17178) : cljs.core.key.call(null, G__17178);
      }(), function() {
        var G__17179 = o;
        return cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(G__17179) : cljs.core.val.call(null, G__17179);
      }());
    } else {
      var es = cljs.core.seq(o);
      var tcoll__$1 = tcoll;
      while (true) {
        var temp__4420__auto__ = cljs.core.first(es);
        if (cljs.core.truth_(temp__4420__auto__)) {
          var e = temp__4420__auto__;
          var G__17182 = cljs.core.next(es);
          var G__17183 = tcoll__$1.assoc_BANG_(function() {
            var G__17180 = e;
            return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__17180) : cljs.core.key.call(null, G__17180);
          }(), function() {
            var G__17181 = e;
            return cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(G__17181) : cljs.core.val.call(null, G__17181);
          }());
          es = G__17182;
          tcoll__$1 = G__17183;
          continue;
        } else {
          return tcoll__$1;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent");
  }
};
cljs.core.TransientHashMap.prototype.assoc_BANG_ = function(k, v) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.nil_val === v) {
      } else {
        self__.nil_val = v;
      }
      if (self__.has_nil_QMARK_) {
      } else {
        self__.count = self__.count + 1;
        self__.has_nil_QMARK_ = true;
      }
      return tcoll;
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      var node = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc_BANG_(self__.edit, 0, cljs.core.hash(k), k, v, added_leaf_QMARK_);
      if (node === self__.root) {
      } else {
        self__.root = node;
      }
      if (added_leaf_QMARK_.val) {
        self__.count = self__.count + 1;
      } else {
      }
      return tcoll;
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.without_BANG_ = function(k) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.has_nil_QMARK_) {
        self__.has_nil_QMARK_ = false;
        self__.nil_val = null;
        self__.count = self__.count - 1;
        return tcoll;
      } else {
        return tcoll;
      }
    } else {
      if (self__.root == null) {
        return tcoll;
      } else {
        var removed_leaf_QMARK_ = new cljs.core.Box(false);
        var node = self__.root.inode_without_BANG_(self__.edit, 0, cljs.core.hash(k), k, removed_leaf_QMARK_);
        if (node === self__.root) {
        } else {
          self__.root = node;
        }
        if (cljs.core.truth_(removed_leaf_QMARK_[0])) {
          self__.count = self__.count - 1;
        } else {
        }
        return tcoll;
      }
    }
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.persistent_BANG_ = function() {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    self__.edit = null;
    return new cljs.core.PersistentHashMap(null, self__.count, self__.root, self__.has_nil_QMARK_, self__.nil_val, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.edit) {
    return self__.count;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return null;
    }
  } else {
    if (self__.root == null) {
      return null;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash(k), k);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash(k), k, not_found);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.conj_BANG_(val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.persistent_BANG_();
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.assoc_BANG_(key, val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.without_BANG_(key);
};
cljs.core.TransientHashMap.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "edit", "edit", -1302639, null), new cljs.core.Symbol(null, "root", "root", 1191874074, null), new cljs.core.Symbol(null, "count", "count", -514511684, null), new cljs.core.Symbol(null, "has-nil?", "has-nil?", 825886722, null), new cljs.core.Symbol(null, "nil-val", "nil-val", -513933559, null)], null);
};
cljs.core.TransientHashMap.cljs$lang$type = true;
cljs.core.TransientHashMap.cljs$lang$ctorStr = "cljs.core/TransientHashMap";
cljs.core.TransientHashMap.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/TransientHashMap");
};
cljs.core.__GT_TransientHashMap = function cljs$core$__GT_TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val) {
  return new cljs.core.TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val);
};
cljs.core.tree_map_seq_push = function cljs$core$tree_map_seq_push(node, stack, ascending_QMARK_) {
  var t = node;
  var stack__$1 = stack;
  while (true) {
    if (!(t == null)) {
      var G__17184 = ascending_QMARK_ ? t.left : t.right;
      var G__17185 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack__$1, t);
      t = G__17184;
      stack__$1 = G__17185;
      continue;
    } else {
      return stack__$1;
    }
    break;
  }
};
cljs.core.PersistentTreeMapSeq = function(meta, stack, ascending_QMARK_, cnt, __hash) {
  this.meta = meta;
  this.stack = stack;
  this.ascending_QMARK_ = ascending_QMARK_;
  this.cnt = cnt;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32374862;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.PersistentTreeMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentTreeMapSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt < 0) {
    return cljs.core.count(cljs.core.next(coll__$1)) + 1;
  } else {
    return self__.cnt;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4725__auto__ = self__.__hash;
  if (!(h__4725__auto__ == null)) {
    return h__4725__auto__;
  } else {
    var h__4725__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4725__auto____$1;
    return h__4725__auto____$1;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.peek(self__.stack);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var t = cljs.core.first(self__.stack);
  var next_stack = cljs.core.tree_map_seq_push(self__.ascending_QMARK_ ? t.right : t.left, cljs.core.next(self__.stack), self__.ascending_QMARK_);
  if (!(next_stack == null)) {
    return new cljs.core.PersistentTreeMapSeq(null, next_stack, self__.ascending_QMARK_, self__.cnt - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMapSeq(meta__$1, self__.stack, self__.ascending_QMARK_, self__.cnt, self__.__hash);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.PersistentTreeMapSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "stack", "stack", 847125597, null), new cljs.core.Symbol(null, "ascending?", "ascending?", -1938452653, null), new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null), new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null)], null);
};
cljs.core.PersistentTreeMapSeq.cljs$lang$type = true;
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentTreeMapSeq";
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/PersistentTreeMapSeq");
};
cljs.core.__GT_PersistentTreeMapSeq = function cljs$core$__GT_PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash) {
  return new cljs.core.PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash);
};
cljs.core.PersistentTreeMapSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5285__auto__ = this;
  return cljs.core.es6_iterator(this__5285__auto__);
};
cljs.core.create_tree_map_seq = function cljs$core$create_tree_map_seq(tree, ascending_QMARK_, cnt) {
  return new cljs.core.PersistentTreeMapSeq(null, cljs.core.tree_map_seq_push(tree, null, ascending_QMARK_), ascending_QMARK_, cnt, null);
};
cljs.core.balance_left = function cljs$core$balance_left(key, val, ins, right) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, ins.left.blacken(), new cljs.core.BlackNode(key, val, ins.right, right, null), null);
    } else {
      if (ins.right instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.right.key, ins.right.val, new cljs.core.BlackNode(ins.key, ins.val, ins.left, ins.right.left, null), new cljs.core.BlackNode(key, val, ins.right.right, right, null), null);
      } else {
        return new cljs.core.BlackNode(key, val, ins, right, null);
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, ins, right, null);
  }
};
cljs.core.balance_right = function cljs$core$balance_right(key, val, left, ins) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, new cljs.core.BlackNode(key, val, left, ins.left, null), ins.right.blacken(), null);
    } else {
      if (ins.left instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.left.key, ins.left.val, new cljs.core.BlackNode(key, val, left, ins.left.left, null), new cljs.core.BlackNode(ins.key, ins.val, ins.left.right, ins.right, null), null);
      } else {
        return new cljs.core.BlackNode(key, val, left, ins, null);
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, left, ins, null);
  }
};
cljs.core.balance_left_del = function cljs$core$balance_left_del(key, val, del, right) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, del.blacken(), right, null);
  } else {
    if (right instanceof cljs.core.BlackNode) {
      return cljs.core.balance_right(key, val, del, right.redden());
    } else {
      if (right instanceof cljs.core.RedNode && right.left instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(right.left.key, right.left.val, new cljs.core.BlackNode(key, val, del, right.left.left, null), cljs.core.balance_right(right.key, right.val, right.left.right, right.right.redden()), null);
      } else {
        throw new Error("red-black tree invariant violation");
      }
    }
  }
};
cljs.core.balance_right_del = function cljs$core$balance_right_del(key, val, left, del) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, left, del.blacken(), null);
  } else {
    if (left instanceof cljs.core.BlackNode) {
      return cljs.core.balance_left(key, val, left.redden(), del);
    } else {
      if (left instanceof cljs.core.RedNode && left.right instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(left.right.key, left.right.val, cljs.core.balance_left(left.key, left.val, left.left.redden(), left.right.left), new cljs.core.BlackNode(key, val, left.right.right, del, null), null);
      } else {
        throw new Error("red-black tree invariant violation");
      }
    }
  }
};
cljs.core.tree_map_kv_reduce = function cljs$core$tree_map_kv_reduce(node, f, init) {
  var init__$1 = !(node.left == null) ? cljs$core$tree_map_kv_reduce(node.left, f, init) : init;
  if (cljs.core.reduced_QMARK_(init__$1)) {
    var G__17198 = init__$1;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__17198) : cljs.core.deref.call(null, G__17198);
  } else {
    var init__$2 = function() {
      var G__17199 = init__$1;
      var G__17200 = node.key;
      var G__17201 = node.val;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__17199, G__17200, G__17201) : f.call(null, G__17199, G__17200, G__17201);
    }();
    if (cljs.core.reduced_QMARK_(init__$2)) {
      var G__17202 = init__$2;
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__17202) : cljs.core.deref.call(null, G__17202);
    } else {
      var init__$3 = !(node.right == null) ? cljs$core$tree_map_kv_reduce(node.right, f, init__$2) : init__$2;
      if (cljs.core.reduced_QMARK_(init__$3)) {
        var G__17203 = init__$3;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__17203) : cljs.core.deref.call(null, G__17203);
      } else {
        return init__$3;
      }
    }
  }
};
cljs.core.BlackNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.BlackNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_right(node);
};
cljs.core.BlackNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.BlackNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return node;
};
cljs.core.BlackNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_left(node);
};
cljs.core.BlackNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.BlackNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
};
cljs.core.BlackNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
};
cljs.core.BlackNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_left_del(self__.key, self__.val, del, self__.right);
};
cljs.core.BlackNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce(node, f, init);
};
cljs.core.BlackNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_right_del(self__.key, self__.val, self__.left, del);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, null);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, not_found);
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return null;
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return not_found;
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return (new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.BlackNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.BlackNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.BlackNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4725__auto__ = self__.__hash;
  if (!(h__4725__auto__ == null)) {
    return h__4725__auto__;
  } else {
    var h__4725__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4725__auto____$1;
    return h__4725__auto____$1;
  }
};
cljs.core.BlackNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.BlackNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(node__$1, f);
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(node__$1, f, start);
};
cljs.core.BlackNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.BlackNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj(cljs.core._conj(cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.BlackNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.BlackNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.BlackNode.prototype.call = function() {
  var G__17205 = null;
  var G__17205__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__17205__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__17205 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__17205__2.call(this, self__, k);
      case 3:
        return G__17205__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__17205.cljs$core$IFn$_invoke$arity$2 = G__17205__2;
  G__17205.cljs$core$IFn$_invoke$arity$3 = G__17205__3;
  return G__17205;
}();
cljs.core.BlackNode.prototype.apply = function(self__, args17204) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args17204)));
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.BlackNode.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "key", "key", 124488940, null), new cljs.core.Symbol(null, "val", "val", 1769233139, null), new cljs.core.Symbol(null, "left", "left", 1241415590, null), new cljs.core.Symbol(null, "right", "right", 1187949694, null), new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null)], null);
};
cljs.core.BlackNode.cljs$lang$type = true;
cljs.core.BlackNode.cljs$lang$ctorStr = "cljs.core/BlackNode";
cljs.core.BlackNode.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/BlackNode");
};
cljs.core.__GT_BlackNode = function cljs$core$__GT_BlackNode(key, val, left, right, __hash) {
  return new cljs.core.BlackNode(key, val, left, right, __hash);
};
cljs.core.BlackNode.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5285__auto__ = this;
  return cljs.core.es6_iterator(this__5285__auto__);
};
cljs.core.RedNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.RedNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, ins, null);
};
cljs.core.RedNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  throw new Error("red-black tree invariant violation");
};
cljs.core.RedNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.RedNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, ins, self__.right, null);
};
cljs.core.RedNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.RedNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.left instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, self__.left.blacken(), new cljs.core.BlackNode(parent.key, parent.val, self__.right, parent.right, null), null);
  } else {
    if (self__.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.right.key, self__.right.val, new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right.left, null), new cljs.core.BlackNode(parent.key, parent.val, self__.right.right, parent.right, null), null);
    } else {
      return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
    }
  }
};
cljs.core.RedNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.right instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left, null), self__.right.blacken(), null);
  } else {
    if (self__.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.left.key, self__.left.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left.left, null), new cljs.core.BlackNode(self__.key, self__.val, self__.left.right, self__.right, null), null);
    } else {
      return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
    }
  }
};
cljs.core.RedNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, del, self__.right, null);
};
cljs.core.RedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce(node, f, init);
};
cljs.core.RedNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, del, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, not_found);
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return null;
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return not_found;
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return (new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.RedNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.RedNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.RedNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4725__auto__ = self__.__hash;
  if (!(h__4725__auto__ == null)) {
    return h__4725__auto__;
  } else {
    var h__4725__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4725__auto____$1;
    return h__4725__auto____$1;
  }
};
cljs.core.RedNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.RedNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(node__$1, f);
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(node__$1, f, start);
};
cljs.core.RedNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.RedNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj(cljs.core._conj(cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.RedNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.RedNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.RedNode.prototype.call = function() {
  var G__17207 = null;
  var G__17207__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__17207__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__17207 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__17207__2.call(this, self__, k);
      case 3:
        return G__17207__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__17207.cljs$core$IFn$_invoke$arity$2 = G__17207__2;
  G__17207.cljs$core$IFn$_invoke$arity$3 = G__17207__3;
  return G__17207;
}();
cljs.core.RedNode.prototype.apply = function(self__, args17206) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args17206)));
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.RedNode.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "key", "key", 124488940, null), new cljs.core.Symbol(null, "val", "val", 1769233139, null), new cljs.core.Symbol(null, "left", "left", 1241415590, null), new cljs.core.Symbol(null, "right", "right", 1187949694, null), new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null)], null);
};
cljs.core.RedNode.cljs$lang$type = true;
cljs.core.RedNode.cljs$lang$ctorStr = "cljs.core/RedNode";
cljs.core.RedNode.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/RedNode");
};
cljs.core.__GT_RedNode = function cljs$core$__GT_RedNode(key, val, left, right, __hash) {
  return new cljs.core.RedNode(key, val, left, right, __hash);
};
cljs.core.RedNode.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5285__auto__ = this;
  return cljs.core.es6_iterator(this__5285__auto__);
};
cljs.core.tree_map_add = function cljs$core$tree_map_add(comp, tree, k, v, found) {
  if (tree == null) {
    return new cljs.core.RedNode(k, v, null, null, null);
  } else {
    var c = function() {
      var G__17220 = k;
      var G__17221 = tree.key;
      return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__17220, G__17221) : comp.call(null, G__17220, G__17221);
    }();
    if (c === 0) {
      found[0] = tree;
      return null;
    } else {
      if (c < 0) {
        var ins = cljs$core$tree_map_add(comp, tree.left, k, v, found);
        if (!(ins == null)) {
          return tree.add_left(ins);
        } else {
          return null;
        }
      } else {
        var ins = cljs$core$tree_map_add(comp, tree.right, k, v, found);
        if (!(ins == null)) {
          return tree.add_right(ins);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.tree_map_append = function cljs$core$tree_map_append(left, right) {
  if (left == null) {
    return right;
  } else {
    if (right == null) {
      return left;
    } else {
      if (left instanceof cljs.core.RedNode) {
        if (right instanceof cljs.core.RedNode) {
          var app = cljs$core$tree_map_append(left.right, right.left);
          if (app instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.RedNode(left.key, left.val, left.left, app.left, null), new cljs.core.RedNode(right.key, right.val, app.right, right.right, null), null);
          } else {
            return new cljs.core.RedNode(left.key, left.val, left.left, new cljs.core.RedNode(right.key, right.val, app, right.right, null), null);
          }
        } else {
          return new cljs.core.RedNode(left.key, left.val, left.left, cljs$core$tree_map_append(left.right, right), null);
        }
      } else {
        if (right instanceof cljs.core.RedNode) {
          return new cljs.core.RedNode(right.key, right.val, cljs$core$tree_map_append(left, right.left), right.right, null);
        } else {
          var app = cljs$core$tree_map_append(left.right, right.left);
          if (app instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.BlackNode(left.key, left.val, left.left, app.left, null), new cljs.core.BlackNode(right.key, right.val, app.right, right.right, null), null);
          } else {
            return cljs.core.balance_left_del(left.key, left.val, left.left, new cljs.core.BlackNode(right.key, right.val, app, right.right, null));
          }
        }
      }
    }
  }
};
cljs.core.tree_map_remove = function cljs$core$tree_map_remove(comp, tree, k, found) {
  if (!(tree == null)) {
    var c = function() {
      var G__17240 = k;
      var G__17241 = tree.key;
      return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__17240, G__17241) : comp.call(null, G__17240, G__17241);
    }();
    if (c === 0) {
      found[0] = tree;
      return cljs.core.tree_map_append(tree.left, tree.right);
    } else {
      if (c < 0) {
        var del = cljs$core$tree_map_remove(comp, tree.left, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.left instanceof cljs.core.BlackNode) {
            return cljs.core.balance_left_del(tree.key, tree.val, del, tree.right);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, del, tree.right, null);
          }
        } else {
          return null;
        }
      } else {
        var del = cljs$core$tree_map_remove(comp, tree.right, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.right instanceof cljs.core.BlackNode) {
            return cljs.core.balance_right_del(tree.key, tree.val, tree.left, del);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, tree.left, del, null);
          }
        } else {
          return null;
        }
      }
    }
  } else {
    return null;
  }
};
cljs.core.tree_map_replace = function cljs$core$tree_map_replace(comp, tree, k, v) {
  var tk = tree.key;
  var c = function() {
    var G__17252 = k;
    var G__17253 = tk;
    return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__17252, G__17253) : comp.call(null, G__17252, G__17253);
  }();
  if (c === 0) {
    return tree.replace(tk, v, tree.left, tree.right);
  } else {
    if (c < 0) {
      return tree.replace(tk, tree.val, cljs$core$tree_map_replace(comp, tree.left, k, v), tree.right);
    } else {
      return tree.replace(tk, tree.val, tree.left, cljs$core$tree_map_replace(comp, tree.right, k, v));
    }
  }
};
cljs.core.PersistentTreeMap = function(comp, tree, cnt, meta, __hash) {
  this.comp = comp;
  this.tree = tree;
  this.cnt = cnt;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 418776847;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__17255 = cljs.core.seq(coll);
  var chunk__17256 = null;
  var count__17257 = 0;
  var i__17258 = 0;
  while (true) {
    if (i__17258 < count__17257) {
      var vec__17259 = chunk__17256.cljs$core$IIndexed$_nth$arity$2(null, i__17258);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__17259, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__17259, 1, null);
      var G__17260_17272 = v;
      var G__17261_17273 = k;
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__17260_17272, G__17261_17273) : f.call(null, G__17260_17272, G__17261_17273);
      var G__17274 = seq__17255;
      var G__17275 = chunk__17256;
      var G__17276 = count__17257;
      var G__17277 = i__17258 + 1;
      seq__17255 = G__17274;
      chunk__17256 = G__17275;
      count__17257 = G__17276;
      i__17258 = G__17277;
      continue;
    } else {
      var temp__4422__auto__ = cljs.core.seq(seq__17255);
      if (temp__4422__auto__) {
        var seq__17255__$1 = temp__4422__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__17255__$1)) {
          var c__5094__auto__ = cljs.core.chunk_first(seq__17255__$1);
          var G__17278 = cljs.core.chunk_rest(seq__17255__$1);
          var G__17279 = c__5094__auto__;
          var G__17280 = cljs.core.count(c__5094__auto__);
          var G__17281 = 0;
          seq__17255 = G__17278;
          chunk__17256 = G__17279;
          count__17257 = G__17280;
          i__17258 = G__17281;
          continue;
        } else {
          var vec__17262 = cljs.core.first(seq__17255__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__17262, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__17262, 1, null);
          var G__17263_17282 = v;
          var G__17264_17283 = k;
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__17263_17282, G__17264_17283) : f.call(null, G__17263_17282, G__17264_17283);
          var G__17284 = cljs.core.next(seq__17255__$1);
          var G__17285 = null;
          var G__17286 = 0;
          var G__17287 = 0;
          seq__17255 = G__17284;
          chunk__17256 = G__17285;
          count__17257 = G__17286;
          i__17258 = G__17287;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.get = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentTreeMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__17265 = coll;
    return cljs.core.keys.cljs$core$IFn$_invoke$arity$1 ? cljs.core.keys.cljs$core$IFn$_invoke$arity$1(G__17265) : cljs.core.keys.call(null, G__17265);
  }());
};
cljs.core.PersistentTreeMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__17266 = coll;
    return cljs.core.vals.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vals.cljs$core$IFn$_invoke$arity$1(G__17266) : cljs.core.vals.call(null, G__17266);
  }());
};
cljs.core.PersistentTreeMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeMap.prototype.entry_at = function(k) {
  var self__ = this;
  var coll = this;
  var t = self__.tree;
  while (true) {
    if (!(t == null)) {
      var c = function() {
        var G__17267 = k;
        var G__17268 = t.key;
        return self__.comp.cljs$core$IFn$_invoke$arity$2 ? self__.comp.cljs$core$IFn$_invoke$arity$2(G__17267, G__17268) : self__.comp.call(null, G__17267, G__17268);
      }();
      if (c === 0) {
        return t;
      } else {
        if (c < 0) {
          var G__17288 = t.left;
          t = G__17288;
          continue;
        } else {
          var G__17289 = t.right;
          t = G__17289;
          continue;
        }
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = coll__$1.entry_at(k);
  if (!(n == null)) {
    return n.val;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.tree == null)) {
    return cljs.core.tree_map_kv_reduce(self__.tree, f, init);
  } else {
    return init;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, self__.meta, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq(self__.tree, false, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4725__auto__ = self__.__hash;
  if (!(h__4725__auto__ == null)) {
    return h__4725__auto__;
  } else {
    var h__4725__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4725__auto____$1;
    return h__4725__auto____$1;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map(coll__$1, other);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, 0);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_remove(self__.comp, self__.tree, k, found);
  if (t == null) {
    if (cljs.core.nth.cljs$core$IFn$_invoke$arity$2(found, 0) == null) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt - 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_add(self__.comp, self__.tree, k, v, found);
  if (t == null) {
    var found_node = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(found, 0);
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(v, found_node.val)) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, cljs.core.tree_map_replace(self__.comp, self__.tree, k, v), self__.cnt, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt + 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return !(coll__$1.entry_at(k) == null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq(self__.tree, true, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, meta__$1, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq(entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first(es);
        if (cljs.core.vector_QMARK_(e)) {
          var G__17290 = cljs.core._assoc(ret, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 1));
          var G__17291 = cljs.core.next(es);
          ret = G__17290;
          es = G__17291;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentTreeMap.prototype.call = function() {
  var G__17292 = null;
  var G__17292__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__17292__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__17292 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__17292__2.call(this, self__, k);
      case 3:
        return G__17292__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__17292.cljs$core$IFn$_invoke$arity$2 = G__17292__2;
  G__17292.cljs$core$IFn$_invoke$arity$3 = G__17292__3;
  return G__17292;
}();
cljs.core.PersistentTreeMap.prototype.apply = function(self__, args17254) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args17254)));
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq(self__.tree, ascending_QMARK_, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var stack = null;
    var t = self__.tree;
    while (true) {
      if (!(t == null)) {
        var c = function() {
          var G__17269 = k;
          var G__17270 = t.key;
          return self__.comp.cljs$core$IFn$_invoke$arity$2 ? self__.comp.cljs$core$IFn$_invoke$arity$2(G__17269, G__17270) : self__.comp.call(null, G__17269, G__17270);
        }();
        if (c === 0) {
          return new cljs.core.PersistentTreeMapSeq(null, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack, t), ascending_QMARK_, -1, null);
        } else {
          if (cljs.core.truth_(ascending_QMARK_)) {
            if (c < 0) {
              var G__17293 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack, t);
              var G__17294 = t.left;
              stack = G__17293;
              t = G__17294;
              continue;
            } else {
              var G__17295 = stack;
              var G__17296 = t.right;
              stack = G__17295;
              t = G__17296;
              continue;
            }
          } else {
            if (c > 0) {
              var G__17297 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack, t);
              var G__17298 = t.right;
              stack = G__17297;
              t = G__17298;
              continue;
            } else {
              var G__17299 = stack;
              var G__17300 = t.left;
              stack = G__17299;
              t = G__17300;
              continue;
            }
          }
        }
      } else {
        if (stack == null) {
          return null;
        } else {
          return new cljs.core.PersistentTreeMapSeq(null, stack, ascending_QMARK_, -1, null);
        }
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  var G__17271 = entry;
  return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__17271) : cljs.core.key.call(null, G__17271);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.comp;
};
cljs.core.PersistentTreeMap.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "comp", "comp", -1462482139, null), new cljs.core.Symbol(null, "tree", "tree", 1444219499, null), new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null), new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null)], null);
};
cljs.core.PersistentTreeMap.cljs$lang$type = true;
cljs.core.PersistentTreeMap.cljs$lang$ctorStr = "cljs.core/PersistentTreeMap";
cljs.core.PersistentTreeMap.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/PersistentTreeMap");
};
cljs.core.__GT_PersistentTreeMap = function cljs$core$__GT_PersistentTreeMap(comp, tree, cnt, meta, __hash) {
  return new cljs.core.PersistentTreeMap(comp, tree, cnt, meta, __hash);
};
cljs.core.PersistentTreeMap.EMPTY = new cljs.core.PersistentTreeMap(cljs.core.compare, null, 0, null, cljs.core.empty_unordered_hash);
cljs.core.PersistentTreeMap.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5285__auto__ = this;
  return cljs.core.es6_iterator(this__5285__auto__);
};
cljs.core.hash_map = function cljs$core$hash_map() {
  var argseq__5349__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.hash_map.cljs$core$IFn$_invoke$arity$variadic(argseq__5349__auto__);
};
cljs.core.hash_map.cljs$core$IFn$_invoke$arity$variadic = function(keyvals) {
  var in$ = cljs.core.seq(keyvals);
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (in$) {
      var G__17302 = cljs.core.nnext(in$);
      var G__17303 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, cljs.core.first(in$), cljs.core.second(in$));
      in$ = G__17302;
      out = G__17303;
      continue;
    } else {
      return cljs.core.persistent_BANG_(out);
    }
    break;
  }
};
cljs.core.hash_map.cljs$lang$maxFixedArity = 0;
cljs.core.hash_map.cljs$lang$applyTo = function(seq17301) {
  return cljs.core.hash_map.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq17301));
};
cljs.core.array_map = function cljs$core$array_map() {
  var argseq__5349__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.array_map.cljs$core$IFn$_invoke$arity$variadic(argseq__5349__auto__);
};
cljs.core.array_map.cljs$core$IFn$_invoke$arity$variadic = function(keyvals) {
  var arr = keyvals instanceof cljs.core.IndexedSeq && keyvals.i === 0 ? keyvals.arr : cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(keyvals);
  return cljs.core.PersistentArrayMap.fromArray(arr, true, false);
};
cljs.core.array_map.cljs$lang$maxFixedArity = 0;
cljs.core.array_map.cljs$lang$applyTo = function(seq17304) {
  return cljs.core.array_map.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq17304));
};
cljs.core.obj_map = function cljs$core$obj_map() {
  var argseq__5349__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.obj_map.cljs$core$IFn$_invoke$arity$variadic(argseq__5349__auto__);
};
cljs.core.obj_map.cljs$core$IFn$_invoke$arity$variadic = function(keyvals) {
  var ks = [];
  var obj = function() {
    var obj17307 = {};
    return obj17307;
  }();
  var kvs = cljs.core.seq(keyvals);
  while (true) {
    if (kvs) {
      ks.push(cljs.core.first(kvs));
      obj[cljs.core.first(kvs)] = cljs.core.second(kvs);
      var G__17308 = cljs.core.nnext(kvs);
      kvs = G__17308;
      continue;
    } else {
      return cljs.core.ObjMap.fromObject(ks, obj);
    }
    break;
  }
};
cljs.core.obj_map.cljs$lang$maxFixedArity = 0;
cljs.core.obj_map.cljs$lang$applyTo = function(seq17305) {
  return cljs.core.obj_map.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq17305));
};
cljs.core.sorted_map = function cljs$core$sorted_map() {
  var argseq__5349__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.sorted_map.cljs$core$IFn$_invoke$arity$variadic(argseq__5349__auto__);
};
cljs.core.sorted_map.cljs$core$IFn$_invoke$arity$variadic = function(keyvals) {
  var in$ = cljs.core.seq(keyvals);
  var out = cljs.core.PersistentTreeMap.EMPTY;
  while (true) {
    if (in$) {
      var G__17310 = cljs.core.nnext(in$);
      var G__17311 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(out, cljs.core.first(in$), cljs.core.second(in$));
      in$ = G__17310;
      out = G__17311;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.sorted_map.cljs$lang$maxFixedArity = 0;
cljs.core.sorted_map.cljs$lang$applyTo = function(seq17309) {
  return cljs.core.sorted_map.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq17309));
};
cljs.core.sorted_map_by = function cljs$core$sorted_map_by() {
  var argseq__5349__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return cljs.core.sorted_map_by.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5349__auto__);
};
cljs.core.sorted_map_by.cljs$core$IFn$_invoke$arity$variadic = function(comparator, keyvals) {
  var in$ = cljs.core.seq(keyvals);
  var out = new cljs.core.PersistentTreeMap(cljs.core.fn__GT_comparator(comparator), null, 0, null, 0);
  while (true) {
    if (in$) {
      var G__17314 = cljs.core.nnext(in$);
      var G__17315 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(out, cljs.core.first(in$), cljs.core.second(in$));
      in$ = G__17314;
      out = G__17315;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.sorted_map_by.cljs$lang$maxFixedArity = 1;
cljs.core.sorted_map_by.cljs$lang$applyTo = function(seq17312) {
  var G__17313 = cljs.core.first(seq17312);
  var seq17312__$1 = cljs.core.next(seq17312);
  return cljs.core.sorted_map_by.cljs$core$IFn$_invoke$arity$variadic(G__17313, seq17312__$1);
};
cljs.core.KeySeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.KeySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.KeySeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.KeySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.KeySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__17316 = self__.mseq;
    if (G__17316) {
      var bit__4983__auto__ = G__17316.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4983__auto__ || G__17316.cljs$core$INext$) {
        return true;
      } else {
        if (!G__17316.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__17316);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__17316);
    }
  }() ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.KeySeq(nseq, self__._meta);
  }
};
cljs.core.KeySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.KeySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__._meta);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = self__.mseq.cljs$core$ISeq$_first$arity$1(null);
  return me.cljs$core$IMapEntry$_key$arity$1(null);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__17317 = self__.mseq;
    if (G__17317) {
      var bit__4983__auto__ = G__17317.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4983__auto__ || G__17317.cljs$core$INext$) {
        return true;
      } else {
        if (!G__17317.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__17317);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__17317);
    }
  }() ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.KeySeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.KeySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.KeySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.KeySeq(self__.mseq, new_meta);
};
cljs.core.KeySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.KeySeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "mseq", "mseq", 1602647196, null), new cljs.core.Symbol(null, "_meta", "_meta", -1716892533, null)], null);
};
cljs.core.KeySeq.cljs$lang$type = true;
cljs.core.KeySeq.cljs$lang$ctorStr = "cljs.core/KeySeq";
cljs.core.KeySeq.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/KeySeq");
};
cljs.core.__GT_KeySeq = function cljs$core$__GT_KeySeq(mseq, _meta) {
  return new cljs.core.KeySeq(mseq, _meta);
};
cljs.core.KeySeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5285__auto__ = this;
  return cljs.core.es6_iterator(this__5285__auto__);
};
cljs.core.keys = function cljs$core$keys(hash_map) {
  var temp__4422__auto__ = cljs.core.seq(hash_map);
  if (temp__4422__auto__) {
    var mseq = temp__4422__auto__;
    return new cljs.core.KeySeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.key = function cljs$core$key(map_entry) {
  return cljs.core._key(map_entry);
};
cljs.core.ValSeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.ValSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ValSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ValSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.ValSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__17318 = self__.mseq;
    if (G__17318) {
      var bit__4983__auto__ = G__17318.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4983__auto__ || G__17318.cljs$core$INext$) {
        return true;
      } else {
        if (!G__17318.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__17318);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__17318);
    }
  }() ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.ValSeq(nseq, self__._meta);
  }
};
cljs.core.ValSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ValSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__._meta);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = self__.mseq.cljs$core$ISeq$_first$arity$1(null);
  return me.cljs$core$IMapEntry$_val$arity$1(null);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__17319 = self__.mseq;
    if (G__17319) {
      var bit__4983__auto__ = G__17319.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4983__auto__ || G__17319.cljs$core$INext$) {
        return true;
      } else {
        if (!G__17319.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__17319);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__17319);
    }
  }() ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.ValSeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ValSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ValSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ValSeq(self__.mseq, new_meta);
};
cljs.core.ValSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.ValSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "mseq", "mseq", 1602647196, null), new cljs.core.Symbol(null, "_meta", "_meta", -1716892533, null)], null);
};
cljs.core.ValSeq.cljs$lang$type = true;
cljs.core.ValSeq.cljs$lang$ctorStr = "cljs.core/ValSeq";
cljs.core.ValSeq.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/ValSeq");
};
cljs.core.__GT_ValSeq = function cljs$core$__GT_ValSeq(mseq, _meta) {
  return new cljs.core.ValSeq(mseq, _meta);
};
cljs.core.ValSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5285__auto__ = this;
  return cljs.core.es6_iterator(this__5285__auto__);
};
cljs.core.vals = function cljs$core$vals(hash_map) {
  var temp__4422__auto__ = cljs.core.seq(hash_map);
  if (temp__4422__auto__) {
    var mseq = temp__4422__auto__;
    return new cljs.core.ValSeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.val = function cljs$core$val(map_entry) {
  return cljs.core._val(map_entry);
};
cljs.core.merge = function cljs$core$merge() {
  var argseq__5349__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(argseq__5349__auto__);
};
cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic = function(maps) {
  if (cljs.core.truth_(cljs.core.some(cljs.core.identity, maps))) {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(function(p1__17320_SHARP_, p2__17321_SHARP_) {
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(function() {
        var or__4309__auto__ = p1__17320_SHARP_;
        if (cljs.core.truth_(or__4309__auto__)) {
          return or__4309__auto__;
        } else {
          return cljs.core.PersistentArrayMap.EMPTY;
        }
      }(), p2__17321_SHARP_);
    }, maps);
  } else {
    return null;
  }
};
cljs.core.merge.cljs$lang$maxFixedArity = 0;
cljs.core.merge.cljs$lang$applyTo = function(seq17322) {
  return cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq17322));
};
cljs.core.merge_with = function cljs$core$merge_with() {
  var argseq__5349__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5349__auto__);
};
cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic = function(f, maps) {
  if (cljs.core.truth_(cljs.core.some(cljs.core.identity, maps))) {
    var merge_entry = function(m, e) {
      var k = cljs.core.first(e);
      var v = cljs.core.second(e);
      if (cljs.core.contains_QMARK_(m, k)) {
        return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
          var G__17325 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
          var G__17326 = v;
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__17325, G__17326) : f.call(null, G__17325, G__17326);
        }());
      } else {
        return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, v);
      }
    };
    var merge2 = function(merge_entry) {
      return function(m1, m2) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(merge_entry, function() {
          var or__4309__auto__ = m1;
          if (cljs.core.truth_(or__4309__auto__)) {
            return or__4309__auto__;
          } else {
            return cljs.core.PersistentArrayMap.EMPTY;
          }
        }(), cljs.core.seq(m2));
      };
    }(merge_entry);
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(merge2, maps);
  } else {
    return null;
  }
};
cljs.core.merge_with.cljs$lang$maxFixedArity = 1;
cljs.core.merge_with.cljs$lang$applyTo = function(seq17323) {
  var G__17324 = cljs.core.first(seq17323);
  var seq17323__$1 = cljs.core.next(seq17323);
  return cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic(G__17324, seq17323__$1);
};
cljs.core.select_keys = function cljs$core$select_keys(map, keyseq) {
  var ret = cljs.core.PersistentArrayMap.EMPTY;
  var keys = cljs.core.seq(keyseq);
  while (true) {
    if (keys) {
      var key = cljs.core.first(keys);
      var entry = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map, key, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", -1572889185));
      var G__17327 = cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(entry, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", -1572889185)) ? cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ret, key, entry) : ret;
      var G__17328 = cljs.core.next(keys);
      ret = G__17327;
      keys = G__17328;
      continue;
    } else {
      return cljs.core.with_meta(ret, cljs.core.meta(map));
    }
    break;
  }
};
cljs.core.PersistentHashSet = function(meta, hash_map, __hash) {
  this.meta = meta;
  this.hash_map = hash_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 15077647;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentHashSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentHashSet.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentHashSet.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashSet.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_set_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashSet.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashSet.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentHashSet.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__17331 = cljs.core.seq(coll);
  var chunk__17332 = null;
  var count__17333 = 0;
  var i__17334 = 0;
  while (true) {
    if (i__17334 < count__17333) {
      var vec__17335 = chunk__17332.cljs$core$IIndexed$_nth$arity$2(null, i__17334);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__17335, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__17335, 1, null);
      var G__17336_17341 = v;
      var G__17337_17342 = k;
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__17336_17341, G__17337_17342) : f.call(null, G__17336_17341, G__17337_17342);
      var G__17343 = seq__17331;
      var G__17344 = chunk__17332;
      var G__17345 = count__17333;
      var G__17346 = i__17334 + 1;
      seq__17331 = G__17343;
      chunk__17332 = G__17344;
      count__17333 = G__17345;
      i__17334 = G__17346;
      continue;
    } else {
      var temp__4422__auto__ = cljs.core.seq(seq__17331);
      if (temp__4422__auto__) {
        var seq__17331__$1 = temp__4422__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__17331__$1)) {
          var c__5094__auto__ = cljs.core.chunk_first(seq__17331__$1);
          var G__17347 = cljs.core.chunk_rest(seq__17331__$1);
          var G__17348 = c__5094__auto__;
          var G__17349 = cljs.core.count(c__5094__auto__);
          var G__17350 = 0;
          seq__17331 = G__17347;
          chunk__17332 = G__17348;
          count__17333 = G__17349;
          i__17334 = G__17350;
          continue;
        } else {
          var vec__17338 = cljs.core.first(seq__17331__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__17338, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__17338, 1, null);
          var G__17339_17351 = v;
          var G__17340_17352 = k;
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__17339_17351, G__17340_17352) : f.call(null, G__17339_17351, G__17340_17352);
          var G__17353 = cljs.core.next(seq__17331__$1);
          var G__17354 = null;
          var G__17355 = 0;
          var G__17356 = 0;
          seq__17331 = G__17353;
          chunk__17332 = G__17354;
          count__17333 = G__17355;
          i__17334 = G__17356;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, v, null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._contains_key_QMARK_(self__.hash_map, v)) {
    return v;
  } else {
    return not_found;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._count(self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4725__auto__ = self__.__hash;
  if (!(h__4725__auto__ == null)) {
    return h__4725__auto__;
  } else {
    var h__4725__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4725__auto____$1;
    return h__4725__auto____$1;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_(other) && cljs.core.count(coll__$1) === cljs.core.count(other) && cljs.core.every_QMARK_(function(coll__$1) {
    return function(p1__17329_SHARP_) {
      return cljs.core.contains_QMARK_(coll__$1, p1__17329_SHARP_);
    };
  }(coll__$1), other);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashSet(cljs.core._as_transient(self__.hash_map));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentHashSet.EMPTY, self__.meta);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core._dissoc(self__.hash_map, v), null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys(self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(meta__$1, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.hash_map, o, null), null);
};
cljs.core.PersistentHashSet.prototype.call = function() {
  var G__17357 = null;
  var G__17357__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__17357__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__17357 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__17357__2.call(this, self__, k);
      case 3:
        return G__17357__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__17357.cljs$core$IFn$_invoke$arity$2 = G__17357__2;
  G__17357.cljs$core$IFn$_invoke$arity$3 = G__17357__3;
  return G__17357;
}();
cljs.core.PersistentHashSet.prototype.apply = function(self__, args17330) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args17330)));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashSet.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "hash-map", "hash-map", -439030950, null), new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null)], null);
};
cljs.core.PersistentHashSet.cljs$lang$type = true;
cljs.core.PersistentHashSet.cljs$lang$ctorStr = "cljs.core/PersistentHashSet";
cljs.core.PersistentHashSet.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/PersistentHashSet");
};
cljs.core.__GT_PersistentHashSet = function cljs$core$__GT_PersistentHashSet(meta, hash_map, __hash) {
  return new cljs.core.PersistentHashSet(meta, hash_map, __hash);
};
cljs.core.PersistentHashSet.EMPTY = new cljs.core.PersistentHashSet(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.empty_unordered_hash);
cljs.core.PersistentHashSet.fromArray = function(items, no_clone) {
  var len = items.length;
  if (len <= cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
    var arr = no_clone ? items : cljs.core.aclone(items);
    var i = 0;
    var out = cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__17358 = i + 1;
        var G__17359 = cljs.core._assoc_BANG_(out, items[i], null);
        i = G__17358;
        out = G__17359;
        continue;
      } else {
        return new cljs.core.PersistentHashSet(null, cljs.core._persistent_BANG_(out), null);
      }
      break;
    }
  } else {
    var i = 0;
    var out = cljs.core.transient$(cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < len) {
        var G__17360 = i + 1;
        var G__17361 = cljs.core._conj_BANG_(out, items[i]);
        i = G__17360;
        out = G__17361;
        continue;
      } else {
        return cljs.core._persistent_BANG_(out);
      }
      break;
    }
  }
};
cljs.core.PersistentHashSet.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5285__auto__ = this;
  return cljs.core.es6_iterator(this__5285__auto__);
};
cljs.core.TransientHashSet = function(transient_map) {
  this.transient_map = transient_map;
  this.cljs$lang$protocol_mask$partition1$ = 136;
  this.cljs$lang$protocol_mask$partition0$ = 259;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(self__.transient_map, o, null);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return new cljs.core.PersistentHashSet(null, cljs.core.persistent_BANG_(self__.transient_map), null);
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientSet$_disjoin_BANG_$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$2(self__.transient_map, v);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core.count(self__.transient_map);
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(tcoll__$1, v, null);
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, v, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return v;
  }
};
cljs.core.TransientHashSet.prototype.call = function() {
  var G__17363 = null;
  var G__17363__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return null;
    } else {
      return k;
    }
  };
  var G__17363__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return not_found;
    } else {
      return k;
    }
  };
  G__17363 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__17363__2.call(this, self__, k);
      case 3:
        return G__17363__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__17363.cljs$core$IFn$_invoke$arity$2 = G__17363__2;
  G__17363.cljs$core$IFn$_invoke$arity$3 = G__17363__3;
  return G__17363;
}();
cljs.core.TransientHashSet.prototype.apply = function(self__, args17362) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args17362)));
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return null;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "transient-map", "transient-map", 351764893, null)], null);
};
cljs.core.TransientHashSet.cljs$lang$type = true;
cljs.core.TransientHashSet.cljs$lang$ctorStr = "cljs.core/TransientHashSet";
cljs.core.TransientHashSet.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/TransientHashSet");
};
cljs.core.__GT_TransientHashSet = function cljs$core$__GT_TransientHashSet(transient_map) {
  return new cljs.core.TransientHashSet(transient_map);
};
cljs.core.PersistentTreeSet = function(meta, tree_map, __hash) {
  this.meta = meta;
  this.tree_map = tree_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 417730831;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentTreeSet.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeSet.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeSet.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_set_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeSet.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeSet.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentTreeSet.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__17366 = cljs.core.seq(coll);
  var chunk__17367 = null;
  var count__17368 = 0;
  var i__17369 = 0;
  while (true) {
    if (i__17369 < count__17368) {
      var vec__17370 = chunk__17367.cljs$core$IIndexed$_nth$arity$2(null, i__17369);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__17370, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__17370, 1, null);
      var G__17371_17376 = v;
      var G__17372_17377 = k;
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__17371_17376, G__17372_17377) : f.call(null, G__17371_17376, G__17372_17377);
      var G__17378 = seq__17366;
      var G__17379 = chunk__17367;
      var G__17380 = count__17368;
      var G__17381 = i__17369 + 1;
      seq__17366 = G__17378;
      chunk__17367 = G__17379;
      count__17368 = G__17380;
      i__17369 = G__17381;
      continue;
    } else {
      var temp__4422__auto__ = cljs.core.seq(seq__17366);
      if (temp__4422__auto__) {
        var seq__17366__$1 = temp__4422__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__17366__$1)) {
          var c__5094__auto__ = cljs.core.chunk_first(seq__17366__$1);
          var G__17382 = cljs.core.chunk_rest(seq__17366__$1);
          var G__17383 = c__5094__auto__;
          var G__17384 = cljs.core.count(c__5094__auto__);
          var G__17385 = 0;
          seq__17366 = G__17382;
          chunk__17367 = G__17383;
          count__17368 = G__17384;
          i__17369 = G__17385;
          continue;
        } else {
          var vec__17373 = cljs.core.first(seq__17366__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__17373, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__17373, 1, null);
          var G__17374_17386 = v;
          var G__17375_17387 = k;
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__17374_17386, G__17375_17387) : f.call(null, G__17374_17386, G__17375_17387);
          var G__17388 = cljs.core.next(seq__17366__$1);
          var G__17389 = null;
          var G__17390 = 0;
          var G__17391 = 0;
          seq__17366 = G__17388;
          chunk__17367 = G__17389;
          count__17368 = G__17390;
          i__17369 = G__17391;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, v, null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = self__.tree_map.entry_at(v);
  if (!(n == null)) {
    return n.key;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.count(self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.count(self__.tree_map) > 0) {
    return cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.key, cljs.core.rseq(self__.tree_map));
  } else {
    return null;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4725__auto__ = self__.__hash;
  if (!(h__4725__auto__ == null)) {
    return h__4725__auto__;
  } else {
    var h__4725__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4725__auto____$1;
    return h__4725__auto____$1;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_(other) && cljs.core.count(coll__$1) === cljs.core.count(other) && cljs.core.every_QMARK_(function(coll__$1) {
    return function(p1__17364_SHARP_) {
      return cljs.core.contains_QMARK_(coll__$1, p1__17364_SHARP_);
    };
  }(coll__$1), other);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core._empty(self__.tree_map), 0);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(self__.tree_map, v), null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys(self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(meta__$1, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.tree_map, o, null), null);
};
cljs.core.PersistentTreeSet.prototype.call = function() {
  var G__17392 = null;
  var G__17392__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__17392__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__17392 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__17392__2.call(this, self__, k);
      case 3:
        return G__17392__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__17392.cljs$core$IFn$_invoke$arity$2 = G__17392__2;
  G__17392.cljs$core$IFn$_invoke$arity$3 = G__17392__3;
  return G__17392;
}();
cljs.core.PersistentTreeSet.prototype.apply = function(self__, args17365) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args17365)));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.key, cljs.core._sorted_seq(self__.tree_map, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.key, cljs.core._sorted_seq_from(self__.tree_map, k, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return entry;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._comparator(self__.tree_map);
};
cljs.core.PersistentTreeSet.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "tree-map", "tree-map", 1373073049, null), new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null)], null);
};
cljs.core.PersistentTreeSet.cljs$lang$type = true;
cljs.core.PersistentTreeSet.cljs$lang$ctorStr = "cljs.core/PersistentTreeSet";
cljs.core.PersistentTreeSet.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/PersistentTreeSet");
};
cljs.core.__GT_PersistentTreeSet = function cljs$core$__GT_PersistentTreeSet(meta, tree_map, __hash) {
  return new cljs.core.PersistentTreeSet(meta, tree_map, __hash);
};
cljs.core.PersistentTreeSet.EMPTY = new cljs.core.PersistentTreeSet(null, cljs.core.PersistentTreeMap.EMPTY, cljs.core.empty_unordered_hash);
cljs.core.PersistentTreeSet.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5285__auto__ = this;
  return cljs.core.es6_iterator(this__5285__auto__);
};
cljs.core.set_from_indexed_seq = function cljs$core$set_from_indexed_seq(iseq) {
  var arr = iseq.arr;
  var ret = function() {
    var a__5188__auto__ = arr;
    var i = 0;
    var res = cljs.core._as_transient(cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < a__5188__auto__.length) {
        var G__17393 = i + 1;
        var G__17394 = res.cljs$core$ITransientCollection$_conj_BANG_$arity$2(null, arr[i]);
        i = G__17393;
        res = G__17394;
        continue;
      } else {
        return res;
      }
      break;
    }
  }();
  return ret.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(null);
};
cljs.core.set = function cljs$core$set(coll) {
  var in$ = cljs.core.seq(coll);
  if (in$ == null) {
    return cljs.core.PersistentHashSet.EMPTY;
  } else {
    if (in$ instanceof cljs.core.IndexedSeq && in$.i === 0) {
      return cljs.core.set_from_indexed_seq(in$);
    } else {
      var in$__$1 = in$;
      var out = cljs.core._as_transient(cljs.core.PersistentHashSet.EMPTY);
      while (true) {
        if (!(in$__$1 == null)) {
          var G__17395 = cljs.core.next(in$__$1);
          var G__17396 = out.cljs$core$ITransientCollection$_conj_BANG_$arity$2(null, in$__$1.cljs$core$ISeq$_first$arity$1(null));
          in$__$1 = G__17395;
          out = G__17396;
          continue;
        } else {
          return cljs.core.persistent_BANG_(out);
        }
        break;
      }
    }
  }
};
cljs.core.hash_set = function cljs$core$hash_set() {
  var G__17399 = arguments.length;
  switch(G__17399) {
    case 0:
      return cljs.core.hash_set.cljs$core$IFn$_invoke$arity$0();
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0);
      return cljs.core.hash_set.cljs$core$IFn$_invoke$arity$variadic(argseq__5360__auto__);
  }
};
cljs.core.hash_set.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.PersistentHashSet.EMPTY;
};
cljs.core.hash_set.cljs$core$IFn$_invoke$arity$variadic = function(keys) {
  return cljs.core.set(keys);
};
cljs.core.hash_set.cljs$lang$applyTo = function(seq17397) {
  return cljs.core.hash_set.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq17397));
};
cljs.core.hash_set.cljs$lang$maxFixedArity = 0;
cljs.core.sorted_set = function cljs$core$sorted_set() {
  var argseq__5349__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.sorted_set.cljs$core$IFn$_invoke$arity$variadic(argseq__5349__auto__);
};
cljs.core.sorted_set.cljs$core$IFn$_invoke$arity$variadic = function(keys) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, cljs.core.PersistentTreeSet.EMPTY, keys);
};
cljs.core.sorted_set.cljs$lang$maxFixedArity = 0;
cljs.core.sorted_set.cljs$lang$applyTo = function(seq17401) {
  return cljs.core.sorted_set.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq17401));
};
cljs.core.sorted_set_by = function cljs$core$sorted_set_by() {
  var argseq__5349__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return cljs.core.sorted_set_by.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5349__auto__);
};
cljs.core.sorted_set_by.cljs$core$IFn$_invoke$arity$variadic = function(comparator, keys) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, new cljs.core.PersistentTreeSet(null, cljs.core.sorted_map_by(comparator), 0), keys);
};
cljs.core.sorted_set_by.cljs$lang$maxFixedArity = 1;
cljs.core.sorted_set_by.cljs$lang$applyTo = function(seq17402) {
  var G__17403 = cljs.core.first(seq17402);
  var seq17402__$1 = cljs.core.next(seq17402);
  return cljs.core.sorted_set_by.cljs$core$IFn$_invoke$arity$variadic(G__17403, seq17402__$1);
};
cljs.core.replace = function cljs$core$replace() {
  var G__17407 = arguments.length;
  switch(G__17407) {
    case 1:
      return cljs.core.replace.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.replace.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.replace.cljs$core$IFn$_invoke$arity$1 = function(smap) {
  return cljs.core.map.cljs$core$IFn$_invoke$arity$1(function(p1__17404_SHARP_) {
    var temp__4420__auto__ = cljs.core.find(smap, p1__17404_SHARP_);
    if (cljs.core.truth_(temp__4420__auto__)) {
      var e = temp__4420__auto__;
      return cljs.core.val(e);
    } else {
      return p1__17404_SHARP_;
    }
  });
};
cljs.core.replace.cljs$core$IFn$_invoke$arity$2 = function(smap, coll) {
  if (cljs.core.vector_QMARK_(coll)) {
    var n = cljs.core.count(coll);
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(n) {
      return function(v, i) {
        var temp__4420__auto__ = cljs.core.find(smap, cljs.core.nth.cljs$core$IFn$_invoke$arity$2(v, i));
        if (cljs.core.truth_(temp__4420__auto__)) {
          var e = temp__4420__auto__;
          return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(v, i, cljs.core.second(e));
        } else {
          return v;
        }
      };
    }(n), coll, cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.iterate(cljs.core.inc, 0)));
  } else {
    return cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(p1__17405_SHARP_) {
      var temp__4420__auto__ = cljs.core.find(smap, p1__17405_SHARP_);
      if (cljs.core.truth_(temp__4420__auto__)) {
        var e = temp__4420__auto__;
        return cljs.core.second(e);
      } else {
        return p1__17405_SHARP_;
      }
    }, coll);
  }
};
cljs.core.replace.cljs$lang$maxFixedArity = 2;
cljs.core.distinct = function cljs$core$distinct() {
  var G__17410 = arguments.length;
  switch(G__17410) {
    case 0:
      return cljs.core.distinct.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.distinct.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.distinct.cljs$core$IFn$_invoke$arity$0 = function() {
  return function(rf) {
    var seen = cljs.core.volatile_BANG_(cljs.core.PersistentHashSet.EMPTY);
    return function(seen) {
      return function() {
        var G__17422 = null;
        var G__17422__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__17422__1 = function(result) {
          var G__17411 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__17411) : rf.call(null, G__17411);
        };
        var G__17422__2 = function(result, input) {
          if (cljs.core.contains_QMARK_(function() {
            var G__17412 = seen;
            return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__17412) : cljs.core.deref.call(null, G__17412);
          }(), input)) {
            return result;
          } else {
            cljs.core._vreset_BANG_(seen, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core._deref(seen), input));
            var G__17413 = result;
            var G__17414 = input;
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__17413, G__17414) : rf.call(null, G__17413, G__17414);
          }
        };
        G__17422 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__17422__0.call(this);
            case 1:
              return G__17422__1.call(this, result);
            case 2:
              return G__17422__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__17422.cljs$core$IFn$_invoke$arity$0 = G__17422__0;
        G__17422.cljs$core$IFn$_invoke$arity$1 = G__17422__1;
        G__17422.cljs$core$IFn$_invoke$arity$2 = G__17422__2;
        return G__17422;
      }();
    }(seen);
  };
};
cljs.core.distinct.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var step = function cljs$core$step(xs, seen) {
    return new cljs.core.LazySeq(null, function() {
      return function(p__17419, seen__$1) {
        while (true) {
          var vec__17420 = p__17419;
          var f = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__17420, 0, null);
          var xs__$1 = vec__17420;
          var temp__4422__auto__ = cljs.core.seq(xs__$1);
          if (temp__4422__auto__) {
            var s = temp__4422__auto__;
            if (cljs.core.contains_QMARK_(seen__$1, f)) {
              var G__17423 = cljs.core.rest(s);
              var G__17424 = seen__$1;
              p__17419 = G__17423;
              seen__$1 = G__17424;
              continue;
            } else {
              return cljs.core.cons(f, cljs$core$step(cljs.core.rest(s), cljs.core.conj.cljs$core$IFn$_invoke$arity$2(seen__$1, f)));
            }
          } else {
            return null;
          }
          break;
        }
      }.call(null, xs, seen);
    }, null, null);
  };
  return step(coll, cljs.core.PersistentHashSet.EMPTY);
};
cljs.core.distinct.cljs$lang$maxFixedArity = 1;
cljs.core.butlast = function cljs$core$butlast(s) {
  var ret = cljs.core.PersistentVector.EMPTY;
  var s__$1 = s;
  while (true) {
    if (cljs.core.next(s__$1)) {
      var G__17425 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(ret, cljs.core.first(s__$1));
      var G__17426 = cljs.core.next(s__$1);
      ret = G__17425;
      s__$1 = G__17426;
      continue;
    } else {
      return cljs.core.seq(ret);
    }
    break;
  }
};
cljs.core.name = function cljs$core$name(x) {
  if (function() {
    var G__17428 = x;
    if (G__17428) {
      var bit__4976__auto__ = G__17428.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__4976__auto__ || G__17428.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return x.cljs$core$INamed$_name$arity$1(null);
  } else {
    if (typeof x === "string") {
      return x;
    } else {
      throw new Error([cljs.core.str("Doesn't support name: "), cljs.core.str(x)].join(""));
    }
  }
};
cljs.core.zipmap = function cljs$core$zipmap(keys, vals) {
  var map = cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY);
  var ks = cljs.core.seq(keys);
  var vs = cljs.core.seq(vals);
  while (true) {
    if (ks && vs) {
      var G__17429 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(map, cljs.core.first(ks), cljs.core.first(vs));
      var G__17430 = cljs.core.next(ks);
      var G__17431 = cljs.core.next(vs);
      map = G__17429;
      ks = G__17430;
      vs = G__17431;
      continue;
    } else {
      return cljs.core.persistent_BANG_(map);
    }
    break;
  }
};
cljs.core.max_key = function cljs$core$max_key() {
  var G__17439 = arguments.length;
  switch(G__17439) {
    case 2:
      return cljs.core.max_key.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.max_key.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 3), 0);
      return cljs.core.max_key.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5360__auto__);
  }
};
cljs.core.max_key.cljs$core$IFn$_invoke$arity$2 = function(k, x) {
  return x;
};
cljs.core.max_key.cljs$core$IFn$_invoke$arity$3 = function(k, x, y) {
  if (function() {
    var G__17440 = x;
    return k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(G__17440) : k.call(null, G__17440);
  }() > function() {
    var G__17441 = y;
    return k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(G__17441) : k.call(null, G__17441);
  }()) {
    return x;
  } else {
    return y;
  }
};
cljs.core.max_key.cljs$core$IFn$_invoke$arity$variadic = function(k, x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__17432_SHARP_, p2__17433_SHARP_) {
    return cljs.core.max_key.cljs$core$IFn$_invoke$arity$3(k, p1__17432_SHARP_, p2__17433_SHARP_);
  }, cljs.core.max_key.cljs$core$IFn$_invoke$arity$3(k, x, y), more);
};
cljs.core.max_key.cljs$lang$applyTo = function(seq17434) {
  var G__17435 = cljs.core.first(seq17434);
  var seq17434__$1 = cljs.core.next(seq17434);
  var G__17436 = cljs.core.first(seq17434__$1);
  var seq17434__$2 = cljs.core.next(seq17434__$1);
  var G__17437 = cljs.core.first(seq17434__$2);
  var seq17434__$3 = cljs.core.next(seq17434__$2);
  return cljs.core.max_key.cljs$core$IFn$_invoke$arity$variadic(G__17435, G__17436, G__17437, seq17434__$3);
};
cljs.core.max_key.cljs$lang$maxFixedArity = 3;
cljs.core.min_key = function cljs$core$min_key() {
  var G__17450 = arguments.length;
  switch(G__17450) {
    case 2:
      return cljs.core.min_key.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.min_key.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 3), 0);
      return cljs.core.min_key.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5360__auto__);
  }
};
cljs.core.min_key.cljs$core$IFn$_invoke$arity$2 = function(k, x) {
  return x;
};
cljs.core.min_key.cljs$core$IFn$_invoke$arity$3 = function(k, x, y) {
  if (function() {
    var G__17451 = x;
    return k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(G__17451) : k.call(null, G__17451);
  }() < function() {
    var G__17452 = y;
    return k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(G__17452) : k.call(null, G__17452);
  }()) {
    return x;
  } else {
    return y;
  }
};
cljs.core.min_key.cljs$core$IFn$_invoke$arity$variadic = function(k, x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__17443_SHARP_, p2__17444_SHARP_) {
    return cljs.core.min_key.cljs$core$IFn$_invoke$arity$3(k, p1__17443_SHARP_, p2__17444_SHARP_);
  }, cljs.core.min_key.cljs$core$IFn$_invoke$arity$3(k, x, y), more);
};
cljs.core.min_key.cljs$lang$applyTo = function(seq17445) {
  var G__17446 = cljs.core.first(seq17445);
  var seq17445__$1 = cljs.core.next(seq17445);
  var G__17447 = cljs.core.first(seq17445__$1);
  var seq17445__$2 = cljs.core.next(seq17445__$1);
  var G__17448 = cljs.core.first(seq17445__$2);
  var seq17445__$3 = cljs.core.next(seq17445__$2);
  return cljs.core.min_key.cljs$core$IFn$_invoke$arity$variadic(G__17446, G__17447, G__17448, seq17445__$3);
};
cljs.core.min_key.cljs$lang$maxFixedArity = 3;
cljs.core.ArrayList = function(arr) {
  this.arr = arr;
};
cljs.core.ArrayList.prototype.add = function(x) {
  var self__ = this;
  var _ = this;
  return self__.arr.push(x);
};
cljs.core.ArrayList.prototype.size = function() {
  var self__ = this;
  var _ = this;
  return self__.arr.length;
};
cljs.core.ArrayList.prototype.clear = function() {
  var self__ = this;
  var _ = this;
  return self__.arr = [];
};
cljs.core.ArrayList.prototype.isEmpty = function() {
  var self__ = this;
  var _ = this;
  return self__.arr.length === 0;
};
cljs.core.ArrayList.prototype.toArray = function() {
  var self__ = this;
  var _ = this;
  return self__.arr;
};
cljs.core.ArrayList.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "arr", "arr", 2115492975, null)], null);
};
cljs.core.ArrayList.cljs$lang$type = true;
cljs.core.ArrayList.cljs$lang$ctorStr = "cljs.core/ArrayList";
cljs.core.ArrayList.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/ArrayList");
};
cljs.core.__GT_ArrayList = function cljs$core$__GT_ArrayList(arr) {
  return new cljs.core.ArrayList(arr);
};
cljs.core.array_list = function cljs$core$array_list() {
  return new cljs.core.ArrayList([]);
};
cljs.core.partition_all = function cljs$core$partition_all() {
  var G__17455 = arguments.length;
  switch(G__17455) {
    case 1:
      return cljs.core.partition_all.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.partition_all.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.partition_all.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.partition_all.cljs$core$IFn$_invoke$arity$1 = function(n) {
  return function(rf) {
    var a = cljs.core.array_list();
    return function(a) {
      return function() {
        var G__17462 = null;
        var G__17462__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__17462__1 = function(result) {
          var result__$1 = cljs.core.truth_(a.isEmpty()) ? result : function() {
            var v = cljs.core.vec(a.toArray());
            a.clear();
            return cljs.core.unreduced(function() {
              var G__17456 = result;
              var G__17457 = v;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__17456, G__17457) : rf.call(null, G__17456, G__17457);
            }());
          }();
          var G__17458 = result__$1;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__17458) : rf.call(null, G__17458);
        };
        var G__17462__2 = function(result, input) {
          a.add(input);
          if (n === a.size()) {
            var v = cljs.core.vec(a.toArray());
            a.clear();
            var G__17459 = result;
            var G__17460 = v;
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__17459, G__17460) : rf.call(null, G__17459, G__17460);
          } else {
            return result;
          }
        };
        G__17462 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__17462__0.call(this);
            case 1:
              return G__17462__1.call(this, result);
            case 2:
              return G__17462__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__17462.cljs$core$IFn$_invoke$arity$0 = G__17462__0;
        G__17462.cljs$core$IFn$_invoke$arity$1 = G__17462__1;
        G__17462.cljs$core$IFn$_invoke$arity$2 = G__17462__2;
        return G__17462;
      }();
    }(a);
  };
};
cljs.core.partition_all.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  return cljs.core.partition_all.cljs$core$IFn$_invoke$arity$3(n, n, coll);
};
cljs.core.partition_all.cljs$core$IFn$_invoke$arity$3 = function(n, step, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4422__auto__ = cljs.core.seq(coll);
    if (temp__4422__auto__) {
      var s = temp__4422__auto__;
      return cljs.core.cons(cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, s), cljs.core.partition_all.cljs$core$IFn$_invoke$arity$3(n, step, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(step, s)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.partition_all.cljs$lang$maxFixedArity = 3;
cljs.core.take_while = function cljs$core$take_while() {
  var G__17464 = arguments.length;
  switch(G__17464) {
    case 1:
      return cljs.core.take_while.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.take_while.cljs$core$IFn$_invoke$arity$1 = function(pred) {
  return function(rf) {
    return function() {
      var G__17471 = null;
      var G__17471__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__17471__1 = function(result) {
        var G__17465 = result;
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__17465) : rf.call(null, G__17465);
      };
      var G__17471__2 = function(result, input) {
        if (cljs.core.truth_(function() {
          var G__17466 = input;
          return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__17466) : pred.call(null, G__17466);
        }())) {
          var G__17467 = result;
          var G__17468 = input;
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__17467, G__17468) : rf.call(null, G__17467, G__17468);
        } else {
          return cljs.core.reduced(result);
        }
      };
      G__17471 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__17471__0.call(this);
          case 1:
            return G__17471__1.call(this, result);
          case 2:
            return G__17471__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__17471.cljs$core$IFn$_invoke$arity$0 = G__17471__0;
      G__17471.cljs$core$IFn$_invoke$arity$1 = G__17471__1;
      G__17471.cljs$core$IFn$_invoke$arity$2 = G__17471__2;
      return G__17471;
    }();
  };
};
cljs.core.take_while.cljs$core$IFn$_invoke$arity$2 = function(pred, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4422__auto__ = cljs.core.seq(coll);
    if (temp__4422__auto__) {
      var s = temp__4422__auto__;
      if (cljs.core.truth_(function() {
        var G__17469 = cljs.core.first(s);
        return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__17469) : pred.call(null, G__17469);
      }())) {
        return cljs.core.cons(cljs.core.first(s), cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(pred, cljs.core.rest(s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.take_while.cljs$lang$maxFixedArity = 2;
cljs.core.mk_bound_fn = function cljs$core$mk_bound_fn(sc, test, key) {
  return function(e) {
    var comp = cljs.core._comparator(sc);
    var G__17476 = function() {
      var G__17478 = cljs.core._entry_key(sc, e);
      var G__17479 = key;
      return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__17478, G__17479) : comp.call(null, G__17478, G__17479);
    }();
    var G__17477 = 0;
    return test.cljs$core$IFn$_invoke$arity$2 ? test.cljs$core$IFn$_invoke$arity$2(G__17476, G__17477) : test.call(null, G__17476, G__17477);
  };
};
cljs.core.subseq = function cljs$core$subseq() {
  var G__17481 = arguments.length;
  switch(G__17481) {
    case 3:
      return cljs.core.subseq.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 5:
      return cljs.core.subseq.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.subseq.cljs$core$IFn$_invoke$arity$3 = function(sc, test, key) {
  var include = cljs.core.mk_bound_fn(sc, test, key);
  if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._GT_, cljs.core._GT__EQ_], true).call(null, test))) {
    var temp__4422__auto__ = cljs.core._sorted_seq_from(sc, key, true);
    if (cljs.core.truth_(temp__4422__auto__)) {
      var vec__17482 = temp__4422__auto__;
      var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__17482, 0, null);
      var s = vec__17482;
      if (cljs.core.truth_(function() {
        var G__17483 = e;
        return include.cljs$core$IFn$_invoke$arity$1 ? include.cljs$core$IFn$_invoke$arity$1(G__17483) : include.call(null, G__17483);
      }())) {
        return s;
      } else {
        return cljs.core.next(s);
      }
    } else {
      return null;
    }
  } else {
    return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(include, cljs.core._sorted_seq(sc, true));
  }
};
cljs.core.subseq.cljs$core$IFn$_invoke$arity$5 = function(sc, start_test, start_key, end_test, end_key) {
  var temp__4422__auto__ = cljs.core._sorted_seq_from(sc, start_key, true);
  if (cljs.core.truth_(temp__4422__auto__)) {
    var vec__17484 = temp__4422__auto__;
    var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__17484, 0, null);
    var s = vec__17484;
    return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(cljs.core.mk_bound_fn(sc, end_test, end_key), cljs.core.truth_(cljs.core.mk_bound_fn(sc, start_test, start_key).call(null, e)) ? s : cljs.core.next(s));
  } else {
    return null;
  }
};
cljs.core.subseq.cljs$lang$maxFixedArity = 5;
cljs.core.rsubseq = function cljs$core$rsubseq() {
  var G__17487 = arguments.length;
  switch(G__17487) {
    case 3:
      return cljs.core.rsubseq.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 5:
      return cljs.core.rsubseq.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.rsubseq.cljs$core$IFn$_invoke$arity$3 = function(sc, test, key) {
  var include = cljs.core.mk_bound_fn(sc, test, key);
  if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._LT_, cljs.core._LT__EQ_], true).call(null, test))) {
    var temp__4422__auto__ = cljs.core._sorted_seq_from(sc, key, false);
    if (cljs.core.truth_(temp__4422__auto__)) {
      var vec__17488 = temp__4422__auto__;
      var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__17488, 0, null);
      var s = vec__17488;
      if (cljs.core.truth_(function() {
        var G__17489 = e;
        return include.cljs$core$IFn$_invoke$arity$1 ? include.cljs$core$IFn$_invoke$arity$1(G__17489) : include.call(null, G__17489);
      }())) {
        return s;
      } else {
        return cljs.core.next(s);
      }
    } else {
      return null;
    }
  } else {
    return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(include, cljs.core._sorted_seq(sc, false));
  }
};
cljs.core.rsubseq.cljs$core$IFn$_invoke$arity$5 = function(sc, start_test, start_key, end_test, end_key) {
  var temp__4422__auto__ = cljs.core._sorted_seq_from(sc, end_key, false);
  if (cljs.core.truth_(temp__4422__auto__)) {
    var vec__17490 = temp__4422__auto__;
    var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__17490, 0, null);
    var s = vec__17490;
    return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(cljs.core.mk_bound_fn(sc, start_test, start_key), cljs.core.truth_(cljs.core.mk_bound_fn(sc, end_test, end_key).call(null, e)) ? s : cljs.core.next(s));
  } else {
    return null;
  }
};
cljs.core.rsubseq.cljs$lang$maxFixedArity = 5;
cljs.core.RangeIterator = function(i, end, step) {
  this.i = i;
  this.end = end;
  this.step = step;
};
cljs.core.RangeIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  if (self__.step > 0) {
    return self__.i < self__.end;
  } else {
    return self__.i > self__.end;
  }
};
cljs.core.RangeIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.i;
  self__.i = self__.i + self__.step;
  return ret;
};
cljs.core.RangeIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.Symbol(null, "end", "end", 1372345569, null), new cljs.core.Symbol(null, "step", "step", -1365547645, null)], null);
};
cljs.core.RangeIterator.cljs$lang$type = true;
cljs.core.RangeIterator.cljs$lang$ctorStr = "cljs.core/RangeIterator";
cljs.core.RangeIterator.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/RangeIterator");
};
cljs.core.__GT_RangeIterator = function cljs$core$__GT_RangeIterator(i, end, step) {
  return new cljs.core.RangeIterator(i, end, step);
};
cljs.core.Range = function(meta, start, end, step, __hash) {
  this.meta = meta;
  this.start = start;
  this.end = end;
  this.step = step;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375006;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Range.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.Range.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$2 = function(rng, n) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count(rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      throw new Error("Index out of bounds");
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$3 = function(rng, n, not_found) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count(rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      return not_found;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIterable$ = true;
cljs.core.Range.prototype.cljs$core$IIterable$_iterator$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RangeIterator(self__.start, self__.end, self__.step);
};
cljs.core.Range.prototype.cljs$core$IMeta$_meta$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return self__.meta;
};
cljs.core.Range.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Range(self__.meta, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$INext$_next$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start + self__.step < self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  } else {
    if (self__.start + self__.step > self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICounted$_count$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core.not(cljs.core._seq(rng__$1))) {
    return 0;
  } else {
    var G__17492 = (self__.end - self__.start) / self__.step;
    return Math.ceil(G__17492);
  }
};
cljs.core.Range.prototype.cljs$core$IHash$_hash$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  var h__4725__auto__ = self__.__hash;
  if (!(h__4725__auto__ == null)) {
    return h__4725__auto__;
  } else {
    var h__4725__auto____$1 = cljs.core.hash_ordered_coll(rng__$1);
    self__.__hash = h__4725__auto____$1;
    return h__4725__auto____$1;
  }
};
cljs.core.Range.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(rng, other) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.equiv_sequential(rng__$1, other);
};
cljs.core.Range.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$2 = function(rng, f) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(rng__$1, f);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$3 = function(rng, f, init) {
  var self__ = this;
  var rng__$1 = this;
  var i = self__.start;
  var ret = init;
  while (true) {
    if (self__.step > 0 ? i < self__.end : i > self__.end) {
      var ret__$1 = function() {
        var G__17493 = ret;
        var G__17494 = i;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__17493, G__17494) : f.call(null, G__17493, G__17494);
      }();
      if (cljs.core.reduced_QMARK_(ret__$1)) {
        var G__17495 = ret__$1;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__17495) : cljs.core.deref.call(null, G__17495);
      } else {
        var G__17496 = i + self__.step;
        var G__17497 = ret__$1;
        i = G__17496;
        ret = G__17497;
        continue;
      }
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_first$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core._seq(rng__$1) == null) {
    return null;
  } else {
    return self__.start;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_rest$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (!(cljs.core._seq(rng__$1) == null)) {
    return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.Range.prototype.cljs$core$ISeqable$_seq$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start < self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  } else {
    if (self__.start > self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(rng, meta__$1) {
  var self__ = this;
  var rng__$1 = this;
  return new cljs.core.Range(meta__$1, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$ICollection$_conj$arity$2 = function(rng, o) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.cons(o, rng__$1);
};
cljs.core.Range.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "start", "start", 1285322546, null), new cljs.core.Symbol(null, "end", "end", 1372345569, null), new cljs.core.Symbol(null, "step", "step", -1365547645, null), new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null)], null);
};
cljs.core.Range.cljs$lang$type = true;
cljs.core.Range.cljs$lang$ctorStr = "cljs.core/Range";
cljs.core.Range.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/Range");
};
cljs.core.__GT_Range = function cljs$core$__GT_Range(meta, start, end, step, __hash) {
  return new cljs.core.Range(meta, start, end, step, __hash);
};
cljs.core.Range.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5285__auto__ = this;
  return cljs.core.es6_iterator(this__5285__auto__);
};
cljs.core.range = function cljs$core$range() {
  var G__17499 = arguments.length;
  switch(G__17499) {
    case 0:
      return cljs.core.range.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.range.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.range.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.range.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.range.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.range.cljs$core$IFn$_invoke$arity$3(0, Number.MAX_VALUE, 1);
};
cljs.core.range.cljs$core$IFn$_invoke$arity$1 = function(end) {
  return cljs.core.range.cljs$core$IFn$_invoke$arity$3(0, end, 1);
};
cljs.core.range.cljs$core$IFn$_invoke$arity$2 = function(start, end) {
  return cljs.core.range.cljs$core$IFn$_invoke$arity$3(start, end, 1);
};
cljs.core.range.cljs$core$IFn$_invoke$arity$3 = function(start, end, step) {
  return new cljs.core.Range(null, start, end, step, null);
};
cljs.core.range.cljs$lang$maxFixedArity = 3;
cljs.core.take_nth = function cljs$core$take_nth() {
  var G__17502 = arguments.length;
  switch(G__17502) {
    case 1:
      return cljs.core.take_nth.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.take_nth.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.take_nth.cljs$core$IFn$_invoke$arity$1 = function(n) {
  return function(rf) {
    var ia = cljs.core.volatile_BANG_(-1);
    return function(ia) {
      return function() {
        var G__17507 = null;
        var G__17507__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__17507__1 = function(result) {
          var G__17503 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__17503) : rf.call(null, G__17503);
        };
        var G__17507__2 = function(result, input) {
          var i = cljs.core._vreset_BANG_(ia, cljs.core._deref(ia) + 1);
          if (cljs.core.rem(i, n) === 0) {
            var G__17504 = result;
            var G__17505 = input;
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__17504, G__17505) : rf.call(null, G__17504, G__17505);
          } else {
            return result;
          }
        };
        G__17507 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__17507__0.call(this);
            case 1:
              return G__17507__1.call(this, result);
            case 2:
              return G__17507__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__17507.cljs$core$IFn$_invoke$arity$0 = G__17507__0;
        G__17507.cljs$core$IFn$_invoke$arity$1 = G__17507__1;
        G__17507.cljs$core$IFn$_invoke$arity$2 = G__17507__2;
        return G__17507;
      }();
    }(ia);
  };
};
cljs.core.take_nth.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4422__auto__ = cljs.core.seq(coll);
    if (temp__4422__auto__) {
      var s = temp__4422__auto__;
      return cljs.core.cons(cljs.core.first(s), cljs.core.take_nth.cljs$core$IFn$_invoke$arity$2(n, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, s)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.take_nth.cljs$lang$maxFixedArity = 2;
cljs.core.split_with = function cljs$core$split_with(pred, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(pred, coll), cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2(pred, coll)], null);
};
cljs.core.partition_by = function cljs$core$partition_by() {
  var G__17510 = arguments.length;
  switch(G__17510) {
    case 1:
      return cljs.core.partition_by.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.partition_by.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function(rf) {
    var a = cljs.core.array_list();
    var pa = cljs.core.volatile_BANG_(new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439));
    return function(a, pa) {
      return function() {
        var G__17521 = null;
        var G__17521__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__17521__1 = function(result) {
          var result__$1 = cljs.core.truth_(a.isEmpty()) ? result : function() {
            var v = cljs.core.vec(a.toArray());
            a.clear();
            return cljs.core.unreduced(function() {
              var G__17511 = result;
              var G__17512 = v;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__17511, G__17512) : rf.call(null, G__17511, G__17512);
            }());
          }();
          var G__17513 = result__$1;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__17513) : rf.call(null, G__17513);
        };
        var G__17521__2 = function(result, input) {
          var pval = function() {
            var G__17514 = pa;
            return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__17514) : cljs.core.deref.call(null, G__17514);
          }();
          var val = function() {
            var G__17515 = input;
            return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__17515) : f.call(null, G__17515);
          }();
          cljs.core.vreset_BANG_(pa, val);
          if (cljs.core.keyword_identical_QMARK_(pval, new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439)) || cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(val, pval)) {
            a.add(input);
            return result;
          } else {
            var v = cljs.core.vec(a.toArray());
            a.clear();
            var ret = function() {
              var G__17516 = result;
              var G__17517 = v;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__17516, G__17517) : rf.call(null, G__17516, G__17517);
            }();
            if (cljs.core.reduced_QMARK_(ret)) {
            } else {
              a.add(input);
            }
            return ret;
          }
        };
        G__17521 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__17521__0.call(this);
            case 1:
              return G__17521__1.call(this, result);
            case 2:
              return G__17521__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__17521.cljs$core$IFn$_invoke$arity$0 = G__17521__0;
        G__17521.cljs$core$IFn$_invoke$arity$1 = G__17521__1;
        G__17521.cljs$core$IFn$_invoke$arity$2 = G__17521__2;
        return G__17521;
      }();
    }(a, pa);
  };
};
cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4422__auto__ = cljs.core.seq(coll);
    if (temp__4422__auto__) {
      var s = temp__4422__auto__;
      var fst = cljs.core.first(s);
      var fv = function() {
        var G__17518 = fst;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__17518) : f.call(null, G__17518);
      }();
      var run = cljs.core.cons(fst, cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(function(fst, fv, s, temp__4422__auto__) {
        return function(p1__17508_SHARP_) {
          return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(fv, function() {
            var G__17519 = p1__17508_SHARP_;
            return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__17519) : f.call(null, G__17519);
          }());
        };
      }(fst, fv, s, temp__4422__auto__), cljs.core.next(s)));
      return cljs.core.cons(run, cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2(f, cljs.core.seq(cljs.core.drop.cljs$core$IFn$_invoke$arity$2(cljs.core.count(run), s))));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.partition_by.cljs$lang$maxFixedArity = 2;
cljs.core.frequencies = function cljs$core$frequencies(coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(counts, x) {
    return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(counts, x, cljs.core.get.cljs$core$IFn$_invoke$arity$3(counts, x, 0) + 1);
  }, cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.reductions = function cljs$core$reductions() {
  var G__17523 = arguments.length;
  switch(G__17523) {
    case 2:
      return cljs.core.reductions.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.reductions.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.reductions.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4420__auto__ = cljs.core.seq(coll);
    if (temp__4420__auto__) {
      var s = temp__4420__auto__;
      return cljs.core.reductions.cljs$core$IFn$_invoke$arity$3(f, cljs.core.first(s), cljs.core.rest(s));
    } else {
      return cljs.core._conj(cljs.core.List.EMPTY, function() {
        return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
      }());
    }
  }, null, null);
};
cljs.core.reductions.cljs$core$IFn$_invoke$arity$3 = function(f, init, coll) {
  return cljs.core.cons(init, new cljs.core.LazySeq(null, function() {
    var temp__4422__auto__ = cljs.core.seq(coll);
    if (temp__4422__auto__) {
      var s = temp__4422__auto__;
      return cljs.core.reductions.cljs$core$IFn$_invoke$arity$3(f, function() {
        var G__17524 = init;
        var G__17525 = cljs.core.first(s);
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__17524, G__17525) : f.call(null, G__17524, G__17525);
      }(), cljs.core.rest(s));
    } else {
      return null;
    }
  }, null, null));
};
cljs.core.reductions.cljs$lang$maxFixedArity = 3;
cljs.core.juxt = function cljs$core$juxt() {
  var G__17542 = arguments.length;
  switch(G__17542) {
    case 1:
      return cljs.core.juxt.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.juxt.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.juxt.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 3), 0);
      return cljs.core.juxt.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5360__auto__);
  }
};
cljs.core.juxt.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function() {
    var G__17586 = null;
    var G__17586__0 = function() {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
        return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
      }()], null);
    };
    var G__17586__1 = function(x) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
        var G__17543 = x;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__17543) : f.call(null, G__17543);
      }()], null);
    };
    var G__17586__2 = function(x, y) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
        var G__17544 = x;
        var G__17545 = y;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__17544, G__17545) : f.call(null, G__17544, G__17545);
      }()], null);
    };
    var G__17586__3 = function(x, y, z) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
        var G__17546 = x;
        var G__17547 = y;
        var G__17548 = z;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__17546, G__17547, G__17548) : f.call(null, G__17546, G__17547, G__17548);
      }()], null);
    };
    var G__17586__4 = function() {
      var G__17587__delegate = function(x, y, z, args) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, x, y, z, args)], null);
      };
      var G__17587 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__17588__i = 0, G__17588__a = new Array(arguments.length - 3);
          while (G__17588__i < G__17588__a.length) {
            G__17588__a[G__17588__i] = arguments[G__17588__i + 3];
            ++G__17588__i;
          }
          args = new cljs.core.IndexedSeq(G__17588__a, 0);
        }
        return G__17587__delegate.call(this, x, y, z, args);
      };
      G__17587.cljs$lang$maxFixedArity = 3;
      G__17587.cljs$lang$applyTo = function(arglist__17589) {
        var x = cljs.core.first(arglist__17589);
        arglist__17589 = cljs.core.next(arglist__17589);
        var y = cljs.core.first(arglist__17589);
        arglist__17589 = cljs.core.next(arglist__17589);
        var z = cljs.core.first(arglist__17589);
        var args = cljs.core.rest(arglist__17589);
        return G__17587__delegate(x, y, z, args);
      };
      G__17587.cljs$core$IFn$_invoke$arity$variadic = G__17587__delegate;
      return G__17587;
    }();
    G__17586 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__17586__0.call(this);
        case 1:
          return G__17586__1.call(this, x);
        case 2:
          return G__17586__2.call(this, x, y);
        case 3:
          return G__17586__3.call(this, x, y, z);
        default:
          var G__17590 = null;
          if (arguments.length > 3) {
            var G__17591__i = 0, G__17591__a = new Array(arguments.length - 3);
            while (G__17591__i < G__17591__a.length) {
              G__17591__a[G__17591__i] = arguments[G__17591__i + 3];
              ++G__17591__i;
            }
            G__17590 = new cljs.core.IndexedSeq(G__17591__a, 0);
          }
          return G__17586__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__17590);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__17586.cljs$lang$maxFixedArity = 3;
    G__17586.cljs$lang$applyTo = G__17586__4.cljs$lang$applyTo;
    G__17586.cljs$core$IFn$_invoke$arity$0 = G__17586__0;
    G__17586.cljs$core$IFn$_invoke$arity$1 = G__17586__1;
    G__17586.cljs$core$IFn$_invoke$arity$2 = G__17586__2;
    G__17586.cljs$core$IFn$_invoke$arity$3 = G__17586__3;
    G__17586.cljs$core$IFn$_invoke$arity$variadic = G__17586__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__17586;
  }();
};
cljs.core.juxt.cljs$core$IFn$_invoke$arity$2 = function(f, g) {
  return function() {
    var G__17592 = null;
    var G__17592__0 = function() {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
        return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
      }(), function() {
        return g.cljs$core$IFn$_invoke$arity$0 ? g.cljs$core$IFn$_invoke$arity$0() : g.call(null);
      }()], null);
    };
    var G__17592__1 = function(x) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
        var G__17549 = x;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__17549) : f.call(null, G__17549);
      }(), function() {
        var G__17550 = x;
        return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__17550) : g.call(null, G__17550);
      }()], null);
    };
    var G__17592__2 = function(x, y) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
        var G__17551 = x;
        var G__17552 = y;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__17551, G__17552) : f.call(null, G__17551, G__17552);
      }(), function() {
        var G__17553 = x;
        var G__17554 = y;
        return g.cljs$core$IFn$_invoke$arity$2 ? g.cljs$core$IFn$_invoke$arity$2(G__17553, G__17554) : g.call(null, G__17553, G__17554);
      }()], null);
    };
    var G__17592__3 = function(x, y, z) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
        var G__17555 = x;
        var G__17556 = y;
        var G__17557 = z;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__17555, G__17556, G__17557) : f.call(null, G__17555, G__17556, G__17557);
      }(), function() {
        var G__17558 = x;
        var G__17559 = y;
        var G__17560 = z;
        return g.cljs$core$IFn$_invoke$arity$3 ? g.cljs$core$IFn$_invoke$arity$3(G__17558, G__17559, G__17560) : g.call(null, G__17558, G__17559, G__17560);
      }()], null);
    };
    var G__17592__4 = function() {
      var G__17593__delegate = function(x, y, z, args) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, x, y, z, args), cljs.core.apply.cljs$core$IFn$_invoke$arity$5(g, x, y, z, args)], null);
      };
      var G__17593 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__17594__i = 0, G__17594__a = new Array(arguments.length - 3);
          while (G__17594__i < G__17594__a.length) {
            G__17594__a[G__17594__i] = arguments[G__17594__i + 3];
            ++G__17594__i;
          }
          args = new cljs.core.IndexedSeq(G__17594__a, 0);
        }
        return G__17593__delegate.call(this, x, y, z, args);
      };
      G__17593.cljs$lang$maxFixedArity = 3;
      G__17593.cljs$lang$applyTo = function(arglist__17595) {
        var x = cljs.core.first(arglist__17595);
        arglist__17595 = cljs.core.next(arglist__17595);
        var y = cljs.core.first(arglist__17595);
        arglist__17595 = cljs.core.next(arglist__17595);
        var z = cljs.core.first(arglist__17595);
        var args = cljs.core.rest(arglist__17595);
        return G__17593__delegate(x, y, z, args);
      };
      G__17593.cljs$core$IFn$_invoke$arity$variadic = G__17593__delegate;
      return G__17593;
    }();
    G__17592 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__17592__0.call(this);
        case 1:
          return G__17592__1.call(this, x);
        case 2:
          return G__17592__2.call(this, x, y);
        case 3:
          return G__17592__3.call(this, x, y, z);
        default:
          var G__17596 = null;
          if (arguments.length > 3) {
            var G__17597__i = 0, G__17597__a = new Array(arguments.length - 3);
            while (G__17597__i < G__17597__a.length) {
              G__17597__a[G__17597__i] = arguments[G__17597__i + 3];
              ++G__17597__i;
            }
            G__17596 = new cljs.core.IndexedSeq(G__17597__a, 0);
          }
          return G__17592__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__17596);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__17592.cljs$lang$maxFixedArity = 3;
    G__17592.cljs$lang$applyTo = G__17592__4.cljs$lang$applyTo;
    G__17592.cljs$core$IFn$_invoke$arity$0 = G__17592__0;
    G__17592.cljs$core$IFn$_invoke$arity$1 = G__17592__1;
    G__17592.cljs$core$IFn$_invoke$arity$2 = G__17592__2;
    G__17592.cljs$core$IFn$_invoke$arity$3 = G__17592__3;
    G__17592.cljs$core$IFn$_invoke$arity$variadic = G__17592__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__17592;
  }();
};
cljs.core.juxt.cljs$core$IFn$_invoke$arity$3 = function(f, g, h) {
  return function() {
    var G__17598 = null;
    var G__17598__0 = function() {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
        return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
      }(), function() {
        return g.cljs$core$IFn$_invoke$arity$0 ? g.cljs$core$IFn$_invoke$arity$0() : g.call(null);
      }(), function() {
        return h.cljs$core$IFn$_invoke$arity$0 ? h.cljs$core$IFn$_invoke$arity$0() : h.call(null);
      }()], null);
    };
    var G__17598__1 = function(x) {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
        var G__17561 = x;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__17561) : f.call(null, G__17561);
      }(), function() {
        var G__17562 = x;
        return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__17562) : g.call(null, G__17562);
      }(), function() {
        var G__17563 = x;
        return h.cljs$core$IFn$_invoke$arity$1 ? h.cljs$core$IFn$_invoke$arity$1(G__17563) : h.call(null, G__17563);
      }()], null);
    };
    var G__17598__2 = function(x, y) {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
        var G__17564 = x;
        var G__17565 = y;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__17564, G__17565) : f.call(null, G__17564, G__17565);
      }(), function() {
        var G__17566 = x;
        var G__17567 = y;
        return g.cljs$core$IFn$_invoke$arity$2 ? g.cljs$core$IFn$_invoke$arity$2(G__17566, G__17567) : g.call(null, G__17566, G__17567);
      }(), function() {
        var G__17568 = x;
        var G__17569 = y;
        return h.cljs$core$IFn$_invoke$arity$2 ? h.cljs$core$IFn$_invoke$arity$2(G__17568, G__17569) : h.call(null, G__17568, G__17569);
      }()], null);
    };
    var G__17598__3 = function(x, y, z) {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
        var G__17570 = x;
        var G__17571 = y;
        var G__17572 = z;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__17570, G__17571, G__17572) : f.call(null, G__17570, G__17571, G__17572);
      }(), function() {
        var G__17573 = x;
        var G__17574 = y;
        var G__17575 = z;
        return g.cljs$core$IFn$_invoke$arity$3 ? g.cljs$core$IFn$_invoke$arity$3(G__17573, G__17574, G__17575) : g.call(null, G__17573, G__17574, G__17575);
      }(), function() {
        var G__17576 = x;
        var G__17577 = y;
        var G__17578 = z;
        return h.cljs$core$IFn$_invoke$arity$3 ? h.cljs$core$IFn$_invoke$arity$3(G__17576, G__17577, G__17578) : h.call(null, G__17576, G__17577, G__17578);
      }()], null);
    };
    var G__17598__4 = function() {
      var G__17599__delegate = function(x, y, z, args) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, x, y, z, args), cljs.core.apply.cljs$core$IFn$_invoke$arity$5(g, x, y, z, args), cljs.core.apply.cljs$core$IFn$_invoke$arity$5(h, x, y, z, args)], null);
      };
      var G__17599 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__17600__i = 0, G__17600__a = new Array(arguments.length - 3);
          while (G__17600__i < G__17600__a.length) {
            G__17600__a[G__17600__i] = arguments[G__17600__i + 3];
            ++G__17600__i;
          }
          args = new cljs.core.IndexedSeq(G__17600__a, 0);
        }
        return G__17599__delegate.call(this, x, y, z, args);
      };
      G__17599.cljs$lang$maxFixedArity = 3;
      G__17599.cljs$lang$applyTo = function(arglist__17601) {
        var x = cljs.core.first(arglist__17601);
        arglist__17601 = cljs.core.next(arglist__17601);
        var y = cljs.core.first(arglist__17601);
        arglist__17601 = cljs.core.next(arglist__17601);
        var z = cljs.core.first(arglist__17601);
        var args = cljs.core.rest(arglist__17601);
        return G__17599__delegate(x, y, z, args);
      };
      G__17599.cljs$core$IFn$_invoke$arity$variadic = G__17599__delegate;
      return G__17599;
    }();
    G__17598 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__17598__0.call(this);
        case 1:
          return G__17598__1.call(this, x);
        case 2:
          return G__17598__2.call(this, x, y);
        case 3:
          return G__17598__3.call(this, x, y, z);
        default:
          var G__17602 = null;
          if (arguments.length > 3) {
            var G__17603__i = 0, G__17603__a = new Array(arguments.length - 3);
            while (G__17603__i < G__17603__a.length) {
              G__17603__a[G__17603__i] = arguments[G__17603__i + 3];
              ++G__17603__i;
            }
            G__17602 = new cljs.core.IndexedSeq(G__17603__a, 0);
          }
          return G__17598__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__17602);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__17598.cljs$lang$maxFixedArity = 3;
    G__17598.cljs$lang$applyTo = G__17598__4.cljs$lang$applyTo;
    G__17598.cljs$core$IFn$_invoke$arity$0 = G__17598__0;
    G__17598.cljs$core$IFn$_invoke$arity$1 = G__17598__1;
    G__17598.cljs$core$IFn$_invoke$arity$2 = G__17598__2;
    G__17598.cljs$core$IFn$_invoke$arity$3 = G__17598__3;
    G__17598.cljs$core$IFn$_invoke$arity$variadic = G__17598__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__17598;
  }();
};
cljs.core.juxt.cljs$core$IFn$_invoke$arity$variadic = function(f, g, h, fs) {
  var fs__$1 = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(f, g, h, fs);
  return function(fs__$1) {
    return function() {
      var G__17604 = null;
      var G__17604__0 = function() {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
          return function(p1__17527_SHARP_, p2__17528_SHARP_) {
            return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__17527_SHARP_, function() {
              return p2__17528_SHARP_.cljs$core$IFn$_invoke$arity$0 ? p2__17528_SHARP_.cljs$core$IFn$_invoke$arity$0() : p2__17528_SHARP_.call(null);
            }());
          };
        }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
      };
      var G__17604__1 = function(x) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
          return function(p1__17529_SHARP_, p2__17530_SHARP_) {
            return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__17529_SHARP_, function() {
              var G__17579 = x;
              return p2__17530_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p2__17530_SHARP_.cljs$core$IFn$_invoke$arity$1(G__17579) : p2__17530_SHARP_.call(null, G__17579);
            }());
          };
        }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
      };
      var G__17604__2 = function(x, y) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
          return function(p1__17531_SHARP_, p2__17532_SHARP_) {
            return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__17531_SHARP_, function() {
              var G__17580 = x;
              var G__17581 = y;
              return p2__17532_SHARP_.cljs$core$IFn$_invoke$arity$2 ? p2__17532_SHARP_.cljs$core$IFn$_invoke$arity$2(G__17580, G__17581) : p2__17532_SHARP_.call(null, G__17580, G__17581);
            }());
          };
        }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
      };
      var G__17604__3 = function(x, y, z) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
          return function(p1__17533_SHARP_, p2__17534_SHARP_) {
            return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__17533_SHARP_, function() {
              var G__17582 = x;
              var G__17583 = y;
              var G__17584 = z;
              return p2__17534_SHARP_.cljs$core$IFn$_invoke$arity$3 ? p2__17534_SHARP_.cljs$core$IFn$_invoke$arity$3(G__17582, G__17583, G__17584) : p2__17534_SHARP_.call(null, G__17582, G__17583, G__17584);
            }());
          };
        }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
      };
      var G__17604__4 = function() {
        var G__17605__delegate = function(x, y, z, args) {
          return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
            return function(p1__17535_SHARP_, p2__17536_SHARP_) {
              return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__17535_SHARP_, cljs.core.apply.cljs$core$IFn$_invoke$arity$5(p2__17536_SHARP_, x, y, z, args));
            };
          }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
        };
        var G__17605 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__17606__i = 0, G__17606__a = new Array(arguments.length - 3);
            while (G__17606__i < G__17606__a.length) {
              G__17606__a[G__17606__i] = arguments[G__17606__i + 3];
              ++G__17606__i;
            }
            args = new cljs.core.IndexedSeq(G__17606__a, 0);
          }
          return G__17605__delegate.call(this, x, y, z, args);
        };
        G__17605.cljs$lang$maxFixedArity = 3;
        G__17605.cljs$lang$applyTo = function(arglist__17607) {
          var x = cljs.core.first(arglist__17607);
          arglist__17607 = cljs.core.next(arglist__17607);
          var y = cljs.core.first(arglist__17607);
          arglist__17607 = cljs.core.next(arglist__17607);
          var z = cljs.core.first(arglist__17607);
          var args = cljs.core.rest(arglist__17607);
          return G__17605__delegate(x, y, z, args);
        };
        G__17605.cljs$core$IFn$_invoke$arity$variadic = G__17605__delegate;
        return G__17605;
      }();
      G__17604 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__17604__0.call(this);
          case 1:
            return G__17604__1.call(this, x);
          case 2:
            return G__17604__2.call(this, x, y);
          case 3:
            return G__17604__3.call(this, x, y, z);
          default:
            var G__17608 = null;
            if (arguments.length > 3) {
              var G__17609__i = 0, G__17609__a = new Array(arguments.length - 3);
              while (G__17609__i < G__17609__a.length) {
                G__17609__a[G__17609__i] = arguments[G__17609__i + 3];
                ++G__17609__i;
              }
              G__17608 = new cljs.core.IndexedSeq(G__17609__a, 0);
            }
            return G__17604__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__17608);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__17604.cljs$lang$maxFixedArity = 3;
      G__17604.cljs$lang$applyTo = G__17604__4.cljs$lang$applyTo;
      G__17604.cljs$core$IFn$_invoke$arity$0 = G__17604__0;
      G__17604.cljs$core$IFn$_invoke$arity$1 = G__17604__1;
      G__17604.cljs$core$IFn$_invoke$arity$2 = G__17604__2;
      G__17604.cljs$core$IFn$_invoke$arity$3 = G__17604__3;
      G__17604.cljs$core$IFn$_invoke$arity$variadic = G__17604__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__17604;
    }();
  }(fs__$1);
};
cljs.core.juxt.cljs$lang$applyTo = function(seq17537) {
  var G__17538 = cljs.core.first(seq17537);
  var seq17537__$1 = cljs.core.next(seq17537);
  var G__17539 = cljs.core.first(seq17537__$1);
  var seq17537__$2 = cljs.core.next(seq17537__$1);
  var G__17540 = cljs.core.first(seq17537__$2);
  var seq17537__$3 = cljs.core.next(seq17537__$2);
  return cljs.core.juxt.cljs$core$IFn$_invoke$arity$variadic(G__17538, G__17539, G__17540, seq17537__$3);
};
cljs.core.juxt.cljs$lang$maxFixedArity = 3;
cljs.core.dorun = function cljs$core$dorun() {
  var G__17611 = arguments.length;
  switch(G__17611) {
    case 1:
      return cljs.core.dorun.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.dorun.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.dorun.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  while (true) {
    if (cljs.core.seq(coll)) {
      var G__17613 = cljs.core.next(coll);
      coll = G__17613;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.dorun.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  while (true) {
    if (cljs.core.seq(coll) && n > 0) {
      var G__17614 = n - 1;
      var G__17615 = cljs.core.next(coll);
      n = G__17614;
      coll = G__17615;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.dorun.cljs$lang$maxFixedArity = 2;
cljs.core.doall = function cljs$core$doall() {
  var G__17617 = arguments.length;
  switch(G__17617) {
    case 1:
      return cljs.core.doall.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.doall.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.doall.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  cljs.core.dorun.cljs$core$IFn$_invoke$arity$1(coll);
  return coll;
};
cljs.core.doall.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  cljs.core.dorun.cljs$core$IFn$_invoke$arity$2(n, coll);
  return coll;
};
cljs.core.doall.cljs$lang$maxFixedArity = 2;
cljs.core.regexp_QMARK_ = function cljs$core$regexp_QMARK_(x) {
  return x instanceof RegExp;
};
cljs.core.re_matches = function cljs$core$re_matches(re, s) {
  if (typeof s === "string") {
    var matches = re.exec(s);
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.first(matches), s)) {
      if (cljs.core.count(matches) === 1) {
        return cljs.core.first(matches);
      } else {
        return cljs.core.vec(matches);
      }
    } else {
      return null;
    }
  } else {
    throw new TypeError("re-matches must match against a string.");
  }
};
cljs.core.re_find = function cljs$core$re_find(re, s) {
  if (typeof s === "string") {
    var matches = re.exec(s);
    if (matches == null) {
      return null;
    } else {
      if (cljs.core.count(matches) === 1) {
        return cljs.core.first(matches);
      } else {
        return cljs.core.vec(matches);
      }
    }
  } else {
    throw new TypeError("re-find must match against a string.");
  }
};
cljs.core.re_seq = function cljs$core$re_seq(re, s) {
  var match_data = cljs.core.re_find(re, s);
  var match_idx = s.search(re);
  var match_str = cljs.core.coll_QMARK_(match_data) ? cljs.core.first(match_data) : match_data;
  var post_match = cljs.core.subs.cljs$core$IFn$_invoke$arity$2(s, match_idx + cljs.core.count(match_str));
  if (cljs.core.truth_(match_data)) {
    return new cljs.core.LazySeq(null, function(match_data, match_idx, match_str, post_match) {
      return function() {
        return cljs.core.cons(match_data, cljs.core.seq(post_match) ? cljs$core$re_seq(re, post_match) : null);
      };
    }(match_data, match_idx, match_str, post_match), null, null);
  } else {
    return null;
  }
};
cljs.core.re_pattern = function cljs$core$re_pattern(s) {
  if (s instanceof RegExp) {
    return s;
  } else {
    var vec__17622 = cljs.core.re_find(/^\(\?([idmsux]*)\)/, s);
    var prefix = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__17622, 0, null);
    var flags = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__17622, 1, null);
    var pattern = cljs.core.subs.cljs$core$IFn$_invoke$arity$2(s, cljs.core.count(prefix));
    return new RegExp(pattern, function() {
      var or__4309__auto__ = flags;
      if (cljs.core.truth_(or__4309__auto__)) {
        return or__4309__auto__;
      } else {
        return "";
      }
    }());
  }
};
cljs.core.pr_sequential_writer = function cljs$core$pr_sequential_writer(writer, print_one, begin, sep, end, opts, coll) {
  var _STAR_print_level_STAR_17630 = cljs.core._STAR_print_level_STAR_;
  cljs.core._STAR_print_level_STAR_ = cljs.core._STAR_print_level_STAR_ == null ? null : cljs.core._STAR_print_level_STAR_ - 1;
  try {
    if (!(cljs.core._STAR_print_level_STAR_ == null) && cljs.core._STAR_print_level_STAR_ < 0) {
      return cljs.core._write(writer, "#");
    } else {
      cljs.core._write(writer, begin);
      if ((new cljs.core.Keyword(null, "print-length", "print-length", 1931866356)).cljs$core$IFn$_invoke$arity$1(opts) === 0) {
        if (cljs.core.seq(coll)) {
          cljs.core._write(writer, function() {
            var or__4309__auto__ = (new cljs.core.Keyword(null, "more-marker", "more-marker", -14717935)).cljs$core$IFn$_invoke$arity$1(opts);
            if (cljs.core.truth_(or__4309__auto__)) {
              return or__4309__auto__;
            } else {
              return "...";
            }
          }());
        } else {
        }
      } else {
        if (cljs.core.seq(coll)) {
          var G__17631_17637 = cljs.core.first(coll);
          var G__17632_17638 = writer;
          var G__17633_17639 = opts;
          print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__17631_17637, G__17632_17638, G__17633_17639) : print_one.call(null, G__17631_17637, G__17632_17638, G__17633_17639);
        } else {
        }
        var coll_17640__$1 = cljs.core.next(coll);
        var n_17641 = (new cljs.core.Keyword(null, "print-length", "print-length", 1931866356)).cljs$core$IFn$_invoke$arity$1(opts) - 1;
        while (true) {
          if (coll_17640__$1 && (n_17641 == null || !(n_17641 === 0))) {
            cljs.core._write(writer, sep);
            var G__17634_17642 = cljs.core.first(coll_17640__$1);
            var G__17635_17643 = writer;
            var G__17636_17644 = opts;
            print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__17634_17642, G__17635_17643, G__17636_17644) : print_one.call(null, G__17634_17642, G__17635_17643, G__17636_17644);
            var G__17645 = cljs.core.next(coll_17640__$1);
            var G__17646 = n_17641 - 1;
            coll_17640__$1 = G__17645;
            n_17641 = G__17646;
            continue;
          } else {
            if (cljs.core.seq(coll_17640__$1) && n_17641 === 0) {
              cljs.core._write(writer, sep);
              cljs.core._write(writer, function() {
                var or__4309__auto__ = (new cljs.core.Keyword(null, "more-marker", "more-marker", -14717935)).cljs$core$IFn$_invoke$arity$1(opts);
                if (cljs.core.truth_(or__4309__auto__)) {
                  return or__4309__auto__;
                } else {
                  return "...";
                }
              }());
            } else {
            }
          }
          break;
        }
      }
      return cljs.core._write(writer, end);
    }
  } finally {
    cljs.core._STAR_print_level_STAR_ = _STAR_print_level_STAR_17630;
  }
};
cljs.core.write_all = function cljs$core$write_all() {
  var argseq__5349__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5349__auto__);
};
cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic = function(writer, ss) {
  var seq__17649 = cljs.core.seq(ss);
  var chunk__17650 = null;
  var count__17651 = 0;
  var i__17652 = 0;
  while (true) {
    if (i__17652 < count__17651) {
      var s = chunk__17650.cljs$core$IIndexed$_nth$arity$2(null, i__17652);
      cljs.core._write(writer, s);
      var G__17653 = seq__17649;
      var G__17654 = chunk__17650;
      var G__17655 = count__17651;
      var G__17656 = i__17652 + 1;
      seq__17649 = G__17653;
      chunk__17650 = G__17654;
      count__17651 = G__17655;
      i__17652 = G__17656;
      continue;
    } else {
      var temp__4422__auto__ = cljs.core.seq(seq__17649);
      if (temp__4422__auto__) {
        var seq__17649__$1 = temp__4422__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__17649__$1)) {
          var c__5094__auto__ = cljs.core.chunk_first(seq__17649__$1);
          var G__17657 = cljs.core.chunk_rest(seq__17649__$1);
          var G__17658 = c__5094__auto__;
          var G__17659 = cljs.core.count(c__5094__auto__);
          var G__17660 = 0;
          seq__17649 = G__17657;
          chunk__17650 = G__17658;
          count__17651 = G__17659;
          i__17652 = G__17660;
          continue;
        } else {
          var s = cljs.core.first(seq__17649__$1);
          cljs.core._write(writer, s);
          var G__17661 = cljs.core.next(seq__17649__$1);
          var G__17662 = null;
          var G__17663 = 0;
          var G__17664 = 0;
          seq__17649 = G__17661;
          chunk__17650 = G__17662;
          count__17651 = G__17663;
          i__17652 = G__17664;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.write_all.cljs$lang$maxFixedArity = 1;
cljs.core.write_all.cljs$lang$applyTo = function(seq17647) {
  var G__17648 = cljs.core.first(seq17647);
  var seq17647__$1 = cljs.core.next(seq17647);
  return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(G__17648, seq17647__$1);
};
cljs.core.string_print = function cljs$core$string_print(x) {
  cljs.core._STAR_print_fn_STAR_.cljs$core$IFn$_invoke$arity$1 ? cljs.core._STAR_print_fn_STAR_.cljs$core$IFn$_invoke$arity$1(x) : cljs.core._STAR_print_fn_STAR_.call(null, x);
  return null;
};
cljs.core.flush = function cljs$core$flush() {
  return null;
};
cljs.core.char_escapes = function() {
  var obj17666 = {'"':'\\"', "\\":"\\\\", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t"};
  return obj17666;
}();
cljs.core.quote_string = function cljs$core$quote_string(s) {
  return [cljs.core.str('"'), cljs.core.str(s.replace(function() {
    var G__17669 = '[\\\\"\b\f\n\r\t]';
    var G__17670 = "g";
    return RegExp(G__17669, G__17670);
  }(), function(match) {
    return cljs.core.char_escapes[match];
  })), cljs.core.str('"')].join("");
};
cljs.core.pr_writer_impl = function cljs$core$pr_writer_impl(obj, writer, opts) {
  if (obj == null) {
    return cljs.core._write(writer, "nil");
  } else {
    if (void 0 === obj) {
      return cljs.core._write(writer, "#\x3cundefined\x3e");
    } else {
      if (cljs.core.truth_(function() {
        var and__4297__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(opts, new cljs.core.Keyword(null, "meta", "meta", 1499536964));
        if (cljs.core.truth_(and__4297__auto__)) {
          var and__4297__auto____$1 = function() {
            var G__17684 = obj;
            if (G__17684) {
              var bit__4983__auto__ = G__17684.cljs$lang$protocol_mask$partition0$ & 131072;
              if (bit__4983__auto__ || G__17684.cljs$core$IMeta$) {
                return true;
              } else {
                if (!G__17684.cljs$lang$protocol_mask$partition0$) {
                  return cljs.core.native_satisfies_QMARK_(cljs.core.IMeta, G__17684);
                } else {
                  return false;
                }
              }
            } else {
              return cljs.core.native_satisfies_QMARK_(cljs.core.IMeta, G__17684);
            }
          }();
          if (and__4297__auto____$1) {
            return cljs.core.meta(obj);
          } else {
            return and__4297__auto____$1;
          }
        } else {
          return and__4297__auto__;
        }
      }())) {
        cljs.core._write(writer, "^");
        var G__17685_17695 = cljs.core.meta(obj);
        var G__17686_17696 = writer;
        var G__17687_17697 = opts;
        cljs.core.pr_writer.cljs$core$IFn$_invoke$arity$3 ? cljs.core.pr_writer.cljs$core$IFn$_invoke$arity$3(G__17685_17695, G__17686_17696, G__17687_17697) : cljs.core.pr_writer.call(null, G__17685_17695, G__17686_17696, G__17687_17697);
        cljs.core._write(writer, " ");
      } else {
      }
      if (obj == null) {
        return cljs.core._write(writer, "nil");
      } else {
        if (obj.cljs$lang$type) {
          return obj.cljs$lang$ctorPrWriter(obj, writer, opts);
        } else {
          if (function() {
            var G__17688 = obj;
            if (G__17688) {
              var bit__4976__auto__ = G__17688.cljs$lang$protocol_mask$partition0$ & 2147483648;
              if (bit__4976__auto__ || G__17688.cljs$core$IPrintWithWriter$) {
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          }()) {
            return obj.cljs$core$IPrintWithWriter$_pr_writer$arity$3(null, writer, opts);
          } else {
            if (cljs.core.type(obj) === Boolean || typeof obj === "number") {
              return cljs.core._write(writer, [cljs.core.str(obj)].join(""));
            } else {
              if (cljs.core.object_QMARK_(obj)) {
                cljs.core._write(writer, "#js ");
                var G__17689 = cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(k) {
                  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(k), obj[k]], null);
                }, cljs.core.js_keys(obj));
                var G__17690 = cljs.core.pr_writer;
                var G__17691 = writer;
                var G__17692 = opts;
                return cljs.core.print_map.cljs$core$IFn$_invoke$arity$4 ? cljs.core.print_map.cljs$core$IFn$_invoke$arity$4(G__17689, G__17690, G__17691, G__17692) : cljs.core.print_map.call(null, G__17689, G__17690, G__17691, G__17692);
              } else {
                if (cljs.core.array_QMARK_(obj)) {
                  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#js [", " ", "]", opts, obj);
                } else {
                  if (cljs.core.truth_(function() {
                    var G__17693 = obj;
                    return goog.isString(G__17693);
                  }())) {
                    if (cljs.core.truth_((new cljs.core.Keyword(null, "readably", "readably", 1129599760)).cljs$core$IFn$_invoke$arity$1(opts))) {
                      return cljs.core._write(writer, cljs.core.quote_string(obj));
                    } else {
                      return cljs.core._write(writer, obj);
                    }
                  } else {
                    if (cljs.core.fn_QMARK_(obj)) {
                      return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(["#\x3c", [cljs.core.str(obj)].join(""), "\x3e"], 0));
                    } else {
                      if (obj instanceof Date) {
                        var normalize = function(n, len) {
                          var ns = [cljs.core.str(n)].join("");
                          while (true) {
                            if (cljs.core.count(ns) < len) {
                              var G__17698 = [cljs.core.str("0"), cljs.core.str(ns)].join("");
                              ns = G__17698;
                              continue;
                            } else {
                              return ns;
                            }
                            break;
                          }
                        };
                        return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(['#inst "', [cljs.core.str(obj.getUTCFullYear())].join(""), "-", normalize(obj.getUTCMonth() + 1, 2), "-", normalize(obj.getUTCDate(), 2), "T", normalize(obj.getUTCHours(), 2), ":", normalize(obj.getUTCMinutes(), 2), ":", normalize(obj.getUTCSeconds(), 2), ".", normalize(obj.getUTCMilliseconds(), 3), "-", '00:00"'], 0));
                      } else {
                        if (cljs.core.truth_(cljs.core.regexp_QMARK_(obj))) {
                          return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(['#"', obj.source, '"'], 0));
                        } else {
                          if (function() {
                            var G__17694 = obj;
                            if (G__17694) {
                              var bit__4983__auto__ = G__17694.cljs$lang$protocol_mask$partition0$ & 2147483648;
                              if (bit__4983__auto__ || G__17694.cljs$core$IPrintWithWriter$) {
                                return true;
                              } else {
                                if (!G__17694.cljs$lang$protocol_mask$partition0$) {
                                  return cljs.core.native_satisfies_QMARK_(cljs.core.IPrintWithWriter, G__17694);
                                } else {
                                  return false;
                                }
                              }
                            } else {
                              return cljs.core.native_satisfies_QMARK_(cljs.core.IPrintWithWriter, G__17694);
                            }
                          }()) {
                            return cljs.core._pr_writer(obj, writer, opts);
                          } else {
                            return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(["#\x3c", [cljs.core.str(obj)].join(""), "\x3e"], 0));
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.pr_writer = function cljs$core$pr_writer(obj, writer, opts) {
  var temp__4420__auto__ = (new cljs.core.Keyword(null, "alt-impl", "alt-impl", 670969595)).cljs$core$IFn$_invoke$arity$1(opts);
  if (cljs.core.truth_(temp__4420__auto__)) {
    var alt_impl = temp__4420__auto__;
    var G__17702 = obj;
    var G__17703 = writer;
    var G__17704 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(opts, new cljs.core.Keyword(null, "fallback-impl", "fallback-impl", -1501286995), cljs.core.pr_writer_impl);
    return alt_impl.cljs$core$IFn$_invoke$arity$3 ? alt_impl.cljs$core$IFn$_invoke$arity$3(G__17702, G__17703, G__17704) : alt_impl.call(null, G__17702, G__17703, G__17704);
  } else {
    return cljs.core.pr_writer_impl(obj, writer, opts);
  }
};
cljs.core.pr_seq_writer = function cljs$core$pr_seq_writer(objs, writer, opts) {
  cljs.core.pr_writer(cljs.core.first(objs), writer, opts);
  var seq__17709 = cljs.core.seq(cljs.core.next(objs));
  var chunk__17710 = null;
  var count__17711 = 0;
  var i__17712 = 0;
  while (true) {
    if (i__17712 < count__17711) {
      var obj = chunk__17710.cljs$core$IIndexed$_nth$arity$2(null, i__17712);
      cljs.core._write(writer, " ");
      cljs.core.pr_writer(obj, writer, opts);
      var G__17713 = seq__17709;
      var G__17714 = chunk__17710;
      var G__17715 = count__17711;
      var G__17716 = i__17712 + 1;
      seq__17709 = G__17713;
      chunk__17710 = G__17714;
      count__17711 = G__17715;
      i__17712 = G__17716;
      continue;
    } else {
      var temp__4422__auto__ = cljs.core.seq(seq__17709);
      if (temp__4422__auto__) {
        var seq__17709__$1 = temp__4422__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__17709__$1)) {
          var c__5094__auto__ = cljs.core.chunk_first(seq__17709__$1);
          var G__17717 = cljs.core.chunk_rest(seq__17709__$1);
          var G__17718 = c__5094__auto__;
          var G__17719 = cljs.core.count(c__5094__auto__);
          var G__17720 = 0;
          seq__17709 = G__17717;
          chunk__17710 = G__17718;
          count__17711 = G__17719;
          i__17712 = G__17720;
          continue;
        } else {
          var obj = cljs.core.first(seq__17709__$1);
          cljs.core._write(writer, " ");
          cljs.core.pr_writer(obj, writer, opts);
          var G__17721 = cljs.core.next(seq__17709__$1);
          var G__17722 = null;
          var G__17723 = 0;
          var G__17724 = 0;
          seq__17709 = G__17721;
          chunk__17710 = G__17722;
          count__17711 = G__17723;
          i__17712 = G__17724;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.pr_sb_with_opts = function cljs$core$pr_sb_with_opts(objs, opts) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core.pr_seq_writer(objs, writer, opts);
  writer.cljs$core$IWriter$_flush$arity$1(null);
  return sb;
};
cljs.core.pr_str_with_opts = function cljs$core$pr_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_(objs)) {
    return "";
  } else {
    return [cljs.core.str(cljs.core.pr_sb_with_opts(objs, opts))].join("");
  }
};
cljs.core.prn_str_with_opts = function cljs$core$prn_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_(objs)) {
    return "\n";
  } else {
    var sb = cljs.core.pr_sb_with_opts(objs, opts);
    sb.append("\n");
    return [cljs.core.str(sb)].join("");
  }
};
cljs.core.pr_with_opts = function cljs$core$pr_with_opts(objs, opts) {
  return cljs.core.string_print(cljs.core.pr_str_with_opts(objs, opts));
};
cljs.core.newline = function cljs$core$newline() {
  var G__17726 = arguments.length;
  switch(G__17726) {
    case 0:
      return cljs.core.newline.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.newline.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.newline.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.newline.cljs$core$IFn$_invoke$arity$1(null);
};
cljs.core.newline.cljs$core$IFn$_invoke$arity$1 = function(opts) {
  cljs.core.string_print("\n");
  if (cljs.core.truth_(cljs.core.get.cljs$core$IFn$_invoke$arity$2(opts, new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", -151457939)))) {
    return cljs.core.flush();
  } else {
    return null;
  }
};
cljs.core.newline.cljs$lang$maxFixedArity = 1;
cljs.core.pr_str = function cljs$core$pr_str() {
  var argseq__5349__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(argseq__5349__auto__);
};
cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  return cljs.core.pr_str_with_opts(objs, cljs.core.pr_opts());
};
cljs.core.pr_str.cljs$lang$maxFixedArity = 0;
cljs.core.pr_str.cljs$lang$applyTo = function(seq17728) {
  return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq17728));
};
cljs.core.prn_str = function cljs$core$prn_str() {
  var argseq__5349__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.prn_str.cljs$core$IFn$_invoke$arity$variadic(argseq__5349__auto__);
};
cljs.core.prn_str.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  return cljs.core.prn_str_with_opts(objs, cljs.core.pr_opts());
};
cljs.core.prn_str.cljs$lang$maxFixedArity = 0;
cljs.core.prn_str.cljs$lang$applyTo = function(seq17729) {
  return cljs.core.prn_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq17729));
};
cljs.core.pr = function cljs$core$pr() {
  var argseq__5349__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.pr.cljs$core$IFn$_invoke$arity$variadic(argseq__5349__auto__);
};
cljs.core.pr.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  return cljs.core.pr_with_opts(objs, cljs.core.pr_opts());
};
cljs.core.pr.cljs$lang$maxFixedArity = 0;
cljs.core.pr.cljs$lang$applyTo = function(seq17730) {
  return cljs.core.pr.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq17730));
};
cljs.core.print = function() {
  var cljs$core$cljs_core_print__delegate = function(objs) {
    return cljs.core.pr_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  };
  var cljs$core$cljs_core_print = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__17731__i = 0, G__17731__a = new Array(arguments.length - 0);
      while (G__17731__i < G__17731__a.length) {
        G__17731__a[G__17731__i] = arguments[G__17731__i + 0];
        ++G__17731__i;
      }
      objs = new cljs.core.IndexedSeq(G__17731__a, 0);
    }
    return cljs$core$cljs_core_print__delegate.call(this, objs);
  };
  cljs$core$cljs_core_print.cljs$lang$maxFixedArity = 0;
  cljs$core$cljs_core_print.cljs$lang$applyTo = function(arglist__17732) {
    var objs = cljs.core.seq(arglist__17732);
    return cljs$core$cljs_core_print__delegate(objs);
  };
  cljs$core$cljs_core_print.cljs$core$IFn$_invoke$arity$variadic = cljs$core$cljs_core_print__delegate;
  return cljs$core$cljs_core_print;
}();
cljs.core.print_str = function cljs$core$print_str() {
  var argseq__5349__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.print_str.cljs$core$IFn$_invoke$arity$variadic(argseq__5349__auto__);
};
cljs.core.print_str.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  return cljs.core.pr_str_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
};
cljs.core.print_str.cljs$lang$maxFixedArity = 0;
cljs.core.print_str.cljs$lang$applyTo = function(seq17733) {
  return cljs.core.print_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq17733));
};
cljs.core.println = function cljs$core$println() {
  var argseq__5349__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(argseq__5349__auto__);
};
cljs.core.println.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  cljs.core.pr_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
    return cljs.core.newline.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_opts());
  } else {
    return null;
  }
};
cljs.core.println.cljs$lang$maxFixedArity = 0;
cljs.core.println.cljs$lang$applyTo = function(seq17734) {
  return cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq17734));
};
cljs.core.println_str = function cljs$core$println_str() {
  var argseq__5349__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.println_str.cljs$core$IFn$_invoke$arity$variadic(argseq__5349__auto__);
};
cljs.core.println_str.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  return cljs.core.prn_str_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
};
cljs.core.println_str.cljs$lang$maxFixedArity = 0;
cljs.core.println_str.cljs$lang$applyTo = function(seq17735) {
  return cljs.core.println_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq17735));
};
cljs.core.prn = function cljs$core$prn() {
  var argseq__5349__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic(argseq__5349__auto__);
};
cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  cljs.core.pr_with_opts(objs, cljs.core.pr_opts());
  if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
    return cljs.core.newline.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_opts());
  } else {
    return null;
  }
};
cljs.core.prn.cljs$lang$maxFixedArity = 0;
cljs.core.prn.cljs$lang$applyTo = function(seq17736) {
  return cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq17736));
};
cljs.core.print_map = function cljs$core$print_map(m, print_one, writer, opts) {
  return cljs.core.pr_sequential_writer(writer, function(e, w, opts__$1) {
    var G__17743_17749 = cljs.core.key(e);
    var G__17744_17750 = w;
    var G__17745_17751 = opts__$1;
    print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__17743_17749, G__17744_17750, G__17745_17751) : print_one.call(null, G__17743_17749, G__17744_17750, G__17745_17751);
    cljs.core._write(w, " ");
    var G__17746 = cljs.core.val(e);
    var G__17747 = w;
    var G__17748 = opts__$1;
    return print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__17746, G__17747, G__17748) : print_one.call(null, G__17746, G__17747, G__17748);
  }, "{", ", ", "}", opts, cljs.core.seq(m));
};
cljs.core.Volatile.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Volatile.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var a__$1 = this;
  cljs.core._write(writer, "#\x3cVolatile: ");
  cljs.core.pr_writer(a__$1.state, writer, opts);
  return cljs.core._write(writer, "\x3e");
};
cljs.core.Var.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Var.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var a__$1 = this;
  cljs.core._write(writer, "#'");
  return cljs.core.pr_writer(a__$1.sym, writer, opts);
};
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ES6IteratorSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var a__$1 = this;
  cljs.core._write(writer, "#\x3cAtom: ");
  cljs.core.pr_writer(a__$1.state, writer, opts);
  return cljs.core._write(writer, "\x3e");
};
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core._write(writer, "()");
};
cljs.core.LazyTransformer.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazyTransformer.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#queue [", " ", "]", opts, cljs.core.seq(coll__$1));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.List.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.List.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Symbol.prototype.cljs$core$IComparable$ = true;
cljs.core.Symbol.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  if (y instanceof cljs.core.Symbol) {
    return cljs.core.compare_symbols(x__$1, y);
  } else {
    throw new Error([cljs.core.str("Cannot compare "), cljs.core.str(x__$1), cljs.core.str(" to "), cljs.core.str(y)].join(""));
  }
};
cljs.core.Keyword.prototype.cljs$core$IComparable$ = true;
cljs.core.Keyword.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  if (y instanceof cljs.core.Keyword) {
    return cljs.core.compare_keywords(x__$1, y);
  } else {
    throw new Error([cljs.core.str("Cannot compare "), cljs.core.str(x__$1), cljs.core.str(" to "), cljs.core.str(y)].join(""));
  }
};
cljs.core.Subvec.prototype.cljs$core$IComparable$ = true;
cljs.core.Subvec.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  if (cljs.core.vector_QMARK_(y)) {
    return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2(x__$1, y);
  } else {
    throw new Error([cljs.core.str("Cannot compare "), cljs.core.str(x__$1), cljs.core.str(" to "), cljs.core.str(y)].join(""));
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IComparable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  if (cljs.core.vector_QMARK_(y)) {
    return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2(x__$1, y);
  } else {
    throw new Error([cljs.core.str("Cannot compare "), cljs.core.str(x__$1), cljs.core.str(" to "), cljs.core.str(y)].join(""));
  }
};
cljs.core.alter_meta_BANG_ = function cljs$core$alter_meta_BANG_() {
  var argseq__5349__auto__ = 2 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0) : null;
  return cljs.core.alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5349__auto__);
};
cljs.core.alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(iref, f, args) {
  return iref.meta = cljs.core.apply.cljs$core$IFn$_invoke$arity$3(f, iref.meta, args);
};
cljs.core.alter_meta_BANG_.cljs$lang$maxFixedArity = 2;
cljs.core.alter_meta_BANG_.cljs$lang$applyTo = function(seq17752) {
  var G__17753 = cljs.core.first(seq17752);
  var seq17752__$1 = cljs.core.next(seq17752);
  var G__17754 = cljs.core.first(seq17752__$1);
  var seq17752__$2 = cljs.core.next(seq17752__$1);
  return cljs.core.alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__17753, G__17754, seq17752__$2);
};
cljs.core.reset_meta_BANG_ = function cljs$core$reset_meta_BANG_(iref, m) {
  return iref.meta = m;
};
cljs.core.add_watch = function cljs$core$add_watch(iref, key, f) {
  cljs.core._add_watch(iref, key, f);
  return iref;
};
cljs.core.remove_watch = function cljs$core$remove_watch(iref, key) {
  cljs.core._remove_watch(iref, key);
  return iref;
};
cljs.core.gensym_counter = null;
cljs.core.gensym = function cljs$core$gensym() {
  var G__17756 = arguments.length;
  switch(G__17756) {
    case 0:
      return cljs.core.gensym.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.gensym.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.gensym.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.gensym.cljs$core$IFn$_invoke$arity$1("G__");
};
cljs.core.gensym.cljs$core$IFn$_invoke$arity$1 = function(prefix_string) {
  if (cljs.core.gensym_counter == null) {
    cljs.core.gensym_counter = function() {
      var G__17757 = 0;
      return cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(G__17757) : cljs.core.atom.call(null, G__17757);
    }();
  } else {
  }
  return cljs.core.symbol.cljs$core$IFn$_invoke$arity$1([cljs.core.str(prefix_string), cljs.core.str(cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(cljs.core.gensym_counter, cljs.core.inc))].join(""));
};
cljs.core.gensym.cljs$lang$maxFixedArity = 1;
cljs.core.fixture1 = 1;
cljs.core.fixture2 = 2;
cljs.core.Delay = function(f, value) {
  this.f = f;
  this.value = value;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
  this.cljs$lang$protocol_mask$partition1$ = 1;
};
cljs.core.Delay.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (cljs.core.truth_(self__.f)) {
    self__.value = function() {
      return self__.f.cljs$core$IFn$_invoke$arity$0 ? self__.f.cljs$core$IFn$_invoke$arity$0() : self__.f.call(null);
    }();
    self__.f = null;
  } else {
  }
  return self__.value;
};
cljs.core.Delay.prototype.cljs$core$IPending$_realized_QMARK_$arity$1 = function(d) {
  var self__ = this;
  var d__$1 = this;
  return cljs.core.not(self__.f);
};
cljs.core.Delay.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "f", "f", 43394975, null), new cljs.core.Symbol(null, "value", "value", 1946509744, null)], null);
};
cljs.core.Delay.cljs$lang$type = true;
cljs.core.Delay.cljs$lang$ctorStr = "cljs.core/Delay";
cljs.core.Delay.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/Delay");
};
cljs.core.__GT_Delay = function cljs$core$__GT_Delay(f, value) {
  return new cljs.core.Delay(f, value);
};
cljs.core.delay_QMARK_ = function cljs$core$delay_QMARK_(x) {
  return x instanceof cljs.core.Delay;
};
cljs.core.force = function cljs$core$force(x) {
  if (cljs.core.delay_QMARK_(x)) {
    var G__17760 = x;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__17760) : cljs.core.deref.call(null, G__17760);
  } else {
    return x;
  }
};
cljs.core.realized_QMARK_ = function cljs$core$realized_QMARK_(d) {
  return cljs.core._realized_QMARK_(d);
};
cljs.core.preserving_reduced = function cljs$core$preserving_reduced(rf) {
  return function(p1__17761_SHARP_, p2__17762_SHARP_) {
    var ret = function() {
      var G__17765 = p1__17761_SHARP_;
      var G__17766 = p2__17762_SHARP_;
      return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__17765, G__17766) : rf.call(null, G__17765, G__17766);
    }();
    if (cljs.core.reduced_QMARK_(ret)) {
      return cljs.core.reduced(ret);
    } else {
      return ret;
    }
  };
};
cljs.core.cat = function cljs$core$cat(rf) {
  var rf1 = cljs.core.preserving_reduced(rf);
  return function(rf1) {
    return function() {
      var G__17769 = null;
      var G__17769__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__17769__1 = function(result) {
        var G__17768 = result;
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__17768) : rf.call(null, G__17768);
      };
      var G__17769__2 = function(result, input) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(rf1, result, input);
      };
      G__17769 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__17769__0.call(this);
          case 1:
            return G__17769__1.call(this, result);
          case 2:
            return G__17769__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__17769.cljs$core$IFn$_invoke$arity$0 = G__17769__0;
      G__17769.cljs$core$IFn$_invoke$arity$1 = G__17769__1;
      G__17769.cljs$core$IFn$_invoke$arity$2 = G__17769__2;
      return G__17769;
    }();
  }(rf1);
};
cljs.core.dedupe = function cljs$core$dedupe() {
  var G__17771 = arguments.length;
  switch(G__17771) {
    case 0:
      return cljs.core.dedupe.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.dedupe.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.dedupe.cljs$core$IFn$_invoke$arity$0 = function() {
  return function(rf) {
    var pa = cljs.core.volatile_BANG_(new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439));
    return function(pa) {
      return function() {
        var G__17777 = null;
        var G__17777__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__17777__1 = function(result) {
          var G__17772 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__17772) : rf.call(null, G__17772);
        };
        var G__17777__2 = function(result, input) {
          var prior = function() {
            var G__17773 = pa;
            return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__17773) : cljs.core.deref.call(null, G__17773);
          }();
          cljs.core.vreset_BANG_(pa, input);
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(prior, input)) {
            return result;
          } else {
            var G__17774 = result;
            var G__17775 = input;
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__17774, G__17775) : rf.call(null, G__17774, G__17775);
          }
        };
        G__17777 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__17777__0.call(this);
            case 1:
              return G__17777__1.call(this, result);
            case 2:
              return G__17777__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__17777.cljs$core$IFn$_invoke$arity$0 = G__17777__0;
        G__17777.cljs$core$IFn$_invoke$arity$1 = G__17777__1;
        G__17777.cljs$core$IFn$_invoke$arity$2 = G__17777__2;
        return G__17777;
      }();
    }(pa);
  };
};
cljs.core.dedupe.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return cljs.core.sequence.cljs$core$IFn$_invoke$arity$2(cljs.core.dedupe.cljs$core$IFn$_invoke$arity$0(), coll);
};
cljs.core.dedupe.cljs$lang$maxFixedArity = 1;
cljs.core.random_sample = function cljs$core$random_sample() {
  var G__17779 = arguments.length;
  switch(G__17779) {
    case 1:
      return cljs.core.random_sample.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.random_sample.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.random_sample.cljs$core$IFn$_invoke$arity$1 = function(prob) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$1(function(_) {
    return function() {
      return cljs.core.rand.cljs$core$IFn$_invoke$arity$0 ? cljs.core.rand.cljs$core$IFn$_invoke$arity$0() : cljs.core.rand.call(null);
    }() < prob;
  });
};
cljs.core.random_sample.cljs$core$IFn$_invoke$arity$2 = function(prob, coll) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(function(_) {
    return function() {
      return cljs.core.rand.cljs$core$IFn$_invoke$arity$0 ? cljs.core.rand.cljs$core$IFn$_invoke$arity$0() : cljs.core.rand.call(null);
    }() < prob;
  }, coll);
};
cljs.core.random_sample.cljs$lang$maxFixedArity = 2;
cljs.core.Eduction = function(xform, coll) {
  this.xform = xform;
  this.coll = coll;
  this.cljs$lang$protocol_mask$partition0$ = 2173173760;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.Eduction.prototype.cljs$core$ISeqable$_seq$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.seq(cljs.core.sequence.cljs$core$IFn$_invoke$arity$2(self__.xform, self__.coll));
};
cljs.core.Eduction.prototype.cljs$core$IReduce$_reduce$arity$2 = function(_, f) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.transduce.cljs$core$IFn$_invoke$arity$3(self__.xform, cljs.core.completing.cljs$core$IFn$_invoke$arity$1(f), self__.coll);
};
cljs.core.Eduction.prototype.cljs$core$IReduce$_reduce$arity$3 = function(_, f, init) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(self__.xform, cljs.core.completing.cljs$core$IFn$_invoke$arity$1(f), init, self__.coll);
};
cljs.core.Eduction.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll__$1, writer, opts) {
  var self__ = this;
  var coll__$2 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$2);
};
cljs.core.Eduction.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "xform", "xform", -85179481, null), new cljs.core.Symbol(null, "coll", "coll", -1006698606, null)], null);
};
cljs.core.Eduction.cljs$lang$type = true;
cljs.core.Eduction.cljs$lang$ctorStr = "cljs.core/Eduction";
cljs.core.Eduction.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/Eduction");
};
cljs.core.__GT_Eduction = function cljs$core$__GT_Eduction(xform, coll) {
  return new cljs.core.Eduction(xform, coll);
};
cljs.core.Eduction.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5285__auto__ = this;
  return cljs.core.es6_iterator(this__5285__auto__);
};
cljs.core.eduction = function cljs$core$eduction() {
  var argseq__5349__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.eduction.cljs$core$IFn$_invoke$arity$variadic(argseq__5349__auto__);
};
cljs.core.eduction.cljs$core$IFn$_invoke$arity$variadic = function(xforms) {
  return new cljs.core.Eduction(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.comp, cljs.core.butlast(xforms)), cljs.core.last(xforms));
};
cljs.core.eduction.cljs$lang$maxFixedArity = 0;
cljs.core.eduction.cljs$lang$applyTo = function(seq17781) {
  return cljs.core.eduction.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq17781));
};
cljs.core.run_BANG_ = function cljs$core$run_BANG_(proc, coll) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__17783_SHARP_, p2__17782_SHARP_) {
    var G__17785 = p2__17782_SHARP_;
    return proc.cljs$core$IFn$_invoke$arity$1 ? proc.cljs$core$IFn$_invoke$arity$1(G__17785) : proc.call(null, G__17785);
  }, null, coll);
};
cljs.core.IEncodeJS = function() {
  var obj17787 = {};
  return obj17787;
}();
cljs.core._clj__GT_js = function cljs$core$_clj__GT_js(x) {
  if (function() {
    var and__4297__auto__ = x;
    if (and__4297__auto__) {
      return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1(x);
  } else {
    var x__4945__auto__ = x == null ? null : x;
    return function() {
      var or__4309__auto__ = cljs.core._clj__GT_js[function() {
        var G__17791 = x__4945__auto__;
        return goog.typeOf(G__17791);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._clj__GT_js["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEncodeJS.-clj-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._key__GT_js = function cljs$core$_key__GT_js(x) {
  if (function() {
    var and__4297__auto__ = x;
    if (and__4297__auto__) {
      return x.cljs$core$IEncodeJS$_key__GT_js$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_key__GT_js$arity$1(x);
  } else {
    var x__4945__auto__ = x == null ? null : x;
    return function() {
      var or__4309__auto__ = cljs.core._key__GT_js[function() {
        var G__17795 = x__4945__auto__;
        return goog.typeOf(G__17795);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._key__GT_js["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEncodeJS.-key-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.key__GT_js = function cljs$core$key__GT_js(k) {
  if (function() {
    var G__17798 = k;
    if (G__17798) {
      var bit__4983__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__4309__auto__ = bit__4983__auto__;
        if (cljs.core.truth_(or__4309__auto__)) {
          return or__4309__auto__;
        } else {
          return G__17798.cljs$core$IEncodeJS$;
        }
      }())) {
        return true;
      } else {
        if (!G__17798.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, G__17798);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, G__17798);
    }
  }()) {
    return cljs.core._clj__GT_js(k);
  } else {
    if (typeof k === "string" || typeof k === "number" || k instanceof cljs.core.Keyword || k instanceof cljs.core.Symbol) {
      var G__17799 = k;
      return cljs.core.clj__GT_js.cljs$core$IFn$_invoke$arity$1 ? cljs.core.clj__GT_js.cljs$core$IFn$_invoke$arity$1(G__17799) : cljs.core.clj__GT_js.call(null, G__17799);
    } else {
      return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([k], 0));
    }
  }
};
cljs.core.clj__GT_js = function cljs$core$clj__GT_js(x) {
  if (x == null) {
    return null;
  } else {
    if (function() {
      var G__17815 = x;
      if (G__17815) {
        var bit__4983__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__4309__auto__ = bit__4983__auto__;
          if (cljs.core.truth_(or__4309__auto__)) {
            return or__4309__auto__;
          } else {
            return G__17815.cljs$core$IEncodeJS$;
          }
        }())) {
          return true;
        } else {
          if (!G__17815.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, G__17815);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, G__17815);
      }
    }()) {
      return cljs.core._clj__GT_js(x);
    } else {
      if (x instanceof cljs.core.Keyword) {
        return cljs.core.name(x);
      } else {
        if (x instanceof cljs.core.Symbol) {
          return [cljs.core.str(x)].join("");
        } else {
          if (cljs.core.map_QMARK_(x)) {
            var m = function() {
              var obj17817 = {};
              return obj17817;
            }();
            var seq__17818_17828 = cljs.core.seq(x);
            var chunk__17819_17829 = null;
            var count__17820_17830 = 0;
            var i__17821_17831 = 0;
            while (true) {
              if (i__17821_17831 < count__17820_17830) {
                var vec__17822_17832 = chunk__17819_17829.cljs$core$IIndexed$_nth$arity$2(null, i__17821_17831);
                var k_17833 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__17822_17832, 0, null);
                var v_17834 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__17822_17832, 1, null);
                m[cljs.core.key__GT_js(k_17833)] = cljs$core$clj__GT_js(v_17834);
                var G__17835 = seq__17818_17828;
                var G__17836 = chunk__17819_17829;
                var G__17837 = count__17820_17830;
                var G__17838 = i__17821_17831 + 1;
                seq__17818_17828 = G__17835;
                chunk__17819_17829 = G__17836;
                count__17820_17830 = G__17837;
                i__17821_17831 = G__17838;
                continue;
              } else {
                var temp__4422__auto___17839 = cljs.core.seq(seq__17818_17828);
                if (temp__4422__auto___17839) {
                  var seq__17818_17840__$1 = temp__4422__auto___17839;
                  if (cljs.core.chunked_seq_QMARK_(seq__17818_17840__$1)) {
                    var c__5094__auto___17841 = cljs.core.chunk_first(seq__17818_17840__$1);
                    var G__17842 = cljs.core.chunk_rest(seq__17818_17840__$1);
                    var G__17843 = c__5094__auto___17841;
                    var G__17844 = cljs.core.count(c__5094__auto___17841);
                    var G__17845 = 0;
                    seq__17818_17828 = G__17842;
                    chunk__17819_17829 = G__17843;
                    count__17820_17830 = G__17844;
                    i__17821_17831 = G__17845;
                    continue;
                  } else {
                    var vec__17823_17846 = cljs.core.first(seq__17818_17840__$1);
                    var k_17847 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__17823_17846, 0, null);
                    var v_17848 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__17823_17846, 1, null);
                    m[cljs.core.key__GT_js(k_17847)] = cljs$core$clj__GT_js(v_17848);
                    var G__17849 = cljs.core.next(seq__17818_17840__$1);
                    var G__17850 = null;
                    var G__17851 = 0;
                    var G__17852 = 0;
                    seq__17818_17828 = G__17849;
                    chunk__17819_17829 = G__17850;
                    count__17820_17830 = G__17851;
                    i__17821_17831 = G__17852;
                    continue;
                  }
                } else {
                }
              }
              break;
            }
            return m;
          } else {
            if (cljs.core.coll_QMARK_(x)) {
              var arr = [];
              var seq__17824_17853 = cljs.core.seq(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs$core$clj__GT_js, x));
              var chunk__17825_17854 = null;
              var count__17826_17855 = 0;
              var i__17827_17856 = 0;
              while (true) {
                if (i__17827_17856 < count__17826_17855) {
                  var x_17857__$1 = chunk__17825_17854.cljs$core$IIndexed$_nth$arity$2(null, i__17827_17856);
                  arr.push(x_17857__$1);
                  var G__17858 = seq__17824_17853;
                  var G__17859 = chunk__17825_17854;
                  var G__17860 = count__17826_17855;
                  var G__17861 = i__17827_17856 + 1;
                  seq__17824_17853 = G__17858;
                  chunk__17825_17854 = G__17859;
                  count__17826_17855 = G__17860;
                  i__17827_17856 = G__17861;
                  continue;
                } else {
                  var temp__4422__auto___17862 = cljs.core.seq(seq__17824_17853);
                  if (temp__4422__auto___17862) {
                    var seq__17824_17863__$1 = temp__4422__auto___17862;
                    if (cljs.core.chunked_seq_QMARK_(seq__17824_17863__$1)) {
                      var c__5094__auto___17864 = cljs.core.chunk_first(seq__17824_17863__$1);
                      var G__17865 = cljs.core.chunk_rest(seq__17824_17863__$1);
                      var G__17866 = c__5094__auto___17864;
                      var G__17867 = cljs.core.count(c__5094__auto___17864);
                      var G__17868 = 0;
                      seq__17824_17853 = G__17865;
                      chunk__17825_17854 = G__17866;
                      count__17826_17855 = G__17867;
                      i__17827_17856 = G__17868;
                      continue;
                    } else {
                      var x_17869__$1 = cljs.core.first(seq__17824_17863__$1);
                      arr.push(x_17869__$1);
                      var G__17870 = cljs.core.next(seq__17824_17863__$1);
                      var G__17871 = null;
                      var G__17872 = 0;
                      var G__17873 = 0;
                      seq__17824_17853 = G__17870;
                      chunk__17825_17854 = G__17871;
                      count__17826_17855 = G__17872;
                      i__17827_17856 = G__17873;
                      continue;
                    }
                  } else {
                  }
                }
                break;
              }
              return arr;
            } else {
              return x;
            }
          }
        }
      }
    }
  }
};
cljs.core.IEncodeClojure = function() {
  var obj17875 = {};
  return obj17875;
}();
cljs.core._js__GT_clj = function cljs$core$_js__GT_clj(x, options) {
  if (function() {
    var and__4297__auto__ = x;
    if (and__4297__auto__) {
      return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2(x, options);
  } else {
    var x__4945__auto__ = x == null ? null : x;
    return function() {
      var or__4309__auto__ = cljs.core._js__GT_clj[function() {
        var G__17879 = x__4945__auto__;
        return goog.typeOf(G__17879);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._js__GT_clj["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEncodeClojure.-js-\x3eclj", x);
        }
      }
    }().call(null, x, options);
  }
};
cljs.core.js__GT_clj = function cljs$core$js__GT_clj() {
  var G__17883 = arguments.length;
  switch(G__17883) {
    case 1:
      return cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0);
      return cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5360__auto__);
  }
};
cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252), false], null)], 0));
};
cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic = function(x, opts) {
  var map__17884 = opts;
  var map__17884__$1 = cljs.core.seq_QMARK_(map__17884) ? cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map, map__17884) : map__17884;
  var keywordize_keys = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__17884__$1, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252));
  var keyfn = cljs.core.truth_(keywordize_keys) ? cljs.core.keyword : cljs.core.str;
  var f = function(map__17884, map__17884__$1, keywordize_keys, keyfn) {
    return function cljs$core$thisfn(x__$1) {
      if (function() {
        var G__17900 = x__$1;
        if (G__17900) {
          var bit__4983__auto__ = null;
          if (cljs.core.truth_(function() {
            var or__4309__auto__ = bit__4983__auto__;
            if (cljs.core.truth_(or__4309__auto__)) {
              return or__4309__auto__;
            } else {
              return G__17900.cljs$core$IEncodeClojure$;
            }
          }())) {
            return true;
          } else {
            if (!G__17900.cljs$lang$protocol_mask$partition$) {
              return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeClojure, G__17900);
            } else {
              return false;
            }
          }
        } else {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeClojure, G__17900);
        }
      }()) {
        return cljs.core._js__GT_clj(x__$1, cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.array_map, opts));
      } else {
        if (cljs.core.seq_QMARK_(x__$1)) {
          return cljs.core.doall.cljs$core$IFn$_invoke$arity$1(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs$core$thisfn, x__$1));
        } else {
          if (cljs.core.coll_QMARK_(x__$1)) {
            return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.empty(x__$1), cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs$core$thisfn, x__$1));
          } else {
            if (cljs.core.array_QMARK_(x__$1)) {
              return cljs.core.vec(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs$core$thisfn, x__$1));
            } else {
              if (cljs.core.type(x__$1) === Object) {
                return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY, function() {
                  var iter__5063__auto__ = function(map__17884, map__17884__$1, keywordize_keys, keyfn) {
                    return function cljs$core$thisfn_$_iter__17901(s__17902) {
                      return new cljs.core.LazySeq(null, function(map__17884, map__17884__$1, keywordize_keys, keyfn) {
                        return function() {
                          var s__17902__$1 = s__17902;
                          while (true) {
                            var temp__4422__auto__ = cljs.core.seq(s__17902__$1);
                            if (temp__4422__auto__) {
                              var s__17902__$2 = temp__4422__auto__;
                              if (cljs.core.chunked_seq_QMARK_(s__17902__$2)) {
                                var c__5061__auto__ = cljs.core.chunk_first(s__17902__$2);
                                var size__5062__auto__ = cljs.core.count(c__5061__auto__);
                                var b__17904 = cljs.core.chunk_buffer(size__5062__auto__);
                                if (function() {
                                  var i__17903 = 0;
                                  while (true) {
                                    if (i__17903 < size__5062__auto__) {
                                      var k = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c__5061__auto__, i__17903);
                                      cljs.core.chunk_append(b__17904, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
                                        var G__17909 = k;
                                        return keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(G__17909) : keyfn.call(null, G__17909);
                                      }(), cljs$core$thisfn(x__$1[k])], null));
                                      var G__17912 = i__17903 + 1;
                                      i__17903 = G__17912;
                                      continue;
                                    } else {
                                      return true;
                                    }
                                    break;
                                  }
                                }()) {
                                  return cljs.core.chunk_cons(cljs.core.chunk(b__17904), cljs$core$thisfn_$_iter__17901(cljs.core.chunk_rest(s__17902__$2)));
                                } else {
                                  return cljs.core.chunk_cons(cljs.core.chunk(b__17904), null);
                                }
                              } else {
                                var k = cljs.core.first(s__17902__$2);
                                return cljs.core.cons(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
                                  var G__17910 = k;
                                  return keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(G__17910) : keyfn.call(null, G__17910);
                                }(), cljs$core$thisfn(x__$1[k])], null), cljs$core$thisfn_$_iter__17901(cljs.core.rest(s__17902__$2)));
                              }
                            } else {
                              return null;
                            }
                            break;
                          }
                        };
                      }(map__17884, map__17884__$1, keywordize_keys, keyfn), null, null);
                    };
                  }(map__17884, map__17884__$1, keywordize_keys, keyfn);
                  return iter__5063__auto__(cljs.core.js_keys(x__$1));
                }());
              } else {
                return x__$1;
              }
            }
          }
        }
      }
    };
  }(map__17884, map__17884__$1, keywordize_keys, keyfn);
  return f(x);
};
cljs.core.js__GT_clj.cljs$lang$applyTo = function(seq17880) {
  var G__17881 = cljs.core.first(seq17880);
  var seq17880__$1 = cljs.core.next(seq17880);
  return cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic(G__17881, seq17880__$1);
};
cljs.core.js__GT_clj.cljs$lang$maxFixedArity = 1;
cljs.core.memoize = function cljs$core$memoize(f) {
  var mem = function() {
    var G__17915 = cljs.core.PersistentArrayMap.EMPTY;
    return cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(G__17915) : cljs.core.atom.call(null, G__17915);
  }();
  return function(mem) {
    return function() {
      var G__17917__delegate = function(args) {
        var v = cljs.core.get.cljs$core$IFn$_invoke$arity$3(function() {
          var G__17916 = mem;
          return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__17916) : cljs.core.deref.call(null, G__17916);
        }(), args, cljs.core.lookup_sentinel);
        if (v === cljs.core.lookup_sentinel) {
          var ret = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f, args);
          cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(mem, cljs.core.assoc, args, ret);
          return ret;
        } else {
          return v;
        }
      };
      var G__17917 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          var G__17918__i = 0, G__17918__a = new Array(arguments.length - 0);
          while (G__17918__i < G__17918__a.length) {
            G__17918__a[G__17918__i] = arguments[G__17918__i + 0];
            ++G__17918__i;
          }
          args = new cljs.core.IndexedSeq(G__17918__a, 0);
        }
        return G__17917__delegate.call(this, args);
      };
      G__17917.cljs$lang$maxFixedArity = 0;
      G__17917.cljs$lang$applyTo = function(arglist__17919) {
        var args = cljs.core.seq(arglist__17919);
        return G__17917__delegate(args);
      };
      G__17917.cljs$core$IFn$_invoke$arity$variadic = G__17917__delegate;
      return G__17917;
    }();
  }(mem);
};
cljs.core.trampoline = function cljs$core$trampoline() {
  var G__17923 = arguments.length;
  switch(G__17923) {
    case 1:
      return cljs.core.trampoline.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0);
      return cljs.core.trampoline.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5360__auto__);
  }
};
cljs.core.trampoline.cljs$core$IFn$_invoke$arity$1 = function(f) {
  while (true) {
    var ret = function() {
      return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    }();
    if (cljs.core.fn_QMARK_(ret)) {
      var G__17925 = ret;
      f = G__17925;
      continue;
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.trampoline.cljs$core$IFn$_invoke$arity$variadic = function(f, args) {
  return cljs.core.trampoline.cljs$core$IFn$_invoke$arity$1(function() {
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f, args);
  });
};
cljs.core.trampoline.cljs$lang$applyTo = function(seq17920) {
  var G__17921 = cljs.core.first(seq17920);
  var seq17920__$1 = cljs.core.next(seq17920);
  return cljs.core.trampoline.cljs$core$IFn$_invoke$arity$variadic(G__17921, seq17920__$1);
};
cljs.core.trampoline.cljs$lang$maxFixedArity = 1;
cljs.core.rand = function cljs$core$rand() {
  var G__17927 = arguments.length;
  switch(G__17927) {
    case 0:
      return cljs.core.rand.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.rand.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.rand.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.rand.cljs$core$IFn$_invoke$arity$1(1);
};
cljs.core.rand.cljs$core$IFn$_invoke$arity$1 = function(n) {
  return function() {
    return Math.random();
  }() * n;
};
cljs.core.rand.cljs$lang$maxFixedArity = 1;
cljs.core.rand_int = function cljs$core$rand_int(n) {
  var G__17930 = function() {
    return Math.random();
  }() * n;
  return Math.floor(G__17930);
};
cljs.core.rand_nth = function cljs$core$rand_nth(coll) {
  return cljs.core.nth.cljs$core$IFn$_invoke$arity$2(coll, cljs.core.rand_int(cljs.core.count(coll)));
};
cljs.core.group_by = function cljs$core$group_by(f, coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(ret, x) {
    var k = function() {
      var G__17932 = x;
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__17932) : f.call(null, G__17932);
    }();
    return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(ret, k, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(ret, k, cljs.core.PersistentVector.EMPTY), x));
  }, cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.make_hierarchy = function cljs$core$make_hierarchy() {
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", -2027538891), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "descendants", "descendants", 1824886031), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424), cljs.core.PersistentArrayMap.EMPTY], null);
};
cljs.core._global_hierarchy = null;
cljs.core.get_global_hierarchy = function cljs$core$get_global_hierarchy() {
  if (cljs.core._global_hierarchy == null) {
    cljs.core._global_hierarchy = function() {
      var G__17934 = cljs.core.make_hierarchy();
      return cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(G__17934) : cljs.core.atom.call(null, G__17934);
    }();
  } else {
  }
  return cljs.core._global_hierarchy;
};
cljs.core.swap_global_hierarchy_BANG_ = function cljs$core$swap_global_hierarchy_BANG_() {
  var argseq__5349__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5349__auto__);
};
cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(f, args) {
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$4(cljs.core.swap_BANG_, cljs.core.get_global_hierarchy(), f, args);
};
cljs.core.swap_global_hierarchy_BANG_.cljs$lang$maxFixedArity = 1;
cljs.core.swap_global_hierarchy_BANG_.cljs$lang$applyTo = function(seq17935) {
  var G__17936 = cljs.core.first(seq17935);
  var seq17935__$1 = cljs.core.next(seq17935);
  return cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__17936, seq17935__$1);
};
cljs.core.isa_QMARK_ = function cljs$core$isa_QMARK_() {
  var G__17938 = arguments.length;
  switch(G__17938) {
    case 2:
      return cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$2 = function(child, parent) {
  return cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3(function() {
    var G__17939 = cljs.core.get_global_hierarchy();
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__17939) : cljs.core.deref.call(null, G__17939);
  }(), child, parent);
};
cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3 = function(h, child, parent) {
  var or__4309__auto__ = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(child, parent);
  if (or__4309__auto__) {
    return or__4309__auto__;
  } else {
    var or__4309__auto____$1 = cljs.core.contains_QMARK_((new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h).call(null, child), parent);
    if (or__4309__auto____$1) {
      return or__4309__auto____$1;
    } else {
      var and__4297__auto__ = cljs.core.vector_QMARK_(parent);
      if (and__4297__auto__) {
        var and__4297__auto____$1 = cljs.core.vector_QMARK_(child);
        if (and__4297__auto____$1) {
          var and__4297__auto____$2 = cljs.core.count(parent) === cljs.core.count(child);
          if (and__4297__auto____$2) {
            var ret = true;
            var i = 0;
            while (true) {
              if (!ret || i === cljs.core.count(parent)) {
                return ret;
              } else {
                var G__17965 = cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3(h, function() {
                  var G__17962 = i;
                  return child.cljs$core$IFn$_invoke$arity$1 ? child.cljs$core$IFn$_invoke$arity$1(G__17962) : child.call(null, G__17962);
                }(), function() {
                  var G__17963 = i;
                  return parent.cljs$core$IFn$_invoke$arity$1 ? parent.cljs$core$IFn$_invoke$arity$1(G__17963) : parent.call(null, G__17963);
                }());
                var G__17966 = i + 1;
                ret = G__17965;
                i = G__17966;
                continue;
              }
              break;
            }
          } else {
            return and__4297__auto____$2;
          }
        } else {
          return and__4297__auto____$1;
        }
      } else {
        return and__4297__auto__;
      }
    }
  }
};
cljs.core.isa_QMARK_.cljs$lang$maxFixedArity = 3;
cljs.core.parents = function cljs$core$parents() {
  var G__17968 = arguments.length;
  switch(G__17968) {
    case 1:
      return cljs.core.parents.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.parents.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.parents.cljs$core$IFn$_invoke$arity$1 = function(tag) {
  return cljs.core.parents.cljs$core$IFn$_invoke$arity$2(function() {
    var G__17969 = cljs.core.get_global_hierarchy();
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__17969) : cljs.core.deref.call(null, G__17969);
  }(), tag);
};
cljs.core.parents.cljs$core$IFn$_invoke$arity$2 = function(h, tag) {
  return cljs.core.not_empty(cljs.core.get.cljs$core$IFn$_invoke$arity$2((new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h), tag));
};
cljs.core.parents.cljs$lang$maxFixedArity = 2;
cljs.core.ancestors = function cljs$core$ancestors() {
  var G__17972 = arguments.length;
  switch(G__17972) {
    case 1:
      return cljs.core.ancestors.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.ancestors.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.ancestors.cljs$core$IFn$_invoke$arity$1 = function(tag) {
  return cljs.core.ancestors.cljs$core$IFn$_invoke$arity$2(function() {
    var G__17973 = cljs.core.get_global_hierarchy();
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__17973) : cljs.core.deref.call(null, G__17973);
  }(), tag);
};
cljs.core.ancestors.cljs$core$IFn$_invoke$arity$2 = function(h, tag) {
  return cljs.core.not_empty(cljs.core.get.cljs$core$IFn$_invoke$arity$2((new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h), tag));
};
cljs.core.ancestors.cljs$lang$maxFixedArity = 2;
cljs.core.descendants = function cljs$core$descendants() {
  var G__17976 = arguments.length;
  switch(G__17976) {
    case 1:
      return cljs.core.descendants.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.descendants.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.descendants.cljs$core$IFn$_invoke$arity$1 = function(tag) {
  return cljs.core.descendants.cljs$core$IFn$_invoke$arity$2(function() {
    var G__17977 = cljs.core.get_global_hierarchy();
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__17977) : cljs.core.deref.call(null, G__17977);
  }(), tag);
};
cljs.core.descendants.cljs$core$IFn$_invoke$arity$2 = function(h, tag) {
  return cljs.core.not_empty(cljs.core.get.cljs$core$IFn$_invoke$arity$2((new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h), tag));
};
cljs.core.descendants.cljs$lang$maxFixedArity = 2;
cljs.core.derive = function cljs$core$derive() {
  var G__17980 = arguments.length;
  switch(G__17980) {
    case 2:
      return cljs.core.derive.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.derive.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.derive.cljs$core$IFn$_invoke$arity$2 = function(tag, parent) {
  if (cljs.core.truth_(cljs.core.namespace(parent))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.list(new cljs.core.Symbol(null, "namespace", "namespace", 1263021155, null), new cljs.core.Symbol(null, "parent", "parent", 761652748, null))], 0)))].join(""));
  }
  cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.derive, cljs.core.array_seq([tag, parent], 0));
  return null;
};
cljs.core.derive.cljs$core$IFn$_invoke$arity$3 = function(h, tag, parent) {
  if (cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(tag, parent)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.list(new cljs.core.Symbol(null, "not\x3d", "not\x3d", 1466536204, null), new cljs.core.Symbol(null, "tag", "tag", 350170304, null), new cljs.core.Symbol(null, "parent", "parent", 761652748, null))], 0)))].join(""));
  }
  var tp = (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h);
  var td = (new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h);
  var ta = (new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h);
  var tf = function(tp, td, ta) {
    return function(m, source, sources, target, targets) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(tp, td, ta) {
        return function(ret, k) {
          return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ret, k, cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj, cljs.core.get.cljs$core$IFn$_invoke$arity$3(targets, k, cljs.core.PersistentHashSet.EMPTY), cljs.core.cons(target, function() {
            var G__17981 = target;
            return targets.cljs$core$IFn$_invoke$arity$1 ? targets.cljs$core$IFn$_invoke$arity$1(G__17981) : targets.call(null, G__17981);
          }())));
        };
      }(tp, td, ta), m, cljs.core.cons(source, function() {
        var G__17982 = source;
        return sources.cljs$core$IFn$_invoke$arity$1 ? sources.cljs$core$IFn$_invoke$arity$1(G__17982) : sources.call(null, G__17982);
      }()));
    };
  }(tp, td, ta);
  var or__4309__auto__ = cljs.core.contains_QMARK_(function() {
    var G__17986 = tag;
    return tp.cljs$core$IFn$_invoke$arity$1 ? tp.cljs$core$IFn$_invoke$arity$1(G__17986) : tp.call(null, G__17986);
  }(), parent) ? null : function() {
    if (cljs.core.contains_QMARK_(function() {
      var G__17987 = tag;
      return ta.cljs$core$IFn$_invoke$arity$1 ? ta.cljs$core$IFn$_invoke$arity$1(G__17987) : ta.call(null, G__17987);
    }(), parent)) {
      throw new Error([cljs.core.str(tag), cljs.core.str("already has"), cljs.core.str(parent), cljs.core.str("as ancestor")].join(""));
    } else {
    }
    if (cljs.core.contains_QMARK_(function() {
      var G__17988 = parent;
      return ta.cljs$core$IFn$_invoke$arity$1 ? ta.cljs$core$IFn$_invoke$arity$1(G__17988) : ta.call(null, G__17988);
    }(), tag)) {
      throw new Error([cljs.core.str("Cyclic derivation:"), cljs.core.str(parent), cljs.core.str("has"), cljs.core.str(tag), cljs.core.str("as ancestor")].join(""));
    } else {
    }
    return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", -2027538891), cljs.core.assoc.cljs$core$IFn$_invoke$arity$3((new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h), tag, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(tp, tag, cljs.core.PersistentHashSet.EMPTY), parent)), new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424), tf((new cljs.core.Keyword(null, 
    "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h), tag, td, parent, ta), new cljs.core.Keyword(null, "descendants", "descendants", 1824886031), tf((new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h), parent, ta, tag, td)], null);
  }();
  if (cljs.core.truth_(or__4309__auto__)) {
    return or__4309__auto__;
  } else {
    return h;
  }
};
cljs.core.derive.cljs$lang$maxFixedArity = 3;
cljs.core.underive = function cljs$core$underive() {
  var G__17994 = arguments.length;
  switch(G__17994) {
    case 2:
      return cljs.core.underive.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.underive.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.underive.cljs$core$IFn$_invoke$arity$2 = function(tag, parent) {
  cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.underive, cljs.core.array_seq([tag, parent], 0));
  return null;
};
cljs.core.underive.cljs$core$IFn$_invoke$arity$3 = function(h, tag, parent) {
  var parentMap = (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h);
  var childsParents = cljs.core.truth_(function() {
    var G__17995 = tag;
    return parentMap.cljs$core$IFn$_invoke$arity$1 ? parentMap.cljs$core$IFn$_invoke$arity$1(G__17995) : parentMap.call(null, G__17995);
  }()) ? cljs.core.disj.cljs$core$IFn$_invoke$arity$2(function() {
    var G__17996 = tag;
    return parentMap.cljs$core$IFn$_invoke$arity$1 ? parentMap.cljs$core$IFn$_invoke$arity$1(G__17996) : parentMap.call(null, G__17996);
  }(), parent) : cljs.core.PersistentHashSet.EMPTY;
  var newParents = cljs.core.truth_(cljs.core.not_empty(childsParents)) ? cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(parentMap, tag, childsParents) : cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(parentMap, tag);
  var deriv_seq = cljs.core.flatten(cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(parentMap, childsParents, newParents) {
    return function(p1__17990_SHARP_) {
      return cljs.core.cons(cljs.core.first(p1__17990_SHARP_), cljs.core.interpose.cljs$core$IFn$_invoke$arity$2(cljs.core.first(p1__17990_SHARP_), cljs.core.second(p1__17990_SHARP_)));
    };
  }(parentMap, childsParents, newParents), cljs.core.seq(newParents)));
  if (cljs.core.contains_QMARK_(function() {
    var G__17997 = tag;
    return parentMap.cljs$core$IFn$_invoke$arity$1 ? parentMap.cljs$core$IFn$_invoke$arity$1(G__17997) : parentMap.call(null, G__17997);
  }(), parent)) {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(parentMap, childsParents, newParents, deriv_seq) {
      return function(p1__17991_SHARP_, p2__17992_SHARP_) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.derive, p1__17991_SHARP_, p2__17992_SHARP_);
      };
    }(parentMap, childsParents, newParents, deriv_seq), cljs.core.make_hierarchy(), cljs.core.partition.cljs$core$IFn$_invoke$arity$2(2, deriv_seq));
  } else {
    return h;
  }
};
cljs.core.underive.cljs$lang$maxFixedArity = 3;
cljs.core.reset_cache = function cljs$core$reset_cache(method_cache, method_table, cached_hierarchy, hierarchy) {
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(method_cache, function(_) {
    var G__18001 = method_table;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__18001) : cljs.core.deref.call(null, G__18001);
  });
  return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(cached_hierarchy, function(_) {
    var G__18002 = hierarchy;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__18002) : cljs.core.deref.call(null, G__18002);
  });
};
cljs.core.prefers_STAR_ = function cljs$core$prefers_STAR_(x, y, prefer_table) {
  var xprefs = function() {
    var G__18018 = prefer_table;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__18018) : cljs.core.deref.call(null, G__18018);
  }().call(null, x);
  var or__4309__auto__ = cljs.core.truth_(function() {
    var and__4297__auto__ = xprefs;
    if (cljs.core.truth_(and__4297__auto__)) {
      var G__18020 = y;
      return xprefs.cljs$core$IFn$_invoke$arity$1 ? xprefs.cljs$core$IFn$_invoke$arity$1(G__18020) : xprefs.call(null, G__18020);
    } else {
      return and__4297__auto__;
    }
  }()) ? true : null;
  if (cljs.core.truth_(or__4309__auto__)) {
    return or__4309__auto__;
  } else {
    var or__4309__auto____$1 = function() {
      var ps = cljs.core.parents.cljs$core$IFn$_invoke$arity$1(y);
      while (true) {
        if (cljs.core.count(ps) > 0) {
          if (cljs.core.truth_(cljs$core$prefers_STAR_(x, cljs.core.first(ps), prefer_table))) {
          } else {
          }
          var G__18021 = cljs.core.rest(ps);
          ps = G__18021;
          continue;
        } else {
          return null;
        }
        break;
      }
    }();
    if (cljs.core.truth_(or__4309__auto____$1)) {
      return or__4309__auto____$1;
    } else {
      var or__4309__auto____$2 = function() {
        var ps = cljs.core.parents.cljs$core$IFn$_invoke$arity$1(x);
        while (true) {
          if (cljs.core.count(ps) > 0) {
            if (cljs.core.truth_(cljs$core$prefers_STAR_(cljs.core.first(ps), y, prefer_table))) {
            } else {
            }
            var G__18022 = cljs.core.rest(ps);
            ps = G__18022;
            continue;
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(or__4309__auto____$2)) {
        return or__4309__auto____$2;
      } else {
        return false;
      }
    }
  }
};
cljs.core.dominates = function cljs$core$dominates(x, y, prefer_table) {
  var or__4309__auto__ = cljs.core.prefers_STAR_(x, y, prefer_table);
  if (cljs.core.truth_(or__4309__auto__)) {
    return or__4309__auto__;
  } else {
    return cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$2(x, y);
  }
};
cljs.core.find_and_cache_best_method = function cljs$core$find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  var best_entry = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(be, p__18036) {
    var vec__18037 = p__18036;
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__18037, 0, null);
    var _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__18037, 1, null);
    var e = vec__18037;
    if (cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3(function() {
      var G__18038 = hierarchy;
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__18038) : cljs.core.deref.call(null, G__18038);
    }(), dispatch_val, k)) {
      var be2 = cljs.core.truth_(function() {
        var or__4309__auto__ = be == null;
        if (or__4309__auto__) {
          return or__4309__auto__;
        } else {
          return cljs.core.dominates(k, cljs.core.first(be), prefer_table);
        }
      }()) ? e : be;
      if (cljs.core.truth_(cljs.core.dominates(cljs.core.first(be2), k, prefer_table))) {
      } else {
        throw new Error([cljs.core.str("Multiple methods in multimethod '"), cljs.core.str(name), cljs.core.str("' match dispatch value: "), cljs.core.str(dispatch_val), cljs.core.str(" -\x3e "), cljs.core.str(k), cljs.core.str(" and "), cljs.core.str(cljs.core.first(be2)), cljs.core.str(", and neither is preferred")].join(""));
      }
      return be2;
    } else {
      return be;
    }
  }, null, function() {
    var G__18039 = method_table;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__18039) : cljs.core.deref.call(null, G__18039);
  }());
  if (cljs.core.truth_(best_entry)) {
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(function() {
      var G__18040 = cached_hierarchy;
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__18040) : cljs.core.deref.call(null, G__18040);
    }(), function() {
      var G__18041 = hierarchy;
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__18041) : cljs.core.deref.call(null, G__18041);
    }())) {
      cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(method_cache, cljs.core.assoc, dispatch_val, cljs.core.second(best_entry));
      return cljs.core.second(best_entry);
    } else {
      cljs.core.reset_cache(method_cache, method_table, cached_hierarchy, hierarchy);
      return cljs$core$find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
    }
  } else {
    return null;
  }
};
cljs.core.IMultiFn = function() {
  var obj18043 = {};
  return obj18043;
}();
cljs.core._reset = function cljs$core$_reset(mf) {
  if (function() {
    var and__4297__auto__ = mf;
    if (and__4297__auto__) {
      return mf.cljs$core$IMultiFn$_reset$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_reset$arity$1(mf);
  } else {
    var x__4945__auto__ = mf == null ? null : mf;
    return function() {
      var or__4309__auto__ = cljs.core._reset[function() {
        var G__18047 = x__4945__auto__;
        return goog.typeOf(G__18047);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._reset["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-reset", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._add_method = function cljs$core$_add_method(mf, dispatch_val, method) {
  if (function() {
    var and__4297__auto__ = mf;
    if (and__4297__auto__) {
      return mf.cljs$core$IMultiFn$_add_method$arity$3;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_add_method$arity$3(mf, dispatch_val, method);
  } else {
    var x__4945__auto__ = mf == null ? null : mf;
    return function() {
      var or__4309__auto__ = cljs.core._add_method[function() {
        var G__18051 = x__4945__auto__;
        return goog.typeOf(G__18051);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._add_method["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-add-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, method);
  }
};
cljs.core._remove_method = function cljs$core$_remove_method(mf, dispatch_val) {
  if (function() {
    var and__4297__auto__ = mf;
    if (and__4297__auto__) {
      return mf.cljs$core$IMultiFn$_remove_method$arity$2;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_remove_method$arity$2(mf, dispatch_val);
  } else {
    var x__4945__auto__ = mf == null ? null : mf;
    return function() {
      var or__4309__auto__ = cljs.core._remove_method[function() {
        var G__18055 = x__4945__auto__;
        return goog.typeOf(G__18055);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._remove_method["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-remove-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._prefer_method = function cljs$core$_prefer_method(mf, dispatch_val, dispatch_val_y) {
  if (function() {
    var and__4297__auto__ = mf;
    if (and__4297__auto__) {
      return mf.cljs$core$IMultiFn$_prefer_method$arity$3;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefer_method$arity$3(mf, dispatch_val, dispatch_val_y);
  } else {
    var x__4945__auto__ = mf == null ? null : mf;
    return function() {
      var or__4309__auto__ = cljs.core._prefer_method[function() {
        var G__18059 = x__4945__auto__;
        return goog.typeOf(G__18059);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._prefer_method["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-prefer-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, dispatch_val_y);
  }
};
cljs.core._get_method = function cljs$core$_get_method(mf, dispatch_val) {
  if (function() {
    var and__4297__auto__ = mf;
    if (and__4297__auto__) {
      return mf.cljs$core$IMultiFn$_get_method$arity$2;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_get_method$arity$2(mf, dispatch_val);
  } else {
    var x__4945__auto__ = mf == null ? null : mf;
    return function() {
      var or__4309__auto__ = cljs.core._get_method[function() {
        var G__18063 = x__4945__auto__;
        return goog.typeOf(G__18063);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._get_method["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-get-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._methods = function cljs$core$_methods(mf) {
  if (function() {
    var and__4297__auto__ = mf;
    if (and__4297__auto__) {
      return mf.cljs$core$IMultiFn$_methods$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_methods$arity$1(mf);
  } else {
    var x__4945__auto__ = mf == null ? null : mf;
    return function() {
      var or__4309__auto__ = cljs.core._methods[function() {
        var G__18067 = x__4945__auto__;
        return goog.typeOf(G__18067);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._methods["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-methods", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._prefers = function cljs$core$_prefers(mf) {
  if (function() {
    var and__4297__auto__ = mf;
    if (and__4297__auto__) {
      return mf.cljs$core$IMultiFn$_prefers$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefers$arity$1(mf);
  } else {
    var x__4945__auto__ = mf == null ? null : mf;
    return function() {
      var or__4309__auto__ = cljs.core._prefers[function() {
        var G__18071 = x__4945__auto__;
        return goog.typeOf(G__18071);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._prefers["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-prefers", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._default_dispatch_val = function cljs$core$_default_dispatch_val(mf) {
  if (function() {
    var and__4297__auto__ = mf;
    if (and__4297__auto__) {
      return mf.cljs$core$IMultiFn$_default_dispatch_val$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_default_dispatch_val$arity$1(mf);
  } else {
    var x__4945__auto__ = mf == null ? null : mf;
    return function() {
      var or__4309__auto__ = cljs.core._default_dispatch_val[function() {
        var G__18075 = x__4945__auto__;
        return goog.typeOf(G__18075);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._default_dispatch_val["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-default-dispatch-val", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._dispatch_fn = function cljs$core$_dispatch_fn(mf) {
  if (function() {
    var and__4297__auto__ = mf;
    if (and__4297__auto__) {
      return mf.cljs$core$IMultiFn$_dispatch_fn$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_dispatch_fn$arity$1(mf);
  } else {
    var x__4945__auto__ = mf == null ? null : mf;
    return function() {
      var or__4309__auto__ = cljs.core._dispatch_fn[function() {
        var G__18079 = x__4945__auto__;
        return goog.typeOf(G__18079);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._dispatch_fn["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-dispatch-fn", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core.throw_no_method_error = function cljs$core$throw_no_method_error(name, dispatch_val) {
  throw new Error([cljs.core.str("No method in multimethod '"), cljs.core.str(name), cljs.core.str("' for dispatch value: "), cljs.core.str(dispatch_val)].join(""));
};
cljs.core.MultiFn = function(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  this.name = name;
  this.dispatch_fn = dispatch_fn;
  this.default_dispatch_val = default_dispatch_val;
  this.hierarchy = hierarchy;
  this.method_table = method_table;
  this.prefer_table = prefer_table;
  this.method_cache = method_cache;
  this.cached_hierarchy = cached_hierarchy;
  this.cljs$lang$protocol_mask$partition0$ = 4194305;
  this.cljs$lang$protocol_mask$partition1$ = 4352;
};
cljs.core.MultiFn.prototype.call = function() {
  var G__18928 = null;
  var G__18928__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0() : self__.dispatch_fn.call(null);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$0 ? target_fn.cljs$core$IFn$_invoke$arity$0() : target_fn.call(null);
  };
  var G__18928__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__18081 = a;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1(G__18081) : self__.dispatch_fn.call(null, G__18081);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__18082 = a;
    return target_fn.cljs$core$IFn$_invoke$arity$1 ? target_fn.cljs$core$IFn$_invoke$arity$1(G__18082) : target_fn.call(null, G__18082);
  };
  var G__18928__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__18083 = a;
      var G__18084 = b;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2(G__18083, G__18084) : self__.dispatch_fn.call(null, G__18083, G__18084);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__18085 = a;
    var G__18086 = b;
    return target_fn.cljs$core$IFn$_invoke$arity$2 ? target_fn.cljs$core$IFn$_invoke$arity$2(G__18085, G__18086) : target_fn.call(null, G__18085, G__18086);
  };
  var G__18928__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__18087 = a;
      var G__18088 = b;
      var G__18089 = c;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3(G__18087, G__18088, G__18089) : self__.dispatch_fn.call(null, G__18087, G__18088, G__18089);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__18090 = a;
    var G__18091 = b;
    var G__18092 = c;
    return target_fn.cljs$core$IFn$_invoke$arity$3 ? target_fn.cljs$core$IFn$_invoke$arity$3(G__18090, G__18091, G__18092) : target_fn.call(null, G__18090, G__18091, G__18092);
  };
  var G__18928__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__18093 = a;
      var G__18094 = b;
      var G__18095 = c;
      var G__18096 = d;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4(G__18093, G__18094, G__18095, G__18096) : self__.dispatch_fn.call(null, G__18093, G__18094, G__18095, G__18096);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__18097 = a;
    var G__18098 = b;
    var G__18099 = c;
    var G__18100 = d;
    return target_fn.cljs$core$IFn$_invoke$arity$4 ? target_fn.cljs$core$IFn$_invoke$arity$4(G__18097, G__18098, G__18099, G__18100) : target_fn.call(null, G__18097, G__18098, G__18099, G__18100);
  };
  var G__18928__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__18101 = a;
      var G__18102 = b;
      var G__18103 = c;
      var G__18104 = d;
      var G__18105 = e;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5(G__18101, G__18102, G__18103, G__18104, G__18105) : self__.dispatch_fn.call(null, G__18101, G__18102, G__18103, G__18104, G__18105);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__18106 = a;
    var G__18107 = b;
    var G__18108 = c;
    var G__18109 = d;
    var G__18110 = e;
    return target_fn.cljs$core$IFn$_invoke$arity$5 ? target_fn.cljs$core$IFn$_invoke$arity$5(G__18106, G__18107, G__18108, G__18109, G__18110) : target_fn.call(null, G__18106, G__18107, G__18108, G__18109, G__18110);
  };
  var G__18928__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__18111 = a;
      var G__18112 = b;
      var G__18113 = c;
      var G__18114 = d;
      var G__18115 = e;
      var G__18116 = f;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6(G__18111, G__18112, G__18113, G__18114, G__18115, G__18116) : self__.dispatch_fn.call(null, G__18111, G__18112, G__18113, G__18114, G__18115, G__18116);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__18117 = a;
    var G__18118 = b;
    var G__18119 = c;
    var G__18120 = d;
    var G__18121 = e;
    var G__18122 = f;
    return target_fn.cljs$core$IFn$_invoke$arity$6 ? target_fn.cljs$core$IFn$_invoke$arity$6(G__18117, G__18118, G__18119, G__18120, G__18121, G__18122) : target_fn.call(null, G__18117, G__18118, G__18119, G__18120, G__18121, G__18122);
  };
  var G__18928__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__18123 = a;
      var G__18124 = b;
      var G__18125 = c;
      var G__18126 = d;
      var G__18127 = e;
      var G__18128 = f;
      var G__18129 = g;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7(G__18123, G__18124, G__18125, G__18126, G__18127, G__18128, G__18129) : self__.dispatch_fn.call(null, G__18123, G__18124, G__18125, G__18126, G__18127, G__18128, G__18129);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__18130 = a;
    var G__18131 = b;
    var G__18132 = c;
    var G__18133 = d;
    var G__18134 = e;
    var G__18135 = f;
    var G__18136 = g;
    return target_fn.cljs$core$IFn$_invoke$arity$7 ? target_fn.cljs$core$IFn$_invoke$arity$7(G__18130, G__18131, G__18132, G__18133, G__18134, G__18135, G__18136) : target_fn.call(null, G__18130, G__18131, G__18132, G__18133, G__18134, G__18135, G__18136);
  };
  var G__18928__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__18137 = a;
      var G__18138 = b;
      var G__18139 = c;
      var G__18140 = d;
      var G__18141 = e;
      var G__18142 = f;
      var G__18143 = g;
      var G__18144 = h;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8(G__18137, G__18138, G__18139, G__18140, G__18141, G__18142, G__18143, G__18144) : self__.dispatch_fn.call(null, G__18137, G__18138, G__18139, G__18140, G__18141, G__18142, G__18143, G__18144);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__18145 = a;
    var G__18146 = b;
    var G__18147 = c;
    var G__18148 = d;
    var G__18149 = e;
    var G__18150 = f;
    var G__18151 = g;
    var G__18152 = h;
    return target_fn.cljs$core$IFn$_invoke$arity$8 ? target_fn.cljs$core$IFn$_invoke$arity$8(G__18145, G__18146, G__18147, G__18148, G__18149, G__18150, G__18151, G__18152) : target_fn.call(null, G__18145, G__18146, G__18147, G__18148, G__18149, G__18150, G__18151, G__18152);
  };
  var G__18928__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__18153 = a;
      var G__18154 = b;
      var G__18155 = c;
      var G__18156 = d;
      var G__18157 = e;
      var G__18158 = f;
      var G__18159 = g;
      var G__18160 = h;
      var G__18161 = i;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9(G__18153, G__18154, G__18155, G__18156, G__18157, G__18158, G__18159, G__18160, G__18161) : self__.dispatch_fn.call(null, G__18153, G__18154, G__18155, G__18156, G__18157, G__18158, G__18159, G__18160, G__18161);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__18162 = a;
    var G__18163 = b;
    var G__18164 = c;
    var G__18165 = d;
    var G__18166 = e;
    var G__18167 = f;
    var G__18168 = g;
    var G__18169 = h;
    var G__18170 = i;
    return target_fn.cljs$core$IFn$_invoke$arity$9 ? target_fn.cljs$core$IFn$_invoke$arity$9(G__18162, G__18163, G__18164, G__18165, G__18166, G__18167, G__18168, G__18169, G__18170) : target_fn.call(null, G__18162, G__18163, G__18164, G__18165, G__18166, G__18167, G__18168, G__18169, G__18170);
  };
  var G__18928__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__18171 = a;
      var G__18172 = b;
      var G__18173 = c;
      var G__18174 = d;
      var G__18175 = e;
      var G__18176 = f;
      var G__18177 = g;
      var G__18178 = h;
      var G__18179 = i;
      var G__18180 = j;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10(G__18171, G__18172, G__18173, G__18174, G__18175, G__18176, G__18177, G__18178, G__18179, G__18180) : self__.dispatch_fn.call(null, G__18171, G__18172, G__18173, G__18174, G__18175, G__18176, G__18177, G__18178, G__18179, G__18180);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__18181 = a;
    var G__18182 = b;
    var G__18183 = c;
    var G__18184 = d;
    var G__18185 = e;
    var G__18186 = f;
    var G__18187 = g;
    var G__18188 = h;
    var G__18189 = i;
    var G__18190 = j;
    return target_fn.cljs$core$IFn$_invoke$arity$10 ? target_fn.cljs$core$IFn$_invoke$arity$10(G__18181, G__18182, G__18183, G__18184, G__18185, G__18186, G__18187, G__18188, G__18189, G__18190) : target_fn.call(null, G__18181, G__18182, G__18183, G__18184, G__18185, G__18186, G__18187, G__18188, G__18189, G__18190);
  };
  var G__18928__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__18191 = a;
      var G__18192 = b;
      var G__18193 = c;
      var G__18194 = d;
      var G__18195 = e;
      var G__18196 = f;
      var G__18197 = g;
      var G__18198 = h;
      var G__18199 = i;
      var G__18200 = j;
      var G__18201 = k;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11(G__18191, G__18192, G__18193, G__18194, G__18195, G__18196, G__18197, G__18198, G__18199, G__18200, G__18201) : self__.dispatch_fn.call(null, G__18191, G__18192, G__18193, G__18194, G__18195, G__18196, G__18197, G__18198, G__18199, G__18200, G__18201);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__18202 = a;
    var G__18203 = b;
    var G__18204 = c;
    var G__18205 = d;
    var G__18206 = e;
    var G__18207 = f;
    var G__18208 = g;
    var G__18209 = h;
    var G__18210 = i;
    var G__18211 = j;
    var G__18212 = k;
    return target_fn.cljs$core$IFn$_invoke$arity$11 ? target_fn.cljs$core$IFn$_invoke$arity$11(G__18202, G__18203, G__18204, G__18205, G__18206, G__18207, G__18208, G__18209, G__18210, G__18211, G__18212) : target_fn.call(null, G__18202, G__18203, G__18204, G__18205, G__18206, G__18207, G__18208, G__18209, G__18210, G__18211, G__18212);
  };
  var G__18928__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__18213 = a;
      var G__18214 = b;
      var G__18215 = c;
      var G__18216 = d;
      var G__18217 = e;
      var G__18218 = f;
      var G__18219 = g;
      var G__18220 = h;
      var G__18221 = i;
      var G__18222 = j;
      var G__18223 = k;
      var G__18224 = l;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12(G__18213, G__18214, G__18215, G__18216, G__18217, G__18218, G__18219, G__18220, G__18221, G__18222, G__18223, G__18224) : self__.dispatch_fn.call(null, G__18213, G__18214, G__18215, G__18216, G__18217, G__18218, G__18219, G__18220, G__18221, G__18222, G__18223, G__18224);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__18225 = a;
    var G__18226 = b;
    var G__18227 = c;
    var G__18228 = d;
    var G__18229 = e;
    var G__18230 = f;
    var G__18231 = g;
    var G__18232 = h;
    var G__18233 = i;
    var G__18234 = j;
    var G__18235 = k;
    var G__18236 = l;
    return target_fn.cljs$core$IFn$_invoke$arity$12 ? target_fn.cljs$core$IFn$_invoke$arity$12(G__18225, G__18226, G__18227, G__18228, G__18229, G__18230, G__18231, G__18232, G__18233, G__18234, G__18235, G__18236) : target_fn.call(null, G__18225, G__18226, G__18227, G__18228, G__18229, G__18230, G__18231, G__18232, G__18233, G__18234, G__18235, G__18236);
  };
  var G__18928__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__18237 = a;
      var G__18238 = b;
      var G__18239 = c;
      var G__18240 = d;
      var G__18241 = e;
      var G__18242 = f;
      var G__18243 = g;
      var G__18244 = h;
      var G__18245 = i;
      var G__18246 = j;
      var G__18247 = k;
      var G__18248 = l;
      var G__18249 = m;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13(G__18237, G__18238, G__18239, G__18240, G__18241, G__18242, G__18243, G__18244, G__18245, G__18246, G__18247, G__18248, G__18249) : self__.dispatch_fn.call(null, G__18237, G__18238, G__18239, G__18240, G__18241, G__18242, G__18243, G__18244, G__18245, G__18246, G__18247, G__18248, G__18249);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__18250 = a;
    var G__18251 = b;
    var G__18252 = c;
    var G__18253 = d;
    var G__18254 = e;
    var G__18255 = f;
    var G__18256 = g;
    var G__18257 = h;
    var G__18258 = i;
    var G__18259 = j;
    var G__18260 = k;
    var G__18261 = l;
    var G__18262 = m;
    return target_fn.cljs$core$IFn$_invoke$arity$13 ? target_fn.cljs$core$IFn$_invoke$arity$13(G__18250, G__18251, G__18252, G__18253, G__18254, G__18255, G__18256, G__18257, G__18258, G__18259, G__18260, G__18261, G__18262) : target_fn.call(null, G__18250, G__18251, G__18252, G__18253, G__18254, G__18255, G__18256, G__18257, G__18258, G__18259, G__18260, G__18261, G__18262);
  };
  var G__18928__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__18263 = a;
      var G__18264 = b;
      var G__18265 = c;
      var G__18266 = d;
      var G__18267 = e;
      var G__18268 = f;
      var G__18269 = g;
      var G__18270 = h;
      var G__18271 = i;
      var G__18272 = j;
      var G__18273 = k;
      var G__18274 = l;
      var G__18275 = m;
      var G__18276 = n;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14(G__18263, G__18264, G__18265, G__18266, G__18267, G__18268, G__18269, G__18270, G__18271, G__18272, G__18273, G__18274, G__18275, G__18276) : self__.dispatch_fn.call(null, G__18263, G__18264, G__18265, G__18266, G__18267, G__18268, G__18269, G__18270, G__18271, G__18272, G__18273, G__18274, G__18275, G__18276);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__18277 = a;
    var G__18278 = b;
    var G__18279 = c;
    var G__18280 = d;
    var G__18281 = e;
    var G__18282 = f;
    var G__18283 = g;
    var G__18284 = h;
    var G__18285 = i;
    var G__18286 = j;
    var G__18287 = k;
    var G__18288 = l;
    var G__18289 = m;
    var G__18290 = n;
    return target_fn.cljs$core$IFn$_invoke$arity$14 ? target_fn.cljs$core$IFn$_invoke$arity$14(G__18277, G__18278, G__18279, G__18280, G__18281, G__18282, G__18283, G__18284, G__18285, G__18286, G__18287, G__18288, G__18289, G__18290) : target_fn.call(null, G__18277, G__18278, G__18279, G__18280, G__18281, G__18282, G__18283, G__18284, G__18285, G__18286, G__18287, G__18288, G__18289, G__18290);
  };
  var G__18928__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__18291 = a;
      var G__18292 = b;
      var G__18293 = c;
      var G__18294 = d;
      var G__18295 = e;
      var G__18296 = f;
      var G__18297 = g;
      var G__18298 = h;
      var G__18299 = i;
      var G__18300 = j;
      var G__18301 = k;
      var G__18302 = l;
      var G__18303 = m;
      var G__18304 = n;
      var G__18305 = o;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15(G__18291, G__18292, G__18293, G__18294, G__18295, G__18296, G__18297, G__18298, G__18299, G__18300, G__18301, G__18302, G__18303, G__18304, G__18305) : self__.dispatch_fn.call(null, G__18291, G__18292, G__18293, G__18294, G__18295, G__18296, G__18297, G__18298, G__18299, G__18300, G__18301, G__18302, G__18303, G__18304, G__18305);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__18306 = a;
    var G__18307 = b;
    var G__18308 = c;
    var G__18309 = d;
    var G__18310 = e;
    var G__18311 = f;
    var G__18312 = g;
    var G__18313 = h;
    var G__18314 = i;
    var G__18315 = j;
    var G__18316 = k;
    var G__18317 = l;
    var G__18318 = m;
    var G__18319 = n;
    var G__18320 = o;
    return target_fn.cljs$core$IFn$_invoke$arity$15 ? target_fn.cljs$core$IFn$_invoke$arity$15(G__18306, G__18307, G__18308, G__18309, G__18310, G__18311, G__18312, G__18313, G__18314, G__18315, G__18316, G__18317, G__18318, G__18319, G__18320) : target_fn.call(null, G__18306, G__18307, G__18308, G__18309, G__18310, G__18311, G__18312, G__18313, G__18314, G__18315, G__18316, G__18317, G__18318, G__18319, G__18320);
  };
  var G__18928__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__18321 = a;
      var G__18322 = b;
      var G__18323 = c;
      var G__18324 = d;
      var G__18325 = e;
      var G__18326 = f;
      var G__18327 = g;
      var G__18328 = h;
      var G__18329 = i;
      var G__18330 = j;
      var G__18331 = k;
      var G__18332 = l;
      var G__18333 = m;
      var G__18334 = n;
      var G__18335 = o;
      var G__18336 = p;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16(G__18321, G__18322, G__18323, G__18324, G__18325, G__18326, G__18327, G__18328, G__18329, G__18330, G__18331, G__18332, G__18333, G__18334, G__18335, G__18336) : self__.dispatch_fn.call(null, G__18321, G__18322, G__18323, G__18324, G__18325, G__18326, G__18327, G__18328, G__18329, G__18330, G__18331, G__18332, G__18333, G__18334, G__18335, G__18336);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__18337 = a;
    var G__18338 = b;
    var G__18339 = c;
    var G__18340 = d;
    var G__18341 = e;
    var G__18342 = f;
    var G__18343 = g;
    var G__18344 = h;
    var G__18345 = i;
    var G__18346 = j;
    var G__18347 = k;
    var G__18348 = l;
    var G__18349 = m;
    var G__18350 = n;
    var G__18351 = o;
    var G__18352 = p;
    return target_fn.cljs$core$IFn$_invoke$arity$16 ? target_fn.cljs$core$IFn$_invoke$arity$16(G__18337, G__18338, G__18339, G__18340, G__18341, G__18342, G__18343, G__18344, G__18345, G__18346, G__18347, G__18348, G__18349, G__18350, G__18351, G__18352) : target_fn.call(null, G__18337, G__18338, G__18339, G__18340, G__18341, G__18342, G__18343, G__18344, G__18345, G__18346, G__18347, G__18348, G__18349, G__18350, G__18351, G__18352);
  };
  var G__18928__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__18353 = a;
      var G__18354 = b;
      var G__18355 = c;
      var G__18356 = d;
      var G__18357 = e;
      var G__18358 = f;
      var G__18359 = g;
      var G__18360 = h;
      var G__18361 = i;
      var G__18362 = j;
      var G__18363 = k;
      var G__18364 = l;
      var G__18365 = m;
      var G__18366 = n;
      var G__18367 = o;
      var G__18368 = p;
      var G__18369 = q;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17(G__18353, G__18354, G__18355, G__18356, G__18357, G__18358, G__18359, G__18360, G__18361, G__18362, G__18363, G__18364, G__18365, G__18366, G__18367, G__18368, G__18369) : self__.dispatch_fn.call(null, G__18353, G__18354, G__18355, G__18356, G__18357, G__18358, G__18359, G__18360, G__18361, G__18362, G__18363, G__18364, G__18365, G__18366, G__18367, G__18368, G__18369);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__18370 = a;
    var G__18371 = b;
    var G__18372 = c;
    var G__18373 = d;
    var G__18374 = e;
    var G__18375 = f;
    var G__18376 = g;
    var G__18377 = h;
    var G__18378 = i;
    var G__18379 = j;
    var G__18380 = k;
    var G__18381 = l;
    var G__18382 = m;
    var G__18383 = n;
    var G__18384 = o;
    var G__18385 = p;
    var G__18386 = q;
    return target_fn.cljs$core$IFn$_invoke$arity$17 ? target_fn.cljs$core$IFn$_invoke$arity$17(G__18370, G__18371, G__18372, G__18373, G__18374, G__18375, G__18376, G__18377, G__18378, G__18379, G__18380, G__18381, G__18382, G__18383, G__18384, G__18385, G__18386) : target_fn.call(null, G__18370, G__18371, G__18372, G__18373, G__18374, G__18375, G__18376, G__18377, G__18378, G__18379, G__18380, G__18381, G__18382, G__18383, G__18384, G__18385, G__18386);
  };
  var G__18928__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__18387 = a;
      var G__18388 = b;
      var G__18389 = c;
      var G__18390 = d;
      var G__18391 = e;
      var G__18392 = f;
      var G__18393 = g;
      var G__18394 = h;
      var G__18395 = i;
      var G__18396 = j;
      var G__18397 = k;
      var G__18398 = l;
      var G__18399 = m;
      var G__18400 = n;
      var G__18401 = o;
      var G__18402 = p;
      var G__18403 = q;
      var G__18404 = r;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18(G__18387, G__18388, G__18389, G__18390, G__18391, G__18392, G__18393, G__18394, G__18395, G__18396, G__18397, G__18398, G__18399, G__18400, G__18401, G__18402, G__18403, G__18404) : self__.dispatch_fn.call(null, G__18387, G__18388, G__18389, G__18390, G__18391, G__18392, G__18393, G__18394, G__18395, G__18396, G__18397, G__18398, G__18399, G__18400, G__18401, G__18402, G__18403, G__18404);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__18405 = a;
    var G__18406 = b;
    var G__18407 = c;
    var G__18408 = d;
    var G__18409 = e;
    var G__18410 = f;
    var G__18411 = g;
    var G__18412 = h;
    var G__18413 = i;
    var G__18414 = j;
    var G__18415 = k;
    var G__18416 = l;
    var G__18417 = m;
    var G__18418 = n;
    var G__18419 = o;
    var G__18420 = p;
    var G__18421 = q;
    var G__18422 = r;
    return target_fn.cljs$core$IFn$_invoke$arity$18 ? target_fn.cljs$core$IFn$_invoke$arity$18(G__18405, G__18406, G__18407, G__18408, G__18409, G__18410, G__18411, G__18412, G__18413, G__18414, G__18415, G__18416, G__18417, G__18418, G__18419, G__18420, G__18421, G__18422) : target_fn.call(null, G__18405, G__18406, G__18407, G__18408, G__18409, G__18410, G__18411, G__18412, G__18413, G__18414, G__18415, G__18416, G__18417, G__18418, G__18419, G__18420, G__18421, G__18422);
  };
  var G__18928__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__18423 = a;
      var G__18424 = b;
      var G__18425 = c;
      var G__18426 = d;
      var G__18427 = e;
      var G__18428 = f;
      var G__18429 = g;
      var G__18430 = h;
      var G__18431 = i;
      var G__18432 = j;
      var G__18433 = k;
      var G__18434 = l;
      var G__18435 = m;
      var G__18436 = n;
      var G__18437 = o;
      var G__18438 = p;
      var G__18439 = q;
      var G__18440 = r;
      var G__18441 = s;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19(G__18423, G__18424, G__18425, G__18426, G__18427, G__18428, G__18429, G__18430, G__18431, G__18432, G__18433, G__18434, G__18435, G__18436, G__18437, G__18438, G__18439, G__18440, G__18441) : self__.dispatch_fn.call(null, G__18423, G__18424, G__18425, G__18426, G__18427, G__18428, G__18429, G__18430, G__18431, G__18432, G__18433, G__18434, G__18435, G__18436, G__18437, G__18438, G__18439, 
      G__18440, G__18441);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__18442 = a;
    var G__18443 = b;
    var G__18444 = c;
    var G__18445 = d;
    var G__18446 = e;
    var G__18447 = f;
    var G__18448 = g;
    var G__18449 = h;
    var G__18450 = i;
    var G__18451 = j;
    var G__18452 = k;
    var G__18453 = l;
    var G__18454 = m;
    var G__18455 = n;
    var G__18456 = o;
    var G__18457 = p;
    var G__18458 = q;
    var G__18459 = r;
    var G__18460 = s;
    return target_fn.cljs$core$IFn$_invoke$arity$19 ? target_fn.cljs$core$IFn$_invoke$arity$19(G__18442, G__18443, G__18444, G__18445, G__18446, G__18447, G__18448, G__18449, G__18450, G__18451, G__18452, G__18453, G__18454, G__18455, G__18456, G__18457, G__18458, G__18459, G__18460) : target_fn.call(null, G__18442, G__18443, G__18444, G__18445, G__18446, G__18447, G__18448, G__18449, G__18450, G__18451, G__18452, G__18453, G__18454, G__18455, G__18456, G__18457, G__18458, G__18459, G__18460);
  };
  var G__18928__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__18461 = a;
      var G__18462 = b;
      var G__18463 = c;
      var G__18464 = d;
      var G__18465 = e;
      var G__18466 = f;
      var G__18467 = g;
      var G__18468 = h;
      var G__18469 = i;
      var G__18470 = j;
      var G__18471 = k;
      var G__18472 = l;
      var G__18473 = m;
      var G__18474 = n;
      var G__18475 = o;
      var G__18476 = p;
      var G__18477 = q;
      var G__18478 = r;
      var G__18479 = s;
      var G__18480 = t;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20(G__18461, G__18462, G__18463, G__18464, G__18465, G__18466, G__18467, G__18468, G__18469, G__18470, G__18471, G__18472, G__18473, G__18474, G__18475, G__18476, G__18477, G__18478, G__18479, G__18480) : self__.dispatch_fn.call(null, G__18461, G__18462, G__18463, G__18464, G__18465, G__18466, G__18467, G__18468, G__18469, G__18470, G__18471, G__18472, G__18473, G__18474, G__18475, G__18476, 
      G__18477, G__18478, G__18479, G__18480);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__18481 = a;
    var G__18482 = b;
    var G__18483 = c;
    var G__18484 = d;
    var G__18485 = e;
    var G__18486 = f;
    var G__18487 = g;
    var G__18488 = h;
    var G__18489 = i;
    var G__18490 = j;
    var G__18491 = k;
    var G__18492 = l;
    var G__18493 = m;
    var G__18494 = n;
    var G__18495 = o;
    var G__18496 = p;
    var G__18497 = q;
    var G__18498 = r;
    var G__18499 = s;
    var G__18500 = t;
    return target_fn.cljs$core$IFn$_invoke$arity$20 ? target_fn.cljs$core$IFn$_invoke$arity$20(G__18481, G__18482, G__18483, G__18484, G__18485, G__18486, G__18487, G__18488, G__18489, G__18490, G__18491, G__18492, G__18493, G__18494, G__18495, G__18496, G__18497, G__18498, G__18499, G__18500) : target_fn.call(null, G__18481, G__18482, G__18483, G__18484, G__18485, G__18486, G__18487, G__18488, G__18489, G__18490, G__18491, G__18492, G__18493, G__18494, G__18495, G__18496, G__18497, G__18498, G__18499, 
    G__18500);
  };
  var G__18928__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(self__.dispatch_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(target_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
  };
  G__18928 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__18928__1.call(this, self__);
      case 2:
        return G__18928__2.call(this, self__, a);
      case 3:
        return G__18928__3.call(this, self__, a, b);
      case 4:
        return G__18928__4.call(this, self__, a, b, c);
      case 5:
        return G__18928__5.call(this, self__, a, b, c, d);
      case 6:
        return G__18928__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__18928__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__18928__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__18928__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__18928__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__18928__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__18928__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__18928__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__18928__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__18928__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__18928__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__18928__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__18928__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__18928__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__18928__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__18928__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__18928__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__18928.cljs$core$IFn$_invoke$arity$1 = G__18928__1;
  G__18928.cljs$core$IFn$_invoke$arity$2 = G__18928__2;
  G__18928.cljs$core$IFn$_invoke$arity$3 = G__18928__3;
  G__18928.cljs$core$IFn$_invoke$arity$4 = G__18928__4;
  G__18928.cljs$core$IFn$_invoke$arity$5 = G__18928__5;
  G__18928.cljs$core$IFn$_invoke$arity$6 = G__18928__6;
  G__18928.cljs$core$IFn$_invoke$arity$7 = G__18928__7;
  G__18928.cljs$core$IFn$_invoke$arity$8 = G__18928__8;
  G__18928.cljs$core$IFn$_invoke$arity$9 = G__18928__9;
  G__18928.cljs$core$IFn$_invoke$arity$10 = G__18928__10;
  G__18928.cljs$core$IFn$_invoke$arity$11 = G__18928__11;
  G__18928.cljs$core$IFn$_invoke$arity$12 = G__18928__12;
  G__18928.cljs$core$IFn$_invoke$arity$13 = G__18928__13;
  G__18928.cljs$core$IFn$_invoke$arity$14 = G__18928__14;
  G__18928.cljs$core$IFn$_invoke$arity$15 = G__18928__15;
  G__18928.cljs$core$IFn$_invoke$arity$16 = G__18928__16;
  G__18928.cljs$core$IFn$_invoke$arity$17 = G__18928__17;
  G__18928.cljs$core$IFn$_invoke$arity$18 = G__18928__18;
  G__18928.cljs$core$IFn$_invoke$arity$19 = G__18928__19;
  G__18928.cljs$core$IFn$_invoke$arity$20 = G__18928__20;
  G__18928.cljs$core$IFn$_invoke$arity$21 = G__18928__21;
  G__18928.cljs$core$IFn$_invoke$arity$22 = G__18928__22;
  return G__18928;
}();
cljs.core.MultiFn.prototype.apply = function(self__, args18080) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args18080)));
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0() : self__.dispatch_fn.call(null);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$0 ? target_fn.cljs$core$IFn$_invoke$arity$0() : target_fn.call(null);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__18501 = a;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1(G__18501) : self__.dispatch_fn.call(null, G__18501);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__18502 = a;
  return target_fn.cljs$core$IFn$_invoke$arity$1 ? target_fn.cljs$core$IFn$_invoke$arity$1(G__18502) : target_fn.call(null, G__18502);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__18503 = a;
    var G__18504 = b;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2(G__18503, G__18504) : self__.dispatch_fn.call(null, G__18503, G__18504);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__18505 = a;
  var G__18506 = b;
  return target_fn.cljs$core$IFn$_invoke$arity$2 ? target_fn.cljs$core$IFn$_invoke$arity$2(G__18505, G__18506) : target_fn.call(null, G__18505, G__18506);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__18507 = a;
    var G__18508 = b;
    var G__18509 = c;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3(G__18507, G__18508, G__18509) : self__.dispatch_fn.call(null, G__18507, G__18508, G__18509);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__18510 = a;
  var G__18511 = b;
  var G__18512 = c;
  return target_fn.cljs$core$IFn$_invoke$arity$3 ? target_fn.cljs$core$IFn$_invoke$arity$3(G__18510, G__18511, G__18512) : target_fn.call(null, G__18510, G__18511, G__18512);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__18513 = a;
    var G__18514 = b;
    var G__18515 = c;
    var G__18516 = d;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4(G__18513, G__18514, G__18515, G__18516) : self__.dispatch_fn.call(null, G__18513, G__18514, G__18515, G__18516);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__18517 = a;
  var G__18518 = b;
  var G__18519 = c;
  var G__18520 = d;
  return target_fn.cljs$core$IFn$_invoke$arity$4 ? target_fn.cljs$core$IFn$_invoke$arity$4(G__18517, G__18518, G__18519, G__18520) : target_fn.call(null, G__18517, G__18518, G__18519, G__18520);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__18521 = a;
    var G__18522 = b;
    var G__18523 = c;
    var G__18524 = d;
    var G__18525 = e;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5(G__18521, G__18522, G__18523, G__18524, G__18525) : self__.dispatch_fn.call(null, G__18521, G__18522, G__18523, G__18524, G__18525);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__18526 = a;
  var G__18527 = b;
  var G__18528 = c;
  var G__18529 = d;
  var G__18530 = e;
  return target_fn.cljs$core$IFn$_invoke$arity$5 ? target_fn.cljs$core$IFn$_invoke$arity$5(G__18526, G__18527, G__18528, G__18529, G__18530) : target_fn.call(null, G__18526, G__18527, G__18528, G__18529, G__18530);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__18531 = a;
    var G__18532 = b;
    var G__18533 = c;
    var G__18534 = d;
    var G__18535 = e;
    var G__18536 = f;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6(G__18531, G__18532, G__18533, G__18534, G__18535, G__18536) : self__.dispatch_fn.call(null, G__18531, G__18532, G__18533, G__18534, G__18535, G__18536);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__18537 = a;
  var G__18538 = b;
  var G__18539 = c;
  var G__18540 = d;
  var G__18541 = e;
  var G__18542 = f;
  return target_fn.cljs$core$IFn$_invoke$arity$6 ? target_fn.cljs$core$IFn$_invoke$arity$6(G__18537, G__18538, G__18539, G__18540, G__18541, G__18542) : target_fn.call(null, G__18537, G__18538, G__18539, G__18540, G__18541, G__18542);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__18543 = a;
    var G__18544 = b;
    var G__18545 = c;
    var G__18546 = d;
    var G__18547 = e;
    var G__18548 = f;
    var G__18549 = g;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7(G__18543, G__18544, G__18545, G__18546, G__18547, G__18548, G__18549) : self__.dispatch_fn.call(null, G__18543, G__18544, G__18545, G__18546, G__18547, G__18548, G__18549);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__18550 = a;
  var G__18551 = b;
  var G__18552 = c;
  var G__18553 = d;
  var G__18554 = e;
  var G__18555 = f;
  var G__18556 = g;
  return target_fn.cljs$core$IFn$_invoke$arity$7 ? target_fn.cljs$core$IFn$_invoke$arity$7(G__18550, G__18551, G__18552, G__18553, G__18554, G__18555, G__18556) : target_fn.call(null, G__18550, G__18551, G__18552, G__18553, G__18554, G__18555, G__18556);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__18557 = a;
    var G__18558 = b;
    var G__18559 = c;
    var G__18560 = d;
    var G__18561 = e;
    var G__18562 = f;
    var G__18563 = g;
    var G__18564 = h;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8(G__18557, G__18558, G__18559, G__18560, G__18561, G__18562, G__18563, G__18564) : self__.dispatch_fn.call(null, G__18557, G__18558, G__18559, G__18560, G__18561, G__18562, G__18563, G__18564);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__18565 = a;
  var G__18566 = b;
  var G__18567 = c;
  var G__18568 = d;
  var G__18569 = e;
  var G__18570 = f;
  var G__18571 = g;
  var G__18572 = h;
  return target_fn.cljs$core$IFn$_invoke$arity$8 ? target_fn.cljs$core$IFn$_invoke$arity$8(G__18565, G__18566, G__18567, G__18568, G__18569, G__18570, G__18571, G__18572) : target_fn.call(null, G__18565, G__18566, G__18567, G__18568, G__18569, G__18570, G__18571, G__18572);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__18573 = a;
    var G__18574 = b;
    var G__18575 = c;
    var G__18576 = d;
    var G__18577 = e;
    var G__18578 = f;
    var G__18579 = g;
    var G__18580 = h;
    var G__18581 = i;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9(G__18573, G__18574, G__18575, G__18576, G__18577, G__18578, G__18579, G__18580, G__18581) : self__.dispatch_fn.call(null, G__18573, G__18574, G__18575, G__18576, G__18577, G__18578, G__18579, G__18580, G__18581);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__18582 = a;
  var G__18583 = b;
  var G__18584 = c;
  var G__18585 = d;
  var G__18586 = e;
  var G__18587 = f;
  var G__18588 = g;
  var G__18589 = h;
  var G__18590 = i;
  return target_fn.cljs$core$IFn$_invoke$arity$9 ? target_fn.cljs$core$IFn$_invoke$arity$9(G__18582, G__18583, G__18584, G__18585, G__18586, G__18587, G__18588, G__18589, G__18590) : target_fn.call(null, G__18582, G__18583, G__18584, G__18585, G__18586, G__18587, G__18588, G__18589, G__18590);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__18591 = a;
    var G__18592 = b;
    var G__18593 = c;
    var G__18594 = d;
    var G__18595 = e;
    var G__18596 = f;
    var G__18597 = g;
    var G__18598 = h;
    var G__18599 = i;
    var G__18600 = j;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10(G__18591, G__18592, G__18593, G__18594, G__18595, G__18596, G__18597, G__18598, G__18599, G__18600) : self__.dispatch_fn.call(null, G__18591, G__18592, G__18593, G__18594, G__18595, G__18596, G__18597, G__18598, G__18599, G__18600);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__18601 = a;
  var G__18602 = b;
  var G__18603 = c;
  var G__18604 = d;
  var G__18605 = e;
  var G__18606 = f;
  var G__18607 = g;
  var G__18608 = h;
  var G__18609 = i;
  var G__18610 = j;
  return target_fn.cljs$core$IFn$_invoke$arity$10 ? target_fn.cljs$core$IFn$_invoke$arity$10(G__18601, G__18602, G__18603, G__18604, G__18605, G__18606, G__18607, G__18608, G__18609, G__18610) : target_fn.call(null, G__18601, G__18602, G__18603, G__18604, G__18605, G__18606, G__18607, G__18608, G__18609, G__18610);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__18611 = a;
    var G__18612 = b;
    var G__18613 = c;
    var G__18614 = d;
    var G__18615 = e;
    var G__18616 = f;
    var G__18617 = g;
    var G__18618 = h;
    var G__18619 = i;
    var G__18620 = j;
    var G__18621 = k;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11(G__18611, G__18612, G__18613, G__18614, G__18615, G__18616, G__18617, G__18618, G__18619, G__18620, G__18621) : self__.dispatch_fn.call(null, G__18611, G__18612, G__18613, G__18614, G__18615, G__18616, G__18617, G__18618, G__18619, G__18620, G__18621);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__18622 = a;
  var G__18623 = b;
  var G__18624 = c;
  var G__18625 = d;
  var G__18626 = e;
  var G__18627 = f;
  var G__18628 = g;
  var G__18629 = h;
  var G__18630 = i;
  var G__18631 = j;
  var G__18632 = k;
  return target_fn.cljs$core$IFn$_invoke$arity$11 ? target_fn.cljs$core$IFn$_invoke$arity$11(G__18622, G__18623, G__18624, G__18625, G__18626, G__18627, G__18628, G__18629, G__18630, G__18631, G__18632) : target_fn.call(null, G__18622, G__18623, G__18624, G__18625, G__18626, G__18627, G__18628, G__18629, G__18630, G__18631, G__18632);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__18633 = a;
    var G__18634 = b;
    var G__18635 = c;
    var G__18636 = d;
    var G__18637 = e;
    var G__18638 = f;
    var G__18639 = g;
    var G__18640 = h;
    var G__18641 = i;
    var G__18642 = j;
    var G__18643 = k;
    var G__18644 = l;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12(G__18633, G__18634, G__18635, G__18636, G__18637, G__18638, G__18639, G__18640, G__18641, G__18642, G__18643, G__18644) : self__.dispatch_fn.call(null, G__18633, G__18634, G__18635, G__18636, G__18637, G__18638, G__18639, G__18640, G__18641, G__18642, G__18643, G__18644);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__18645 = a;
  var G__18646 = b;
  var G__18647 = c;
  var G__18648 = d;
  var G__18649 = e;
  var G__18650 = f;
  var G__18651 = g;
  var G__18652 = h;
  var G__18653 = i;
  var G__18654 = j;
  var G__18655 = k;
  var G__18656 = l;
  return target_fn.cljs$core$IFn$_invoke$arity$12 ? target_fn.cljs$core$IFn$_invoke$arity$12(G__18645, G__18646, G__18647, G__18648, G__18649, G__18650, G__18651, G__18652, G__18653, G__18654, G__18655, G__18656) : target_fn.call(null, G__18645, G__18646, G__18647, G__18648, G__18649, G__18650, G__18651, G__18652, G__18653, G__18654, G__18655, G__18656);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__18657 = a;
    var G__18658 = b;
    var G__18659 = c;
    var G__18660 = d;
    var G__18661 = e;
    var G__18662 = f;
    var G__18663 = g;
    var G__18664 = h;
    var G__18665 = i;
    var G__18666 = j;
    var G__18667 = k;
    var G__18668 = l;
    var G__18669 = m;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13(G__18657, G__18658, G__18659, G__18660, G__18661, G__18662, G__18663, G__18664, G__18665, G__18666, G__18667, G__18668, G__18669) : self__.dispatch_fn.call(null, G__18657, G__18658, G__18659, G__18660, G__18661, G__18662, G__18663, G__18664, G__18665, G__18666, G__18667, G__18668, G__18669);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__18670 = a;
  var G__18671 = b;
  var G__18672 = c;
  var G__18673 = d;
  var G__18674 = e;
  var G__18675 = f;
  var G__18676 = g;
  var G__18677 = h;
  var G__18678 = i;
  var G__18679 = j;
  var G__18680 = k;
  var G__18681 = l;
  var G__18682 = m;
  return target_fn.cljs$core$IFn$_invoke$arity$13 ? target_fn.cljs$core$IFn$_invoke$arity$13(G__18670, G__18671, G__18672, G__18673, G__18674, G__18675, G__18676, G__18677, G__18678, G__18679, G__18680, G__18681, G__18682) : target_fn.call(null, G__18670, G__18671, G__18672, G__18673, G__18674, G__18675, G__18676, G__18677, G__18678, G__18679, G__18680, G__18681, G__18682);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__18683 = a;
    var G__18684 = b;
    var G__18685 = c;
    var G__18686 = d;
    var G__18687 = e;
    var G__18688 = f;
    var G__18689 = g;
    var G__18690 = h;
    var G__18691 = i;
    var G__18692 = j;
    var G__18693 = k;
    var G__18694 = l;
    var G__18695 = m;
    var G__18696 = n;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14(G__18683, G__18684, G__18685, G__18686, G__18687, G__18688, G__18689, G__18690, G__18691, G__18692, G__18693, G__18694, G__18695, G__18696) : self__.dispatch_fn.call(null, G__18683, G__18684, G__18685, G__18686, G__18687, G__18688, G__18689, G__18690, G__18691, G__18692, G__18693, G__18694, G__18695, G__18696);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__18697 = a;
  var G__18698 = b;
  var G__18699 = c;
  var G__18700 = d;
  var G__18701 = e;
  var G__18702 = f;
  var G__18703 = g;
  var G__18704 = h;
  var G__18705 = i;
  var G__18706 = j;
  var G__18707 = k;
  var G__18708 = l;
  var G__18709 = m;
  var G__18710 = n;
  return target_fn.cljs$core$IFn$_invoke$arity$14 ? target_fn.cljs$core$IFn$_invoke$arity$14(G__18697, G__18698, G__18699, G__18700, G__18701, G__18702, G__18703, G__18704, G__18705, G__18706, G__18707, G__18708, G__18709, G__18710) : target_fn.call(null, G__18697, G__18698, G__18699, G__18700, G__18701, G__18702, G__18703, G__18704, G__18705, G__18706, G__18707, G__18708, G__18709, G__18710);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__18711 = a;
    var G__18712 = b;
    var G__18713 = c;
    var G__18714 = d;
    var G__18715 = e;
    var G__18716 = f;
    var G__18717 = g;
    var G__18718 = h;
    var G__18719 = i;
    var G__18720 = j;
    var G__18721 = k;
    var G__18722 = l;
    var G__18723 = m;
    var G__18724 = n;
    var G__18725 = o;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15(G__18711, G__18712, G__18713, G__18714, G__18715, G__18716, G__18717, G__18718, G__18719, G__18720, G__18721, G__18722, G__18723, G__18724, G__18725) : self__.dispatch_fn.call(null, G__18711, G__18712, G__18713, G__18714, G__18715, G__18716, G__18717, G__18718, G__18719, G__18720, G__18721, G__18722, G__18723, G__18724, G__18725);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__18726 = a;
  var G__18727 = b;
  var G__18728 = c;
  var G__18729 = d;
  var G__18730 = e;
  var G__18731 = f;
  var G__18732 = g;
  var G__18733 = h;
  var G__18734 = i;
  var G__18735 = j;
  var G__18736 = k;
  var G__18737 = l;
  var G__18738 = m;
  var G__18739 = n;
  var G__18740 = o;
  return target_fn.cljs$core$IFn$_invoke$arity$15 ? target_fn.cljs$core$IFn$_invoke$arity$15(G__18726, G__18727, G__18728, G__18729, G__18730, G__18731, G__18732, G__18733, G__18734, G__18735, G__18736, G__18737, G__18738, G__18739, G__18740) : target_fn.call(null, G__18726, G__18727, G__18728, G__18729, G__18730, G__18731, G__18732, G__18733, G__18734, G__18735, G__18736, G__18737, G__18738, G__18739, G__18740);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__18741 = a;
    var G__18742 = b;
    var G__18743 = c;
    var G__18744 = d;
    var G__18745 = e;
    var G__18746 = f;
    var G__18747 = g;
    var G__18748 = h;
    var G__18749 = i;
    var G__18750 = j;
    var G__18751 = k;
    var G__18752 = l;
    var G__18753 = m;
    var G__18754 = n;
    var G__18755 = o;
    var G__18756 = p;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16(G__18741, G__18742, G__18743, G__18744, G__18745, G__18746, G__18747, G__18748, G__18749, G__18750, G__18751, G__18752, G__18753, G__18754, G__18755, G__18756) : self__.dispatch_fn.call(null, G__18741, G__18742, G__18743, G__18744, G__18745, G__18746, G__18747, G__18748, G__18749, G__18750, G__18751, G__18752, G__18753, G__18754, G__18755, G__18756);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__18757 = a;
  var G__18758 = b;
  var G__18759 = c;
  var G__18760 = d;
  var G__18761 = e;
  var G__18762 = f;
  var G__18763 = g;
  var G__18764 = h;
  var G__18765 = i;
  var G__18766 = j;
  var G__18767 = k;
  var G__18768 = l;
  var G__18769 = m;
  var G__18770 = n;
  var G__18771 = o;
  var G__18772 = p;
  return target_fn.cljs$core$IFn$_invoke$arity$16 ? target_fn.cljs$core$IFn$_invoke$arity$16(G__18757, G__18758, G__18759, G__18760, G__18761, G__18762, G__18763, G__18764, G__18765, G__18766, G__18767, G__18768, G__18769, G__18770, G__18771, G__18772) : target_fn.call(null, G__18757, G__18758, G__18759, G__18760, G__18761, G__18762, G__18763, G__18764, G__18765, G__18766, G__18767, G__18768, G__18769, G__18770, G__18771, G__18772);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__18773 = a;
    var G__18774 = b;
    var G__18775 = c;
    var G__18776 = d;
    var G__18777 = e;
    var G__18778 = f;
    var G__18779 = g;
    var G__18780 = h;
    var G__18781 = i;
    var G__18782 = j;
    var G__18783 = k;
    var G__18784 = l;
    var G__18785 = m;
    var G__18786 = n;
    var G__18787 = o;
    var G__18788 = p;
    var G__18789 = q;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17(G__18773, G__18774, G__18775, G__18776, G__18777, G__18778, G__18779, G__18780, G__18781, G__18782, G__18783, G__18784, G__18785, G__18786, G__18787, G__18788, G__18789) : self__.dispatch_fn.call(null, G__18773, G__18774, G__18775, G__18776, G__18777, G__18778, G__18779, G__18780, G__18781, G__18782, G__18783, G__18784, G__18785, G__18786, G__18787, G__18788, G__18789);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__18790 = a;
  var G__18791 = b;
  var G__18792 = c;
  var G__18793 = d;
  var G__18794 = e;
  var G__18795 = f;
  var G__18796 = g;
  var G__18797 = h;
  var G__18798 = i;
  var G__18799 = j;
  var G__18800 = k;
  var G__18801 = l;
  var G__18802 = m;
  var G__18803 = n;
  var G__18804 = o;
  var G__18805 = p;
  var G__18806 = q;
  return target_fn.cljs$core$IFn$_invoke$arity$17 ? target_fn.cljs$core$IFn$_invoke$arity$17(G__18790, G__18791, G__18792, G__18793, G__18794, G__18795, G__18796, G__18797, G__18798, G__18799, G__18800, G__18801, G__18802, G__18803, G__18804, G__18805, G__18806) : target_fn.call(null, G__18790, G__18791, G__18792, G__18793, G__18794, G__18795, G__18796, G__18797, G__18798, G__18799, G__18800, G__18801, G__18802, G__18803, G__18804, G__18805, G__18806);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__18807 = a;
    var G__18808 = b;
    var G__18809 = c;
    var G__18810 = d;
    var G__18811 = e;
    var G__18812 = f;
    var G__18813 = g;
    var G__18814 = h;
    var G__18815 = i;
    var G__18816 = j;
    var G__18817 = k;
    var G__18818 = l;
    var G__18819 = m;
    var G__18820 = n;
    var G__18821 = o;
    var G__18822 = p;
    var G__18823 = q;
    var G__18824 = r;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18(G__18807, G__18808, G__18809, G__18810, G__18811, G__18812, G__18813, G__18814, G__18815, G__18816, G__18817, G__18818, G__18819, G__18820, G__18821, G__18822, G__18823, G__18824) : self__.dispatch_fn.call(null, G__18807, G__18808, G__18809, G__18810, G__18811, G__18812, G__18813, G__18814, G__18815, G__18816, G__18817, G__18818, G__18819, G__18820, G__18821, G__18822, G__18823, G__18824);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__18825 = a;
  var G__18826 = b;
  var G__18827 = c;
  var G__18828 = d;
  var G__18829 = e;
  var G__18830 = f;
  var G__18831 = g;
  var G__18832 = h;
  var G__18833 = i;
  var G__18834 = j;
  var G__18835 = k;
  var G__18836 = l;
  var G__18837 = m;
  var G__18838 = n;
  var G__18839 = o;
  var G__18840 = p;
  var G__18841 = q;
  var G__18842 = r;
  return target_fn.cljs$core$IFn$_invoke$arity$18 ? target_fn.cljs$core$IFn$_invoke$arity$18(G__18825, G__18826, G__18827, G__18828, G__18829, G__18830, G__18831, G__18832, G__18833, G__18834, G__18835, G__18836, G__18837, G__18838, G__18839, G__18840, G__18841, G__18842) : target_fn.call(null, G__18825, G__18826, G__18827, G__18828, G__18829, G__18830, G__18831, G__18832, G__18833, G__18834, G__18835, G__18836, G__18837, G__18838, G__18839, G__18840, G__18841, G__18842);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__18843 = a;
    var G__18844 = b;
    var G__18845 = c;
    var G__18846 = d;
    var G__18847 = e;
    var G__18848 = f;
    var G__18849 = g;
    var G__18850 = h;
    var G__18851 = i;
    var G__18852 = j;
    var G__18853 = k;
    var G__18854 = l;
    var G__18855 = m;
    var G__18856 = n;
    var G__18857 = o;
    var G__18858 = p;
    var G__18859 = q;
    var G__18860 = r;
    var G__18861 = s;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19(G__18843, G__18844, G__18845, G__18846, G__18847, G__18848, G__18849, G__18850, G__18851, G__18852, G__18853, G__18854, G__18855, G__18856, G__18857, G__18858, G__18859, G__18860, G__18861) : self__.dispatch_fn.call(null, G__18843, G__18844, G__18845, G__18846, G__18847, G__18848, G__18849, G__18850, G__18851, G__18852, G__18853, G__18854, G__18855, G__18856, G__18857, G__18858, G__18859, 
    G__18860, G__18861);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__18862 = a;
  var G__18863 = b;
  var G__18864 = c;
  var G__18865 = d;
  var G__18866 = e;
  var G__18867 = f;
  var G__18868 = g;
  var G__18869 = h;
  var G__18870 = i;
  var G__18871 = j;
  var G__18872 = k;
  var G__18873 = l;
  var G__18874 = m;
  var G__18875 = n;
  var G__18876 = o;
  var G__18877 = p;
  var G__18878 = q;
  var G__18879 = r;
  var G__18880 = s;
  return target_fn.cljs$core$IFn$_invoke$arity$19 ? target_fn.cljs$core$IFn$_invoke$arity$19(G__18862, G__18863, G__18864, G__18865, G__18866, G__18867, G__18868, G__18869, G__18870, G__18871, G__18872, G__18873, G__18874, G__18875, G__18876, G__18877, G__18878, G__18879, G__18880) : target_fn.call(null, G__18862, G__18863, G__18864, G__18865, G__18866, G__18867, G__18868, G__18869, G__18870, G__18871, G__18872, G__18873, G__18874, G__18875, G__18876, G__18877, G__18878, G__18879, G__18880);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__18881 = a;
    var G__18882 = b;
    var G__18883 = c;
    var G__18884 = d;
    var G__18885 = e;
    var G__18886 = f;
    var G__18887 = g;
    var G__18888 = h;
    var G__18889 = i;
    var G__18890 = j;
    var G__18891 = k;
    var G__18892 = l;
    var G__18893 = m;
    var G__18894 = n;
    var G__18895 = o;
    var G__18896 = p;
    var G__18897 = q;
    var G__18898 = r;
    var G__18899 = s;
    var G__18900 = t;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20(G__18881, G__18882, G__18883, G__18884, G__18885, G__18886, G__18887, G__18888, G__18889, G__18890, G__18891, G__18892, G__18893, G__18894, G__18895, G__18896, G__18897, G__18898, G__18899, G__18900) : self__.dispatch_fn.call(null, G__18881, G__18882, G__18883, G__18884, G__18885, G__18886, G__18887, G__18888, G__18889, G__18890, G__18891, G__18892, G__18893, G__18894, G__18895, G__18896, 
    G__18897, G__18898, G__18899, G__18900);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__18901 = a;
  var G__18902 = b;
  var G__18903 = c;
  var G__18904 = d;
  var G__18905 = e;
  var G__18906 = f;
  var G__18907 = g;
  var G__18908 = h;
  var G__18909 = i;
  var G__18910 = j;
  var G__18911 = k;
  var G__18912 = l;
  var G__18913 = m;
  var G__18914 = n;
  var G__18915 = o;
  var G__18916 = p;
  var G__18917 = q;
  var G__18918 = r;
  var G__18919 = s;
  var G__18920 = t;
  return target_fn.cljs$core$IFn$_invoke$arity$20 ? target_fn.cljs$core$IFn$_invoke$arity$20(G__18901, G__18902, G__18903, G__18904, G__18905, G__18906, G__18907, G__18908, G__18909, G__18910, G__18911, G__18912, G__18913, G__18914, G__18915, G__18916, G__18917, G__18918, G__18919, G__18920) : target_fn.call(null, G__18901, G__18902, G__18903, G__18904, G__18905, G__18906, G__18907, G__18908, G__18909, G__18910, G__18911, G__18912, G__18913, G__18914, G__18915, G__18916, G__18917, G__18918, G__18919, 
  G__18920);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var mf = this;
  var dispatch_val = cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(self__.dispatch_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(target_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefer_method$arity$3 = function(mf, dispatch_val_x, dispatch_val_y) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core.truth_(cljs.core.prefers_STAR_(dispatch_val_x, dispatch_val_y, self__.prefer_table))) {
    throw new Error([cljs.core.str("Preference conflict in multimethod '"), cljs.core.str(self__.name), cljs.core.str("': "), cljs.core.str(dispatch_val_y), cljs.core.str(" is already preferred to "), cljs.core.str(dispatch_val_x)].join(""));
  } else {
  }
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.prefer_table, function(mf__$1) {
    return function(old) {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(old, dispatch_val_x, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(old, dispatch_val_x, cljs.core.PersistentHashSet.EMPTY), dispatch_val_y));
    };
  }(mf__$1));
  return cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_default_dispatch_val$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return self__.default_dispatch_val;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_remove_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(self__.method_table, cljs.core.dissoc, dispatch_val);
  cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_methods$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  var G__18921 = self__.method_table;
  return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__18921) : cljs.core.deref.call(null, G__18921);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefers$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  var G__18922 = self__.prefer_table;
  return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__18922) : cljs.core.deref.call(null, G__18922);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_dispatch_fn$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return self__.dispatch_fn;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_add_method$arity$3 = function(mf, dispatch_val, method) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(self__.method_table, cljs.core.assoc, dispatch_val, method);
  cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_reset$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.method_table, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.method_cache, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.prefer_table, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.cached_hierarchy, function(mf__$1) {
    return function(mf__$2) {
      return null;
    };
  }(mf__$1));
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_get_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(function() {
    var G__18924 = self__.cached_hierarchy;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__18924) : cljs.core.deref.call(null, G__18924);
  }(), function() {
    var G__18925 = self__.hierarchy;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__18925) : cljs.core.deref.call(null, G__18925);
  }())) {
  } else {
    cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  }
  var temp__4420__auto__ = function() {
    var G__18926 = self__.method_cache;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__18926) : cljs.core.deref.call(null, G__18926);
  }().call(null, dispatch_val);
  if (cljs.core.truth_(temp__4420__auto__)) {
    var target_fn = temp__4420__auto__;
    return target_fn;
  } else {
    var temp__4420__auto____$1 = cljs.core.find_and_cache_best_method(self__.name, dispatch_val, self__.hierarchy, self__.method_table, self__.prefer_table, self__.method_cache, self__.cached_hierarchy);
    if (cljs.core.truth_(temp__4420__auto____$1)) {
      var target_fn = temp__4420__auto____$1;
      return target_fn;
    } else {
      return function() {
        var G__18927 = self__.method_table;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__18927) : cljs.core.deref.call(null, G__18927);
      }().call(null, self__.default_dispatch_val);
    }
  }
};
cljs.core.MultiFn.prototype.cljs$core$INamed$_name$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._name(self__.name);
};
cljs.core.MultiFn.prototype.cljs$core$INamed$_namespace$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._namespace(self__.name);
};
cljs.core.MultiFn.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var G__18923 = this$__$1;
  return goog.getUid(G__18923);
};
cljs.core.MultiFn.getBasis = function() {
  return new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "name", "name", -810760592, null), new cljs.core.Symbol(null, "dispatch-fn", "dispatch-fn", -1401088155, null), new cljs.core.Symbol(null, "default-dispatch-val", "default-dispatch-val", -1231201266, null), new cljs.core.Symbol(null, "hierarchy", "hierarchy", 587061186, null), new cljs.core.Symbol(null, "method-table", "method-table", -1878263165, null), new cljs.core.Symbol(null, 
  "prefer-table", "prefer-table", 462168584, null), new cljs.core.Symbol(null, "method-cache", "method-cache", 1230193905, null), new cljs.core.Symbol(null, "cached-hierarchy", "cached-hierarchy", -1085460203, null)], null);
};
cljs.core.MultiFn.cljs$lang$type = true;
cljs.core.MultiFn.cljs$lang$ctorStr = "cljs.core/MultiFn";
cljs.core.MultiFn.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/MultiFn");
};
cljs.core.__GT_MultiFn = function cljs$core$__GT_MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  return new cljs.core.MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
};
cljs.core.remove_all_methods = function cljs$core$remove_all_methods(multifn) {
  return cljs.core._reset(multifn);
};
cljs.core.remove_method = function cljs$core$remove_method(multifn, dispatch_val) {
  return cljs.core._remove_method(multifn, dispatch_val);
};
cljs.core.prefer_method = function cljs$core$prefer_method(multifn, dispatch_val_x, dispatch_val_y) {
  return cljs.core._prefer_method(multifn, dispatch_val_x, dispatch_val_y);
};
cljs.core.methods$ = function cljs$core$methods(multifn) {
  return cljs.core._methods(multifn);
};
cljs.core.get_method = function cljs$core$get_method(multifn, dispatch_val) {
  return cljs.core._get_method(multifn, dispatch_val);
};
cljs.core.prefers = function cljs$core$prefers(multifn) {
  return cljs.core._prefers(multifn);
};
cljs.core.default_dispatch_val = function cljs$core$default_dispatch_val(multifn) {
  return cljs.core._default_dispatch_val(multifn);
};
cljs.core.dispatch_fn = function cljs$core$dispatch_fn(multifn) {
  return cljs.core._dispatch_fn(multifn);
};
cljs.core.UUID = function(uuid, __hash) {
  this.uuid = uuid;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 2153775104;
  this.cljs$lang$protocol_mask$partition1$ = 2048;
};
cljs.core.UUID.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.uuid;
};
cljs.core.UUID.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  return other instanceof cljs.core.UUID && self__.uuid === other.uuid;
};
cljs.core.UUID.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, ___$1) {
  var self__ = this;
  var ___$2 = this;
  return cljs.core._write(writer, [cljs.core.str('#uuid "'), cljs.core.str(self__.uuid), cljs.core.str('"')].join(""));
};
cljs.core.UUID.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.__hash == null) {
    self__.__hash = function() {
      var G__18929 = self__.uuid;
      return goog.string.hashCode(G__18929);
    }();
  } else {
  }
  return self__.__hash;
};
cljs.core.UUID.prototype.cljs$core$IComparable$_compare$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  var G__18930 = self__.uuid;
  var G__18931 = other.uuid;
  return goog.array.defaultCompare(G__18930, G__18931);
};
cljs.core.UUID.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "uuid", "uuid", -504564192, null), new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null)], null);
};
cljs.core.UUID.cljs$lang$type = true;
cljs.core.UUID.cljs$lang$ctorStr = "cljs.core/UUID";
cljs.core.UUID.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/UUID");
};
cljs.core.__GT_UUID = function cljs$core$__GT_UUID(uuid, __hash) {
  return new cljs.core.UUID(uuid, __hash);
};
cljs.core.uuid = function cljs$core$uuid(s) {
  return new cljs.core.UUID(s, null);
};
cljs.core.random_uuid = function cljs$core$random_uuid() {
  var hex = function cljs$core$random_uuid_$_hex() {
    return cljs.core.rand_int(15).toString(16);
  };
  var rhex = (8 | 3 & cljs.core.rand_int(14)).toString(16);
  return cljs.core.uuid([cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str("-"), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str("-"), cljs.core.str("4"), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str("-"), cljs.core.str(rhex), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), 
  cljs.core.str("-"), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex())].join(""));
};
cljs.core.pr_writer_ex_info = function cljs$core$pr_writer_ex_info(obj, writer, opts) {
  cljs.core._write(writer, "#ExceptionInfo{:message ");
  cljs.core.pr_writer(obj.message, writer, opts);
  if (cljs.core.truth_(obj.data)) {
    cljs.core._write(writer, ", :data ");
    cljs.core.pr_writer(obj.data, writer, opts);
  } else {
  }
  if (cljs.core.truth_(obj.cause)) {
    cljs.core._write(writer, ", :cause ");
    cljs.core.pr_writer(obj.cause, writer, opts);
  } else {
  }
  return cljs.core._write(writer, "}");
};
cljs.core.ExceptionInfo = function cljs$core$ExceptionInfo(message, data, cause) {
  var e = new Error;
  var this$ = this;
  this$.message = message;
  this$.data = data;
  this$.cause = cause;
  this$.name = e.name;
  this$.description = e.description;
  this$.number = e.number;
  this$.fileName = e.fileName;
  this$.lineNumber = e.lineNumber;
  this$.columnNumber = e.columnNumber;
  this$.stack = e.stack;
  return this$;
};
cljs.core.ExceptionInfo.prototype.__proto__ = Error.prototype;
cljs.core.ExceptionInfo.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ExceptionInfo.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(obj, writer, opts) {
  var obj__$1 = this;
  return cljs.core.pr_writer_ex_info(obj__$1, writer, opts);
};
cljs.core.ExceptionInfo.prototype.toString = function() {
  var this$ = this;
  return cljs.core.pr_str_STAR_(this$);
};
cljs.core.ex_info = function cljs$core$ex_info() {
  var G__18933 = arguments.length;
  switch(G__18933) {
    case 2:
      return cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.ex_info.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2 = function(msg, data) {
  return cljs.core.ex_info.cljs$core$IFn$_invoke$arity$3(msg, data, null);
};
cljs.core.ex_info.cljs$core$IFn$_invoke$arity$3 = function(msg, data, cause) {
  return new cljs.core.ExceptionInfo(msg, data, cause);
};
cljs.core.ex_info.cljs$lang$maxFixedArity = 3;
cljs.core.ex_data = function cljs$core$ex_data(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.data;
  } else {
    return null;
  }
};
cljs.core.ex_message = function cljs$core$ex_message(ex) {
  if (ex instanceof Error) {
    return ex.message;
  } else {
    return null;
  }
};
cljs.core.ex_cause = function cljs$core$ex_cause(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.cause;
  } else {
    return null;
  }
};
cljs.core.comparator = function cljs$core$comparator(pred) {
  return function(x, y) {
    if (cljs.core.truth_(function() {
      var G__18939 = x;
      var G__18940 = y;
      return pred.cljs$core$IFn$_invoke$arity$2 ? pred.cljs$core$IFn$_invoke$arity$2(G__18939, G__18940) : pred.call(null, G__18939, G__18940);
    }())) {
      return -1;
    } else {
      if (cljs.core.truth_(function() {
        var G__18941 = y;
        var G__18942 = x;
        return pred.cljs$core$IFn$_invoke$arity$2 ? pred.cljs$core$IFn$_invoke$arity$2(G__18941, G__18942) : pred.call(null, G__18941, G__18942);
      }())) {
        return 1;
      } else {
        return 0;
      }
    }
  };
};
cljs.core.special_symbol_QMARK_ = function cljs$core$special_symbol_QMARK_(x) {
  return cljs.core.contains_QMARK_(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 19, [new cljs.core.Symbol(null, "\x26", "\x26", -2144855648, null), null, new cljs.core.Symbol(null, "defrecord*", "defrecord*", -1936366207, null), null, new cljs.core.Symbol(null, "try", "try", -1273693247, null), null, new cljs.core.Symbol(null, "loop*", "loop*", 615029416, null), null, new cljs.core.Symbol(null, "do", "do", 1686842252, null), null, new cljs.core.Symbol(null, "letfn*", 
  "letfn*", -110097810, null), null, new cljs.core.Symbol(null, "if", "if", 1181717262, null), null, new cljs.core.Symbol(null, "new", "new", -444906321, null), null, new cljs.core.Symbol(null, "ns", "ns", 2082130287, null), null, new cljs.core.Symbol(null, "deftype*", "deftype*", 962659890, null), null, new cljs.core.Symbol(null, "let*", "let*", 1920721458, null), null, new cljs.core.Symbol(null, "js*", "js*", -1134233646, null), null, new cljs.core.Symbol(null, "fn*", "fn*", -752876845, null), 
  null, new cljs.core.Symbol(null, "recur", "recur", 1202958259, null), null, new cljs.core.Symbol(null, "set!", "set!", 250714521, null), null, new cljs.core.Symbol(null, ".", ".", 1975675962, null), null, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), null, new cljs.core.Symbol(null, "throw", "throw", 595905694, null), null, new cljs.core.Symbol(null, "def", "def", 597100991, null), null], null), null), x);
};
cljs.core.test = function cljs$core$test(v) {
  var f = v.cljs$lang$test;
  if (cljs.core.truth_(f)) {
    f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    return new cljs.core.Keyword(null, "ok", "ok", 967785236);
  } else {
    return new cljs.core.Keyword(null, "no-test", "no-test", -1679482642);
  }
};
cljs.core.TaggedLiteral = function(tag, form) {
  this.tag = tag;
  this.form = form;
  this.cljs$lang$protocol_mask$partition0$ = 2153775360;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.TaggedLiteral.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.TaggedLiteral.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var self__ = this;
  var this$__$1 = this;
  return other instanceof cljs.core.TaggedLiteral && cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.tag, other.tag) && cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.form, other.form);
};
cljs.core.TaggedLiteral.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return 31 * cljs.core.hash(self__.tag) + cljs.core.hash(self__.form);
};
cljs.core.TaggedLiteral.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this$, v) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(this$__$1, v, null);
};
cljs.core.TaggedLiteral.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this$, v, not_found) {
  var self__ = this;
  var this$__$1 = this;
  var G__18943 = v instanceof cljs.core.Keyword ? v.fqn : null;
  switch(G__18943) {
    case "tag":
      return self__.tag;
      break;
    case "form":
      return self__.form;
      break;
    default:
      return not_found;
  }
};
cljs.core.TaggedLiteral.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, opts) {
  var self__ = this;
  var o__$1 = this;
  cljs.core._write(writer, [cljs.core.str("#"), cljs.core.str(self__.tag), cljs.core.str(" ")].join(""));
  return cljs.core.pr_writer(self__.form, writer, opts);
};
cljs.core.TaggedLiteral.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "tag", "tag", 350170304, null), new cljs.core.Symbol(null, "form", "form", 16469056, null)], null);
};
cljs.core.TaggedLiteral.cljs$lang$type = true;
cljs.core.TaggedLiteral.cljs$lang$ctorStr = "cljs.core/TaggedLiteral";
cljs.core.TaggedLiteral.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/TaggedLiteral");
};
cljs.core.__GT_TaggedLiteral = function cljs$core$__GT_TaggedLiteral(tag, form) {
  return new cljs.core.TaggedLiteral(tag, form);
};
cljs.core.tagged_literal_QMARK_ = function cljs$core$tagged_literal_QMARK_(value) {
  return value instanceof cljs.core.TaggedLiteral;
};
cljs.core.tagged_literal = function cljs$core$tagged_literal(tag, form) {
  if (tag instanceof cljs.core.Symbol) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.list(new cljs.core.Symbol(null, "symbol?", "symbol?", 1820680511, null), new cljs.core.Symbol(null, "tag", "tag", 350170304, null))], 0)))].join(""));
  }
  return new cljs.core.TaggedLiteral(tag, form);
};
goog.provide("metaverse.util");
goog.require("cljs.core");
metaverse.util.append_onload = function metaverse$util$append_onload(f) {
  var old_onload = document.onreadystatechange;
  var new_onload = function(old_onload) {
    return function(evt) {
      if (cljs.core._EQ_.call(null, document.readyState, "complete")) {
        f.call(null, evt);
        if (cljs.core.truth_(old_onload)) {
          return old_onload.call(null, evt);
        } else {
          return null;
        }
      } else {
        return null;
      }
    };
  }(old_onload);
  return document.onreadystatechange = new_onload;
};
metaverse.util.DEFAULT_TIMEOUT = 1E3;
metaverse.util.set_timeout = function metaverse$util$set_timeout() {
  var argseq__5349__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return metaverse.util.set_timeout.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5349__auto__);
};
metaverse.util.set_timeout.cljs$core$IFn$_invoke$arity$variadic = function(f, p__6339) {
  var vec__6340 = p__6339;
  var delay = cljs.core.nth.call(null, vec__6340, 0, null);
  return setTimeout(f, function() {
    var or__4309__auto__ = delay;
    if (cljs.core.truth_(or__4309__auto__)) {
      return or__4309__auto__;
    } else {
      return metaverse.util.DEFAULT_TIMEOUT;
    }
  }());
};
metaverse.util.set_timeout.cljs$lang$maxFixedArity = 1;
metaverse.util.set_timeout.cljs$lang$applyTo = function(seq6337) {
  var G__6338 = cljs.core.first.call(null, seq6337);
  var seq6337__$1 = cljs.core.next.call(null, seq6337);
  return metaverse.util.set_timeout.cljs$core$IFn$_invoke$arity$variadic(G__6338, seq6337__$1);
};
metaverse.util.recur_infinitely = function metaverse$util$recur_infinitely() {
  var argseq__5349__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return metaverse.util.recur_infinitely.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5349__auto__);
};
metaverse.util.recur_infinitely.cljs$core$IFn$_invoke$arity$variadic = function(f, p__6343) {
  var vec__6344 = p__6343;
  var delay = cljs.core.nth.call(null, vec__6344, 0, null);
  return metaverse.util.set_timeout.call(null, function(vec__6344, delay) {
    return function metaverse$util$self() {
      f.call(null);
      return metaverse.util.set_timeout.call(null, metaverse$util$self, delay);
    };
  }(vec__6344, delay), delay);
};
metaverse.util.recur_infinitely.cljs$lang$maxFixedArity = 1;
metaverse.util.recur_infinitely.cljs$lang$applyTo = function(seq6341) {
  var G__6342 = cljs.core.first.call(null, seq6341);
  var seq6341__$1 = cljs.core.next.call(null, seq6341);
  return metaverse.util.recur_infinitely.cljs$core$IFn$_invoke$arity$variadic(G__6342, seq6341__$1);
};
goog.provide("goog.labs.userAgent.util");
goog.require("goog.string");
goog.labs.userAgent.util.getNativeUserAgentString_ = function() {
  var navigator = goog.labs.userAgent.util.getNavigator_();
  if (navigator) {
    var userAgent = navigator.userAgent;
    if (userAgent) {
      return userAgent;
    }
  }
  return "";
};
goog.labs.userAgent.util.getNavigator_ = function() {
  return goog.global.navigator;
};
goog.labs.userAgent.util.userAgent_ = goog.labs.userAgent.util.getNativeUserAgentString_();
goog.labs.userAgent.util.setUserAgent = function(opt_userAgent) {
  goog.labs.userAgent.util.userAgent_ = opt_userAgent || goog.labs.userAgent.util.getNativeUserAgentString_();
};
goog.labs.userAgent.util.getUserAgent = function() {
  return goog.labs.userAgent.util.userAgent_;
};
goog.labs.userAgent.util.matchUserAgent = function(str) {
  var userAgent = goog.labs.userAgent.util.getUserAgent();
  return goog.string.contains(userAgent, str);
};
goog.labs.userAgent.util.matchUserAgentIgnoreCase = function(str) {
  var userAgent = goog.labs.userAgent.util.getUserAgent();
  return goog.string.caseInsensitiveContains(userAgent, str);
};
goog.labs.userAgent.util.extractVersionTuples = function(userAgent) {
  var versionRegExp = new RegExp("(\\w[\\w ]+)" + "/" + "([^\\s]+)" + "\\s*" + "(?:\\((.*?)\\))?", "g");
  var data = [];
  var match;
  while (match = versionRegExp.exec(userAgent)) {
    data.push([match[1], match[2], match[3] || undefined]);
  }
  return data;
};
goog.provide("cljs.core.async.impl.protocols");
goog.require("cljs.core");
cljs.core.async.impl.protocols.MAX_QUEUE_SIZE = 1024;
cljs.core.async.impl.protocols.ReadPort = function() {
  var obj13593 = {};
  return obj13593;
}();
cljs.core.async.impl.protocols.take_BANG_ = function cljs$core$async$impl$protocols$take_BANG_(port, fn1_handler) {
  if (function() {
    var and__4297__auto__ = port;
    if (and__4297__auto__) {
      return port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2(port, fn1_handler);
  } else {
    var x__4945__auto__ = port == null ? null : port;
    return function() {
      var or__4309__auto__ = cljs.core.async.impl.protocols.take_BANG_[goog.typeOf(x__4945__auto__)];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core.async.impl.protocols.take_BANG_["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ReadPort.take!", port);
        }
      }
    }().call(null, port, fn1_handler);
  }
};
cljs.core.async.impl.protocols.WritePort = function() {
  var obj13595 = {};
  return obj13595;
}();
cljs.core.async.impl.protocols.put_BANG_ = function cljs$core$async$impl$protocols$put_BANG_(port, val, fn1_handler) {
  if (function() {
    var and__4297__auto__ = port;
    if (and__4297__auto__) {
      return port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3(port, val, fn1_handler);
  } else {
    var x__4945__auto__ = port == null ? null : port;
    return function() {
      var or__4309__auto__ = cljs.core.async.impl.protocols.put_BANG_[goog.typeOf(x__4945__auto__)];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core.async.impl.protocols.put_BANG_["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "WritePort.put!", port);
        }
      }
    }().call(null, port, val, fn1_handler);
  }
};
cljs.core.async.impl.protocols.Channel = function() {
  var obj13597 = {};
  return obj13597;
}();
cljs.core.async.impl.protocols.close_BANG_ = function cljs$core$async$impl$protocols$close_BANG_(chan) {
  if (function() {
    var and__4297__auto__ = chan;
    if (and__4297__auto__) {
      return chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1(chan);
  } else {
    var x__4945__auto__ = chan == null ? null : chan;
    return function() {
      var or__4309__auto__ = cljs.core.async.impl.protocols.close_BANG_[goog.typeOf(x__4945__auto__)];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core.async.impl.protocols.close_BANG_["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Channel.close!", chan);
        }
      }
    }().call(null, chan);
  }
};
cljs.core.async.impl.protocols.closed_QMARK_ = function cljs$core$async$impl$protocols$closed_QMARK_(chan) {
  if (function() {
    var and__4297__auto__ = chan;
    if (and__4297__auto__) {
      return chan.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return chan.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1(chan);
  } else {
    var x__4945__auto__ = chan == null ? null : chan;
    return function() {
      var or__4309__auto__ = cljs.core.async.impl.protocols.closed_QMARK_[goog.typeOf(x__4945__auto__)];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core.async.impl.protocols.closed_QMARK_["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Channel.closed?", chan);
        }
      }
    }().call(null, chan);
  }
};
cljs.core.async.impl.protocols.Handler = function() {
  var obj13599 = {};
  return obj13599;
}();
cljs.core.async.impl.protocols.active_QMARK_ = function cljs$core$async$impl$protocols$active_QMARK_(h) {
  if (function() {
    var and__4297__auto__ = h;
    if (and__4297__auto__) {
      return h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1(h);
  } else {
    var x__4945__auto__ = h == null ? null : h;
    return function() {
      var or__4309__auto__ = cljs.core.async.impl.protocols.active_QMARK_[goog.typeOf(x__4945__auto__)];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core.async.impl.protocols.active_QMARK_["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Handler.active?", h);
        }
      }
    }().call(null, h);
  }
};
cljs.core.async.impl.protocols.commit = function cljs$core$async$impl$protocols$commit(h) {
  if (function() {
    var and__4297__auto__ = h;
    if (and__4297__auto__) {
      return h.cljs$core$async$impl$protocols$Handler$commit$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return h.cljs$core$async$impl$protocols$Handler$commit$arity$1(h);
  } else {
    var x__4945__auto__ = h == null ? null : h;
    return function() {
      var or__4309__auto__ = cljs.core.async.impl.protocols.commit[goog.typeOf(x__4945__auto__)];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core.async.impl.protocols.commit["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Handler.commit", h);
        }
      }
    }().call(null, h);
  }
};
cljs.core.async.impl.protocols.Buffer = function() {
  var obj13601 = {};
  return obj13601;
}();
cljs.core.async.impl.protocols.full_QMARK_ = function cljs$core$async$impl$protocols$full_QMARK_(b) {
  if (function() {
    var and__4297__auto__ = b;
    if (and__4297__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1(b);
  } else {
    var x__4945__auto__ = b == null ? null : b;
    return function() {
      var or__4309__auto__ = cljs.core.async.impl.protocols.full_QMARK_[goog.typeOf(x__4945__auto__)];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core.async.impl.protocols.full_QMARK_["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.full?", b);
        }
      }
    }().call(null, b);
  }
};
cljs.core.async.impl.protocols.remove_BANG_ = function cljs$core$async$impl$protocols$remove_BANG_(b) {
  if (function() {
    var and__4297__auto__ = b;
    if (and__4297__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1(b);
  } else {
    var x__4945__auto__ = b == null ? null : b;
    return function() {
      var or__4309__auto__ = cljs.core.async.impl.protocols.remove_BANG_[goog.typeOf(x__4945__auto__)];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core.async.impl.protocols.remove_BANG_["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.remove!", b);
        }
      }
    }().call(null, b);
  }
};
cljs.core.async.impl.protocols.add_BANG__STAR_ = function cljs$core$async$impl$protocols$add_BANG__STAR_(b, itm) {
  if (function() {
    var and__4297__auto__ = b;
    if (and__4297__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2(b, itm);
  } else {
    var x__4945__auto__ = b == null ? null : b;
    return function() {
      var or__4309__auto__ = cljs.core.async.impl.protocols.add_BANG__STAR_[goog.typeOf(x__4945__auto__)];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core.async.impl.protocols.add_BANG__STAR_["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.add!*", b);
        }
      }
    }().call(null, b, itm);
  }
};
cljs.core.async.impl.protocols.add_BANG_ = function cljs$core$async$impl$protocols$add_BANG_() {
  var G__13603 = arguments.length;
  switch(G__13603) {
    case 1:
      return cljs.core.async.impl.protocols.add_BANG_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.impl.protocols.add_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.impl.protocols.add_BANG_.cljs$core$IFn$_invoke$arity$1 = function(b) {
  return b;
};
cljs.core.async.impl.protocols.add_BANG_.cljs$core$IFn$_invoke$arity$2 = function(b, itm) {
  if (!(itm == null)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "itm", "itm", -713282527, null)))))].join(""));
  }
  return cljs.core.async.impl.protocols.add_BANG__STAR_.call(null, b, itm);
};
cljs.core.async.impl.protocols.add_BANG_.cljs$lang$maxFixedArity = 2;
cljs.core.async.impl.protocols.UnblockingBuffer = function() {
  var obj13606 = {};
  return obj13606;
}();
goog.provide("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.ioc_helpers.FN_IDX = 0;
cljs.core.async.impl.ioc_helpers.STATE_IDX = 1;
cljs.core.async.impl.ioc_helpers.VALUE_IDX = 2;
cljs.core.async.impl.ioc_helpers.BINDINGS_IDX = 3;
cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES = 4;
cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION = 5;
cljs.core.async.impl.ioc_helpers.USER_START_IDX = 6;
cljs.core.async.impl.ioc_helpers.aset_object = function cljs$core$async$impl$ioc_helpers$aset_object(arr, idx, o) {
  return arr[idx][o];
};
cljs.core.async.impl.ioc_helpers.aget_object = function cljs$core$async$impl$ioc_helpers$aget_object(arr, idx) {
  return arr[idx];
};
cljs.core.async.impl.ioc_helpers.finished_QMARK_ = function cljs$core$async$impl$ioc_helpers$finished_QMARK_(state_array) {
  return cljs.core.keyword_identical_QMARK_.call(null, state_array[cljs.core.async.impl.ioc_helpers.STATE_IDX], new cljs.core.Keyword(null, "finished", "finished", -1018867731));
};
cljs.core.async.impl.ioc_helpers.fn_handler = function cljs$core$async$impl$ioc_helpers$fn_handler(f) {
  if (typeof cljs.core.async.impl.ioc_helpers.t13551 !== "undefined") {
  } else {
    cljs.core.async.impl.ioc_helpers.t13551 = function(fn_handler, f, meta13552) {
      this.fn_handler = fn_handler;
      this.f = f;
      this.meta13552 = meta13552;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.async.impl.ioc_helpers.t13551.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_13553, meta13552__$1) {
      var self__ = this;
      var _13553__$1 = this;
      return new cljs.core.async.impl.ioc_helpers.t13551(self__.fn_handler, self__.f, meta13552__$1);
    };
    cljs.core.async.impl.ioc_helpers.t13551.prototype.cljs$core$IMeta$_meta$arity$1 = function(_13553) {
      var self__ = this;
      var _13553__$1 = this;
      return self__.meta13552;
    };
    cljs.core.async.impl.ioc_helpers.t13551.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.impl.ioc_helpers.t13551.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.impl.ioc_helpers.t13551.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.f;
    };
    cljs.core.async.impl.ioc_helpers.t13551.getBasis = function() {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "fn-handler", "fn-handler", 648785851, null), new cljs.core.Symbol(null, "f", "f", 43394975, null), new cljs.core.Symbol(null, "meta13552", "meta13552", 169689971, null)], null);
    };
    cljs.core.async.impl.ioc_helpers.t13551.cljs$lang$type = true;
    cljs.core.async.impl.ioc_helpers.t13551.cljs$lang$ctorStr = "cljs.core.async.impl.ioc-helpers/t13551";
    cljs.core.async.impl.ioc_helpers.t13551.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
      return cljs.core._write.call(null, writer__4889__auto__, "cljs.core.async.impl.ioc-helpers/t13551");
    };
    cljs.core.async.impl.ioc_helpers.__GT_t13551 = function cljs$core$async$impl$ioc_helpers$fn_handler_$___GT_t13551(fn_handler__$1, f__$1, meta13552) {
      return new cljs.core.async.impl.ioc_helpers.t13551(fn_handler__$1, f__$1, meta13552);
    };
  }
  return new cljs.core.async.impl.ioc_helpers.t13551(cljs$core$async$impl$ioc_helpers$fn_handler, f, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.impl.ioc_helpers.run_state_machine = function cljs$core$async$impl$ioc_helpers$run_state_machine(state) {
  return cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.FN_IDX).call(null, state);
};
cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped = function cljs$core$async$impl$ioc_helpers$run_state_machine_wrapped(state) {
  try {
    return cljs.core.async.impl.ioc_helpers.run_state_machine.call(null, state);
  } catch (e13555) {
    if (e13555 instanceof Object) {
      var ex = e13555;
      cljs.core.async.impl.protocols.close_BANG_.call(null, cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.USER_START_IDX));
      throw ex;
    } else {
      throw e13555;
    }
  }
};
cljs.core.async.impl.ioc_helpers.take_BANG_ = function cljs$core$async$impl$ioc_helpers$take_BANG_(state, blk, c) {
  var temp__4420__auto__ = cljs.core.async.impl.protocols.take_BANG_.call(null, c, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(x) {
    var statearr_13558_13560 = state;
    statearr_13558_13560[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = x;
    statearr_13558_13560[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
  }));
  if (cljs.core.truth_(temp__4420__auto__)) {
    var cb = temp__4420__auto__;
    var statearr_13559_13561 = state;
    statearr_13559_13561[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    statearr_13559_13561[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
  } else {
    return null;
  }
};
cljs.core.async.impl.ioc_helpers.put_BANG_ = function cljs$core$async$impl$ioc_helpers$put_BANG_(state, blk, c, val) {
  var temp__4420__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, c, val, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(ret_val) {
    var statearr_13564_13566 = state;
    statearr_13564_13566[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = ret_val;
    statearr_13564_13566[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
  }));
  if (cljs.core.truth_(temp__4420__auto__)) {
    var cb = temp__4420__auto__;
    var statearr_13565_13567 = state;
    statearr_13565_13567[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    statearr_13565_13567[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
  } else {
    return null;
  }
};
cljs.core.async.impl.ioc_helpers.return_chan = function cljs$core$async$impl$ioc_helpers$return_chan(state, value) {
  var c = state[cljs.core.async.impl.ioc_helpers.USER_START_IDX];
  if (value == null) {
  } else {
    cljs.core.async.impl.protocols.put_BANG_.call(null, c, value, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(c) {
      return function() {
        return null;
      };
    }(c)));
  }
  cljs.core.async.impl.protocols.close_BANG_.call(null, c);
  return c;
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame = function(catch_block, catch_exception, finally_block, continue_block, prev, __meta, __extmap, __hash) {
  this.catch_block = catch_block;
  this.catch_exception = catch_exception;
  this.finally_block = finally_block;
  this.continue_block = continue_block;
  this.prev = prev;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4904__auto__, k__4905__auto__) {
  var self__ = this;
  var this__4904__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4904__auto____$1, k__4905__auto__, null);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4906__auto__, k13569, else__4907__auto__) {
  var self__ = this;
  var this__4906__auto____$1 = this;
  var G__13571 = k13569 instanceof cljs.core.Keyword ? k13569.fqn : null;
  switch(G__13571) {
    case "catch-block":
      return self__.catch_block;
      break;
    case "catch-exception":
      return self__.catch_exception;
      break;
    case "finally-block":
      return self__.finally_block;
      break;
    case "continue-block":
      return self__.continue_block;
      break;
    case "prev":
      return self__.prev;
      break;
    default:
      return cljs.core.get.call(null, self__.__extmap, k13569, else__4907__auto__);
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4918__auto__, writer__4919__auto__, opts__4920__auto__) {
  var self__ = this;
  var this__4918__auto____$1 = this;
  var pr_pair__4921__auto__ = function(this__4918__auto____$1) {
    return function(keyval__4922__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4919__auto__, cljs.core.pr_writer, "", " ", "", opts__4920__auto__, keyval__4922__auto__);
    };
  }(this__4918__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4919__auto__, pr_pair__4921__auto__, "#cljs.core.async.impl.ioc-helpers.ExceptionFrame{", ", ", "}", opts__4920__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), self__.catch_block], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), self__.catch_exception], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), self__.finally_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), 
  self__.continue_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "prev", "prev", -1597069226), self__.prev], null)], null), self__.__extmap));
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4902__auto__) {
  var self__ = this;
  var this__4902__auto____$1 = this;
  return self__.__meta;
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4898__auto__) {
  var self__ = this;
  var this__4898__auto____$1 = this;
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, self__.__hash);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4908__auto__) {
  var self__ = this;
  var this__4908__auto____$1 = this;
  return 5 + cljs.core.count.call(null, self__.__extmap);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4899__auto__) {
  var self__ = this;
  var this__4899__auto____$1 = this;
  var h__4725__auto__ = self__.__hash;
  if (!(h__4725__auto__ == null)) {
    return h__4725__auto__;
  } else {
    var h__4725__auto____$1 = cljs.core.hash_imap.call(null, this__4899__auto____$1);
    self__.__hash = h__4725__auto____$1;
    return h__4725__auto____$1;
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4900__auto__, other__4901__auto__) {
  var self__ = this;
  var this__4900__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__4297__auto__ = other__4901__auto__;
    if (cljs.core.truth_(and__4297__auto__)) {
      var and__4297__auto____$1 = this__4900__auto____$1.constructor === other__4901__auto__.constructor;
      if (and__4297__auto____$1) {
        return cljs.core.equiv_map.call(null, this__4900__auto____$1, other__4901__auto__);
      } else {
        return and__4297__auto____$1;
      }
    } else {
      return and__4297__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4913__auto__, k__4914__auto__) {
  var self__ = this;
  var this__4913__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), null, new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), null, new cljs.core.Keyword(null, "prev", "prev", -1597069226), null, new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), 
  null], null), null), k__4914__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4913__auto____$1), self__.__meta), k__4914__auto__);
  } else {
    return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4914__auto__)), null);
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4911__auto__, k__4912__auto__, G__13568) {
  var self__ = this;
  var this__4911__auto____$1 = this;
  var pred__13572 = cljs.core.keyword_identical_QMARK_;
  var expr__13573 = k__4912__auto__;
  if (cljs.core.truth_(pred__13572.call(null, new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), expr__13573))) {
    return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(G__13568, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__13572.call(null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), expr__13573))) {
      return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, G__13568, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__13572.call(null, new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), expr__13573))) {
        return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, G__13568, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
      } else {
        if (cljs.core.truth_(pred__13572.call(null, new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), expr__13573))) {
          return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, G__13568, self__.prev, self__.__meta, self__.__extmap, null);
        } else {
          if (cljs.core.truth_(pred__13572.call(null, new cljs.core.Keyword(null, "prev", "prev", -1597069226), expr__13573))) {
            return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, G__13568, self__.__meta, self__.__extmap, null);
          } else {
            return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4912__auto__, G__13568), null);
          }
        }
      }
    }
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4916__auto__) {
  var self__ = this;
  var this__4916__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), self__.catch_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), self__.catch_exception], 
  null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), self__.finally_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), self__.continue_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "prev", 
  "prev", -1597069226), self__.prev], null)], null), self__.__extmap));
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4903__auto__, G__13568) {
  var self__ = this;
  var this__4903__auto____$1 = this;
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, G__13568, self__.__extmap, self__.__hash);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4909__auto__, entry__4910__auto__) {
  var self__ = this;
  var this__4909__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4910__auto__)) {
    return cljs.core._assoc.call(null, this__4909__auto____$1, cljs.core._nth.call(null, entry__4910__auto__, 0), cljs.core._nth.call(null, entry__4910__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4909__auto____$1, entry__4910__auto__);
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "catch-block", "catch-block", -1479223021, null), new cljs.core.Symbol(null, "catch-exception", "catch-exception", -356775268, null), new cljs.core.Symbol(null, "finally-block", "finally-block", -1821453297, null), new cljs.core.Symbol(null, "continue-block", "continue-block", -211516323, null), new cljs.core.Symbol(null, "prev", "prev", 43462301, null)], null);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$type = true;
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$ctorPrSeq = function(this__4938__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "cljs.core.async.impl.ioc-helpers/ExceptionFrame");
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$ctorPrWriter = function(this__4938__auto__, writer__4939__auto__) {
  return cljs.core._write.call(null, writer__4939__auto__, "cljs.core.async.impl.ioc-helpers/ExceptionFrame");
};
cljs.core.async.impl.ioc_helpers.__GT_ExceptionFrame = function cljs$core$async$impl$ioc_helpers$__GT_ExceptionFrame(catch_block, catch_exception, finally_block, continue_block, prev) {
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(catch_block, catch_exception, finally_block, continue_block, prev, null, null, null);
};
cljs.core.async.impl.ioc_helpers.map__GT_ExceptionFrame = function cljs$core$async$impl$ioc_helpers$map__GT_ExceptionFrame(G__13570) {
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame((new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748)).cljs$core$IFn$_invoke$arity$1(G__13570), (new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795)).cljs$core$IFn$_invoke$arity$1(G__13570), (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(G__13570), (new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850)).cljs$core$IFn$_invoke$arity$1(G__13570), 
  (new cljs.core.Keyword(null, "prev", "prev", -1597069226)).cljs$core$IFn$_invoke$arity$1(G__13570), null, cljs.core.dissoc.call(null, G__13570, new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), new cljs.core.Keyword(null, "prev", "prev", -1597069226)), 
  null);
};
cljs.core.async.impl.ioc_helpers.add_exception_frame = function cljs$core$async$impl$ioc_helpers$add_exception_frame(state, catch_block, catch_exception, finally_block, continue_block) {
  var statearr_13577 = state;
  statearr_13577[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.async.impl.ioc_helpers.__GT_ExceptionFrame.call(null, catch_block, catch_exception, finally_block, continue_block, cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES));
  return statearr_13577;
};
cljs.core.async.impl.ioc_helpers.process_exception = function cljs$core$async$impl$ioc_helpers$process_exception(state) {
  while (true) {
    var exception_frame = cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES);
    var catch_block = (new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748)).cljs$core$IFn$_invoke$arity$1(exception_frame);
    var catch_exception = (new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795)).cljs$core$IFn$_invoke$arity$1(exception_frame);
    var exception = cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION);
    if (cljs.core.truth_(function() {
      var and__4297__auto__ = exception;
      if (cljs.core.truth_(and__4297__auto__)) {
        return cljs.core.not.call(null, exception_frame);
      } else {
        return and__4297__auto__;
      }
    }())) {
      throw exception;
    } else {
      if (cljs.core.truth_(function() {
        var and__4297__auto__ = exception;
        if (cljs.core.truth_(and__4297__auto__)) {
          var and__4297__auto____$1 = catch_block;
          if (cljs.core.truth_(and__4297__auto____$1)) {
            return exception instanceof catch_exception;
          } else {
            return and__4297__auto____$1;
          }
        } else {
          return and__4297__auto__;
        }
      }())) {
        var statearr_13583 = state;
        statearr_13583[cljs.core.async.impl.ioc_helpers.STATE_IDX] = catch_block;
        statearr_13583[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = exception;
        statearr_13583[cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION] = null;
        statearr_13583[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), null);
        return statearr_13583;
      } else {
        if (cljs.core.truth_(function() {
          var and__4297__auto__ = exception;
          if (cljs.core.truth_(and__4297__auto__)) {
            return cljs.core.not.call(null, catch_block) && cljs.core.not.call(null, (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame));
          } else {
            return and__4297__auto__;
          }
        }())) {
          var statearr_13584_13588 = state;
          statearr_13584_13588[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = (new cljs.core.Keyword(null, "prev", "prev", -1597069226)).cljs$core$IFn$_invoke$arity$1(exception_frame);
          var G__13589 = state;
          state = G__13589;
          continue;
        } else {
          if (cljs.core.truth_(function() {
            var and__4297__auto__ = exception;
            if (cljs.core.truth_(and__4297__auto__)) {
              var and__4297__auto____$1 = cljs.core.not.call(null, catch_block);
              if (and__4297__auto____$1) {
                return (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              } else {
                return and__4297__auto____$1;
              }
            } else {
              return and__4297__auto__;
            }
          }())) {
            var statearr_13585 = state;
            statearr_13585[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame);
            statearr_13585[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), null);
            return statearr_13585;
          } else {
            if (cljs.core.truth_(function() {
              var and__4297__auto__ = cljs.core.not.call(null, exception);
              if (and__4297__auto__) {
                return (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              } else {
                return and__4297__auto__;
              }
            }())) {
              var statearr_13586 = state;
              statearr_13586[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              statearr_13586[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), null);
              return statearr_13586;
            } else {
              if (cljs.core.not.call(null, exception) && cljs.core.not.call(null, (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame))) {
                var statearr_13587 = state;
                statearr_13587[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850)).cljs$core$IFn$_invoke$arity$1(exception_frame);
                statearr_13587[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = (new cljs.core.Keyword(null, "prev", "prev", -1597069226)).cljs$core$IFn$_invoke$arity$1(exception_frame);
                return statearr_13587;
              } else {
                throw new Error("No matching clause");
              }
            }
          }
        }
      }
    }
    break;
  }
};
goog.provide("goog.debug.EntryPointMonitor");
goog.provide("goog.debug.entryPointRegistry");
goog.require("goog.asserts");
goog.debug.EntryPointMonitor = function() {
};
goog.debug.EntryPointMonitor.prototype.wrap;
goog.debug.EntryPointMonitor.prototype.unwrap;
goog.debug.entryPointRegistry.refList_ = [];
goog.debug.entryPointRegistry.monitors_ = [];
goog.debug.entryPointRegistry.monitorsMayExist_ = false;
goog.debug.entryPointRegistry.register = function(callback) {
  goog.debug.entryPointRegistry.refList_[goog.debug.entryPointRegistry.refList_.length] = callback;
  if (goog.debug.entryPointRegistry.monitorsMayExist_) {
    var monitors = goog.debug.entryPointRegistry.monitors_;
    for (var i = 0;i < monitors.length;i++) {
      callback(goog.bind(monitors[i].wrap, monitors[i]));
    }
  }
};
goog.debug.entryPointRegistry.monitorAll = function(monitor) {
  goog.debug.entryPointRegistry.monitorsMayExist_ = true;
  var transformer = goog.bind(monitor.wrap, monitor);
  for (var i = 0;i < goog.debug.entryPointRegistry.refList_.length;i++) {
    goog.debug.entryPointRegistry.refList_[i](transformer);
  }
  goog.debug.entryPointRegistry.monitors_.push(monitor);
};
goog.debug.entryPointRegistry.unmonitorAllIfPossible = function(monitor) {
  var monitors = goog.debug.entryPointRegistry.monitors_;
  goog.asserts.assert(monitor == monitors[monitors.length - 1], "Only the most recent monitor can be unwrapped.");
  var transformer = goog.bind(monitor.unwrap, monitor);
  for (var i = 0;i < goog.debug.entryPointRegistry.refList_.length;i++) {
    goog.debug.entryPointRegistry.refList_[i](transformer);
  }
  monitors.length--;
};
goog.provide("goog.dom.TagName");
goog.dom.TagName = {A:"A", ABBR:"ABBR", ACRONYM:"ACRONYM", ADDRESS:"ADDRESS", APPLET:"APPLET", AREA:"AREA", ARTICLE:"ARTICLE", ASIDE:"ASIDE", AUDIO:"AUDIO", B:"B", BASE:"BASE", BASEFONT:"BASEFONT", BDI:"BDI", BDO:"BDO", BIG:"BIG", BLOCKQUOTE:"BLOCKQUOTE", BODY:"BODY", BR:"BR", BUTTON:"BUTTON", CANVAS:"CANVAS", CAPTION:"CAPTION", CENTER:"CENTER", CITE:"CITE", CODE:"CODE", COL:"COL", COLGROUP:"COLGROUP", COMMAND:"COMMAND", DATA:"DATA", DATALIST:"DATALIST", DD:"DD", DEL:"DEL", DETAILS:"DETAILS", DFN:"DFN", 
DIALOG:"DIALOG", DIR:"DIR", DIV:"DIV", DL:"DL", DT:"DT", EM:"EM", EMBED:"EMBED", FIELDSET:"FIELDSET", FIGCAPTION:"FIGCAPTION", FIGURE:"FIGURE", FONT:"FONT", FOOTER:"FOOTER", FORM:"FORM", FRAME:"FRAME", FRAMESET:"FRAMESET", H1:"H1", H2:"H2", H3:"H3", H4:"H4", H5:"H5", H6:"H6", HEAD:"HEAD", HEADER:"HEADER", HGROUP:"HGROUP", HR:"HR", HTML:"HTML", I:"I", IFRAME:"IFRAME", IMG:"IMG", INPUT:"INPUT", INS:"INS", ISINDEX:"ISINDEX", KBD:"KBD", KEYGEN:"KEYGEN", LABEL:"LABEL", LEGEND:"LEGEND", LI:"LI", LINK:"LINK", 
MAP:"MAP", MARK:"MARK", MATH:"MATH", MENU:"MENU", META:"META", METER:"METER", NAV:"NAV", NOFRAMES:"NOFRAMES", NOSCRIPT:"NOSCRIPT", OBJECT:"OBJECT", OL:"OL", OPTGROUP:"OPTGROUP", OPTION:"OPTION", OUTPUT:"OUTPUT", P:"P", PARAM:"PARAM", PRE:"PRE", PROGRESS:"PROGRESS", Q:"Q", RP:"RP", RT:"RT", RUBY:"RUBY", S:"S", SAMP:"SAMP", SCRIPT:"SCRIPT", SECTION:"SECTION", SELECT:"SELECT", SMALL:"SMALL", SOURCE:"SOURCE", SPAN:"SPAN", STRIKE:"STRIKE", STRONG:"STRONG", STYLE:"STYLE", SUB:"SUB", SUMMARY:"SUMMARY", 
SUP:"SUP", SVG:"SVG", TABLE:"TABLE", TBODY:"TBODY", TD:"TD", TEMPLATE:"TEMPLATE", TEXTAREA:"TEXTAREA", TFOOT:"TFOOT", TH:"TH", THEAD:"THEAD", TIME:"TIME", TITLE:"TITLE", TR:"TR", TRACK:"TRACK", TT:"TT", U:"U", UL:"UL", VAR:"VAR", VIDEO:"VIDEO", WBR:"WBR"};
goog.provide("goog.functions");
goog.functions.constant = function(retValue) {
  return function() {
    return retValue;
  };
};
goog.functions.FALSE = goog.functions.constant(false);
goog.functions.TRUE = goog.functions.constant(true);
goog.functions.NULL = goog.functions.constant(null);
goog.functions.identity = function(opt_returnValue, var_args) {
  return opt_returnValue;
};
goog.functions.error = function(message) {
  return function() {
    throw Error(message);
  };
};
goog.functions.fail = function(err) {
  return function() {
    throw err;
  };
};
goog.functions.lock = function(f, opt_numArgs) {
  opt_numArgs = opt_numArgs || 0;
  return function() {
    return f.apply(this, Array.prototype.slice.call(arguments, 0, opt_numArgs));
  };
};
goog.functions.nth = function(n) {
  return function() {
    return arguments[n];
  };
};
goog.functions.withReturnValue = function(f, retValue) {
  return goog.functions.sequence(f, goog.functions.constant(retValue));
};
goog.functions.equalTo = function(value, opt_useLooseComparison) {
  return function(other) {
    return opt_useLooseComparison ? value == other : value === other;
  };
};
goog.functions.compose = function(fn, var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    var result;
    if (length) {
      result = functions[length - 1].apply(this, arguments);
    }
    for (var i = length - 2;i >= 0;i--) {
      result = functions[i].call(this, result);
    }
    return result;
  };
};
goog.functions.sequence = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    var result;
    for (var i = 0;i < length;i++) {
      result = functions[i].apply(this, arguments);
    }
    return result;
  };
};
goog.functions.and = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    for (var i = 0;i < length;i++) {
      if (!functions[i].apply(this, arguments)) {
        return false;
      }
    }
    return true;
  };
};
goog.functions.or = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    for (var i = 0;i < length;i++) {
      if (functions[i].apply(this, arguments)) {
        return true;
      }
    }
    return false;
  };
};
goog.functions.not = function(f) {
  return function() {
    return !f.apply(this, arguments);
  };
};
goog.functions.create = function(constructor, var_args) {
  var temp = function() {
  };
  temp.prototype = constructor.prototype;
  var obj = new temp;
  constructor.apply(obj, Array.prototype.slice.call(arguments, 1));
  return obj;
};
goog.define("goog.functions.CACHE_RETURN_VALUE", true);
goog.functions.cacheReturnValue = function(fn) {
  var called = false;
  var value;
  return function() {
    if (!goog.functions.CACHE_RETURN_VALUE) {
      return fn();
    }
    if (!called) {
      value = fn();
      called = true;
    }
    return value;
  };
};
goog.provide("goog.labs.userAgent.browser");
goog.require("goog.array");
goog.require("goog.labs.userAgent.util");
goog.require("goog.object");
goog.require("goog.string");
goog.labs.userAgent.browser.matchOpera_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Opera") || goog.labs.userAgent.util.matchUserAgent("OPR");
};
goog.labs.userAgent.browser.matchIE_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Edge") || goog.labs.userAgent.util.matchUserAgent("Trident") || goog.labs.userAgent.util.matchUserAgent("MSIE");
};
goog.labs.userAgent.browser.matchFirefox_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Firefox");
};
goog.labs.userAgent.browser.matchSafari_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Safari") && !(goog.labs.userAgent.browser.matchChrome_() || goog.labs.userAgent.browser.matchCoast_() || goog.labs.userAgent.browser.matchOpera_() || goog.labs.userAgent.browser.matchIE_() || goog.labs.userAgent.browser.isSilk() || goog.labs.userAgent.util.matchUserAgent("Android"));
};
goog.labs.userAgent.browser.matchCoast_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Coast");
};
goog.labs.userAgent.browser.matchIosWebview_ = function() {
  return (goog.labs.userAgent.util.matchUserAgent("iPad") || goog.labs.userAgent.util.matchUserAgent("iPhone")) && !goog.labs.userAgent.browser.matchSafari_() && !goog.labs.userAgent.browser.matchChrome_() && !goog.labs.userAgent.browser.matchCoast_() && goog.labs.userAgent.util.matchUserAgent("AppleWebKit");
};
goog.labs.userAgent.browser.matchChrome_ = function() {
  return (goog.labs.userAgent.util.matchUserAgent("Chrome") || goog.labs.userAgent.util.matchUserAgent("CriOS")) && !goog.labs.userAgent.browser.matchOpera_() && !goog.labs.userAgent.browser.matchIE_();
};
goog.labs.userAgent.browser.matchAndroidBrowser_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Android") && !(goog.labs.userAgent.browser.isChrome() || goog.labs.userAgent.browser.isFirefox() || goog.labs.userAgent.browser.isOpera() || goog.labs.userAgent.browser.isSilk());
};
goog.labs.userAgent.browser.isOpera = goog.labs.userAgent.browser.matchOpera_;
goog.labs.userAgent.browser.isIE = goog.labs.userAgent.browser.matchIE_;
goog.labs.userAgent.browser.isFirefox = goog.labs.userAgent.browser.matchFirefox_;
goog.labs.userAgent.browser.isSafari = goog.labs.userAgent.browser.matchSafari_;
goog.labs.userAgent.browser.isCoast = goog.labs.userAgent.browser.matchCoast_;
goog.labs.userAgent.browser.isIosWebview = goog.labs.userAgent.browser.matchIosWebview_;
goog.labs.userAgent.browser.isChrome = goog.labs.userAgent.browser.matchChrome_;
goog.labs.userAgent.browser.isAndroidBrowser = goog.labs.userAgent.browser.matchAndroidBrowser_;
goog.labs.userAgent.browser.isSilk = function() {
  return goog.labs.userAgent.util.matchUserAgent("Silk");
};
goog.labs.userAgent.browser.getVersion = function() {
  var userAgentString = goog.labs.userAgent.util.getUserAgent();
  if (goog.labs.userAgent.browser.isIE()) {
    return goog.labs.userAgent.browser.getIEVersion_(userAgentString);
  }
  var versionTuples = goog.labs.userAgent.util.extractVersionTuples(userAgentString);
  var versionMap = {};
  goog.array.forEach(versionTuples, function(tuple) {
    var key = tuple[0];
    var value = tuple[1];
    versionMap[key] = value;
  });
  var versionMapHasKey = goog.partial(goog.object.containsKey, versionMap);
  function lookUpValueWithKeys(keys) {
    var key = goog.array.find(keys, versionMapHasKey);
    return versionMap[key] || "";
  }
  if (goog.labs.userAgent.browser.isOpera()) {
    return lookUpValueWithKeys(["Version", "Opera", "OPR"]);
  }
  if (goog.labs.userAgent.browser.isChrome()) {
    return lookUpValueWithKeys(["Chrome", "CriOS"]);
  }
  var tuple = versionTuples[2];
  return tuple && tuple[1] || "";
};
goog.labs.userAgent.browser.isVersionOrHigher = function(version) {
  return goog.string.compareVersions(goog.labs.userAgent.browser.getVersion(), version) >= 0;
};
goog.labs.userAgent.browser.getIEVersion_ = function(userAgent) {
  var rv = /rv: *([\d\.]*)/.exec(userAgent);
  if (rv && rv[1]) {
    return rv[1];
  }
  var edge = /Edge\/([\d\.]+)/.exec(userAgent);
  if (edge) {
    return edge[1];
  }
  var version = "";
  var msie = /MSIE +([\d\.]+)/.exec(userAgent);
  if (msie && msie[1]) {
    var tridentVersion = /Trident\/(\d.\d)/.exec(userAgent);
    if (msie[1] == "7.0") {
      if (tridentVersion && tridentVersion[1]) {
        switch(tridentVersion[1]) {
          case "4.0":
            version = "8.0";
            break;
          case "5.0":
            version = "9.0";
            break;
          case "6.0":
            version = "10.0";
            break;
          case "7.0":
            version = "11.0";
            break;
        }
      } else {
        version = "7.0";
      }
    } else {
      version = msie[1];
    }
  }
  return version;
};
goog.provide("goog.labs.userAgent.engine");
goog.require("goog.array");
goog.require("goog.labs.userAgent.util");
goog.require("goog.string");
goog.labs.userAgent.engine.isPresto = function() {
  return goog.labs.userAgent.util.matchUserAgent("Presto");
};
goog.labs.userAgent.engine.isTrident = function() {
  return goog.labs.userAgent.util.matchUserAgent("Trident") || goog.labs.userAgent.util.matchUserAgent("MSIE");
};
goog.labs.userAgent.engine.isEdge = function() {
  return goog.labs.userAgent.util.matchUserAgent("Edge");
};
goog.labs.userAgent.engine.isWebKit = function() {
  return goog.labs.userAgent.util.matchUserAgentIgnoreCase("WebKit") && !goog.labs.userAgent.engine.isEdge();
};
goog.labs.userAgent.engine.isGecko = function() {
  return goog.labs.userAgent.util.matchUserAgent("Gecko") && !goog.labs.userAgent.engine.isWebKit() && !goog.labs.userAgent.engine.isTrident() && !goog.labs.userAgent.engine.isEdge();
};
goog.labs.userAgent.engine.getVersion = function() {
  var userAgentString = goog.labs.userAgent.util.getUserAgent();
  if (userAgentString) {
    var tuples = goog.labs.userAgent.util.extractVersionTuples(userAgentString);
    var engineTuple = goog.labs.userAgent.engine.getEngineTuple_(tuples);
    if (engineTuple) {
      if (engineTuple[0] == "Gecko") {
        return goog.labs.userAgent.engine.getVersionForKey_(tuples, "Firefox");
      }
      return engineTuple[1];
    }
    var browserTuple = tuples[0];
    var info;
    if (browserTuple && (info = browserTuple[2])) {
      var match = /Trident\/([^\s;]+)/.exec(info);
      if (match) {
        return match[1];
      }
    }
  }
  return "";
};
goog.labs.userAgent.engine.getEngineTuple_ = function(tuples) {
  if (!goog.labs.userAgent.engine.isEdge()) {
    return tuples[1];
  }
  for (var i = 0;i < tuples.length;i++) {
    var tuple = tuples[i];
    if (tuple[0] == "Edge") {
      return tuple;
    }
  }
};
goog.labs.userAgent.engine.isVersionOrHigher = function(version) {
  return goog.string.compareVersions(goog.labs.userAgent.engine.getVersion(), version) >= 0;
};
goog.labs.userAgent.engine.getVersionForKey_ = function(tuples, key) {
  var pair = goog.array.find(tuples, function(pair) {
    return key == pair[0];
  });
  return pair && pair[1] || "";
};
goog.provide("goog.async.nextTick");
goog.provide("goog.async.throwException");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.dom.TagName");
goog.require("goog.functions");
goog.require("goog.labs.userAgent.browser");
goog.require("goog.labs.userAgent.engine");
goog.async.throwException = function(exception) {
  goog.global.setTimeout(function() {
    throw exception;
  }, 0);
};
goog.async.nextTick = function(callback, opt_context, opt_useSetImmediate) {
  var cb = callback;
  if (opt_context) {
    cb = goog.bind(callback, opt_context);
  }
  cb = goog.async.nextTick.wrapCallback_(cb);
  if (goog.isFunction(goog.global.setImmediate) && (opt_useSetImmediate || !goog.global.Window || !goog.global.Window.prototype || goog.global.Window.prototype.setImmediate != goog.global.setImmediate)) {
    goog.global.setImmediate(cb);
    return;
  }
  if (!goog.async.nextTick.setImmediate_) {
    goog.async.nextTick.setImmediate_ = goog.async.nextTick.getSetImmediateEmulator_();
  }
  goog.async.nextTick.setImmediate_(cb);
};
goog.async.nextTick.setImmediate_;
goog.async.nextTick.getSetImmediateEmulator_ = function() {
  var Channel = goog.global["MessageChannel"];
  if (typeof Channel === "undefined" && typeof window !== "undefined" && window.postMessage && window.addEventListener && !goog.labs.userAgent.engine.isPresto()) {
    Channel = function() {
      var iframe = document.createElement(goog.dom.TagName.IFRAME);
      iframe.style.display = "none";
      iframe.src = "";
      document.documentElement.appendChild(iframe);
      var win = iframe.contentWindow;
      var doc = win.document;
      doc.open();
      doc.write("");
      doc.close();
      var message = "callImmediate" + Math.random();
      var origin = win.location.protocol == "file:" ? "*" : win.location.protocol + "//" + win.location.host;
      var onmessage = goog.bind(function(e) {
        if (origin != "*" && e.origin != origin || e.data != message) {
          return;
        }
        this["port1"].onmessage();
      }, this);
      win.addEventListener("message", onmessage, false);
      this["port1"] = {};
      this["port2"] = {postMessage:function() {
        win.postMessage(message, origin);
      }};
    };
  }
  if (typeof Channel !== "undefined" && !goog.labs.userAgent.browser.isIE()) {
    var channel = new Channel;
    var head = {};
    var tail = head;
    channel["port1"].onmessage = function() {
      if (goog.isDef(head.next)) {
        head = head.next;
        var cb = head.cb;
        head.cb = null;
        cb();
      }
    };
    return function(cb) {
      tail.next = {cb:cb};
      tail = tail.next;
      channel["port2"].postMessage(0);
    };
  }
  if (typeof document !== "undefined" && "onreadystatechange" in document.createElement(goog.dom.TagName.SCRIPT)) {
    return function(cb) {
      var script = document.createElement(goog.dom.TagName.SCRIPT);
      script.onreadystatechange = function() {
        script.onreadystatechange = null;
        script.parentNode.removeChild(script);
        script = null;
        cb();
        cb = null;
      };
      document.documentElement.appendChild(script);
    };
  }
  return function(cb) {
    goog.global.setTimeout(cb, 0);
  };
};
goog.async.nextTick.wrapCallback_ = goog.functions.identity;
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.async.nextTick.wrapCallback_ = transformer;
});
goog.provide("cljs.core.async.impl.buffers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.buffers.acopy = function cljs$core$async$impl$buffers$acopy(src, src_start, dest, dest_start, len) {
  var cnt = 0;
  while (true) {
    if (cnt < len) {
      dest[dest_start + cnt] = src[src_start + cnt];
      var G__13609 = cnt + 1;
      cnt = G__13609;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.async.impl.buffers.RingBuffer = function(head, tail, length, arr) {
  this.head = head;
  this.tail = tail;
  this.length = length;
  this.arr = arr;
};
cljs.core.async.impl.buffers.RingBuffer.prototype.pop = function() {
  var self__ = this;
  var _ = this;
  if (self__.length === 0) {
    return null;
  } else {
    var x = self__.arr[self__.tail];
    self__.arr[self__.tail] = null;
    self__.tail = (self__.tail + 1) % self__.arr.length;
    self__.length = self__.length - 1;
    return x;
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unshift = function(x) {
  var self__ = this;
  var _ = this;
  self__.arr[self__.head] = x;
  self__.head = (self__.head + 1) % self__.arr.length;
  self__.length = self__.length + 1;
  return null;
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unbounded_unshift = function(x) {
  var self__ = this;
  var this$ = this;
  if (self__.length + 1 === self__.arr.length) {
    this$.resize();
  } else {
  }
  return this$.unshift(x);
};
cljs.core.async.impl.buffers.RingBuffer.prototype.resize = function() {
  var self__ = this;
  var _ = this;
  var new_arr_size = self__.arr.length * 2;
  var new_arr = new Array(new_arr_size);
  if (self__.tail < self__.head) {
    cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.length);
    self__.tail = 0;
    self__.head = self__.length;
    return self__.arr = new_arr;
  } else {
    if (self__.tail > self__.head) {
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.arr.length - self__.tail);
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, 0, new_arr, self__.arr.length - self__.tail, self__.head);
      self__.tail = 0;
      self__.head = self__.length;
      return self__.arr = new_arr;
    } else {
      if (self__.tail === self__.head) {
        self__.tail = 0;
        self__.head = 0;
        return self__.arr = new_arr;
      } else {
        return null;
      }
    }
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.cleanup = function(keep_QMARK_) {
  var self__ = this;
  var this$ = this;
  var n__5194__auto__ = self__.length;
  var x = 0;
  while (true) {
    if (x < n__5194__auto__) {
      var v_13610 = this$.pop();
      if (keep_QMARK_.call(null, v_13610)) {
        this$.unshift(v_13610);
      } else {
      }
      var G__13611 = x + 1;
      x = G__13611;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.async.impl.buffers.RingBuffer.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "head", "head", 869147608, null), new cljs.core.Symbol(null, "tail", "tail", 494507963, null), new cljs.core.Symbol(null, "length", "length", -2065447907, null), new cljs.core.Symbol(null, "arr", "arr", 2115492975, null)], null);
};
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/RingBuffer";
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write.call(null, writer__4889__auto__, "cljs.core.async.impl.buffers/RingBuffer");
};
cljs.core.async.impl.buffers.__GT_RingBuffer = function cljs$core$async$impl$buffers$__GT_RingBuffer(head, tail, length, arr) {
  return new cljs.core.async.impl.buffers.RingBuffer(head, tail, length, arr);
};
cljs.core.async.impl.buffers.ring_buffer = function cljs$core$async$impl$buffers$ring_buffer(n) {
  if (n > 0) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Can't create a ring buffer of size 0"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3e", "\x3e", 1085014381, null), new cljs.core.Symbol(null, "n", "n", -2092305744, null), 0)))].join(""));
  }
  return new cljs.core.async.impl.buffers.RingBuffer(0, 0, 0, new Array(n));
};
cljs.core.async.impl.buffers.FixedBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition0$ = 2;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length === self__.n;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  self__.buf.unbounded_unshift(itm);
  return this$__$1;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.FixedBuffer.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "buf", "buf", 1426618187, null), new cljs.core.Symbol(null, "n", "n", -2092305744, null)], null);
};
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/FixedBuffer";
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write.call(null, writer__4889__auto__, "cljs.core.async.impl.buffers/FixedBuffer");
};
cljs.core.async.impl.buffers.__GT_FixedBuffer = function cljs$core$async$impl$buffers$__GT_FixedBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(buf, n);
};
cljs.core.async.impl.buffers.fixed_buffer = function cljs$core$async$impl$buffers$fixed_buffer(n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
cljs.core.async.impl.buffers.DroppingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition0$ = 2;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$UnblockingBuffer$ = true;
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return false;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.buf.length === self__.n) {
  } else {
    self__.buf.unshift(itm);
  }
  return this$__$1;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.DroppingBuffer.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "buf", "buf", 1426618187, null), new cljs.core.Symbol(null, "n", "n", -2092305744, null)], null);
};
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/DroppingBuffer";
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write.call(null, writer__4889__auto__, "cljs.core.async.impl.buffers/DroppingBuffer");
};
cljs.core.async.impl.buffers.__GT_DroppingBuffer = function cljs$core$async$impl$buffers$__GT_DroppingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(buf, n);
};
cljs.core.async.impl.buffers.dropping_buffer = function cljs$core$async$impl$buffers$dropping_buffer(n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
cljs.core.async.impl.buffers.SlidingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition0$ = 2;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$UnblockingBuffer$ = true;
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return false;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.buf.length === self__.n) {
    cljs.core.async.impl.protocols.remove_BANG_.call(null, this$__$1);
  } else {
  }
  self__.buf.unshift(itm);
  return this$__$1;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.SlidingBuffer.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "buf", "buf", 1426618187, null), new cljs.core.Symbol(null, "n", "n", -2092305744, null)], null);
};
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/SlidingBuffer";
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write.call(null, writer__4889__auto__, "cljs.core.async.impl.buffers/SlidingBuffer");
};
cljs.core.async.impl.buffers.__GT_SlidingBuffer = function cljs$core$async$impl$buffers$__GT_SlidingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(buf, n);
};
cljs.core.async.impl.buffers.sliding_buffer = function cljs$core$async$impl$buffers$sliding_buffer(n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
goog.provide("cljs.core.async.impl.dispatch");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.buffers");
goog.require("goog.async.nextTick");
cljs.core.async.impl.dispatch.tasks = cljs.core.async.impl.buffers.ring_buffer.call(null, 32);
cljs.core.async.impl.dispatch.running_QMARK_ = false;
cljs.core.async.impl.dispatch.queued_QMARK_ = false;
cljs.core.async.impl.dispatch.TASK_BATCH_SIZE = 1024;
cljs.core.async.impl.dispatch.process_messages = function cljs$core$async$impl$dispatch$process_messages() {
  cljs.core.async.impl.dispatch.running_QMARK_ = true;
  cljs.core.async.impl.dispatch.queued_QMARK_ = false;
  var count_13614 = 0;
  while (true) {
    var m_13615 = cljs.core.async.impl.dispatch.tasks.pop();
    if (m_13615 == null) {
    } else {
      m_13615.call(null);
      if (count_13614 < cljs.core.async.impl.dispatch.TASK_BATCH_SIZE) {
        var G__13616 = count_13614 + 1;
        count_13614 = G__13616;
        continue;
      } else {
      }
    }
    break;
  }
  cljs.core.async.impl.dispatch.running_QMARK_ = false;
  if (cljs.core.async.impl.dispatch.tasks.length > 0) {
    return cljs.core.async.impl.dispatch.queue_dispatcher.call(null);
  } else {
    return null;
  }
};
cljs.core.async.impl.dispatch.queue_dispatcher = function cljs$core$async$impl$dispatch$queue_dispatcher() {
  if (cljs.core.truth_(function() {
    var and__4297__auto__ = cljs.core.async.impl.dispatch.queued_QMARK_;
    if (cljs.core.truth_(and__4297__auto__)) {
      return cljs.core.async.impl.dispatch.running_QMARK_;
    } else {
      return and__4297__auto__;
    }
  }())) {
    return null;
  } else {
    cljs.core.async.impl.dispatch.queued_QMARK_ = true;
    return goog.async.nextTick(cljs.core.async.impl.dispatch.process_messages);
  }
};
cljs.core.async.impl.dispatch.run = function cljs$core$async$impl$dispatch$run(f) {
  cljs.core.async.impl.dispatch.tasks.unbounded_unshift(f);
  return cljs.core.async.impl.dispatch.queue_dispatcher.call(null);
};
cljs.core.async.impl.dispatch.queue_delay = function cljs$core$async$impl$dispatch$queue_delay(f, delay) {
  return setTimeout(f, delay);
};
goog.provide("cljs.core.async.impl.channels");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.buffers");
cljs.core.async.impl.channels.box = function cljs$core$async$impl$channels$box(val) {
  if (typeof cljs.core.async.impl.channels.t13622 !== "undefined") {
  } else {
    cljs.core.async.impl.channels.t13622 = function(box, val, meta13623) {
      this.box = box;
      this.val = val;
      this.meta13623 = meta13623;
      this.cljs$lang$protocol_mask$partition0$ = 425984;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.async.impl.channels.t13622.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_13624, meta13623__$1) {
      var self__ = this;
      var _13624__$1 = this;
      return new cljs.core.async.impl.channels.t13622(self__.box, self__.val, meta13623__$1);
    };
    cljs.core.async.impl.channels.t13622.prototype.cljs$core$IMeta$_meta$arity$1 = function(_13624) {
      var self__ = this;
      var _13624__$1 = this;
      return self__.meta13623;
    };
    cljs.core.async.impl.channels.t13622.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.val;
    };
    cljs.core.async.impl.channels.t13622.getBasis = function() {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "box", "box", -1123515375, null), new cljs.core.Symbol(null, "val", "val", 1769233139, null), new cljs.core.Symbol(null, "meta13623", "meta13623", -2080921886, null)], null);
    };
    cljs.core.async.impl.channels.t13622.cljs$lang$type = true;
    cljs.core.async.impl.channels.t13622.cljs$lang$ctorStr = "cljs.core.async.impl.channels/t13622";
    cljs.core.async.impl.channels.t13622.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
      return cljs.core._write.call(null, writer__4889__auto__, "cljs.core.async.impl.channels/t13622");
    };
    cljs.core.async.impl.channels.__GT_t13622 = function cljs$core$async$impl$channels$box_$___GT_t13622(box__$1, val__$1, meta13623) {
      return new cljs.core.async.impl.channels.t13622(box__$1, val__$1, meta13623);
    };
  }
  return new cljs.core.async.impl.channels.t13622(cljs$core$async$impl$channels$box, val, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.impl.channels.PutBox = function(handler, val) {
  this.handler = handler;
  this.val = val;
};
cljs.core.async.impl.channels.PutBox.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "handler", "handler", 1444934915, null), new cljs.core.Symbol(null, "val", "val", 1769233139, null)], null);
};
cljs.core.async.impl.channels.PutBox.cljs$lang$type = true;
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorStr = "cljs.core.async.impl.channels/PutBox";
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write.call(null, writer__4889__auto__, "cljs.core.async.impl.channels/PutBox");
};
cljs.core.async.impl.channels.__GT_PutBox = function cljs$core$async$impl$channels$__GT_PutBox(handler, val) {
  return new cljs.core.async.impl.channels.PutBox(handler, val);
};
cljs.core.async.impl.channels.put_active_QMARK_ = function cljs$core$async$impl$channels$put_active_QMARK_(box) {
  return cljs.core.async.impl.protocols.active_QMARK_.call(null, box.handler);
};
cljs.core.async.impl.channels.MAX_DIRTY = 64;
cljs.core.async.impl.channels.MMC = function() {
  var obj13626 = {};
  return obj13626;
}();
cljs.core.async.impl.channels.abort = function cljs$core$async$impl$channels$abort(this$) {
  if (function() {
    var and__4297__auto__ = this$;
    if (and__4297__auto__) {
      return this$.cljs$core$async$impl$channels$MMC$abort$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return this$.cljs$core$async$impl$channels$MMC$abort$arity$1(this$);
  } else {
    var x__4945__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4309__auto__ = cljs.core.async.impl.channels.abort[goog.typeOf(x__4945__auto__)];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core.async.impl.channels.abort["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "MMC.abort", this$);
        }
      }
    }().call(null, this$);
  }
};
cljs.core.async.impl.channels.ManyToManyChannel = function(takes, dirty_takes, puts, dirty_puts, buf, closed, add_BANG_) {
  this.takes = takes;
  this.dirty_takes = dirty_takes;
  this.puts = puts;
  this.dirty_puts = dirty_puts;
  this.buf = buf;
  this.closed = closed;
  this.add_BANG_ = add_BANG_;
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$channels$MMC$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$channels$MMC$abort$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  while (true) {
    var putter_13627 = self__.puts.pop();
    if (putter_13627 == null) {
    } else {
      var put_handler_13628 = putter_13627.handler;
      var val_13629 = putter_13627.val;
      if (cljs.core.async.impl.protocols.active_QMARK_.call(null, put_handler_13628)) {
        var put_cb_13630 = cljs.core.async.impl.protocols.commit.call(null, put_handler_13628);
        cljs.core.async.impl.dispatch.run.call(null, function(put_cb_13630, put_handler_13628, val_13629, putter_13627, this$__$1) {
          return function() {
            return put_cb_13630.call(null, true);
          };
        }(put_cb_13630, put_handler_13628, val_13629, putter_13627, this$__$1));
      } else {
        continue;
      }
    }
    break;
  }
  self__.puts.cleanup(cljs.core.constantly.call(null, false));
  return cljs.core.async.impl.protocols.close_BANG_.call(null, this$__$1);
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(this$, val, handler) {
  var self__ = this;
  var this$__$1 = this;
  if (!(val == null)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Can't put nil in on a channel"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "val", "val", 1769233139, null)))))].join(""));
  }
  var closed__$1 = self__.closed;
  if (closed__$1 || !cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)) {
    return cljs.core.async.impl.channels.box.call(null, !closed__$1);
  } else {
    if (cljs.core.truth_(function() {
      var and__4297__auto__ = self__.buf;
      if (cljs.core.truth_(and__4297__auto__)) {
        return cljs.core.not.call(null, cljs.core.async.impl.protocols.full_QMARK_.call(null, self__.buf));
      } else {
        return and__4297__auto__;
      }
    }())) {
      cljs.core.async.impl.protocols.commit.call(null, handler);
      var done_QMARK_ = cljs.core.reduced_QMARK_.call(null, self__.add_BANG_.call(null, self__.buf, val));
      while (true) {
        if (self__.takes.length > 0 && cljs.core.count.call(null, self__.buf) > 0) {
          var taker_13631 = self__.takes.pop();
          if (cljs.core.async.impl.protocols.active_QMARK_.call(null, taker_13631)) {
            var take_cb_13632 = cljs.core.async.impl.protocols.commit.call(null, taker_13631);
            var val_13633__$1 = cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf);
            cljs.core.async.impl.dispatch.run.call(null, function(take_cb_13632, val_13633__$1, taker_13631, done_QMARK_, closed__$1, this$__$1) {
              return function() {
                return take_cb_13632.call(null, val_13633__$1);
              };
            }(take_cb_13632, val_13633__$1, taker_13631, done_QMARK_, closed__$1, this$__$1));
          } else {
            continue;
          }
        } else {
        }
        break;
      }
      if (done_QMARK_) {
        cljs.core.async.impl.channels.abort.call(null, this$__$1);
      } else {
      }
      return cljs.core.async.impl.channels.box.call(null, true);
    } else {
      var taker = function() {
        while (true) {
          var taker = self__.takes.pop();
          if (cljs.core.truth_(taker)) {
            if (cljs.core.truth_(cljs.core.async.impl.protocols.active_QMARK_.call(null, taker))) {
              return taker;
            } else {
              continue;
            }
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(taker)) {
        var take_cb = cljs.core.async.impl.protocols.commit.call(null, taker);
        cljs.core.async.impl.protocols.commit.call(null, handler);
        cljs.core.async.impl.dispatch.run.call(null, function(take_cb, taker, closed__$1, this$__$1) {
          return function() {
            return take_cb.call(null, val);
          };
        }(take_cb, taker, closed__$1, this$__$1));
        return cljs.core.async.impl.channels.box.call(null, true);
      } else {
        if (self__.dirty_puts > cljs.core.async.impl.channels.MAX_DIRTY) {
          self__.dirty_puts = 0;
          self__.puts.cleanup(cljs.core.async.impl.channels.put_active_QMARK_);
        } else {
          self__.dirty_puts = self__.dirty_puts + 1;
        }
        if (self__.puts.length < cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) {
        } else {
          throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("No more than "), cljs.core.str(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE), cljs.core.str(" pending puts are allowed on a single channel."), cljs.core.str(" Consider using a windowed buffer.")].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3c", "\x3c", 993667236, null), cljs.core.list(new cljs.core.Symbol(null, ".-length", ".-length", 
          -280799999, null), new cljs.core.Symbol(null, "puts", "puts", -1883877054, null)), new cljs.core.Symbol("impl", "MAX-QUEUE-SIZE", "impl/MAX-QUEUE-SIZE", 1508600732, null))))].join(""));
        }
        self__.puts.unbounded_unshift(new cljs.core.async.impl.channels.PutBox(handler, val));
        return null;
      }
    }
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(this$, handler) {
  var self__ = this;
  var this$__$1 = this;
  if (!cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)) {
    return null;
  } else {
    if (!(self__.buf == null) && cljs.core.count.call(null, self__.buf) > 0) {
      var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
      var retval = cljs.core.async.impl.channels.box.call(null, cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf));
      while (true) {
        if (cljs.core.truth_(cljs.core.async.impl.protocols.full_QMARK_.call(null, self__.buf))) {
        } else {
          var putter_13634 = self__.puts.pop();
          if (putter_13634 == null) {
          } else {
            var put_handler_13635 = putter_13634.handler;
            var val_13636 = putter_13634.val;
            if (cljs.core.async.impl.protocols.active_QMARK_.call(null, put_handler_13635)) {
              var put_cb_13637 = cljs.core.async.impl.protocols.commit.call(null, put_handler_13635);
              cljs.core.async.impl.protocols.commit.call(null, handler);
              cljs.core.async.impl.dispatch.run.call(null, function(put_cb_13637, put_handler_13635, val_13636, putter_13634, _, retval, this$__$1) {
                return function() {
                  return put_cb_13637.call(null, true);
                };
              }(put_cb_13637, put_handler_13635, val_13636, putter_13634, _, retval, this$__$1));
              if (cljs.core.reduced_QMARK_.call(null, self__.add_BANG_.call(null, self__.buf, val_13636))) {
                cljs.core.async.impl.channels.abort.call(null, this$__$1);
              } else {
              }
            } else {
            }
            continue;
          }
        }
        break;
      }
      return retval;
    } else {
      var putter = function() {
        while (true) {
          var putter = self__.puts.pop();
          if (cljs.core.truth_(putter)) {
            if (cljs.core.async.impl.protocols.active_QMARK_.call(null, putter.handler)) {
              return putter;
            } else {
              continue;
            }
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(putter)) {
        var put_cb = cljs.core.async.impl.protocols.commit.call(null, putter.handler);
        cljs.core.async.impl.protocols.commit.call(null, handler);
        cljs.core.async.impl.dispatch.run.call(null, function(put_cb, putter, this$__$1) {
          return function() {
            return put_cb.call(null, true);
          };
        }(put_cb, putter, this$__$1));
        return cljs.core.async.impl.channels.box.call(null, putter.val);
      } else {
        if (cljs.core.truth_(self__.closed)) {
          if (cljs.core.truth_(self__.buf)) {
            self__.add_BANG_.call(null, self__.buf);
          } else {
          }
          if (cljs.core.truth_(function() {
            var and__4297__auto__ = cljs.core.async.impl.protocols.active_QMARK_.call(null, handler);
            if (cljs.core.truth_(and__4297__auto__)) {
              return cljs.core.async.impl.protocols.commit.call(null, handler);
            } else {
              return and__4297__auto__;
            }
          }())) {
            var has_val = function() {
              var and__4297__auto__ = self__.buf;
              if (cljs.core.truth_(and__4297__auto__)) {
                return cljs.core.count.call(null, self__.buf) > 0;
              } else {
                return and__4297__auto__;
              }
            }();
            var val = cljs.core.truth_(has_val) ? cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf) : null;
            return cljs.core.async.impl.channels.box.call(null, val);
          } else {
            return null;
          }
        } else {
          if (self__.dirty_takes > cljs.core.async.impl.channels.MAX_DIRTY) {
            self__.dirty_takes = 0;
            self__.takes.cleanup(cljs.core.async.impl.protocols.active_QMARK_);
          } else {
            self__.dirty_takes = self__.dirty_takes + 1;
          }
          if (self__.takes.length < cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) {
          } else {
            throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("No more than "), cljs.core.str(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE), cljs.core.str(" pending takes are allowed on a single channel.")].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3c", "\x3c", 993667236, null), cljs.core.list(new cljs.core.Symbol(null, ".-length", ".-length", -280799999, null), new cljs.core.Symbol(null, "takes", 
            "takes", 298247964, null)), new cljs.core.Symbol("impl", "MAX-QUEUE-SIZE", "impl/MAX-QUEUE-SIZE", 1508600732, null))))].join(""));
          }
          self__.takes.unbounded_unshift(handler);
          return null;
        }
      }
    }
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.closed;
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.closed) {
    return null;
  } else {
    self__.closed = true;
    if (cljs.core.truth_(function() {
      var and__4297__auto__ = self__.buf;
      if (cljs.core.truth_(and__4297__auto__)) {
        return self__.puts.length === 0;
      } else {
        return and__4297__auto__;
      }
    }())) {
      self__.add_BANG_.call(null, self__.buf);
    } else {
    }
    while (true) {
      var taker_13638 = self__.takes.pop();
      if (taker_13638 == null) {
      } else {
        if (cljs.core.async.impl.protocols.active_QMARK_.call(null, taker_13638)) {
          var take_cb_13639 = cljs.core.async.impl.protocols.commit.call(null, taker_13638);
          var val_13640 = cljs.core.truth_(function() {
            var and__4297__auto__ = self__.buf;
            if (cljs.core.truth_(and__4297__auto__)) {
              return cljs.core.count.call(null, self__.buf) > 0;
            } else {
              return and__4297__auto__;
            }
          }()) ? cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf) : null;
          cljs.core.async.impl.dispatch.run.call(null, function(take_cb_13639, val_13640, taker_13638, this$__$1) {
            return function() {
              return take_cb_13639.call(null, val_13640);
            };
          }(take_cb_13639, val_13640, taker_13638, this$__$1));
        } else {
        }
        continue;
      }
      break;
    }
    return null;
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.getBasis = function() {
  return new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "takes", "takes", 298247964, null), new cljs.core.Symbol(null, "dirty-takes", "dirty-takes", 575642138, null), new cljs.core.Symbol(null, "puts", "puts", -1883877054, null), new cljs.core.Symbol(null, "dirty-puts", "dirty-puts", 57041148, null), new cljs.core.Symbol(null, "buf", "buf", 1426618187, null), new cljs.core.Symbol(null, "closed", "closed", 720856168, null), new cljs.core.Symbol(null, 
  "add!", "add!", 2046056845, null)], null);
};
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$type = true;
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorStr = "cljs.core.async.impl.channels/ManyToManyChannel";
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write.call(null, writer__4889__auto__, "cljs.core.async.impl.channels/ManyToManyChannel");
};
cljs.core.async.impl.channels.__GT_ManyToManyChannel = function cljs$core$async$impl$channels$__GT_ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed, add_BANG_) {
  return new cljs.core.async.impl.channels.ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed, add_BANG_);
};
cljs.core.async.impl.channels.ex_handler = function cljs$core$async$impl$channels$ex_handler(ex) {
  console.log(ex);
  return null;
};
cljs.core.async.impl.channels.handle = function cljs$core$async$impl$channels$handle(buf, exh, t) {
  var else$ = function() {
    var or__4309__auto__ = exh;
    if (cljs.core.truth_(or__4309__auto__)) {
      return or__4309__auto__;
    } else {
      return cljs.core.async.impl.channels.ex_handler;
    }
  }().call(null, t);
  if (else$ == null) {
    return buf;
  } else {
    return cljs.core.async.impl.protocols.add_BANG_.call(null, buf, else$);
  }
};
cljs.core.async.impl.channels.chan = function cljs$core$async$impl$channels$chan() {
  var G__13642 = arguments.length;
  switch(G__13642) {
    case 1:
      return cljs.core.async.impl.channels.chan.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.impl.channels.chan.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.impl.channels.chan.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.impl.channels.chan.cljs$core$IFn$_invoke$arity$1 = function(buf) {
  return cljs.core.async.impl.channels.chan.call(null, buf, null);
};
cljs.core.async.impl.channels.chan.cljs$core$IFn$_invoke$arity$2 = function(buf, xform) {
  return cljs.core.async.impl.channels.chan.call(null, buf, xform, null);
};
cljs.core.async.impl.channels.chan.cljs$core$IFn$_invoke$arity$3 = function(buf, xform, exh) {
  return new cljs.core.async.impl.channels.ManyToManyChannel(cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, buf, false, function() {
    var add_BANG_ = cljs.core.truth_(xform) ? xform.call(null, cljs.core.async.impl.protocols.add_BANG_) : cljs.core.async.impl.protocols.add_BANG_;
    return function(add_BANG_) {
      return function() {
        var G__13646 = null;
        var G__13646__1 = function(buf__$1) {
          try {
            return add_BANG_.call(null, buf__$1);
          } catch (e13643) {
            var t = e13643;
            return cljs.core.async.impl.channels.handle.call(null, buf__$1, exh, t);
          }
        };
        var G__13646__2 = function(buf__$1, val) {
          try {
            return add_BANG_.call(null, buf__$1, val);
          } catch (e13644) {
            var t = e13644;
            return cljs.core.async.impl.channels.handle.call(null, buf__$1, exh, t);
          }
        };
        G__13646 = function(buf__$1, val) {
          switch(arguments.length) {
            case 1:
              return G__13646__1.call(this, buf__$1);
            case 2:
              return G__13646__2.call(this, buf__$1, val);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__13646.cljs$core$IFn$_invoke$arity$1 = G__13646__1;
        G__13646.cljs$core$IFn$_invoke$arity$2 = G__13646__2;
        return G__13646;
      }();
    }(add_BANG_);
  }());
};
cljs.core.async.impl.channels.chan.cljs$lang$maxFixedArity = 3;
goog.provide("cljs.core.async.impl.timers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.dispatch");
cljs.core.async.impl.timers.MAX_LEVEL = 15;
cljs.core.async.impl.timers.P = 1 / 2;
cljs.core.async.impl.timers.random_level = function cljs$core$async$impl$timers$random_level() {
  var G__13514 = arguments.length;
  switch(G__13514) {
    case 0:
      return cljs.core.async.impl.timers.random_level.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.async.impl.timers.random_level.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.impl.timers.random_level.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.async.impl.timers.random_level.call(null, 0);
};
cljs.core.async.impl.timers.random_level.cljs$core$IFn$_invoke$arity$1 = function(level) {
  while (true) {
    if (Math.random() < cljs.core.async.impl.timers.P && level < cljs.core.async.impl.timers.MAX_LEVEL) {
      var G__13516 = level + 1;
      level = G__13516;
      continue;
    } else {
      return level;
    }
    break;
  }
};
cljs.core.async.impl.timers.random_level.cljs$lang$maxFixedArity = 1;
cljs.core.async.impl.timers.SkipListNode = function(key, val, forward) {
  this.key = key;
  this.val = val;
  this.forward = forward;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.async.impl.timers.SkipListNode.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "key", "key", 124488940, null), new cljs.core.Symbol(null, "val", "val", 1769233139, null), new cljs.core.Symbol(null, "forward", "forward", 1083186224, null)], null);
};
cljs.core.async.impl.timers.SkipListNode.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipListNode";
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write.call(null, writer__4889__auto__, "cljs.core.async.impl.timers/SkipListNode");
};
cljs.core.async.impl.timers.__GT_SkipListNode = function cljs$core$async$impl$timers$__GT_SkipListNode(key, val, forward) {
  return new cljs.core.async.impl.timers.SkipListNode(key, val, forward);
};
cljs.core.async.impl.timers.skip_list_node = function cljs$core$async$impl$timers$skip_list_node() {
  var G__13518 = arguments.length;
  switch(G__13518) {
    case 1:
      return cljs.core.async.impl.timers.skip_list_node.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 3:
      return cljs.core.async.impl.timers.skip_list_node.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.impl.timers.skip_list_node.cljs$core$IFn$_invoke$arity$1 = function(level) {
  return cljs.core.async.impl.timers.skip_list_node.call(null, null, null, level);
};
cljs.core.async.impl.timers.skip_list_node.cljs$core$IFn$_invoke$arity$3 = function(k, v, level) {
  var arr = new Array(level + 1);
  var i_13520 = 0;
  while (true) {
    if (i_13520 < arr.length) {
      arr[i_13520] = null;
      var G__13521 = i_13520 + 1;
      i_13520 = G__13521;
      continue;
    } else {
    }
    break;
  }
  return new cljs.core.async.impl.timers.SkipListNode(k, v, arr);
};
cljs.core.async.impl.timers.skip_list_node.cljs$lang$maxFixedArity = 3;
cljs.core.async.impl.timers.least_greater_node = function cljs$core$async$impl$timers$least_greater_node() {
  var G__13523 = arguments.length;
  switch(G__13523) {
    case 3:
      return cljs.core.async.impl.timers.least_greater_node.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.async.impl.timers.least_greater_node.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.impl.timers.least_greater_node.cljs$core$IFn$_invoke$arity$3 = function(x, k, level) {
  return cljs.core.async.impl.timers.least_greater_node.call(null, x, k, level, null);
};
cljs.core.async.impl.timers.least_greater_node.cljs$core$IFn$_invoke$arity$4 = function(x, k, level, update) {
  while (true) {
    if (!(level < 0)) {
      var x__$1 = function() {
        var x__$1 = x;
        while (true) {
          var temp__4420__auto__ = x__$1.forward[level];
          if (cljs.core.truth_(temp__4420__auto__)) {
            var x_SINGLEQUOTE_ = temp__4420__auto__;
            if (x_SINGLEQUOTE_.key < k) {
              var G__13525 = x_SINGLEQUOTE_;
              x__$1 = G__13525;
              continue;
            } else {
              return x__$1;
            }
          } else {
            return x__$1;
          }
          break;
        }
      }();
      if (update == null) {
      } else {
        update[level] = x__$1;
      }
      var G__13526 = x__$1;
      var G__13527 = k;
      var G__13528 = level - 1;
      var G__13529 = update;
      x = G__13526;
      k = G__13527;
      level = G__13528;
      update = G__13529;
      continue;
    } else {
      return x;
    }
    break;
  }
};
cljs.core.async.impl.timers.least_greater_node.cljs$lang$maxFixedArity = 4;
cljs.core.async.impl.timers.SkipList = function(header, level) {
  this.header = header;
  this.level = level;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.async.impl.timers.SkipList.prototype.put = function(k, v) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward[0];
  if (!(x__$1 == null) && x__$1.key === k) {
    return x__$1.val = v;
  } else {
    var new_level = cljs.core.async.impl.timers.random_level.call(null);
    if (new_level > self__.level) {
      var i_13530 = self__.level + 1;
      while (true) {
        if (i_13530 <= new_level + 1) {
          update[i_13530] = self__.header;
          var G__13531 = i_13530 + 1;
          i_13530 = G__13531;
          continue;
        } else {
        }
        break;
      }
      self__.level = new_level;
    } else {
    }
    var x__$2 = cljs.core.async.impl.timers.skip_list_node.call(null, k, v, new Array(new_level));
    var i = 0;
    while (true) {
      if (i <= self__.level) {
        var links = update[i].forward;
        x__$2.forward[i] = links[i];
        return links[i] = x__$2;
      } else {
        return null;
      }
      break;
    }
  }
};
cljs.core.async.impl.timers.SkipList.prototype.remove = function(k) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward[0];
  if (!(x__$1 == null) && x__$1.key === k) {
    var i_13532 = 0;
    while (true) {
      if (i_13532 <= self__.level) {
        var links_13533 = update[i_13532].forward;
        if (links_13533[i_13532] === x__$1) {
          links_13533[i_13532] = x__$1.forward[i_13532];
          var G__13534 = i_13532 + 1;
          i_13532 = G__13534;
          continue;
        } else {
          var G__13535 = i_13532 + 1;
          i_13532 = G__13535;
          continue;
        }
      } else {
      }
      break;
    }
    while (true) {
      if (self__.level > 0 && self__.header.forward[self__.level] == null) {
        self__.level = self__.level - 1;
        continue;
      } else {
        return null;
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.ceilingEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while (true) {
    if (!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while (true) {
          var x_SINGLEQUOTE_ = x__$1.forward[level__$1];
          if (x_SINGLEQUOTE_ == null) {
            return null;
          } else {
            if (x_SINGLEQUOTE_.key >= k) {
              return x_SINGLEQUOTE_;
            } else {
              var G__13536 = x_SINGLEQUOTE_;
              x__$1 = G__13536;
              continue;
            }
          }
          break;
        }
      }();
      if (!(nx == null)) {
        var G__13537 = nx;
        var G__13538 = level__$1 - 1;
        x = G__13537;
        level__$1 = G__13538;
        continue;
      } else {
        var G__13539 = x;
        var G__13540 = level__$1 - 1;
        x = G__13539;
        level__$1 = G__13540;
        continue;
      }
    } else {
      if (x === self__.header) {
        return null;
      } else {
        return x;
      }
    }
    break;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.floorEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while (true) {
    if (!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while (true) {
          var x_SINGLEQUOTE_ = x__$1.forward[level__$1];
          if (!(x_SINGLEQUOTE_ == null)) {
            if (x_SINGLEQUOTE_.key > k) {
              return x__$1;
            } else {
              var G__13541 = x_SINGLEQUOTE_;
              x__$1 = G__13541;
              continue;
            }
          } else {
            if (level__$1 === 0) {
              return x__$1;
            } else {
              return null;
            }
          }
          break;
        }
      }();
      if (cljs.core.truth_(nx)) {
        var G__13542 = nx;
        var G__13543 = level__$1 - 1;
        x = G__13542;
        level__$1 = G__13543;
        continue;
      } else {
        var G__13544 = x;
        var G__13545 = level__$1 - 1;
        x = G__13544;
        level__$1 = G__13545;
        continue;
      }
    } else {
      if (x === self__.header) {
        return null;
      } else {
        return x;
      }
    }
    break;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var iter = function(coll__$1) {
    return function cljs$core$async$impl$timers$iter(node) {
      return new cljs.core.LazySeq(null, function(coll__$1) {
        return function() {
          if (node == null) {
            return null;
          } else {
            return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [node.key, node.val], null), cljs$core$async$impl$timers$iter.call(null, node.forward[0]));
          }
        };
      }(coll__$1), null, null);
    };
  }(coll__$1);
  return iter.call(null, self__.header.forward[0]);
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var coll__$1 = this;
  var pr_pair = function(coll__$1) {
    return function(keyval) {
      return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "", " ", "", opts, keyval);
    };
  }(coll__$1);
  return cljs.core.pr_sequential_writer.call(null, writer, pr_pair, "{", ", ", "}", opts, coll__$1);
};
cljs.core.async.impl.timers.SkipList.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "header", "header", 1759972661, null), new cljs.core.Symbol(null, "level", "level", -1363938217, null)], null);
};
cljs.core.async.impl.timers.SkipList.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipList";
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write.call(null, writer__4889__auto__, "cljs.core.async.impl.timers/SkipList");
};
cljs.core.async.impl.timers.__GT_SkipList = function cljs$core$async$impl$timers$__GT_SkipList(header, level) {
  return new cljs.core.async.impl.timers.SkipList(header, level);
};
cljs.core.async.impl.timers.skip_list = function cljs$core$async$impl$timers$skip_list() {
  return new cljs.core.async.impl.timers.SkipList(cljs.core.async.impl.timers.skip_list_node.call(null, 0), 0);
};
cljs.core.async.impl.timers.timeouts_map = cljs.core.async.impl.timers.skip_list.call(null);
cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS = 10;
cljs.core.async.impl.timers.timeout = function cljs$core$async$impl$timers$timeout(msecs) {
  var timeout__$1 = (new Date).valueOf() + msecs;
  var me = cljs.core.async.impl.timers.timeouts_map.ceilingEntry(timeout__$1);
  var or__4309__auto__ = cljs.core.truth_(function() {
    var and__4297__auto__ = me;
    if (cljs.core.truth_(and__4297__auto__)) {
      return me.key < timeout__$1 + cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS;
    } else {
      return and__4297__auto__;
    }
  }()) ? me.val : null;
  if (cljs.core.truth_(or__4309__auto__)) {
    return or__4309__auto__;
  } else {
    var timeout_channel = cljs.core.async.impl.channels.chan.call(null, null);
    cljs.core.async.impl.timers.timeouts_map.put(timeout__$1, timeout_channel);
    cljs.core.async.impl.dispatch.queue_delay.call(null, function(timeout_channel, or__4309__auto__, timeout__$1, me) {
      return function() {
        cljs.core.async.impl.timers.timeouts_map.remove(timeout__$1);
        return cljs.core.async.impl.protocols.close_BANG_.call(null, timeout_channel);
      };
    }(timeout_channel, or__4309__auto__, timeout__$1, me), msecs);
    return timeout_channel;
  }
};
goog.provide("cljs.core.async");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.timers");
cljs.core.async.fn_handler = function cljs$core$async$fn_handler(f) {
  if (typeof cljs.core.async.t11020 !== "undefined") {
  } else {
    cljs.core.async.t11020 = function(fn_handler, f, meta11021) {
      this.fn_handler = fn_handler;
      this.f = f;
      this.meta11021 = meta11021;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.async.t11020.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_11022, meta11021__$1) {
      var self__ = this;
      var _11022__$1 = this;
      return new cljs.core.async.t11020(self__.fn_handler, self__.f, meta11021__$1);
    };
    cljs.core.async.t11020.prototype.cljs$core$IMeta$_meta$arity$1 = function(_11022) {
      var self__ = this;
      var _11022__$1 = this;
      return self__.meta11021;
    };
    cljs.core.async.t11020.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t11020.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.t11020.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.f;
    };
    cljs.core.async.t11020.getBasis = function() {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "fn-handler", "fn-handler", 648785851, null), new cljs.core.Symbol(null, "f", "f", 43394975, null), new cljs.core.Symbol(null, "meta11021", "meta11021", -592058538, null)], null);
    };
    cljs.core.async.t11020.cljs$lang$type = true;
    cljs.core.async.t11020.cljs$lang$ctorStr = "cljs.core.async/t11020";
    cljs.core.async.t11020.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
      return cljs.core._write.call(null, writer__4889__auto__, "cljs.core.async/t11020");
    };
    cljs.core.async.__GT_t11020 = function cljs$core$async$fn_handler_$___GT_t11020(fn_handler__$1, f__$1, meta11021) {
      return new cljs.core.async.t11020(fn_handler__$1, f__$1, meta11021);
    };
  }
  return new cljs.core.async.t11020(cljs$core$async$fn_handler, f, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.buffer = function cljs$core$async$buffer(n) {
  return cljs.core.async.impl.buffers.fixed_buffer.call(null, n);
};
cljs.core.async.dropping_buffer = function cljs$core$async$dropping_buffer(n) {
  return cljs.core.async.impl.buffers.dropping_buffer.call(null, n);
};
cljs.core.async.sliding_buffer = function cljs$core$async$sliding_buffer(n) {
  return cljs.core.async.impl.buffers.sliding_buffer.call(null, n);
};
cljs.core.async.unblocking_buffer_QMARK_ = function cljs$core$async$unblocking_buffer_QMARK_(buff) {
  var G__11024 = buff;
  if (G__11024) {
    var bit__4983__auto__ = null;
    if (cljs.core.truth_(function() {
      var or__4309__auto__ = bit__4983__auto__;
      if (cljs.core.truth_(or__4309__auto__)) {
        return or__4309__auto__;
      } else {
        return G__11024.cljs$core$async$impl$protocols$UnblockingBuffer$;
      }
    }())) {
      return true;
    } else {
      if (!G__11024.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.async.impl.protocols.UnblockingBuffer, G__11024);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.async.impl.protocols.UnblockingBuffer, G__11024);
  }
};
cljs.core.async.chan = function cljs$core$async$chan() {
  var G__11026 = arguments.length;
  switch(G__11026) {
    case 0:
      return cljs.core.async.chan.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.chan.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.chan.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.chan.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.async.chan.call(null, null);
};
cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1 = function(buf_or_n) {
  return cljs.core.async.chan.call(null, buf_or_n, null, null);
};
cljs.core.async.chan.cljs$core$IFn$_invoke$arity$2 = function(buf_or_n, xform) {
  return cljs.core.async.chan.call(null, buf_or_n, xform, null);
};
cljs.core.async.chan.cljs$core$IFn$_invoke$arity$3 = function(buf_or_n, xform, ex_handler) {
  var buf_or_n__$1 = cljs.core._EQ_.call(null, buf_or_n, 0) ? null : buf_or_n;
  if (cljs.core.truth_(xform)) {
    if (cljs.core.truth_(buf_or_n__$1)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("buffer must be supplied when transducer is"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, new cljs.core.Symbol(null, "buf-or-n", "buf-or-n", -1646815050, null)))].join(""));
    }
  } else {
  }
  return cljs.core.async.impl.channels.chan.call(null, typeof buf_or_n__$1 === "number" ? cljs.core.async.buffer.call(null, buf_or_n__$1) : buf_or_n__$1, xform, ex_handler);
};
cljs.core.async.chan.cljs$lang$maxFixedArity = 3;
cljs.core.async.timeout = function cljs$core$async$timeout(msecs) {
  return cljs.core.async.impl.timers.timeout.call(null, msecs);
};
cljs.core.async._LT__BANG_ = function cljs$core$async$_LT__BANG_(port) {
  throw new Error("\x3c! used not in (go ...) block");
};
cljs.core.async.take_BANG_ = function cljs$core$async$take_BANG_() {
  var G__11029 = arguments.length;
  switch(G__11029) {
    case 2:
      return cljs.core.async.take_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.take_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.take_BANG_.cljs$core$IFn$_invoke$arity$2 = function(port, fn1) {
  return cljs.core.async.take_BANG_.call(null, port, fn1, true);
};
cljs.core.async.take_BANG_.cljs$core$IFn$_invoke$arity$3 = function(port, fn1, on_caller_QMARK_) {
  var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.fn_handler.call(null, fn1));
  if (cljs.core.truth_(ret)) {
    var val_11031 = cljs.core.deref.call(null, ret);
    if (cljs.core.truth_(on_caller_QMARK_)) {
      fn1.call(null, val_11031);
    } else {
      cljs.core.async.impl.dispatch.run.call(null, function(val_11031, ret) {
        return function() {
          return fn1.call(null, val_11031);
        };
      }(val_11031, ret));
    }
  } else {
  }
  return null;
};
cljs.core.async.take_BANG_.cljs$lang$maxFixedArity = 3;
cljs.core.async.nop = function cljs$core$async$nop(_) {
  return null;
};
cljs.core.async.fhnop = cljs.core.async.fn_handler.call(null, cljs.core.async.nop);
cljs.core.async._GT__BANG_ = function cljs$core$async$_GT__BANG_(port, val) {
  throw new Error("\x3e! used not in (go ...) block");
};
cljs.core.async.put_BANG_ = function cljs$core$async$put_BANG_() {
  var G__11033 = arguments.length;
  switch(G__11033) {
    case 2:
      return cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2 = function(port, val) {
  var temp__4420__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, port, val, cljs.core.async.fhnop);
  if (cljs.core.truth_(temp__4420__auto__)) {
    var ret = temp__4420__auto__;
    return cljs.core.deref.call(null, ret);
  } else {
    return true;
  }
};
cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$3 = function(port, val, fn1) {
  return cljs.core.async.put_BANG_.call(null, port, val, fn1, true);
};
cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$4 = function(port, val, fn1, on_caller_QMARK_) {
  var temp__4420__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, port, val, cljs.core.async.fn_handler.call(null, fn1));
  if (cljs.core.truth_(temp__4420__auto__)) {
    var retb = temp__4420__auto__;
    var ret = cljs.core.deref.call(null, retb);
    if (cljs.core.truth_(on_caller_QMARK_)) {
      fn1.call(null, ret);
    } else {
      cljs.core.async.impl.dispatch.run.call(null, function(ret, retb, temp__4420__auto__) {
        return function() {
          return fn1.call(null, ret);
        };
      }(ret, retb, temp__4420__auto__));
    }
    return ret;
  } else {
    return true;
  }
};
cljs.core.async.put_BANG_.cljs$lang$maxFixedArity = 4;
cljs.core.async.close_BANG_ = function cljs$core$async$close_BANG_(port) {
  return cljs.core.async.impl.protocols.close_BANG_.call(null, port);
};
cljs.core.async.random_array = function cljs$core$async$random_array(n) {
  var a = new Array(n);
  var n__5194__auto___11035 = n;
  var x_11036 = 0;
  while (true) {
    if (x_11036 < n__5194__auto___11035) {
      a[x_11036] = 0;
      var G__11037 = x_11036 + 1;
      x_11036 = G__11037;
      continue;
    } else {
    }
    break;
  }
  var i = 1;
  while (true) {
    if (cljs.core._EQ_.call(null, i, n)) {
      return a;
    } else {
      var j = cljs.core.rand_int.call(null, i);
      a[i] = a[j];
      a[j] = i;
      var G__11038 = i + 1;
      i = G__11038;
      continue;
    }
    break;
  }
};
cljs.core.async.alt_flag = function cljs$core$async$alt_flag() {
  var flag = cljs.core.atom.call(null, true);
  if (typeof cljs.core.async.t11042 !== "undefined") {
  } else {
    cljs.core.async.t11042 = function(alt_flag, flag, meta11043) {
      this.alt_flag = alt_flag;
      this.flag = flag;
      this.meta11043 = meta11043;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.async.t11042.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(flag) {
      return function(_11044, meta11043__$1) {
        var self__ = this;
        var _11044__$1 = this;
        return new cljs.core.async.t11042(self__.alt_flag, self__.flag, meta11043__$1);
      };
    }(flag);
    cljs.core.async.t11042.prototype.cljs$core$IMeta$_meta$arity$1 = function(flag) {
      return function(_11044) {
        var self__ = this;
        var _11044__$1 = this;
        return self__.meta11043;
      };
    }(flag);
    cljs.core.async.t11042.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t11042.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(flag) {
      return function(_) {
        var self__ = this;
        var ___$1 = this;
        return cljs.core.deref.call(null, self__.flag);
      };
    }(flag);
    cljs.core.async.t11042.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(flag) {
      return function(_) {
        var self__ = this;
        var ___$1 = this;
        cljs.core.reset_BANG_.call(null, self__.flag, null);
        return true;
      };
    }(flag);
    cljs.core.async.t11042.getBasis = function(flag) {
      return function() {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "alt-flag", "alt-flag", -1794972754, null), new cljs.core.Symbol(null, "flag", "flag", -1565787888, null), new cljs.core.Symbol(null, "meta11043", "meta11043", 1865792108, null)], null);
      };
    }(flag);
    cljs.core.async.t11042.cljs$lang$type = true;
    cljs.core.async.t11042.cljs$lang$ctorStr = "cljs.core.async/t11042";
    cljs.core.async.t11042.cljs$lang$ctorPrWriter = function(flag) {
      return function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
        return cljs.core._write.call(null, writer__4889__auto__, "cljs.core.async/t11042");
      };
    }(flag);
    cljs.core.async.__GT_t11042 = function(flag) {
      return function cljs$core$async$alt_flag_$___GT_t11042(alt_flag__$1, flag__$1, meta11043) {
        return new cljs.core.async.t11042(alt_flag__$1, flag__$1, meta11043);
      };
    }(flag);
  }
  return new cljs.core.async.t11042(cljs$core$async$alt_flag, flag, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.alt_handler = function cljs$core$async$alt_handler(flag, cb) {
  if (typeof cljs.core.async.t11048 !== "undefined") {
  } else {
    cljs.core.async.t11048 = function(alt_handler, flag, cb, meta11049) {
      this.alt_handler = alt_handler;
      this.flag = flag;
      this.cb = cb;
      this.meta11049 = meta11049;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.async.t11048.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_11050, meta11049__$1) {
      var self__ = this;
      var _11050__$1 = this;
      return new cljs.core.async.t11048(self__.alt_handler, self__.flag, self__.cb, meta11049__$1);
    };
    cljs.core.async.t11048.prototype.cljs$core$IMeta$_meta$arity$1 = function(_11050) {
      var self__ = this;
      var _11050__$1 = this;
      return self__.meta11049;
    };
    cljs.core.async.t11048.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t11048.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.flag);
    };
    cljs.core.async.t11048.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      cljs.core.async.impl.protocols.commit.call(null, self__.flag);
      return self__.cb;
    };
    cljs.core.async.t11048.getBasis = function() {
      return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "alt-handler", "alt-handler", 963786170, null), new cljs.core.Symbol(null, "flag", "flag", -1565787888, null), new cljs.core.Symbol(null, "cb", "cb", -2064487928, null), new cljs.core.Symbol(null, "meta11049", "meta11049", -436113013, null)], null);
    };
    cljs.core.async.t11048.cljs$lang$type = true;
    cljs.core.async.t11048.cljs$lang$ctorStr = "cljs.core.async/t11048";
    cljs.core.async.t11048.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
      return cljs.core._write.call(null, writer__4889__auto__, "cljs.core.async/t11048");
    };
    cljs.core.async.__GT_t11048 = function cljs$core$async$alt_handler_$___GT_t11048(alt_handler__$1, flag__$1, cb__$1, meta11049) {
      return new cljs.core.async.t11048(alt_handler__$1, flag__$1, cb__$1, meta11049);
    };
  }
  return new cljs.core.async.t11048(cljs$core$async$alt_handler, flag, cb, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.do_alts = function cljs$core$async$do_alts(fret, ports, opts) {
  var flag = cljs.core.async.alt_flag.call(null);
  var n = cljs.core.count.call(null, ports);
  var idxs = cljs.core.async.random_array.call(null, n);
  var priority = (new cljs.core.Keyword(null, "priority", "priority", 1431093715)).cljs$core$IFn$_invoke$arity$1(opts);
  var ret = function() {
    var i = 0;
    while (true) {
      if (i < n) {
        var idx = cljs.core.truth_(priority) ? i : idxs[i];
        var port = cljs.core.nth.call(null, ports, idx);
        var wport = cljs.core.vector_QMARK_.call(null, port) ? port.call(null, 0) : null;
        var vbox = cljs.core.truth_(wport) ? function() {
          var val = port.call(null, 1);
          return cljs.core.async.impl.protocols.put_BANG_.call(null, wport, val, cljs.core.async.alt_handler.call(null, flag, function(i, val, idx, port, wport, flag, n, idxs, priority) {
            return function(p1__11051_SHARP_) {
              return fret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__11051_SHARP_, wport], null));
            };
          }(i, val, idx, port, wport, flag, n, idxs, priority)));
        }() : cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.alt_handler.call(null, flag, function(i, idx, port, wport, flag, n, idxs, priority) {
          return function(p1__11052_SHARP_) {
            return fret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__11052_SHARP_, port], null));
          };
        }(i, idx, port, wport, flag, n, idxs, priority)));
        if (cljs.core.truth_(vbox)) {
          return cljs.core.async.impl.channels.box.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.deref.call(null, vbox), function() {
            var or__4309__auto__ = wport;
            if (cljs.core.truth_(or__4309__auto__)) {
              return or__4309__auto__;
            } else {
              return port;
            }
          }()], null));
        } else {
          var G__11053 = i + 1;
          i = G__11053;
          continue;
        }
      } else {
        return null;
      }
      break;
    }
  }();
  var or__4309__auto__ = ret;
  if (cljs.core.truth_(or__4309__auto__)) {
    return or__4309__auto__;
  } else {
    if (cljs.core.contains_QMARK_.call(null, opts, new cljs.core.Keyword(null, "default", "default", -1987822328))) {
      var temp__4422__auto__ = function() {
        var and__4297__auto__ = cljs.core.async.impl.protocols.active_QMARK_.call(null, flag);
        if (cljs.core.truth_(and__4297__auto__)) {
          return cljs.core.async.impl.protocols.commit.call(null, flag);
        } else {
          return and__4297__auto__;
        }
      }();
      if (cljs.core.truth_(temp__4422__auto__)) {
        var got = temp__4422__auto__;
        return cljs.core.async.impl.channels.box.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.Keyword(null, "default", "default", -1987822328)).cljs$core$IFn$_invoke$arity$1(opts), new cljs.core.Keyword(null, "default", "default", -1987822328)], null));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }
};
cljs.core.async.alts_BANG_ = function cljs$core$async$alts_BANG_() {
  var argseq__5349__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return cljs.core.async.alts_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5349__auto__);
};
cljs.core.async.alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(ports, p__11056) {
  var map__11057 = p__11056;
  var map__11057__$1 = cljs.core.seq_QMARK_.call(null, map__11057) ? cljs.core.apply.call(null, cljs.core.hash_map, map__11057) : map__11057;
  var opts = map__11057__$1;
  throw new Error("alts! used not in (go ...) block");
};
cljs.core.async.alts_BANG_.cljs$lang$maxFixedArity = 1;
cljs.core.async.alts_BANG_.cljs$lang$applyTo = function(seq11054) {
  var G__11055 = cljs.core.first.call(null, seq11054);
  var seq11054__$1 = cljs.core.next.call(null, seq11054);
  return cljs.core.async.alts_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__11055, seq11054__$1);
};
cljs.core.async.pipe = function cljs$core$async$pipe() {
  var G__11059 = arguments.length;
  switch(G__11059) {
    case 2:
      return cljs.core.async.pipe.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.pipe.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.pipe.cljs$core$IFn$_invoke$arity$2 = function(from, to) {
  return cljs.core.async.pipe.call(null, from, to, true);
};
cljs.core.async.pipe.cljs$core$IFn$_invoke$arity$3 = function(from, to, close_QMARK_) {
  var c__7634__auto___11108 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__7634__auto___11108) {
    return function() {
      var f__7635__auto__ = function() {
        var switch__7572__auto__ = function(c__7634__auto___11108) {
          return function(state_11083) {
            var state_val_11084 = state_11083[1];
            if (state_val_11084 === 7) {
              var inst_11079 = state_11083[2];
              var state_11083__$1 = state_11083;
              var statearr_11085_11109 = state_11083__$1;
              statearr_11085_11109[2] = inst_11079;
              statearr_11085_11109[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_11084 === 1) {
                var state_11083__$1 = state_11083;
                var statearr_11086_11110 = state_11083__$1;
                statearr_11086_11110[2] = null;
                statearr_11086_11110[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_11084 === 4) {
                  var inst_11062 = state_11083[7];
                  var inst_11062__$1 = state_11083[2];
                  var inst_11063 = inst_11062__$1 == null;
                  var state_11083__$1 = function() {
                    var statearr_11087 = state_11083;
                    statearr_11087[7] = inst_11062__$1;
                    return statearr_11087;
                  }();
                  if (cljs.core.truth_(inst_11063)) {
                    var statearr_11088_11111 = state_11083__$1;
                    statearr_11088_11111[1] = 5;
                  } else {
                    var statearr_11089_11112 = state_11083__$1;
                    statearr_11089_11112[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_11084 === 13) {
                    var state_11083__$1 = state_11083;
                    var statearr_11090_11113 = state_11083__$1;
                    statearr_11090_11113[2] = null;
                    statearr_11090_11113[1] = 14;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_11084 === 6) {
                      var inst_11062 = state_11083[7];
                      var state_11083__$1 = state_11083;
                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_11083__$1, 11, to, inst_11062);
                    } else {
                      if (state_val_11084 === 3) {
                        var inst_11081 = state_11083[2];
                        var state_11083__$1 = state_11083;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11083__$1, inst_11081);
                      } else {
                        if (state_val_11084 === 12) {
                          var state_11083__$1 = state_11083;
                          var statearr_11091_11114 = state_11083__$1;
                          statearr_11091_11114[2] = null;
                          statearr_11091_11114[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_11084 === 2) {
                            var state_11083__$1 = state_11083;
                            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11083__$1, 4, from);
                          } else {
                            if (state_val_11084 === 11) {
                              var inst_11072 = state_11083[2];
                              var state_11083__$1 = state_11083;
                              if (cljs.core.truth_(inst_11072)) {
                                var statearr_11092_11115 = state_11083__$1;
                                statearr_11092_11115[1] = 12;
                              } else {
                                var statearr_11093_11116 = state_11083__$1;
                                statearr_11093_11116[1] = 13;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_11084 === 9) {
                                var state_11083__$1 = state_11083;
                                var statearr_11094_11117 = state_11083__$1;
                                statearr_11094_11117[2] = null;
                                statearr_11094_11117[1] = 10;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_11084 === 5) {
                                  var state_11083__$1 = state_11083;
                                  if (cljs.core.truth_(close_QMARK_)) {
                                    var statearr_11095_11118 = state_11083__$1;
                                    statearr_11095_11118[1] = 8;
                                  } else {
                                    var statearr_11096_11119 = state_11083__$1;
                                    statearr_11096_11119[1] = 9;
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_11084 === 14) {
                                    var inst_11077 = state_11083[2];
                                    var state_11083__$1 = state_11083;
                                    var statearr_11097_11120 = state_11083__$1;
                                    statearr_11097_11120[2] = inst_11077;
                                    statearr_11097_11120[1] = 7;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_11084 === 10) {
                                      var inst_11069 = state_11083[2];
                                      var state_11083__$1 = state_11083;
                                      var statearr_11098_11121 = state_11083__$1;
                                      statearr_11098_11121[2] = inst_11069;
                                      statearr_11098_11121[1] = 7;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_11084 === 8) {
                                        var inst_11066 = cljs.core.async.close_BANG_.call(null, to);
                                        var state_11083__$1 = state_11083;
                                        var statearr_11099_11122 = state_11083__$1;
                                        statearr_11099_11122[2] = inst_11066;
                                        statearr_11099_11122[1] = 10;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        return null;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__7634__auto___11108);
        return function(switch__7572__auto__, c__7634__auto___11108) {
          return function() {
            var cljs$core$async$state_machine__7573__auto__ = null;
            var cljs$core$async$state_machine__7573__auto____0 = function() {
              var statearr_11103 = [null, null, null, null, null, null, null, null];
              statearr_11103[0] = cljs$core$async$state_machine__7573__auto__;
              statearr_11103[1] = 1;
              return statearr_11103;
            };
            var cljs$core$async$state_machine__7573__auto____1 = function(state_11083) {
              while (true) {
                var ret_value__7574__auto__ = function() {
                  try {
                    while (true) {
                      var result__7575__auto__ = switch__7572__auto__.call(null, state_11083);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__7575__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__7575__auto__;
                      }
                      break;
                    }
                  } catch (e11104) {
                    if (e11104 instanceof Object) {
                      var ex__7576__auto__ = e11104;
                      var statearr_11105_11123 = state_11083;
                      statearr_11105_11123[5] = ex__7576__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_11083);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e11104;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7574__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__11124 = state_11083;
                  state_11083 = G__11124;
                  continue;
                } else {
                  return ret_value__7574__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__7573__auto__ = function(state_11083) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__7573__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__7573__auto____1.call(this, state_11083);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__7573__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__7573__auto____0;
            cljs$core$async$state_machine__7573__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__7573__auto____1;
            return cljs$core$async$state_machine__7573__auto__;
          }();
        }(switch__7572__auto__, c__7634__auto___11108);
      }();
      var state__7636__auto__ = function() {
        var statearr_11106 = f__7635__auto__.call(null);
        statearr_11106[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7634__auto___11108;
        return statearr_11106;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7636__auto__);
    };
  }(c__7634__auto___11108));
  return to;
};
cljs.core.async.pipe.cljs$lang$maxFixedArity = 3;
cljs.core.async.pipeline_STAR_ = function cljs$core$async$pipeline_STAR_(n, to, xf, from, close_QMARK_, ex_handler, type) {
  if (n > 0) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "pos?", "pos?", -244377722, null), new cljs.core.Symbol(null, "n", "n", -2092305744, null))))].join(""));
  }
  var jobs = cljs.core.async.chan.call(null, n);
  var results = cljs.core.async.chan.call(null, n);
  var process = function(jobs, results) {
    return function(p__11308) {
      var vec__11309 = p__11308;
      var v = cljs.core.nth.call(null, vec__11309, 0, null);
      var p = cljs.core.nth.call(null, vec__11309, 1, null);
      var job = vec__11309;
      if (job == null) {
        cljs.core.async.close_BANG_.call(null, results);
        return null;
      } else {
        var res = cljs.core.async.chan.call(null, 1, xf, ex_handler);
        var c__7634__auto___11491 = cljs.core.async.chan.call(null, 1);
        cljs.core.async.impl.dispatch.run.call(null, function(c__7634__auto___11491, res, vec__11309, v, p, job, jobs, results) {
          return function() {
            var f__7635__auto__ = function() {
              var switch__7572__auto__ = function(c__7634__auto___11491, res, vec__11309, v, p, job, jobs, results) {
                return function(state_11314) {
                  var state_val_11315 = state_11314[1];
                  if (state_val_11315 === 1) {
                    var state_11314__$1 = state_11314;
                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_11314__$1, 2, res, v);
                  } else {
                    if (state_val_11315 === 2) {
                      var inst_11311 = state_11314[2];
                      var inst_11312 = cljs.core.async.close_BANG_.call(null, res);
                      var state_11314__$1 = function() {
                        var statearr_11316 = state_11314;
                        statearr_11316[7] = inst_11311;
                        return statearr_11316;
                      }();
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11314__$1, inst_11312);
                    } else {
                      return null;
                    }
                  }
                };
              }(c__7634__auto___11491, res, vec__11309, v, p, job, jobs, results);
              return function(switch__7572__auto__, c__7634__auto___11491, res, vec__11309, v, p, job, jobs, results) {
                return function() {
                  var cljs$core$async$pipeline_STAR__$_state_machine__7573__auto__ = null;
                  var cljs$core$async$pipeline_STAR__$_state_machine__7573__auto____0 = function() {
                    var statearr_11320 = [null, null, null, null, null, null, null, null];
                    statearr_11320[0] = cljs$core$async$pipeline_STAR__$_state_machine__7573__auto__;
                    statearr_11320[1] = 1;
                    return statearr_11320;
                  };
                  var cljs$core$async$pipeline_STAR__$_state_machine__7573__auto____1 = function(state_11314) {
                    while (true) {
                      var ret_value__7574__auto__ = function() {
                        try {
                          while (true) {
                            var result__7575__auto__ = switch__7572__auto__.call(null, state_11314);
                            if (cljs.core.keyword_identical_QMARK_.call(null, result__7575__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                              continue;
                            } else {
                              return result__7575__auto__;
                            }
                            break;
                          }
                        } catch (e11321) {
                          if (e11321 instanceof Object) {
                            var ex__7576__auto__ = e11321;
                            var statearr_11322_11492 = state_11314;
                            statearr_11322_11492[5] = ex__7576__auto__;
                            cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_11314);
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            throw e11321;
                          }
                        }
                      }();
                      if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7574__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        var G__11493 = state_11314;
                        state_11314 = G__11493;
                        continue;
                      } else {
                        return ret_value__7574__auto__;
                      }
                      break;
                    }
                  };
                  cljs$core$async$pipeline_STAR__$_state_machine__7573__auto__ = function(state_11314) {
                    switch(arguments.length) {
                      case 0:
                        return cljs$core$async$pipeline_STAR__$_state_machine__7573__auto____0.call(this);
                      case 1:
                        return cljs$core$async$pipeline_STAR__$_state_machine__7573__auto____1.call(this, state_11314);
                    }
                    throw new Error("Invalid arity: " + arguments.length);
                  };
                  cljs$core$async$pipeline_STAR__$_state_machine__7573__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$pipeline_STAR__$_state_machine__7573__auto____0;
                  cljs$core$async$pipeline_STAR__$_state_machine__7573__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$pipeline_STAR__$_state_machine__7573__auto____1;
                  return cljs$core$async$pipeline_STAR__$_state_machine__7573__auto__;
                }();
              }(switch__7572__auto__, c__7634__auto___11491, res, vec__11309, v, p, job, jobs, results);
            }();
            var state__7636__auto__ = function() {
              var statearr_11323 = f__7635__auto__.call(null);
              statearr_11323[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7634__auto___11491;
              return statearr_11323;
            }();
            return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7636__auto__);
          };
        }(c__7634__auto___11491, res, vec__11309, v, p, job, jobs, results));
        cljs.core.async.put_BANG_.call(null, p, res);
        return true;
      }
    };
  }(jobs, results);
  var async = function(jobs, results, process) {
    return function(p__11324) {
      var vec__11325 = p__11324;
      var v = cljs.core.nth.call(null, vec__11325, 0, null);
      var p = cljs.core.nth.call(null, vec__11325, 1, null);
      var job = vec__11325;
      if (job == null) {
        cljs.core.async.close_BANG_.call(null, results);
        return null;
      } else {
        var res = cljs.core.async.chan.call(null, 1);
        xf.call(null, v, res);
        cljs.core.async.put_BANG_.call(null, p, res);
        return true;
      }
    };
  }(jobs, results, process);
  var n__5194__auto___11494 = n;
  var __11495 = 0;
  while (true) {
    if (__11495 < n__5194__auto___11494) {
      var G__11326_11496 = type instanceof cljs.core.Keyword ? type.fqn : null;
      switch(G__11326_11496) {
        case "compute":
          var c__7634__auto___11498 = cljs.core.async.chan.call(null, 1);
          cljs.core.async.impl.dispatch.run.call(null, function(__11495, c__7634__auto___11498, G__11326_11496, n__5194__auto___11494, jobs, results, process, async) {
            return function() {
              var f__7635__auto__ = function() {
                var switch__7572__auto__ = function(__11495, c__7634__auto___11498, G__11326_11496, n__5194__auto___11494, jobs, results, process, async) {
                  return function(state_11339) {
                    var state_val_11340 = state_11339[1];
                    if (state_val_11340 === 1) {
                      var state_11339__$1 = state_11339;
                      var statearr_11341_11499 = state_11339__$1;
                      statearr_11341_11499[2] = null;
                      statearr_11341_11499[1] = 2;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_11340 === 2) {
                        var state_11339__$1 = state_11339;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11339__$1, 4, jobs);
                      } else {
                        if (state_val_11340 === 3) {
                          var inst_11337 = state_11339[2];
                          var state_11339__$1 = state_11339;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11339__$1, inst_11337);
                        } else {
                          if (state_val_11340 === 4) {
                            var inst_11329 = state_11339[2];
                            var inst_11330 = process.call(null, inst_11329);
                            var state_11339__$1 = state_11339;
                            if (cljs.core.truth_(inst_11330)) {
                              var statearr_11342_11500 = state_11339__$1;
                              statearr_11342_11500[1] = 5;
                            } else {
                              var statearr_11343_11501 = state_11339__$1;
                              statearr_11343_11501[1] = 6;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_11340 === 5) {
                              var state_11339__$1 = state_11339;
                              var statearr_11344_11502 = state_11339__$1;
                              statearr_11344_11502[2] = null;
                              statearr_11344_11502[1] = 2;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_11340 === 6) {
                                var state_11339__$1 = state_11339;
                                var statearr_11345_11503 = state_11339__$1;
                                statearr_11345_11503[2] = null;
                                statearr_11345_11503[1] = 7;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_11340 === 7) {
                                  var inst_11335 = state_11339[2];
                                  var state_11339__$1 = state_11339;
                                  var statearr_11346_11504 = state_11339__$1;
                                  statearr_11346_11504[2] = inst_11335;
                                  statearr_11346_11504[1] = 3;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  };
                }(__11495, c__7634__auto___11498, G__11326_11496, n__5194__auto___11494, jobs, results, process, async);
                return function(__11495, switch__7572__auto__, c__7634__auto___11498, G__11326_11496, n__5194__auto___11494, jobs, results, process, async) {
                  return function() {
                    var cljs$core$async$pipeline_STAR__$_state_machine__7573__auto__ = null;
                    var cljs$core$async$pipeline_STAR__$_state_machine__7573__auto____0 = function() {
                      var statearr_11350 = [null, null, null, null, null, null, null];
                      statearr_11350[0] = cljs$core$async$pipeline_STAR__$_state_machine__7573__auto__;
                      statearr_11350[1] = 1;
                      return statearr_11350;
                    };
                    var cljs$core$async$pipeline_STAR__$_state_machine__7573__auto____1 = function(state_11339) {
                      while (true) {
                        var ret_value__7574__auto__ = function() {
                          try {
                            while (true) {
                              var result__7575__auto__ = switch__7572__auto__.call(null, state_11339);
                              if (cljs.core.keyword_identical_QMARK_.call(null, result__7575__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                                continue;
                              } else {
                                return result__7575__auto__;
                              }
                              break;
                            }
                          } catch (e11351) {
                            if (e11351 instanceof Object) {
                              var ex__7576__auto__ = e11351;
                              var statearr_11352_11505 = state_11339;
                              statearr_11352_11505[5] = ex__7576__auto__;
                              cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_11339);
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              throw e11351;
                            }
                          }
                        }();
                        if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7574__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          var G__11506 = state_11339;
                          state_11339 = G__11506;
                          continue;
                        } else {
                          return ret_value__7574__auto__;
                        }
                        break;
                      }
                    };
                    cljs$core$async$pipeline_STAR__$_state_machine__7573__auto__ = function(state_11339) {
                      switch(arguments.length) {
                        case 0:
                          return cljs$core$async$pipeline_STAR__$_state_machine__7573__auto____0.call(this);
                        case 1:
                          return cljs$core$async$pipeline_STAR__$_state_machine__7573__auto____1.call(this, state_11339);
                      }
                      throw new Error("Invalid arity: " + arguments.length);
                    };
                    cljs$core$async$pipeline_STAR__$_state_machine__7573__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$pipeline_STAR__$_state_machine__7573__auto____0;
                    cljs$core$async$pipeline_STAR__$_state_machine__7573__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$pipeline_STAR__$_state_machine__7573__auto____1;
                    return cljs$core$async$pipeline_STAR__$_state_machine__7573__auto__;
                  }();
                }(__11495, switch__7572__auto__, c__7634__auto___11498, G__11326_11496, n__5194__auto___11494, jobs, results, process, async);
              }();
              var state__7636__auto__ = function() {
                var statearr_11353 = f__7635__auto__.call(null);
                statearr_11353[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7634__auto___11498;
                return statearr_11353;
              }();
              return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7636__auto__);
            };
          }(__11495, c__7634__auto___11498, G__11326_11496, n__5194__auto___11494, jobs, results, process, async));
          break;
        case "async":
          var c__7634__auto___11507 = cljs.core.async.chan.call(null, 1);
          cljs.core.async.impl.dispatch.run.call(null, function(__11495, c__7634__auto___11507, G__11326_11496, n__5194__auto___11494, jobs, results, process, async) {
            return function() {
              var f__7635__auto__ = function() {
                var switch__7572__auto__ = function(__11495, c__7634__auto___11507, G__11326_11496, n__5194__auto___11494, jobs, results, process, async) {
                  return function(state_11366) {
                    var state_val_11367 = state_11366[1];
                    if (state_val_11367 === 1) {
                      var state_11366__$1 = state_11366;
                      var statearr_11368_11508 = state_11366__$1;
                      statearr_11368_11508[2] = null;
                      statearr_11368_11508[1] = 2;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_11367 === 2) {
                        var state_11366__$1 = state_11366;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11366__$1, 4, jobs);
                      } else {
                        if (state_val_11367 === 3) {
                          var inst_11364 = state_11366[2];
                          var state_11366__$1 = state_11366;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11366__$1, inst_11364);
                        } else {
                          if (state_val_11367 === 4) {
                            var inst_11356 = state_11366[2];
                            var inst_11357 = async.call(null, inst_11356);
                            var state_11366__$1 = state_11366;
                            if (cljs.core.truth_(inst_11357)) {
                              var statearr_11369_11509 = state_11366__$1;
                              statearr_11369_11509[1] = 5;
                            } else {
                              var statearr_11370_11510 = state_11366__$1;
                              statearr_11370_11510[1] = 6;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_11367 === 5) {
                              var state_11366__$1 = state_11366;
                              var statearr_11371_11511 = state_11366__$1;
                              statearr_11371_11511[2] = null;
                              statearr_11371_11511[1] = 2;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_11367 === 6) {
                                var state_11366__$1 = state_11366;
                                var statearr_11372_11512 = state_11366__$1;
                                statearr_11372_11512[2] = null;
                                statearr_11372_11512[1] = 7;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_11367 === 7) {
                                  var inst_11362 = state_11366[2];
                                  var state_11366__$1 = state_11366;
                                  var statearr_11373_11513 = state_11366__$1;
                                  statearr_11373_11513[2] = inst_11362;
                                  statearr_11373_11513[1] = 3;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  };
                }(__11495, c__7634__auto___11507, G__11326_11496, n__5194__auto___11494, jobs, results, process, async);
                return function(__11495, switch__7572__auto__, c__7634__auto___11507, G__11326_11496, n__5194__auto___11494, jobs, results, process, async) {
                  return function() {
                    var cljs$core$async$pipeline_STAR__$_state_machine__7573__auto__ = null;
                    var cljs$core$async$pipeline_STAR__$_state_machine__7573__auto____0 = function() {
                      var statearr_11377 = [null, null, null, null, null, null, null];
                      statearr_11377[0] = cljs$core$async$pipeline_STAR__$_state_machine__7573__auto__;
                      statearr_11377[1] = 1;
                      return statearr_11377;
                    };
                    var cljs$core$async$pipeline_STAR__$_state_machine__7573__auto____1 = function(state_11366) {
                      while (true) {
                        var ret_value__7574__auto__ = function() {
                          try {
                            while (true) {
                              var result__7575__auto__ = switch__7572__auto__.call(null, state_11366);
                              if (cljs.core.keyword_identical_QMARK_.call(null, result__7575__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                                continue;
                              } else {
                                return result__7575__auto__;
                              }
                              break;
                            }
                          } catch (e11378) {
                            if (e11378 instanceof Object) {
                              var ex__7576__auto__ = e11378;
                              var statearr_11379_11514 = state_11366;
                              statearr_11379_11514[5] = ex__7576__auto__;
                              cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_11366);
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              throw e11378;
                            }
                          }
                        }();
                        if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7574__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          var G__11515 = state_11366;
                          state_11366 = G__11515;
                          continue;
                        } else {
                          return ret_value__7574__auto__;
                        }
                        break;
                      }
                    };
                    cljs$core$async$pipeline_STAR__$_state_machine__7573__auto__ = function(state_11366) {
                      switch(arguments.length) {
                        case 0:
                          return cljs$core$async$pipeline_STAR__$_state_machine__7573__auto____0.call(this);
                        case 1:
                          return cljs$core$async$pipeline_STAR__$_state_machine__7573__auto____1.call(this, state_11366);
                      }
                      throw new Error("Invalid arity: " + arguments.length);
                    };
                    cljs$core$async$pipeline_STAR__$_state_machine__7573__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$pipeline_STAR__$_state_machine__7573__auto____0;
                    cljs$core$async$pipeline_STAR__$_state_machine__7573__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$pipeline_STAR__$_state_machine__7573__auto____1;
                    return cljs$core$async$pipeline_STAR__$_state_machine__7573__auto__;
                  }();
                }(__11495, switch__7572__auto__, c__7634__auto___11507, G__11326_11496, n__5194__auto___11494, jobs, results, process, async);
              }();
              var state__7636__auto__ = function() {
                var statearr_11380 = f__7635__auto__.call(null);
                statearr_11380[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7634__auto___11507;
                return statearr_11380;
              }();
              return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7636__auto__);
            };
          }(__11495, c__7634__auto___11507, G__11326_11496, n__5194__auto___11494, jobs, results, process, async));
          break;
        default:
          throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(type)].join(""));;
      }
      var G__11516 = __11495 + 1;
      __11495 = G__11516;
      continue;
    } else {
    }
    break;
  }
  var c__7634__auto___11517 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__7634__auto___11517, jobs, results, process, async) {
    return function() {
      var f__7635__auto__ = function() {
        var switch__7572__auto__ = function(c__7634__auto___11517, jobs, results, process, async) {
          return function(state_11402) {
            var state_val_11403 = state_11402[1];
            if (state_val_11403 === 1) {
              var state_11402__$1 = state_11402;
              var statearr_11404_11518 = state_11402__$1;
              statearr_11404_11518[2] = null;
              statearr_11404_11518[1] = 2;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_11403 === 2) {
                var state_11402__$1 = state_11402;
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11402__$1, 4, from);
              } else {
                if (state_val_11403 === 3) {
                  var inst_11400 = state_11402[2];
                  var state_11402__$1 = state_11402;
                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11402__$1, inst_11400);
                } else {
                  if (state_val_11403 === 4) {
                    var inst_11383 = state_11402[7];
                    var inst_11383__$1 = state_11402[2];
                    var inst_11384 = inst_11383__$1 == null;
                    var state_11402__$1 = function() {
                      var statearr_11405 = state_11402;
                      statearr_11405[7] = inst_11383__$1;
                      return statearr_11405;
                    }();
                    if (cljs.core.truth_(inst_11384)) {
                      var statearr_11406_11519 = state_11402__$1;
                      statearr_11406_11519[1] = 5;
                    } else {
                      var statearr_11407_11520 = state_11402__$1;
                      statearr_11407_11520[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_11403 === 5) {
                      var inst_11386 = cljs.core.async.close_BANG_.call(null, jobs);
                      var state_11402__$1 = state_11402;
                      var statearr_11408_11521 = state_11402__$1;
                      statearr_11408_11521[2] = inst_11386;
                      statearr_11408_11521[1] = 7;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_11403 === 6) {
                        var inst_11383 = state_11402[7];
                        var inst_11388 = state_11402[8];
                        var inst_11388__$1 = cljs.core.async.chan.call(null, 1);
                        var inst_11389 = cljs.core.PersistentVector.EMPTY_NODE;
                        var inst_11390 = [inst_11383, inst_11388__$1];
                        var inst_11391 = new cljs.core.PersistentVector(null, 2, 5, inst_11389, inst_11390, null);
                        var state_11402__$1 = function() {
                          var statearr_11409 = state_11402;
                          statearr_11409[8] = inst_11388__$1;
                          return statearr_11409;
                        }();
                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_11402__$1, 8, jobs, inst_11391);
                      } else {
                        if (state_val_11403 === 7) {
                          var inst_11398 = state_11402[2];
                          var state_11402__$1 = state_11402;
                          var statearr_11410_11522 = state_11402__$1;
                          statearr_11410_11522[2] = inst_11398;
                          statearr_11410_11522[1] = 3;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_11403 === 8) {
                            var inst_11388 = state_11402[8];
                            var inst_11393 = state_11402[2];
                            var state_11402__$1 = function() {
                              var statearr_11411 = state_11402;
                              statearr_11411[9] = inst_11393;
                              return statearr_11411;
                            }();
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_11402__$1, 9, results, inst_11388);
                          } else {
                            if (state_val_11403 === 9) {
                              var inst_11395 = state_11402[2];
                              var state_11402__$1 = function() {
                                var statearr_11412 = state_11402;
                                statearr_11412[10] = inst_11395;
                                return statearr_11412;
                              }();
                              var statearr_11413_11523 = state_11402__$1;
                              statearr_11413_11523[2] = null;
                              statearr_11413_11523[1] = 2;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              return null;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__7634__auto___11517, jobs, results, process, async);
        return function(switch__7572__auto__, c__7634__auto___11517, jobs, results, process, async) {
          return function() {
            var cljs$core$async$pipeline_STAR__$_state_machine__7573__auto__ = null;
            var cljs$core$async$pipeline_STAR__$_state_machine__7573__auto____0 = function() {
              var statearr_11417 = [null, null, null, null, null, null, null, null, null, null, null];
              statearr_11417[0] = cljs$core$async$pipeline_STAR__$_state_machine__7573__auto__;
              statearr_11417[1] = 1;
              return statearr_11417;
            };
            var cljs$core$async$pipeline_STAR__$_state_machine__7573__auto____1 = function(state_11402) {
              while (true) {
                var ret_value__7574__auto__ = function() {
                  try {
                    while (true) {
                      var result__7575__auto__ = switch__7572__auto__.call(null, state_11402);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__7575__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__7575__auto__;
                      }
                      break;
                    }
                  } catch (e11418) {
                    if (e11418 instanceof Object) {
                      var ex__7576__auto__ = e11418;
                      var statearr_11419_11524 = state_11402;
                      statearr_11419_11524[5] = ex__7576__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_11402);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e11418;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7574__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__11525 = state_11402;
                  state_11402 = G__11525;
                  continue;
                } else {
                  return ret_value__7574__auto__;
                }
                break;
              }
            };
            cljs$core$async$pipeline_STAR__$_state_machine__7573__auto__ = function(state_11402) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$pipeline_STAR__$_state_machine__7573__auto____0.call(this);
                case 1:
                  return cljs$core$async$pipeline_STAR__$_state_machine__7573__auto____1.call(this, state_11402);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$pipeline_STAR__$_state_machine__7573__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$pipeline_STAR__$_state_machine__7573__auto____0;
            cljs$core$async$pipeline_STAR__$_state_machine__7573__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$pipeline_STAR__$_state_machine__7573__auto____1;
            return cljs$core$async$pipeline_STAR__$_state_machine__7573__auto__;
          }();
        }(switch__7572__auto__, c__7634__auto___11517, jobs, results, process, async);
      }();
      var state__7636__auto__ = function() {
        var statearr_11420 = f__7635__auto__.call(null);
        statearr_11420[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7634__auto___11517;
        return statearr_11420;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7636__auto__);
    };
  }(c__7634__auto___11517, jobs, results, process, async));
  var c__7634__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__7634__auto__, jobs, results, process, async) {
    return function() {
      var f__7635__auto__ = function() {
        var switch__7572__auto__ = function(c__7634__auto__, jobs, results, process, async) {
          return function(state_11458) {
            var state_val_11459 = state_11458[1];
            if (state_val_11459 === 7) {
              var inst_11454 = state_11458[2];
              var state_11458__$1 = state_11458;
              var statearr_11460_11526 = state_11458__$1;
              statearr_11460_11526[2] = inst_11454;
              statearr_11460_11526[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_11459 === 20) {
                var state_11458__$1 = state_11458;
                var statearr_11461_11527 = state_11458__$1;
                statearr_11461_11527[2] = null;
                statearr_11461_11527[1] = 21;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_11459 === 1) {
                  var state_11458__$1 = state_11458;
                  var statearr_11462_11528 = state_11458__$1;
                  statearr_11462_11528[2] = null;
                  statearr_11462_11528[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_11459 === 4) {
                    var inst_11423 = state_11458[7];
                    var inst_11423__$1 = state_11458[2];
                    var inst_11424 = inst_11423__$1 == null;
                    var state_11458__$1 = function() {
                      var statearr_11463 = state_11458;
                      statearr_11463[7] = inst_11423__$1;
                      return statearr_11463;
                    }();
                    if (cljs.core.truth_(inst_11424)) {
                      var statearr_11464_11529 = state_11458__$1;
                      statearr_11464_11529[1] = 5;
                    } else {
                      var statearr_11465_11530 = state_11458__$1;
                      statearr_11465_11530[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_11459 === 15) {
                      var inst_11436 = state_11458[8];
                      var state_11458__$1 = state_11458;
                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_11458__$1, 18, to, inst_11436);
                    } else {
                      if (state_val_11459 === 21) {
                        var inst_11449 = state_11458[2];
                        var state_11458__$1 = state_11458;
                        var statearr_11466_11531 = state_11458__$1;
                        statearr_11466_11531[2] = inst_11449;
                        statearr_11466_11531[1] = 13;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_11459 === 13) {
                          var inst_11451 = state_11458[2];
                          var state_11458__$1 = function() {
                            var statearr_11467 = state_11458;
                            statearr_11467[9] = inst_11451;
                            return statearr_11467;
                          }();
                          var statearr_11468_11532 = state_11458__$1;
                          statearr_11468_11532[2] = null;
                          statearr_11468_11532[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_11459 === 6) {
                            var inst_11423 = state_11458[7];
                            var state_11458__$1 = state_11458;
                            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11458__$1, 11, inst_11423);
                          } else {
                            if (state_val_11459 === 17) {
                              var inst_11444 = state_11458[2];
                              var state_11458__$1 = state_11458;
                              if (cljs.core.truth_(inst_11444)) {
                                var statearr_11469_11533 = state_11458__$1;
                                statearr_11469_11533[1] = 19;
                              } else {
                                var statearr_11470_11534 = state_11458__$1;
                                statearr_11470_11534[1] = 20;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_11459 === 3) {
                                var inst_11456 = state_11458[2];
                                var state_11458__$1 = state_11458;
                                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11458__$1, inst_11456);
                              } else {
                                if (state_val_11459 === 12) {
                                  var inst_11433 = state_11458[10];
                                  var state_11458__$1 = state_11458;
                                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11458__$1, 14, inst_11433);
                                } else {
                                  if (state_val_11459 === 2) {
                                    var state_11458__$1 = state_11458;
                                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11458__$1, 4, results);
                                  } else {
                                    if (state_val_11459 === 19) {
                                      var state_11458__$1 = state_11458;
                                      var statearr_11471_11535 = state_11458__$1;
                                      statearr_11471_11535[2] = null;
                                      statearr_11471_11535[1] = 12;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_11459 === 11) {
                                        var inst_11433 = state_11458[2];
                                        var state_11458__$1 = function() {
                                          var statearr_11472 = state_11458;
                                          statearr_11472[10] = inst_11433;
                                          return statearr_11472;
                                        }();
                                        var statearr_11473_11536 = state_11458__$1;
                                        statearr_11473_11536[2] = null;
                                        statearr_11473_11536[1] = 12;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_11459 === 9) {
                                          var state_11458__$1 = state_11458;
                                          var statearr_11474_11537 = state_11458__$1;
                                          statearr_11474_11537[2] = null;
                                          statearr_11474_11537[1] = 10;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_11459 === 5) {
                                            var state_11458__$1 = state_11458;
                                            if (cljs.core.truth_(close_QMARK_)) {
                                              var statearr_11475_11538 = state_11458__$1;
                                              statearr_11475_11538[1] = 8;
                                            } else {
                                              var statearr_11476_11539 = state_11458__$1;
                                              statearr_11476_11539[1] = 9;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_11459 === 14) {
                                              var inst_11438 = state_11458[11];
                                              var inst_11436 = state_11458[8];
                                              var inst_11436__$1 = state_11458[2];
                                              var inst_11437 = inst_11436__$1 == null;
                                              var inst_11438__$1 = cljs.core.not.call(null, inst_11437);
                                              var state_11458__$1 = function() {
                                                var statearr_11477 = state_11458;
                                                statearr_11477[11] = inst_11438__$1;
                                                statearr_11477[8] = inst_11436__$1;
                                                return statearr_11477;
                                              }();
                                              if (inst_11438__$1) {
                                                var statearr_11478_11540 = state_11458__$1;
                                                statearr_11478_11540[1] = 15;
                                              } else {
                                                var statearr_11479_11541 = state_11458__$1;
                                                statearr_11479_11541[1] = 16;
                                              }
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_11459 === 16) {
                                                var inst_11438 = state_11458[11];
                                                var state_11458__$1 = state_11458;
                                                var statearr_11480_11542 = state_11458__$1;
                                                statearr_11480_11542[2] = inst_11438;
                                                statearr_11480_11542[1] = 17;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_11459 === 10) {
                                                  var inst_11430 = state_11458[2];
                                                  var state_11458__$1 = state_11458;
                                                  var statearr_11481_11543 = state_11458__$1;
                                                  statearr_11481_11543[2] = inst_11430;
                                                  statearr_11481_11543[1] = 7;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_11459 === 18) {
                                                    var inst_11441 = state_11458[2];
                                                    var state_11458__$1 = state_11458;
                                                    var statearr_11482_11544 = state_11458__$1;
                                                    statearr_11482_11544[2] = inst_11441;
                                                    statearr_11482_11544[1] = 17;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_11459 === 8) {
                                                      var inst_11427 = cljs.core.async.close_BANG_.call(null, to);
                                                      var state_11458__$1 = state_11458;
                                                      var statearr_11483_11545 = state_11458__$1;
                                                      statearr_11483_11545[2] = inst_11427;
                                                      statearr_11483_11545[1] = 10;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      return null;
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__7634__auto__, jobs, results, process, async);
        return function(switch__7572__auto__, c__7634__auto__, jobs, results, process, async) {
          return function() {
            var cljs$core$async$pipeline_STAR__$_state_machine__7573__auto__ = null;
            var cljs$core$async$pipeline_STAR__$_state_machine__7573__auto____0 = function() {
              var statearr_11487 = [null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_11487[0] = cljs$core$async$pipeline_STAR__$_state_machine__7573__auto__;
              statearr_11487[1] = 1;
              return statearr_11487;
            };
            var cljs$core$async$pipeline_STAR__$_state_machine__7573__auto____1 = function(state_11458) {
              while (true) {
                var ret_value__7574__auto__ = function() {
                  try {
                    while (true) {
                      var result__7575__auto__ = switch__7572__auto__.call(null, state_11458);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__7575__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__7575__auto__;
                      }
                      break;
                    }
                  } catch (e11488) {
                    if (e11488 instanceof Object) {
                      var ex__7576__auto__ = e11488;
                      var statearr_11489_11546 = state_11458;
                      statearr_11489_11546[5] = ex__7576__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_11458);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e11488;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7574__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__11547 = state_11458;
                  state_11458 = G__11547;
                  continue;
                } else {
                  return ret_value__7574__auto__;
                }
                break;
              }
            };
            cljs$core$async$pipeline_STAR__$_state_machine__7573__auto__ = function(state_11458) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$pipeline_STAR__$_state_machine__7573__auto____0.call(this);
                case 1:
                  return cljs$core$async$pipeline_STAR__$_state_machine__7573__auto____1.call(this, state_11458);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$pipeline_STAR__$_state_machine__7573__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$pipeline_STAR__$_state_machine__7573__auto____0;
            cljs$core$async$pipeline_STAR__$_state_machine__7573__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$pipeline_STAR__$_state_machine__7573__auto____1;
            return cljs$core$async$pipeline_STAR__$_state_machine__7573__auto__;
          }();
        }(switch__7572__auto__, c__7634__auto__, jobs, results, process, async);
      }();
      var state__7636__auto__ = function() {
        var statearr_11490 = f__7635__auto__.call(null);
        statearr_11490[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7634__auto__;
        return statearr_11490;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7636__auto__);
    };
  }(c__7634__auto__, jobs, results, process, async));
  return c__7634__auto__;
};
cljs.core.async.pipeline_async = function cljs$core$async$pipeline_async() {
  var G__11549 = arguments.length;
  switch(G__11549) {
    case 4:
      return cljs.core.async.pipeline_async.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.async.pipeline_async.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.pipeline_async.cljs$core$IFn$_invoke$arity$4 = function(n, to, af, from) {
  return cljs.core.async.pipeline_async.call(null, n, to, af, from, true);
};
cljs.core.async.pipeline_async.cljs$core$IFn$_invoke$arity$5 = function(n, to, af, from, close_QMARK_) {
  return cljs.core.async.pipeline_STAR_.call(null, n, to, af, from, close_QMARK_, null, new cljs.core.Keyword(null, "async", "async", 1050769601));
};
cljs.core.async.pipeline_async.cljs$lang$maxFixedArity = 5;
cljs.core.async.pipeline = function cljs$core$async$pipeline() {
  var G__11552 = arguments.length;
  switch(G__11552) {
    case 4:
      return cljs.core.async.pipeline.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.async.pipeline.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return cljs.core.async.pipeline.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.pipeline.cljs$core$IFn$_invoke$arity$4 = function(n, to, xf, from) {
  return cljs.core.async.pipeline.call(null, n, to, xf, from, true);
};
cljs.core.async.pipeline.cljs$core$IFn$_invoke$arity$5 = function(n, to, xf, from, close_QMARK_) {
  return cljs.core.async.pipeline.call(null, n, to, xf, from, close_QMARK_, null);
};
cljs.core.async.pipeline.cljs$core$IFn$_invoke$arity$6 = function(n, to, xf, from, close_QMARK_, ex_handler) {
  return cljs.core.async.pipeline_STAR_.call(null, n, to, xf, from, close_QMARK_, ex_handler, new cljs.core.Keyword(null, "compute", "compute", 1555393130));
};
cljs.core.async.pipeline.cljs$lang$maxFixedArity = 6;
cljs.core.async.split = function cljs$core$async$split() {
  var G__11555 = arguments.length;
  switch(G__11555) {
    case 2:
      return cljs.core.async.split.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 4:
      return cljs.core.async.split.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.split.cljs$core$IFn$_invoke$arity$2 = function(p, ch) {
  return cljs.core.async.split.call(null, p, ch, null, null);
};
cljs.core.async.split.cljs$core$IFn$_invoke$arity$4 = function(p, ch, t_buf_or_n, f_buf_or_n) {
  var tc = cljs.core.async.chan.call(null, t_buf_or_n);
  var fc = cljs.core.async.chan.call(null, f_buf_or_n);
  var c__7634__auto___11607 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__7634__auto___11607, tc, fc) {
    return function() {
      var f__7635__auto__ = function() {
        var switch__7572__auto__ = function(c__7634__auto___11607, tc, fc) {
          return function(state_11581) {
            var state_val_11582 = state_11581[1];
            if (state_val_11582 === 7) {
              var inst_11577 = state_11581[2];
              var state_11581__$1 = state_11581;
              var statearr_11583_11608 = state_11581__$1;
              statearr_11583_11608[2] = inst_11577;
              statearr_11583_11608[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_11582 === 1) {
                var state_11581__$1 = state_11581;
                var statearr_11584_11609 = state_11581__$1;
                statearr_11584_11609[2] = null;
                statearr_11584_11609[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_11582 === 4) {
                  var inst_11558 = state_11581[7];
                  var inst_11558__$1 = state_11581[2];
                  var inst_11559 = inst_11558__$1 == null;
                  var state_11581__$1 = function() {
                    var statearr_11585 = state_11581;
                    statearr_11585[7] = inst_11558__$1;
                    return statearr_11585;
                  }();
                  if (cljs.core.truth_(inst_11559)) {
                    var statearr_11586_11610 = state_11581__$1;
                    statearr_11586_11610[1] = 5;
                  } else {
                    var statearr_11587_11611 = state_11581__$1;
                    statearr_11587_11611[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_11582 === 13) {
                    var state_11581__$1 = state_11581;
                    var statearr_11588_11612 = state_11581__$1;
                    statearr_11588_11612[2] = null;
                    statearr_11588_11612[1] = 14;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_11582 === 6) {
                      var inst_11558 = state_11581[7];
                      var inst_11564 = p.call(null, inst_11558);
                      var state_11581__$1 = state_11581;
                      if (cljs.core.truth_(inst_11564)) {
                        var statearr_11589_11613 = state_11581__$1;
                        statearr_11589_11613[1] = 9;
                      } else {
                        var statearr_11590_11614 = state_11581__$1;
                        statearr_11590_11614[1] = 10;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_11582 === 3) {
                        var inst_11579 = state_11581[2];
                        var state_11581__$1 = state_11581;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11581__$1, inst_11579);
                      } else {
                        if (state_val_11582 === 12) {
                          var state_11581__$1 = state_11581;
                          var statearr_11591_11615 = state_11581__$1;
                          statearr_11591_11615[2] = null;
                          statearr_11591_11615[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_11582 === 2) {
                            var state_11581__$1 = state_11581;
                            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11581__$1, 4, ch);
                          } else {
                            if (state_val_11582 === 11) {
                              var inst_11558 = state_11581[7];
                              var inst_11568 = state_11581[2];
                              var state_11581__$1 = state_11581;
                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_11581__$1, 8, inst_11568, inst_11558);
                            } else {
                              if (state_val_11582 === 9) {
                                var state_11581__$1 = state_11581;
                                var statearr_11592_11616 = state_11581__$1;
                                statearr_11592_11616[2] = tc;
                                statearr_11592_11616[1] = 11;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_11582 === 5) {
                                  var inst_11561 = cljs.core.async.close_BANG_.call(null, tc);
                                  var inst_11562 = cljs.core.async.close_BANG_.call(null, fc);
                                  var state_11581__$1 = function() {
                                    var statearr_11593 = state_11581;
                                    statearr_11593[8] = inst_11561;
                                    return statearr_11593;
                                  }();
                                  var statearr_11594_11617 = state_11581__$1;
                                  statearr_11594_11617[2] = inst_11562;
                                  statearr_11594_11617[1] = 7;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_11582 === 14) {
                                    var inst_11575 = state_11581[2];
                                    var state_11581__$1 = state_11581;
                                    var statearr_11595_11618 = state_11581__$1;
                                    statearr_11595_11618[2] = inst_11575;
                                    statearr_11595_11618[1] = 7;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_11582 === 10) {
                                      var state_11581__$1 = state_11581;
                                      var statearr_11596_11619 = state_11581__$1;
                                      statearr_11596_11619[2] = fc;
                                      statearr_11596_11619[1] = 11;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_11582 === 8) {
                                        var inst_11570 = state_11581[2];
                                        var state_11581__$1 = state_11581;
                                        if (cljs.core.truth_(inst_11570)) {
                                          var statearr_11597_11620 = state_11581__$1;
                                          statearr_11597_11620[1] = 12;
                                        } else {
                                          var statearr_11598_11621 = state_11581__$1;
                                          statearr_11598_11621[1] = 13;
                                        }
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        return null;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__7634__auto___11607, tc, fc);
        return function(switch__7572__auto__, c__7634__auto___11607, tc, fc) {
          return function() {
            var cljs$core$async$state_machine__7573__auto__ = null;
            var cljs$core$async$state_machine__7573__auto____0 = function() {
              var statearr_11602 = [null, null, null, null, null, null, null, null, null];
              statearr_11602[0] = cljs$core$async$state_machine__7573__auto__;
              statearr_11602[1] = 1;
              return statearr_11602;
            };
            var cljs$core$async$state_machine__7573__auto____1 = function(state_11581) {
              while (true) {
                var ret_value__7574__auto__ = function() {
                  try {
                    while (true) {
                      var result__7575__auto__ = switch__7572__auto__.call(null, state_11581);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__7575__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__7575__auto__;
                      }
                      break;
                    }
                  } catch (e11603) {
                    if (e11603 instanceof Object) {
                      var ex__7576__auto__ = e11603;
                      var statearr_11604_11622 = state_11581;
                      statearr_11604_11622[5] = ex__7576__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_11581);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e11603;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7574__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__11623 = state_11581;
                  state_11581 = G__11623;
                  continue;
                } else {
                  return ret_value__7574__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__7573__auto__ = function(state_11581) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__7573__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__7573__auto____1.call(this, state_11581);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__7573__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__7573__auto____0;
            cljs$core$async$state_machine__7573__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__7573__auto____1;
            return cljs$core$async$state_machine__7573__auto__;
          }();
        }(switch__7572__auto__, c__7634__auto___11607, tc, fc);
      }();
      var state__7636__auto__ = function() {
        var statearr_11605 = f__7635__auto__.call(null);
        statearr_11605[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7634__auto___11607;
        return statearr_11605;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7636__auto__);
    };
  }(c__7634__auto___11607, tc, fc));
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tc, fc], null);
};
cljs.core.async.split.cljs$lang$maxFixedArity = 4;
cljs.core.async.reduce = function cljs$core$async$reduce(f, init, ch) {
  var c__7634__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__7634__auto__) {
    return function() {
      var f__7635__auto__ = function() {
        var switch__7572__auto__ = function(c__7634__auto__) {
          return function(state_11670) {
            var state_val_11671 = state_11670[1];
            if (state_val_11671 === 1) {
              var inst_11656 = init;
              var state_11670__$1 = function() {
                var statearr_11672 = state_11670;
                statearr_11672[7] = inst_11656;
                return statearr_11672;
              }();
              var statearr_11673_11688 = state_11670__$1;
              statearr_11673_11688[2] = null;
              statearr_11673_11688[1] = 2;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_11671 === 2) {
                var state_11670__$1 = state_11670;
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_11670__$1, 4, ch);
              } else {
                if (state_val_11671 === 3) {
                  var inst_11668 = state_11670[2];
                  var state_11670__$1 = state_11670;
                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11670__$1, inst_11668);
                } else {
                  if (state_val_11671 === 4) {
                    var inst_11659 = state_11670[8];
                    var inst_11659__$1 = state_11670[2];
                    var inst_11660 = inst_11659__$1 == null;
                    var state_11670__$1 = function() {
                      var statearr_11674 = state_11670;
                      statearr_11674[8] = inst_11659__$1;
                      return statearr_11674;
                    }();
                    if (cljs.core.truth_(inst_11660)) {
                      var statearr_11675_11689 = state_11670__$1;
                      statearr_11675_11689[1] = 5;
                    } else {
                      var statearr_11676_11690 = state_11670__$1;
                      statearr_11676_11690[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_11671 === 5) {
                      var inst_11656 = state_11670[7];
                      var state_11670__$1 = state_11670;
                      var statearr_11677_11691 = state_11670__$1;
                      statearr_11677_11691[2] = inst_11656;
                      statearr_11677_11691[1] = 7;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_11671 === 6) {
                        var inst_11656 = state_11670[7];
                        var inst_11659 = state_11670[8];
                        var inst_11663 = f.call(null, inst_11656, inst_11659);
                        var inst_11656__$1 = inst_11663;
                        var state_11670__$1 = function() {
                          var statearr_11678 = state_11670;
                          statearr_11678[7] = inst_11656__$1;
                          return statearr_11678;
                        }();
                        var statearr_11679_11692 = state_11670__$1;
                        statearr_11679_11692[2] = null;
                        statearr_11679_11692[1] = 2;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_11671 === 7) {
                          var inst_11666 = state_11670[2];
                          var state_11670__$1 = state_11670;
                          var statearr_11680_11693 = state_11670__$1;
                          statearr_11680_11693[2] = inst_11666;
                          statearr_11680_11693[1] = 3;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          return null;
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__7634__auto__);
        return function(switch__7572__auto__, c__7634__auto__) {
          return function() {
            var cljs$core$async$reduce_$_state_machine__7573__auto__ = null;
            var cljs$core$async$reduce_$_state_machine__7573__auto____0 = function() {
              var statearr_11684 = [null, null, null, null, null, null, null, null, null];
              statearr_11684[0] = cljs$core$async$reduce_$_state_machine__7573__auto__;
              statearr_11684[1] = 1;
              return statearr_11684;
            };
            var cljs$core$async$reduce_$_state_machine__7573__auto____1 = function(state_11670) {
              while (true) {
                var ret_value__7574__auto__ = function() {
                  try {
                    while (true) {
                      var result__7575__auto__ = switch__7572__auto__.call(null, state_11670);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__7575__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__7575__auto__;
                      }
                      break;
                    }
                  } catch (e11685) {
                    if (e11685 instanceof Object) {
                      var ex__7576__auto__ = e11685;
                      var statearr_11686_11694 = state_11670;
                      statearr_11686_11694[5] = ex__7576__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_11670);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e11685;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7574__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__11695 = state_11670;
                  state_11670 = G__11695;
                  continue;
                } else {
                  return ret_value__7574__auto__;
                }
                break;
              }
            };
            cljs$core$async$reduce_$_state_machine__7573__auto__ = function(state_11670) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$reduce_$_state_machine__7573__auto____0.call(this);
                case 1:
                  return cljs$core$async$reduce_$_state_machine__7573__auto____1.call(this, state_11670);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$reduce_$_state_machine__7573__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$reduce_$_state_machine__7573__auto____0;
            cljs$core$async$reduce_$_state_machine__7573__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$reduce_$_state_machine__7573__auto____1;
            return cljs$core$async$reduce_$_state_machine__7573__auto__;
          }();
        }(switch__7572__auto__, c__7634__auto__);
      }();
      var state__7636__auto__ = function() {
        var statearr_11687 = f__7635__auto__.call(null);
        statearr_11687[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7634__auto__;
        return statearr_11687;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7636__auto__);
    };
  }(c__7634__auto__));
  return c__7634__auto__;
};
cljs.core.async.onto_chan = function cljs$core$async$onto_chan() {
  var G__11697 = arguments.length;
  switch(G__11697) {
    case 2:
      return cljs.core.async.onto_chan.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.onto_chan.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.onto_chan.cljs$core$IFn$_invoke$arity$2 = function(ch, coll) {
  return cljs.core.async.onto_chan.call(null, ch, coll, true);
};
cljs.core.async.onto_chan.cljs$core$IFn$_invoke$arity$3 = function(ch, coll, close_QMARK_) {
  var c__7634__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__7634__auto__) {
    return function() {
      var f__7635__auto__ = function() {
        var switch__7572__auto__ = function(c__7634__auto__) {
          return function(state_11722) {
            var state_val_11723 = state_11722[1];
            if (state_val_11723 === 7) {
              var inst_11704 = state_11722[2];
              var state_11722__$1 = state_11722;
              var statearr_11724_11748 = state_11722__$1;
              statearr_11724_11748[2] = inst_11704;
              statearr_11724_11748[1] = 6;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_11723 === 1) {
                var inst_11698 = cljs.core.seq.call(null, coll);
                var inst_11699 = inst_11698;
                var state_11722__$1 = function() {
                  var statearr_11725 = state_11722;
                  statearr_11725[7] = inst_11699;
                  return statearr_11725;
                }();
                var statearr_11726_11749 = state_11722__$1;
                statearr_11726_11749[2] = null;
                statearr_11726_11749[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_11723 === 4) {
                  var inst_11699 = state_11722[7];
                  var inst_11702 = cljs.core.first.call(null, inst_11699);
                  var state_11722__$1 = state_11722;
                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_11722__$1, 7, ch, inst_11702);
                } else {
                  if (state_val_11723 === 13) {
                    var inst_11716 = state_11722[2];
                    var state_11722__$1 = state_11722;
                    var statearr_11727_11750 = state_11722__$1;
                    statearr_11727_11750[2] = inst_11716;
                    statearr_11727_11750[1] = 10;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_11723 === 6) {
                      var inst_11707 = state_11722[2];
                      var state_11722__$1 = state_11722;
                      if (cljs.core.truth_(inst_11707)) {
                        var statearr_11728_11751 = state_11722__$1;
                        statearr_11728_11751[1] = 8;
                      } else {
                        var statearr_11729_11752 = state_11722__$1;
                        statearr_11729_11752[1] = 9;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_11723 === 3) {
                        var inst_11720 = state_11722[2];
                        var state_11722__$1 = state_11722;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_11722__$1, inst_11720);
                      } else {
                        if (state_val_11723 === 12) {
                          var state_11722__$1 = state_11722;
                          var statearr_11730_11753 = state_11722__$1;
                          statearr_11730_11753[2] = null;
                          statearr_11730_11753[1] = 13;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_11723 === 2) {
                            var inst_11699 = state_11722[7];
                            var state_11722__$1 = state_11722;
                            if (cljs.core.truth_(inst_11699)) {
                              var statearr_11731_11754 = state_11722__$1;
                              statearr_11731_11754[1] = 4;
                            } else {
                              var statearr_11732_11755 = state_11722__$1;
                              statearr_11732_11755[1] = 5;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_11723 === 11) {
                              var inst_11713 = cljs.core.async.close_BANG_.call(null, ch);
                              var state_11722__$1 = state_11722;
                              var statearr_11733_11756 = state_11722__$1;
                              statearr_11733_11756[2] = inst_11713;
                              statearr_11733_11756[1] = 13;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_11723 === 9) {
                                var state_11722__$1 = state_11722;
                                if (cljs.core.truth_(close_QMARK_)) {
                                  var statearr_11734_11757 = state_11722__$1;
                                  statearr_11734_11757[1] = 11;
                                } else {
                                  var statearr_11735_11758 = state_11722__$1;
                                  statearr_11735_11758[1] = 12;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_11723 === 5) {
                                  var inst_11699 = state_11722[7];
                                  var state_11722__$1 = state_11722;
                                  var statearr_11736_11759 = state_11722__$1;
                                  statearr_11736_11759[2] = inst_11699;
                                  statearr_11736_11759[1] = 6;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_11723 === 10) {
                                    var inst_11718 = state_11722[2];
                                    var state_11722__$1 = state_11722;
                                    var statearr_11737_11760 = state_11722__$1;
                                    statearr_11737_11760[2] = inst_11718;
                                    statearr_11737_11760[1] = 3;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_11723 === 8) {
                                      var inst_11699 = state_11722[7];
                                      var inst_11709 = cljs.core.next.call(null, inst_11699);
                                      var inst_11699__$1 = inst_11709;
                                      var state_11722__$1 = function() {
                                        var statearr_11738 = state_11722;
                                        statearr_11738[7] = inst_11699__$1;
                                        return statearr_11738;
                                      }();
                                      var statearr_11739_11761 = state_11722__$1;
                                      statearr_11739_11761[2] = null;
                                      statearr_11739_11761[1] = 2;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      return null;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__7634__auto__);
        return function(switch__7572__auto__, c__7634__auto__) {
          return function() {
            var cljs$core$async$state_machine__7573__auto__ = null;
            var cljs$core$async$state_machine__7573__auto____0 = function() {
              var statearr_11743 = [null, null, null, null, null, null, null, null];
              statearr_11743[0] = cljs$core$async$state_machine__7573__auto__;
              statearr_11743[1] = 1;
              return statearr_11743;
            };
            var cljs$core$async$state_machine__7573__auto____1 = function(state_11722) {
              while (true) {
                var ret_value__7574__auto__ = function() {
                  try {
                    while (true) {
                      var result__7575__auto__ = switch__7572__auto__.call(null, state_11722);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__7575__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__7575__auto__;
                      }
                      break;
                    }
                  } catch (e11744) {
                    if (e11744 instanceof Object) {
                      var ex__7576__auto__ = e11744;
                      var statearr_11745_11762 = state_11722;
                      statearr_11745_11762[5] = ex__7576__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_11722);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e11744;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7574__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__11763 = state_11722;
                  state_11722 = G__11763;
                  continue;
                } else {
                  return ret_value__7574__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__7573__auto__ = function(state_11722) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__7573__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__7573__auto____1.call(this, state_11722);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__7573__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__7573__auto____0;
            cljs$core$async$state_machine__7573__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__7573__auto____1;
            return cljs$core$async$state_machine__7573__auto__;
          }();
        }(switch__7572__auto__, c__7634__auto__);
      }();
      var state__7636__auto__ = function() {
        var statearr_11746 = f__7635__auto__.call(null);
        statearr_11746[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7634__auto__;
        return statearr_11746;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7636__auto__);
    };
  }(c__7634__auto__));
  return c__7634__auto__;
};
cljs.core.async.onto_chan.cljs$lang$maxFixedArity = 3;
cljs.core.async.to_chan = function cljs$core$async$to_chan(coll) {
  var ch = cljs.core.async.chan.call(null, cljs.core.bounded_count.call(null, 100, coll));
  cljs.core.async.onto_chan.call(null, ch, coll);
  return ch;
};
cljs.core.async.Mux = function() {
  var obj11765 = {};
  return obj11765;
}();
cljs.core.async.muxch_STAR_ = function cljs$core$async$muxch_STAR_(_) {
  if (function() {
    var and__4297__auto__ = _;
    if (and__4297__auto__) {
      return _.cljs$core$async$Mux$muxch_STAR_$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return _.cljs$core$async$Mux$muxch_STAR_$arity$1(_);
  } else {
    var x__4945__auto__ = _ == null ? null : _;
    return function() {
      var or__4309__auto__ = cljs.core.async.muxch_STAR_[goog.typeOf(x__4945__auto__)];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core.async.muxch_STAR_["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mux.muxch*", _);
        }
      }
    }().call(null, _);
  }
};
cljs.core.async.Mult = function() {
  var obj11767 = {};
  return obj11767;
}();
cljs.core.async.tap_STAR_ = function cljs$core$async$tap_STAR_(m, ch, close_QMARK_) {
  if (function() {
    var and__4297__auto__ = m;
    if (and__4297__auto__) {
      return m.cljs$core$async$Mult$tap_STAR_$arity$3;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$tap_STAR_$arity$3(m, ch, close_QMARK_);
  } else {
    var x__4945__auto__ = m == null ? null : m;
    return function() {
      var or__4309__auto__ = cljs.core.async.tap_STAR_[goog.typeOf(x__4945__auto__)];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core.async.tap_STAR_["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.tap*", m);
        }
      }
    }().call(null, m, ch, close_QMARK_);
  }
};
cljs.core.async.untap_STAR_ = function cljs$core$async$untap_STAR_(m, ch) {
  if (function() {
    var and__4297__auto__ = m;
    if (and__4297__auto__) {
      return m.cljs$core$async$Mult$untap_STAR_$arity$2;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$untap_STAR_$arity$2(m, ch);
  } else {
    var x__4945__auto__ = m == null ? null : m;
    return function() {
      var or__4309__auto__ = cljs.core.async.untap_STAR_[goog.typeOf(x__4945__auto__)];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core.async.untap_STAR_["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.untap*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.untap_all_STAR_ = function cljs$core$async$untap_all_STAR_(m) {
  if (function() {
    var and__4297__auto__ = m;
    if (and__4297__auto__) {
      return m.cljs$core$async$Mult$untap_all_STAR_$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$untap_all_STAR_$arity$1(m);
  } else {
    var x__4945__auto__ = m == null ? null : m;
    return function() {
      var or__4309__auto__ = cljs.core.async.untap_all_STAR_[goog.typeOf(x__4945__auto__)];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core.async.untap_all_STAR_["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.untap-all*", m);
        }
      }
    }().call(null, m);
  }
};
cljs.core.async.mult = function cljs$core$async$mult(ch) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var m = function() {
    if (typeof cljs.core.async.t11989 !== "undefined") {
    } else {
      cljs.core.async.t11989 = function(mult, ch, cs, meta11990) {
        this.mult = mult;
        this.ch = ch;
        this.cs = cs;
        this.meta11990 = meta11990;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
        this.cljs$lang$protocol_mask$partition1$ = 0;
      };
      cljs.core.async.t11989.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(cs) {
        return function(_11991, meta11990__$1) {
          var self__ = this;
          var _11991__$1 = this;
          return new cljs.core.async.t11989(self__.mult, self__.ch, self__.cs, meta11990__$1);
        };
      }(cs);
      cljs.core.async.t11989.prototype.cljs$core$IMeta$_meta$arity$1 = function(cs) {
        return function(_11991) {
          var self__ = this;
          var _11991__$1 = this;
          return self__.meta11990;
        };
      }(cs);
      cljs.core.async.t11989.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t11989.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(cs) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.ch;
        };
      }(cs);
      cljs.core.async.t11989.prototype.cljs$core$async$Mult$ = true;
      cljs.core.async.t11989.prototype.cljs$core$async$Mult$tap_STAR_$arity$3 = function(cs) {
        return function(_, ch__$1, close_QMARK_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch__$1, close_QMARK_);
          return null;
        };
      }(cs);
      cljs.core.async.t11989.prototype.cljs$core$async$Mult$untap_STAR_$arity$2 = function(cs) {
        return function(_, ch__$1) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch__$1);
          return null;
        };
      }(cs);
      cljs.core.async.t11989.prototype.cljs$core$async$Mult$untap_all_STAR_$arity$1 = function(cs) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
          return null;
        };
      }(cs);
      cljs.core.async.t11989.getBasis = function(cs) {
        return function() {
          return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "mult", "mult", -1187640995, null), new cljs.core.Symbol(null, "ch", "ch", 1085813622, null), new cljs.core.Symbol(null, "cs", "cs", -117024463, null), new cljs.core.Symbol(null, "meta11990", "meta11990", -287807930, null)], null);
        };
      }(cs);
      cljs.core.async.t11989.cljs$lang$type = true;
      cljs.core.async.t11989.cljs$lang$ctorStr = "cljs.core.async/t11989";
      cljs.core.async.t11989.cljs$lang$ctorPrWriter = function(cs) {
        return function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
          return cljs.core._write.call(null, writer__4889__auto__, "cljs.core.async/t11989");
        };
      }(cs);
      cljs.core.async.__GT_t11989 = function(cs) {
        return function cljs$core$async$mult_$___GT_t11989(mult__$1, ch__$1, cs__$1, meta11990) {
          return new cljs.core.async.t11989(mult__$1, ch__$1, cs__$1, meta11990);
        };
      }(cs);
    }
    return new cljs.core.async.t11989(cljs$core$async$mult, ch, cs, cljs.core.PersistentArrayMap.EMPTY);
  }();
  var dchan = cljs.core.async.chan.call(null, 1);
  var dctr = cljs.core.atom.call(null, null);
  var done = function(cs, m, dchan, dctr) {
    return function(_) {
      if (cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
        return cljs.core.async.put_BANG_.call(null, dchan, true);
      } else {
        return null;
      }
    };
  }(cs, m, dchan, dctr);
  var c__7634__auto___12210 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__7634__auto___12210, cs, m, dchan, dctr, done) {
    return function() {
      var f__7635__auto__ = function() {
        var switch__7572__auto__ = function(c__7634__auto___12210, cs, m, dchan, dctr, done) {
          return function(state_12122) {
            var state_val_12123 = state_12122[1];
            if (state_val_12123 === 7) {
              var inst_12118 = state_12122[2];
              var state_12122__$1 = state_12122;
              var statearr_12124_12211 = state_12122__$1;
              statearr_12124_12211[2] = inst_12118;
              statearr_12124_12211[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_12123 === 20) {
                var inst_12023 = state_12122[7];
                var inst_12033 = cljs.core.first.call(null, inst_12023);
                var inst_12034 = cljs.core.nth.call(null, inst_12033, 0, null);
                var inst_12035 = cljs.core.nth.call(null, inst_12033, 1, null);
                var state_12122__$1 = function() {
                  var statearr_12125 = state_12122;
                  statearr_12125[8] = inst_12034;
                  return statearr_12125;
                }();
                if (cljs.core.truth_(inst_12035)) {
                  var statearr_12126_12212 = state_12122__$1;
                  statearr_12126_12212[1] = 22;
                } else {
                  var statearr_12127_12213 = state_12122__$1;
                  statearr_12127_12213[1] = 23;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_12123 === 27) {
                  var inst_12065 = state_12122[9];
                  var inst_12063 = state_12122[10];
                  var inst_12070 = state_12122[11];
                  var inst_11994 = state_12122[12];
                  var inst_12070__$1 = cljs.core._nth.call(null, inst_12063, inst_12065);
                  var inst_12071 = cljs.core.async.put_BANG_.call(null, inst_12070__$1, inst_11994, done);
                  var state_12122__$1 = function() {
                    var statearr_12128 = state_12122;
                    statearr_12128[11] = inst_12070__$1;
                    return statearr_12128;
                  }();
                  if (cljs.core.truth_(inst_12071)) {
                    var statearr_12129_12214 = state_12122__$1;
                    statearr_12129_12214[1] = 30;
                  } else {
                    var statearr_12130_12215 = state_12122__$1;
                    statearr_12130_12215[1] = 31;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_12123 === 1) {
                    var state_12122__$1 = state_12122;
                    var statearr_12131_12216 = state_12122__$1;
                    statearr_12131_12216[2] = null;
                    statearr_12131_12216[1] = 2;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_12123 === 24) {
                      var inst_12023 = state_12122[7];
                      var inst_12040 = state_12122[2];
                      var inst_12041 = cljs.core.next.call(null, inst_12023);
                      var inst_12003 = inst_12041;
                      var inst_12004 = null;
                      var inst_12005 = 0;
                      var inst_12006 = 0;
                      var state_12122__$1 = function() {
                        var statearr_12132 = state_12122;
                        statearr_12132[13] = inst_12006;
                        statearr_12132[14] = inst_12004;
                        statearr_12132[15] = inst_12003;
                        statearr_12132[16] = inst_12005;
                        statearr_12132[17] = inst_12040;
                        return statearr_12132;
                      }();
                      var statearr_12133_12217 = state_12122__$1;
                      statearr_12133_12217[2] = null;
                      statearr_12133_12217[1] = 8;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_12123 === 39) {
                        var state_12122__$1 = state_12122;
                        var statearr_12137_12218 = state_12122__$1;
                        statearr_12137_12218[2] = null;
                        statearr_12137_12218[1] = 41;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_12123 === 4) {
                          var inst_11994 = state_12122[12];
                          var inst_11994__$1 = state_12122[2];
                          var inst_11995 = inst_11994__$1 == null;
                          var state_12122__$1 = function() {
                            var statearr_12138 = state_12122;
                            statearr_12138[12] = inst_11994__$1;
                            return statearr_12138;
                          }();
                          if (cljs.core.truth_(inst_11995)) {
                            var statearr_12139_12219 = state_12122__$1;
                            statearr_12139_12219[1] = 5;
                          } else {
                            var statearr_12140_12220 = state_12122__$1;
                            statearr_12140_12220[1] = 6;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_12123 === 15) {
                            var inst_12006 = state_12122[13];
                            var inst_12004 = state_12122[14];
                            var inst_12003 = state_12122[15];
                            var inst_12005 = state_12122[16];
                            var inst_12019 = state_12122[2];
                            var inst_12020 = inst_12006 + 1;
                            var tmp12134 = inst_12004;
                            var tmp12135 = inst_12003;
                            var tmp12136 = inst_12005;
                            var inst_12003__$1 = tmp12135;
                            var inst_12004__$1 = tmp12134;
                            var inst_12005__$1 = tmp12136;
                            var inst_12006__$1 = inst_12020;
                            var state_12122__$1 = function() {
                              var statearr_12141 = state_12122;
                              statearr_12141[13] = inst_12006__$1;
                              statearr_12141[14] = inst_12004__$1;
                              statearr_12141[15] = inst_12003__$1;
                              statearr_12141[16] = inst_12005__$1;
                              statearr_12141[18] = inst_12019;
                              return statearr_12141;
                            }();
                            var statearr_12142_12221 = state_12122__$1;
                            statearr_12142_12221[2] = null;
                            statearr_12142_12221[1] = 8;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_12123 === 21) {
                              var inst_12044 = state_12122[2];
                              var state_12122__$1 = state_12122;
                              var statearr_12146_12222 = state_12122__$1;
                              statearr_12146_12222[2] = inst_12044;
                              statearr_12146_12222[1] = 18;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_12123 === 31) {
                                var inst_12070 = state_12122[11];
                                var inst_12074 = done.call(null, null);
                                var inst_12075 = cljs.core.async.untap_STAR_.call(null, m, inst_12070);
                                var state_12122__$1 = function() {
                                  var statearr_12147 = state_12122;
                                  statearr_12147[19] = inst_12074;
                                  return statearr_12147;
                                }();
                                var statearr_12148_12223 = state_12122__$1;
                                statearr_12148_12223[2] = inst_12075;
                                statearr_12148_12223[1] = 32;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_12123 === 32) {
                                  var inst_12062 = state_12122[20];
                                  var inst_12065 = state_12122[9];
                                  var inst_12064 = state_12122[21];
                                  var inst_12063 = state_12122[10];
                                  var inst_12077 = state_12122[2];
                                  var inst_12078 = inst_12065 + 1;
                                  var tmp12143 = inst_12062;
                                  var tmp12144 = inst_12064;
                                  var tmp12145 = inst_12063;
                                  var inst_12062__$1 = tmp12143;
                                  var inst_12063__$1 = tmp12145;
                                  var inst_12064__$1 = tmp12144;
                                  var inst_12065__$1 = inst_12078;
                                  var state_12122__$1 = function() {
                                    var statearr_12149 = state_12122;
                                    statearr_12149[22] = inst_12077;
                                    statearr_12149[20] = inst_12062__$1;
                                    statearr_12149[9] = inst_12065__$1;
                                    statearr_12149[21] = inst_12064__$1;
                                    statearr_12149[10] = inst_12063__$1;
                                    return statearr_12149;
                                  }();
                                  var statearr_12150_12224 = state_12122__$1;
                                  statearr_12150_12224[2] = null;
                                  statearr_12150_12224[1] = 25;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_12123 === 40) {
                                    var inst_12090 = state_12122[23];
                                    var inst_12094 = done.call(null, null);
                                    var inst_12095 = cljs.core.async.untap_STAR_.call(null, m, inst_12090);
                                    var state_12122__$1 = function() {
                                      var statearr_12151 = state_12122;
                                      statearr_12151[24] = inst_12094;
                                      return statearr_12151;
                                    }();
                                    var statearr_12152_12225 = state_12122__$1;
                                    statearr_12152_12225[2] = inst_12095;
                                    statearr_12152_12225[1] = 41;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_12123 === 33) {
                                      var inst_12081 = state_12122[25];
                                      var inst_12083 = cljs.core.chunked_seq_QMARK_.call(null, inst_12081);
                                      var state_12122__$1 = state_12122;
                                      if (inst_12083) {
                                        var statearr_12153_12226 = state_12122__$1;
                                        statearr_12153_12226[1] = 36;
                                      } else {
                                        var statearr_12154_12227 = state_12122__$1;
                                        statearr_12154_12227[1] = 37;
                                      }
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_12123 === 13) {
                                        var inst_12013 = state_12122[26];
                                        var inst_12016 = cljs.core.async.close_BANG_.call(null, inst_12013);
                                        var state_12122__$1 = state_12122;
                                        var statearr_12155_12228 = state_12122__$1;
                                        statearr_12155_12228[2] = inst_12016;
                                        statearr_12155_12228[1] = 15;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_12123 === 22) {
                                          var inst_12034 = state_12122[8];
                                          var inst_12037 = cljs.core.async.close_BANG_.call(null, inst_12034);
                                          var state_12122__$1 = state_12122;
                                          var statearr_12156_12229 = state_12122__$1;
                                          statearr_12156_12229[2] = inst_12037;
                                          statearr_12156_12229[1] = 24;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_12123 === 36) {
                                            var inst_12081 = state_12122[25];
                                            var inst_12085 = cljs.core.chunk_first.call(null, inst_12081);
                                            var inst_12086 = cljs.core.chunk_rest.call(null, inst_12081);
                                            var inst_12087 = cljs.core.count.call(null, inst_12085);
                                            var inst_12062 = inst_12086;
                                            var inst_12063 = inst_12085;
                                            var inst_12064 = inst_12087;
                                            var inst_12065 = 0;
                                            var state_12122__$1 = function() {
                                              var statearr_12157 = state_12122;
                                              statearr_12157[20] = inst_12062;
                                              statearr_12157[9] = inst_12065;
                                              statearr_12157[21] = inst_12064;
                                              statearr_12157[10] = inst_12063;
                                              return statearr_12157;
                                            }();
                                            var statearr_12158_12230 = state_12122__$1;
                                            statearr_12158_12230[2] = null;
                                            statearr_12158_12230[1] = 25;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_12123 === 41) {
                                              var inst_12081 = state_12122[25];
                                              var inst_12097 = state_12122[2];
                                              var inst_12098 = cljs.core.next.call(null, inst_12081);
                                              var inst_12062 = inst_12098;
                                              var inst_12063 = null;
                                              var inst_12064 = 0;
                                              var inst_12065 = 0;
                                              var state_12122__$1 = function() {
                                                var statearr_12159 = state_12122;
                                                statearr_12159[20] = inst_12062;
                                                statearr_12159[9] = inst_12065;
                                                statearr_12159[21] = inst_12064;
                                                statearr_12159[27] = inst_12097;
                                                statearr_12159[10] = inst_12063;
                                                return statearr_12159;
                                              }();
                                              var statearr_12160_12231 = state_12122__$1;
                                              statearr_12160_12231[2] = null;
                                              statearr_12160_12231[1] = 25;
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_12123 === 43) {
                                                var state_12122__$1 = state_12122;
                                                var statearr_12161_12232 = state_12122__$1;
                                                statearr_12161_12232[2] = null;
                                                statearr_12161_12232[1] = 44;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_12123 === 29) {
                                                  var inst_12106 = state_12122[2];
                                                  var state_12122__$1 = state_12122;
                                                  var statearr_12162_12233 = state_12122__$1;
                                                  statearr_12162_12233[2] = inst_12106;
                                                  statearr_12162_12233[1] = 26;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_12123 === 44) {
                                                    var inst_12115 = state_12122[2];
                                                    var state_12122__$1 = function() {
                                                      var statearr_12163 = state_12122;
                                                      statearr_12163[28] = inst_12115;
                                                      return statearr_12163;
                                                    }();
                                                    var statearr_12164_12234 = state_12122__$1;
                                                    statearr_12164_12234[2] = null;
                                                    statearr_12164_12234[1] = 2;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_12123 === 6) {
                                                      var inst_12054 = state_12122[29];
                                                      var inst_12053 = cljs.core.deref.call(null, cs);
                                                      var inst_12054__$1 = cljs.core.keys.call(null, inst_12053);
                                                      var inst_12055 = cljs.core.count.call(null, inst_12054__$1);
                                                      var inst_12056 = cljs.core.reset_BANG_.call(null, dctr, inst_12055);
                                                      var inst_12061 = cljs.core.seq.call(null, inst_12054__$1);
                                                      var inst_12062 = inst_12061;
                                                      var inst_12063 = null;
                                                      var inst_12064 = 0;
                                                      var inst_12065 = 0;
                                                      var state_12122__$1 = function() {
                                                        var statearr_12165 = state_12122;
                                                        statearr_12165[20] = inst_12062;
                                                        statearr_12165[29] = inst_12054__$1;
                                                        statearr_12165[9] = inst_12065;
                                                        statearr_12165[21] = inst_12064;
                                                        statearr_12165[10] = inst_12063;
                                                        statearr_12165[30] = inst_12056;
                                                        return statearr_12165;
                                                      }();
                                                      var statearr_12166_12235 = state_12122__$1;
                                                      statearr_12166_12235[2] = null;
                                                      statearr_12166_12235[1] = 25;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_12123 === 28) {
                                                        var inst_12081 = state_12122[25];
                                                        var inst_12062 = state_12122[20];
                                                        var inst_12081__$1 = cljs.core.seq.call(null, inst_12062);
                                                        var state_12122__$1 = function() {
                                                          var statearr_12167 = state_12122;
                                                          statearr_12167[25] = inst_12081__$1;
                                                          return statearr_12167;
                                                        }();
                                                        if (inst_12081__$1) {
                                                          var statearr_12168_12236 = state_12122__$1;
                                                          statearr_12168_12236[1] = 33;
                                                        } else {
                                                          var statearr_12169_12237 = state_12122__$1;
                                                          statearr_12169_12237[1] = 34;
                                                        }
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_12123 === 25) {
                                                          var inst_12065 = state_12122[9];
                                                          var inst_12064 = state_12122[21];
                                                          var inst_12067 = inst_12065 < inst_12064;
                                                          var inst_12068 = inst_12067;
                                                          var state_12122__$1 = state_12122;
                                                          if (cljs.core.truth_(inst_12068)) {
                                                            var statearr_12170_12238 = state_12122__$1;
                                                            statearr_12170_12238[1] = 27;
                                                          } else {
                                                            var statearr_12171_12239 = state_12122__$1;
                                                            statearr_12171_12239[1] = 28;
                                                          }
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          if (state_val_12123 === 34) {
                                                            var state_12122__$1 = state_12122;
                                                            var statearr_12172_12240 = state_12122__$1;
                                                            statearr_12172_12240[2] = null;
                                                            statearr_12172_12240[1] = 35;
                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                          } else {
                                                            if (state_val_12123 === 17) {
                                                              var state_12122__$1 = state_12122;
                                                              var statearr_12173_12241 = state_12122__$1;
                                                              statearr_12173_12241[2] = null;
                                                              statearr_12173_12241[1] = 18;
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              if (state_val_12123 === 3) {
                                                                var inst_12120 = state_12122[2];
                                                                var state_12122__$1 = state_12122;
                                                                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_12122__$1, inst_12120);
                                                              } else {
                                                                if (state_val_12123 === 12) {
                                                                  var inst_12049 = state_12122[2];
                                                                  var state_12122__$1 = state_12122;
                                                                  var statearr_12174_12242 = state_12122__$1;
                                                                  statearr_12174_12242[2] = inst_12049;
                                                                  statearr_12174_12242[1] = 9;
                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                } else {
                                                                  if (state_val_12123 === 2) {
                                                                    var state_12122__$1 = state_12122;
                                                                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_12122__$1, 4, ch);
                                                                  } else {
                                                                    if (state_val_12123 === 23) {
                                                                      var state_12122__$1 = state_12122;
                                                                      var statearr_12175_12243 = state_12122__$1;
                                                                      statearr_12175_12243[2] = null;
                                                                      statearr_12175_12243[1] = 24;
                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                    } else {
                                                                      if (state_val_12123 === 35) {
                                                                        var inst_12104 = state_12122[2];
                                                                        var state_12122__$1 = state_12122;
                                                                        var statearr_12176_12244 = state_12122__$1;
                                                                        statearr_12176_12244[2] = inst_12104;
                                                                        statearr_12176_12244[1] = 29;
                                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                      } else {
                                                                        if (state_val_12123 === 19) {
                                                                          var inst_12023 = state_12122[7];
                                                                          var inst_12027 = cljs.core.chunk_first.call(null, inst_12023);
                                                                          var inst_12028 = cljs.core.chunk_rest.call(null, inst_12023);
                                                                          var inst_12029 = cljs.core.count.call(null, inst_12027);
                                                                          var inst_12003 = inst_12028;
                                                                          var inst_12004 = inst_12027;
                                                                          var inst_12005 = inst_12029;
                                                                          var inst_12006 = 0;
                                                                          var state_12122__$1 = function() {
                                                                            var statearr_12177 = state_12122;
                                                                            statearr_12177[13] = inst_12006;
                                                                            statearr_12177[14] = inst_12004;
                                                                            statearr_12177[15] = inst_12003;
                                                                            statearr_12177[16] = inst_12005;
                                                                            return statearr_12177;
                                                                          }();
                                                                          var statearr_12178_12245 = state_12122__$1;
                                                                          statearr_12178_12245[2] = null;
                                                                          statearr_12178_12245[1] = 8;
                                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                        } else {
                                                                          if (state_val_12123 === 11) {
                                                                            var inst_12023 = state_12122[7];
                                                                            var inst_12003 = state_12122[15];
                                                                            var inst_12023__$1 = cljs.core.seq.call(null, inst_12003);
                                                                            var state_12122__$1 = function() {
                                                                              var statearr_12179 = state_12122;
                                                                              statearr_12179[7] = inst_12023__$1;
                                                                              return statearr_12179;
                                                                            }();
                                                                            if (inst_12023__$1) {
                                                                              var statearr_12180_12246 = state_12122__$1;
                                                                              statearr_12180_12246[1] = 16;
                                                                            } else {
                                                                              var statearr_12181_12247 = state_12122__$1;
                                                                              statearr_12181_12247[1] = 17;
                                                                            }
                                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                          } else {
                                                                            if (state_val_12123 === 9) {
                                                                              var inst_12051 = state_12122[2];
                                                                              var state_12122__$1 = state_12122;
                                                                              var statearr_12182_12248 = state_12122__$1;
                                                                              statearr_12182_12248[2] = inst_12051;
                                                                              statearr_12182_12248[1] = 7;
                                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                            } else {
                                                                              if (state_val_12123 === 5) {
                                                                                var inst_12001 = cljs.core.deref.call(null, cs);
                                                                                var inst_12002 = cljs.core.seq.call(null, inst_12001);
                                                                                var inst_12003 = inst_12002;
                                                                                var inst_12004 = null;
                                                                                var inst_12005 = 0;
                                                                                var inst_12006 = 0;
                                                                                var state_12122__$1 = function() {
                                                                                  var statearr_12183 = state_12122;
                                                                                  statearr_12183[13] = inst_12006;
                                                                                  statearr_12183[14] = inst_12004;
                                                                                  statearr_12183[15] = inst_12003;
                                                                                  statearr_12183[16] = inst_12005;
                                                                                  return statearr_12183;
                                                                                }();
                                                                                var statearr_12184_12249 = state_12122__$1;
                                                                                statearr_12184_12249[2] = null;
                                                                                statearr_12184_12249[1] = 8;
                                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                              } else {
                                                                                if (state_val_12123 === 14) {
                                                                                  var state_12122__$1 = state_12122;
                                                                                  var statearr_12185_12250 = state_12122__$1;
                                                                                  statearr_12185_12250[2] = null;
                                                                                  statearr_12185_12250[1] = 15;
                                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                } else {
                                                                                  if (state_val_12123 === 45) {
                                                                                    var inst_12112 = state_12122[2];
                                                                                    var state_12122__$1 = state_12122;
                                                                                    var statearr_12186_12251 = state_12122__$1;
                                                                                    statearr_12186_12251[2] = inst_12112;
                                                                                    statearr_12186_12251[1] = 44;
                                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                  } else {
                                                                                    if (state_val_12123 === 26) {
                                                                                      var inst_12054 = state_12122[29];
                                                                                      var inst_12108 = state_12122[2];
                                                                                      var inst_12109 = cljs.core.seq.call(null, inst_12054);
                                                                                      var state_12122__$1 = function() {
                                                                                        var statearr_12187 = state_12122;
                                                                                        statearr_12187[31] = inst_12108;
                                                                                        return statearr_12187;
                                                                                      }();
                                                                                      if (inst_12109) {
                                                                                        var statearr_12188_12252 = state_12122__$1;
                                                                                        statearr_12188_12252[1] = 42;
                                                                                      } else {
                                                                                        var statearr_12189_12253 = state_12122__$1;
                                                                                        statearr_12189_12253[1] = 43;
                                                                                      }
                                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                    } else {
                                                                                      if (state_val_12123 === 16) {
                                                                                        var inst_12023 = state_12122[7];
                                                                                        var inst_12025 = cljs.core.chunked_seq_QMARK_.call(null, inst_12023);
                                                                                        var state_12122__$1 = state_12122;
                                                                                        if (inst_12025) {
                                                                                          var statearr_12190_12254 = state_12122__$1;
                                                                                          statearr_12190_12254[1] = 19;
                                                                                        } else {
                                                                                          var statearr_12191_12255 = state_12122__$1;
                                                                                          statearr_12191_12255[1] = 20;
                                                                                        }
                                                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                      } else {
                                                                                        if (state_val_12123 === 38) {
                                                                                          var inst_12101 = state_12122[2];
                                                                                          var state_12122__$1 = state_12122;
                                                                                          var statearr_12192_12256 = state_12122__$1;
                                                                                          statearr_12192_12256[2] = inst_12101;
                                                                                          statearr_12192_12256[1] = 35;
                                                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                        } else {
                                                                                          if (state_val_12123 === 30) {
                                                                                            var state_12122__$1 = state_12122;
                                                                                            var statearr_12193_12257 = state_12122__$1;
                                                                                            statearr_12193_12257[2] = null;
                                                                                            statearr_12193_12257[1] = 32;
                                                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                          } else {
                                                                                            if (state_val_12123 === 10) {
                                                                                              var inst_12006 = state_12122[13];
                                                                                              var inst_12004 = state_12122[14];
                                                                                              var inst_12012 = cljs.core._nth.call(null, inst_12004, inst_12006);
                                                                                              var inst_12013 = cljs.core.nth.call(null, inst_12012, 0, null);
                                                                                              var inst_12014 = cljs.core.nth.call(null, inst_12012, 1, null);
                                                                                              var state_12122__$1 = function() {
                                                                                                var statearr_12194 = state_12122;
                                                                                                statearr_12194[26] = inst_12013;
                                                                                                return statearr_12194;
                                                                                              }();
                                                                                              if (cljs.core.truth_(inst_12014)) {
                                                                                                var statearr_12195_12258 = state_12122__$1;
                                                                                                statearr_12195_12258[1] = 13;
                                                                                              } else {
                                                                                                var statearr_12196_12259 = state_12122__$1;
                                                                                                statearr_12196_12259[1] = 14;
                                                                                              }
                                                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                            } else {
                                                                                              if (state_val_12123 === 18) {
                                                                                                var inst_12047 = state_12122[2];
                                                                                                var state_12122__$1 = state_12122;
                                                                                                var statearr_12197_12260 = state_12122__$1;
                                                                                                statearr_12197_12260[2] = inst_12047;
                                                                                                statearr_12197_12260[1] = 12;
                                                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                              } else {
                                                                                                if (state_val_12123 === 42) {
                                                                                                  var state_12122__$1 = state_12122;
                                                                                                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_12122__$1, 45, dchan);
                                                                                                } else {
                                                                                                  if (state_val_12123 === 37) {
                                                                                                    var inst_12081 = state_12122[25];
                                                                                                    var inst_12090 = state_12122[23];
                                                                                                    var inst_11994 = state_12122[12];
                                                                                                    var inst_12090__$1 = cljs.core.first.call(null, inst_12081);
                                                                                                    var inst_12091 = cljs.core.async.put_BANG_.call(null, inst_12090__$1, inst_11994, done);
                                                                                                    var state_12122__$1 = function() {
                                                                                                      var statearr_12198 = state_12122;
                                                                                                      statearr_12198[23] = inst_12090__$1;
                                                                                                      return statearr_12198;
                                                                                                    }();
                                                                                                    if (cljs.core.truth_(inst_12091)) {
                                                                                                      var statearr_12199_12261 = state_12122__$1;
                                                                                                      statearr_12199_12261[1] = 39;
                                                                                                    } else {
                                                                                                      var statearr_12200_12262 = state_12122__$1;
                                                                                                      statearr_12200_12262[1] = 40;
                                                                                                    }
                                                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                  } else {
                                                                                                    if (state_val_12123 === 8) {
                                                                                                      var inst_12006 = state_12122[13];
                                                                                                      var inst_12005 = state_12122[16];
                                                                                                      var inst_12008 = inst_12006 < inst_12005;
                                                                                                      var inst_12009 = inst_12008;
                                                                                                      var state_12122__$1 = state_12122;
                                                                                                      if (cljs.core.truth_(inst_12009)) {
                                                                                                        var statearr_12201_12263 = state_12122__$1;
                                                                                                        statearr_12201_12263[1] = 10;
                                                                                                      } else {
                                                                                                        var statearr_12202_12264 = state_12122__$1;
                                                                                                        statearr_12202_12264[1] = 11;
                                                                                                      }
                                                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                    } else {
                                                                                                      return null;
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__7634__auto___12210, cs, m, dchan, dctr, done);
        return function(switch__7572__auto__, c__7634__auto___12210, cs, m, dchan, dctr, done) {
          return function() {
            var cljs$core$async$mult_$_state_machine__7573__auto__ = null;
            var cljs$core$async$mult_$_state_machine__7573__auto____0 = function() {
              var statearr_12206 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_12206[0] = cljs$core$async$mult_$_state_machine__7573__auto__;
              statearr_12206[1] = 1;
              return statearr_12206;
            };
            var cljs$core$async$mult_$_state_machine__7573__auto____1 = function(state_12122) {
              while (true) {
                var ret_value__7574__auto__ = function() {
                  try {
                    while (true) {
                      var result__7575__auto__ = switch__7572__auto__.call(null, state_12122);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__7575__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__7575__auto__;
                      }
                      break;
                    }
                  } catch (e12207) {
                    if (e12207 instanceof Object) {
                      var ex__7576__auto__ = e12207;
                      var statearr_12208_12265 = state_12122;
                      statearr_12208_12265[5] = ex__7576__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_12122);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e12207;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7574__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__12266 = state_12122;
                  state_12122 = G__12266;
                  continue;
                } else {
                  return ret_value__7574__auto__;
                }
                break;
              }
            };
            cljs$core$async$mult_$_state_machine__7573__auto__ = function(state_12122) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$mult_$_state_machine__7573__auto____0.call(this);
                case 1:
                  return cljs$core$async$mult_$_state_machine__7573__auto____1.call(this, state_12122);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$mult_$_state_machine__7573__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$mult_$_state_machine__7573__auto____0;
            cljs$core$async$mult_$_state_machine__7573__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$mult_$_state_machine__7573__auto____1;
            return cljs$core$async$mult_$_state_machine__7573__auto__;
          }();
        }(switch__7572__auto__, c__7634__auto___12210, cs, m, dchan, dctr, done);
      }();
      var state__7636__auto__ = function() {
        var statearr_12209 = f__7635__auto__.call(null);
        statearr_12209[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7634__auto___12210;
        return statearr_12209;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7636__auto__);
    };
  }(c__7634__auto___12210, cs, m, dchan, dctr, done));
  return m;
};
cljs.core.async.tap = function cljs$core$async$tap() {
  var G__12268 = arguments.length;
  switch(G__12268) {
    case 2:
      return cljs.core.async.tap.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.tap.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.tap.cljs$core$IFn$_invoke$arity$2 = function(mult, ch) {
  return cljs.core.async.tap.call(null, mult, ch, true);
};
cljs.core.async.tap.cljs$core$IFn$_invoke$arity$3 = function(mult, ch, close_QMARK_) {
  cljs.core.async.tap_STAR_.call(null, mult, ch, close_QMARK_);
  return ch;
};
cljs.core.async.tap.cljs$lang$maxFixedArity = 3;
cljs.core.async.untap = function cljs$core$async$untap(mult, ch) {
  return cljs.core.async.untap_STAR_.call(null, mult, ch);
};
cljs.core.async.untap_all = function cljs$core$async$untap_all(mult) {
  return cljs.core.async.untap_all_STAR_.call(null, mult);
};
cljs.core.async.Mix = function() {
  var obj12271 = {};
  return obj12271;
}();
cljs.core.async.admix_STAR_ = function cljs$core$async$admix_STAR_(m, ch) {
  if (function() {
    var and__4297__auto__ = m;
    if (and__4297__auto__) {
      return m.cljs$core$async$Mix$admix_STAR_$arity$2;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$admix_STAR_$arity$2(m, ch);
  } else {
    var x__4945__auto__ = m == null ? null : m;
    return function() {
      var or__4309__auto__ = cljs.core.async.admix_STAR_[goog.typeOf(x__4945__auto__)];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core.async.admix_STAR_["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.admix*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.unmix_STAR_ = function cljs$core$async$unmix_STAR_(m, ch) {
  if (function() {
    var and__4297__auto__ = m;
    if (and__4297__auto__) {
      return m.cljs$core$async$Mix$unmix_STAR_$arity$2;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$unmix_STAR_$arity$2(m, ch);
  } else {
    var x__4945__auto__ = m == null ? null : m;
    return function() {
      var or__4309__auto__ = cljs.core.async.unmix_STAR_[goog.typeOf(x__4945__auto__)];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core.async.unmix_STAR_["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.unmix*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.unmix_all_STAR_ = function cljs$core$async$unmix_all_STAR_(m) {
  if (function() {
    var and__4297__auto__ = m;
    if (and__4297__auto__) {
      return m.cljs$core$async$Mix$unmix_all_STAR_$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$unmix_all_STAR_$arity$1(m);
  } else {
    var x__4945__auto__ = m == null ? null : m;
    return function() {
      var or__4309__auto__ = cljs.core.async.unmix_all_STAR_[goog.typeOf(x__4945__auto__)];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core.async.unmix_all_STAR_["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.unmix-all*", m);
        }
      }
    }().call(null, m);
  }
};
cljs.core.async.toggle_STAR_ = function cljs$core$async$toggle_STAR_(m, state_map) {
  if (function() {
    var and__4297__auto__ = m;
    if (and__4297__auto__) {
      return m.cljs$core$async$Mix$toggle_STAR_$arity$2;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$toggle_STAR_$arity$2(m, state_map);
  } else {
    var x__4945__auto__ = m == null ? null : m;
    return function() {
      var or__4309__auto__ = cljs.core.async.toggle_STAR_[goog.typeOf(x__4945__auto__)];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core.async.toggle_STAR_["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.toggle*", m);
        }
      }
    }().call(null, m, state_map);
  }
};
cljs.core.async.solo_mode_STAR_ = function cljs$core$async$solo_mode_STAR_(m, mode) {
  if (function() {
    var and__4297__auto__ = m;
    if (and__4297__auto__) {
      return m.cljs$core$async$Mix$solo_mode_STAR_$arity$2;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$solo_mode_STAR_$arity$2(m, mode);
  } else {
    var x__4945__auto__ = m == null ? null : m;
    return function() {
      var or__4309__auto__ = cljs.core.async.solo_mode_STAR_[goog.typeOf(x__4945__auto__)];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core.async.solo_mode_STAR_["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.solo-mode*", m);
        }
      }
    }().call(null, m, mode);
  }
};
cljs.core.async.ioc_alts_BANG_ = function cljs$core$async$ioc_alts_BANG_() {
  var argseq__5349__auto__ = 3 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 3), 0) : null;
  return cljs.core.async.ioc_alts_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5349__auto__);
};
cljs.core.async.ioc_alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(state, cont_block, ports, p__12276) {
  var map__12277 = p__12276;
  var map__12277__$1 = cljs.core.seq_QMARK_.call(null, map__12277) ? cljs.core.apply.call(null, cljs.core.hash_map, map__12277) : map__12277;
  var opts = map__12277__$1;
  var statearr_12278_12281 = state;
  statearr_12278_12281[cljs.core.async.impl.ioc_helpers.STATE_IDX] = cont_block;
  var temp__4422__auto__ = cljs.core.async.do_alts.call(null, function(map__12277, map__12277__$1, opts) {
    return function(val) {
      var statearr_12279_12282 = state;
      statearr_12279_12282[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = val;
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
    };
  }(map__12277, map__12277__$1, opts), ports, opts);
  if (cljs.core.truth_(temp__4422__auto__)) {
    var cb = temp__4422__auto__;
    var statearr_12280_12283 = state;
    statearr_12280_12283[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
  } else {
    return null;
  }
};
cljs.core.async.ioc_alts_BANG_.cljs$lang$maxFixedArity = 3;
cljs.core.async.ioc_alts_BANG_.cljs$lang$applyTo = function(seq12272) {
  var G__12273 = cljs.core.first.call(null, seq12272);
  var seq12272__$1 = cljs.core.next.call(null, seq12272);
  var G__12274 = cljs.core.first.call(null, seq12272__$1);
  var seq12272__$2 = cljs.core.next.call(null, seq12272__$1);
  var G__12275 = cljs.core.first.call(null, seq12272__$2);
  var seq12272__$3 = cljs.core.next.call(null, seq12272__$2);
  return cljs.core.async.ioc_alts_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__12273, G__12274, G__12275, seq12272__$3);
};
cljs.core.async.mix = function cljs$core$async$mix(out) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var solo_modes = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "pause", "pause", -2095325672), null, new cljs.core.Keyword(null, "mute", "mute", 1151223646), null], null), null);
  var attrs = cljs.core.conj.call(null, solo_modes, new cljs.core.Keyword(null, "solo", "solo", -316350075));
  var solo_mode = cljs.core.atom.call(null, new cljs.core.Keyword(null, "mute", "mute", 1151223646));
  var change = cljs.core.async.chan.call(null);
  var changed = function(cs, solo_modes, attrs, solo_mode, change) {
    return function() {
      return cljs.core.async.put_BANG_.call(null, change, true);
    };
  }(cs, solo_modes, attrs, solo_mode, change);
  var pick = function(cs, solo_modes, attrs, solo_mode, change, changed) {
    return function(attr, chs) {
      return cljs.core.reduce_kv.call(null, function(cs, solo_modes, attrs, solo_mode, change, changed) {
        return function(ret, c, v) {
          if (cljs.core.truth_(attr.call(null, v))) {
            return cljs.core.conj.call(null, ret, c);
          } else {
            return ret;
          }
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed), cljs.core.PersistentHashSet.EMPTY, chs);
    };
  }(cs, solo_modes, attrs, solo_mode, change, changed);
  var calc_state = function(cs, solo_modes, attrs, solo_mode, change, changed, pick) {
    return function() {
      var chs = cljs.core.deref.call(null, cs);
      var mode = cljs.core.deref.call(null, solo_mode);
      var solos = pick.call(null, new cljs.core.Keyword(null, "solo", "solo", -316350075), chs);
      var pauses = pick.call(null, new cljs.core.Keyword(null, "pause", "pause", -2095325672), chs);
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "solos", "solos", 1441458643), solos, new cljs.core.Keyword(null, "mutes", "mutes", 1068806309), pick.call(null, new cljs.core.Keyword(null, "mute", "mute", 1151223646), chs), new cljs.core.Keyword(null, "reads", "reads", -1215067361), cljs.core.conj.call(null, cljs.core._EQ_.call(null, mode, new cljs.core.Keyword(null, "pause", "pause", -2095325672)) && !cljs.core.empty_QMARK_.call(null, solos) ? cljs.core.vec.call(null, 
      solos) : cljs.core.vec.call(null, cljs.core.remove.call(null, pauses, cljs.core.keys.call(null, chs))), change)], null);
    };
  }(cs, solo_modes, attrs, solo_mode, change, changed, pick);
  var m = function() {
    if (typeof cljs.core.async.t12403 !== "undefined") {
    } else {
      cljs.core.async.t12403 = function(change, mix, solo_mode, pick, cs, calc_state, out, changed, solo_modes, attrs, meta12404) {
        this.change = change;
        this.mix = mix;
        this.solo_mode = solo_mode;
        this.pick = pick;
        this.cs = cs;
        this.calc_state = calc_state;
        this.out = out;
        this.changed = changed;
        this.solo_modes = solo_modes;
        this.attrs = attrs;
        this.meta12404 = meta12404;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
        this.cljs$lang$protocol_mask$partition1$ = 0;
      };
      cljs.core.async.t12403.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_12405, meta12404__$1) {
          var self__ = this;
          var _12405__$1 = this;
          return new cljs.core.async.t12403(self__.change, self__.mix, self__.solo_mode, self__.pick, self__.cs, self__.calc_state, self__.out, self__.changed, self__.solo_modes, self__.attrs, meta12404__$1);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t12403.prototype.cljs$core$IMeta$_meta$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_12405) {
          var self__ = this;
          var _12405__$1 = this;
          return self__.meta12404;
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t12403.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t12403.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.out;
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t12403.prototype.cljs$core$async$Mix$ = true;
      cljs.core.async.t12403.prototype.cljs$core$async$Mix$admix_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, ch) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch, cljs.core.PersistentArrayMap.EMPTY);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t12403.prototype.cljs$core$async$Mix$unmix_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, ch) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t12403.prototype.cljs$core$async$Mix$unmix_all_STAR_$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t12403.prototype.cljs$core$async$Mix$toggle_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, state_map) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.partial.call(null, cljs.core.merge_with, cljs.core.merge), state_map);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t12403.prototype.cljs$core$async$Mix$solo_mode_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, mode) {
          var self__ = this;
          var ___$1 = this;
          if (cljs.core.truth_(self__.solo_modes.call(null, mode))) {
          } else {
            throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("mode must be one of: "), cljs.core.str(self__.solo_modes)].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "solo-modes", "solo-modes", 882180540, null), new cljs.core.Symbol(null, "mode", "mode", -2000032078, null))))].join(""));
          }
          cljs.core.reset_BANG_.call(null, self__.solo_mode, mode);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t12403.getBasis = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function() {
          return new cljs.core.PersistentVector(null, 11, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "change", "change", 477485025, null), new cljs.core.Symbol(null, "mix", "mix", 2121373763, null), new cljs.core.Symbol(null, "solo-mode", "solo-mode", 2031788074, null), new cljs.core.Symbol(null, "pick", "pick", 1300068175, null), new cljs.core.Symbol(null, "cs", "cs", -117024463, null), new cljs.core.Symbol(null, "calc-state", "calc-state", -349968968, null), new cljs.core.Symbol(null, 
          "out", "out", 729986010, null), new cljs.core.Symbol(null, "changed", "changed", -2083710852, null), new cljs.core.Symbol(null, "solo-modes", "solo-modes", 882180540, null), new cljs.core.Symbol(null, "attrs", "attrs", -450137186, null), new cljs.core.Symbol(null, "meta12404", "meta12404", -1027437519, null)], null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t12403.cljs$lang$type = true;
      cljs.core.async.t12403.cljs$lang$ctorStr = "cljs.core.async/t12403";
      cljs.core.async.t12403.cljs$lang$ctorPrWriter = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
          return cljs.core._write.call(null, writer__4889__auto__, "cljs.core.async/t12403");
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.__GT_t12403 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function cljs$core$async$mix_$___GT_t12403(change__$1, mix__$1, solo_mode__$1, pick__$1, cs__$1, calc_state__$1, out__$1, changed__$1, solo_modes__$1, attrs__$1, meta12404) {
          return new cljs.core.async.t12403(change__$1, mix__$1, solo_mode__$1, pick__$1, cs__$1, calc_state__$1, out__$1, changed__$1, solo_modes__$1, attrs__$1, meta12404);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
    }
    return new cljs.core.async.t12403(change, cljs$core$async$mix, solo_mode, pick, cs, calc_state, out, changed, solo_modes, attrs, cljs.core.PersistentArrayMap.EMPTY);
  }();
  var c__7634__auto___12522 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__7634__auto___12522, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
    return function() {
      var f__7635__auto__ = function() {
        var switch__7572__auto__ = function(c__7634__auto___12522, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
          return function(state_12475) {
            var state_val_12476 = state_12475[1];
            if (state_val_12476 === 7) {
              var inst_12419 = state_12475[7];
              var inst_12424 = cljs.core.apply.call(null, cljs.core.hash_map, inst_12419);
              var state_12475__$1 = state_12475;
              var statearr_12477_12523 = state_12475__$1;
              statearr_12477_12523[2] = inst_12424;
              statearr_12477_12523[1] = 9;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_12476 === 20) {
                var inst_12434 = state_12475[8];
                var state_12475__$1 = state_12475;
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_12475__$1, 23, out, inst_12434);
              } else {
                if (state_val_12476 === 1) {
                  var inst_12409 = state_12475[9];
                  var inst_12409__$1 = calc_state.call(null);
                  var inst_12410 = cljs.core.seq_QMARK_.call(null, inst_12409__$1);
                  var state_12475__$1 = function() {
                    var statearr_12478 = state_12475;
                    statearr_12478[9] = inst_12409__$1;
                    return statearr_12478;
                  }();
                  if (inst_12410) {
                    var statearr_12479_12524 = state_12475__$1;
                    statearr_12479_12524[1] = 2;
                  } else {
                    var statearr_12480_12525 = state_12475__$1;
                    statearr_12480_12525[1] = 3;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_12476 === 24) {
                    var inst_12427 = state_12475[10];
                    var inst_12419 = inst_12427;
                    var state_12475__$1 = function() {
                      var statearr_12481 = state_12475;
                      statearr_12481[7] = inst_12419;
                      return statearr_12481;
                    }();
                    var statearr_12482_12526 = state_12475__$1;
                    statearr_12482_12526[2] = null;
                    statearr_12482_12526[1] = 5;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_12476 === 4) {
                      var inst_12409 = state_12475[9];
                      var inst_12415 = state_12475[2];
                      var inst_12416 = cljs.core.get.call(null, inst_12415, new cljs.core.Keyword(null, "solos", "solos", 1441458643));
                      var inst_12417 = cljs.core.get.call(null, inst_12415, new cljs.core.Keyword(null, "mutes", "mutes", 1068806309));
                      var inst_12418 = cljs.core.get.call(null, inst_12415, new cljs.core.Keyword(null, "reads", "reads", -1215067361));
                      var inst_12419 = inst_12409;
                      var state_12475__$1 = function() {
                        var statearr_12483 = state_12475;
                        statearr_12483[7] = inst_12419;
                        statearr_12483[11] = inst_12417;
                        statearr_12483[12] = inst_12416;
                        statearr_12483[13] = inst_12418;
                        return statearr_12483;
                      }();
                      var statearr_12484_12527 = state_12475__$1;
                      statearr_12484_12527[2] = null;
                      statearr_12484_12527[1] = 5;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_12476 === 15) {
                        var state_12475__$1 = state_12475;
                        var statearr_12485_12528 = state_12475__$1;
                        statearr_12485_12528[2] = null;
                        statearr_12485_12528[1] = 16;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_12476 === 21) {
                          var inst_12427 = state_12475[10];
                          var inst_12419 = inst_12427;
                          var state_12475__$1 = function() {
                            var statearr_12486 = state_12475;
                            statearr_12486[7] = inst_12419;
                            return statearr_12486;
                          }();
                          var statearr_12487_12529 = state_12475__$1;
                          statearr_12487_12529[2] = null;
                          statearr_12487_12529[1] = 5;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_12476 === 13) {
                            var inst_12471 = state_12475[2];
                            var state_12475__$1 = state_12475;
                            var statearr_12488_12530 = state_12475__$1;
                            statearr_12488_12530[2] = inst_12471;
                            statearr_12488_12530[1] = 6;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_12476 === 22) {
                              var inst_12469 = state_12475[2];
                              var state_12475__$1 = state_12475;
                              var statearr_12489_12531 = state_12475__$1;
                              statearr_12489_12531[2] = inst_12469;
                              statearr_12489_12531[1] = 13;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_12476 === 6) {
                                var inst_12473 = state_12475[2];
                                var state_12475__$1 = state_12475;
                                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_12475__$1, inst_12473);
                              } else {
                                if (state_val_12476 === 25) {
                                  var state_12475__$1 = state_12475;
                                  var statearr_12490_12532 = state_12475__$1;
                                  statearr_12490_12532[2] = null;
                                  statearr_12490_12532[1] = 26;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_12476 === 17) {
                                    var inst_12449 = state_12475[14];
                                    var state_12475__$1 = state_12475;
                                    var statearr_12491_12533 = state_12475__$1;
                                    statearr_12491_12533[2] = inst_12449;
                                    statearr_12491_12533[1] = 19;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_12476 === 3) {
                                      var inst_12409 = state_12475[9];
                                      var state_12475__$1 = state_12475;
                                      var statearr_12492_12534 = state_12475__$1;
                                      statearr_12492_12534[2] = inst_12409;
                                      statearr_12492_12534[1] = 4;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_12476 === 12) {
                                        var inst_12449 = state_12475[14];
                                        var inst_12428 = state_12475[15];
                                        var inst_12435 = state_12475[16];
                                        var inst_12449__$1 = inst_12428.call(null, inst_12435);
                                        var state_12475__$1 = function() {
                                          var statearr_12493 = state_12475;
                                          statearr_12493[14] = inst_12449__$1;
                                          return statearr_12493;
                                        }();
                                        if (cljs.core.truth_(inst_12449__$1)) {
                                          var statearr_12494_12535 = state_12475__$1;
                                          statearr_12494_12535[1] = 17;
                                        } else {
                                          var statearr_12495_12536 = state_12475__$1;
                                          statearr_12495_12536[1] = 18;
                                        }
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_12476 === 2) {
                                          var inst_12409 = state_12475[9];
                                          var inst_12412 = cljs.core.apply.call(null, cljs.core.hash_map, inst_12409);
                                          var state_12475__$1 = state_12475;
                                          var statearr_12496_12537 = state_12475__$1;
                                          statearr_12496_12537[2] = inst_12412;
                                          statearr_12496_12537[1] = 4;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_12476 === 23) {
                                            var inst_12460 = state_12475[2];
                                            var state_12475__$1 = state_12475;
                                            if (cljs.core.truth_(inst_12460)) {
                                              var statearr_12497_12538 = state_12475__$1;
                                              statearr_12497_12538[1] = 24;
                                            } else {
                                              var statearr_12498_12539 = state_12475__$1;
                                              statearr_12498_12539[1] = 25;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_12476 === 19) {
                                              var inst_12457 = state_12475[2];
                                              var state_12475__$1 = state_12475;
                                              if (cljs.core.truth_(inst_12457)) {
                                                var statearr_12499_12540 = state_12475__$1;
                                                statearr_12499_12540[1] = 20;
                                              } else {
                                                var statearr_12500_12541 = state_12475__$1;
                                                statearr_12500_12541[1] = 21;
                                              }
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_12476 === 11) {
                                                var inst_12434 = state_12475[8];
                                                var inst_12440 = inst_12434 == null;
                                                var state_12475__$1 = state_12475;
                                                if (cljs.core.truth_(inst_12440)) {
                                                  var statearr_12501_12542 = state_12475__$1;
                                                  statearr_12501_12542[1] = 14;
                                                } else {
                                                  var statearr_12502_12543 = state_12475__$1;
                                                  statearr_12502_12543[1] = 15;
                                                }
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_12476 === 9) {
                                                  var inst_12427 = state_12475[10];
                                                  var inst_12427__$1 = state_12475[2];
                                                  var inst_12428 = cljs.core.get.call(null, inst_12427__$1, new cljs.core.Keyword(null, "solos", "solos", 1441458643));
                                                  var inst_12429 = cljs.core.get.call(null, inst_12427__$1, new cljs.core.Keyword(null, "mutes", "mutes", 1068806309));
                                                  var inst_12430 = cljs.core.get.call(null, inst_12427__$1, new cljs.core.Keyword(null, "reads", "reads", -1215067361));
                                                  var state_12475__$1 = function() {
                                                    var statearr_12503 = state_12475;
                                                    statearr_12503[10] = inst_12427__$1;
                                                    statearr_12503[15] = inst_12428;
                                                    statearr_12503[17] = inst_12429;
                                                    return statearr_12503;
                                                  }();
                                                  return cljs.core.async.ioc_alts_BANG_.call(null, state_12475__$1, 10, inst_12430);
                                                } else {
                                                  if (state_val_12476 === 5) {
                                                    var inst_12419 = state_12475[7];
                                                    var inst_12422 = cljs.core.seq_QMARK_.call(null, inst_12419);
                                                    var state_12475__$1 = state_12475;
                                                    if (inst_12422) {
                                                      var statearr_12504_12544 = state_12475__$1;
                                                      statearr_12504_12544[1] = 7;
                                                    } else {
                                                      var statearr_12505_12545 = state_12475__$1;
                                                      statearr_12505_12545[1] = 8;
                                                    }
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_12476 === 14) {
                                                      var inst_12435 = state_12475[16];
                                                      var inst_12442 = cljs.core.swap_BANG_.call(null, cs, cljs.core.dissoc, inst_12435);
                                                      var state_12475__$1 = state_12475;
                                                      var statearr_12506_12546 = state_12475__$1;
                                                      statearr_12506_12546[2] = inst_12442;
                                                      statearr_12506_12546[1] = 16;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_12476 === 26) {
                                                        var inst_12465 = state_12475[2];
                                                        var state_12475__$1 = state_12475;
                                                        var statearr_12507_12547 = state_12475__$1;
                                                        statearr_12507_12547[2] = inst_12465;
                                                        statearr_12507_12547[1] = 22;
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_12476 === 16) {
                                                          var inst_12445 = state_12475[2];
                                                          var inst_12446 = calc_state.call(null);
                                                          var inst_12419 = inst_12446;
                                                          var state_12475__$1 = function() {
                                                            var statearr_12508 = state_12475;
                                                            statearr_12508[7] = inst_12419;
                                                            statearr_12508[18] = inst_12445;
                                                            return statearr_12508;
                                                          }();
                                                          var statearr_12509_12548 = state_12475__$1;
                                                          statearr_12509_12548[2] = null;
                                                          statearr_12509_12548[1] = 5;
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          if (state_val_12476 === 10) {
                                                            var inst_12434 = state_12475[8];
                                                            var inst_12435 = state_12475[16];
                                                            var inst_12433 = state_12475[2];
                                                            var inst_12434__$1 = cljs.core.nth.call(null, inst_12433, 0, null);
                                                            var inst_12435__$1 = cljs.core.nth.call(null, inst_12433, 1, null);
                                                            var inst_12436 = inst_12434__$1 == null;
                                                            var inst_12437 = cljs.core._EQ_.call(null, inst_12435__$1, change);
                                                            var inst_12438 = inst_12436 || inst_12437;
                                                            var state_12475__$1 = function() {
                                                              var statearr_12510 = state_12475;
                                                              statearr_12510[8] = inst_12434__$1;
                                                              statearr_12510[16] = inst_12435__$1;
                                                              return statearr_12510;
                                                            }();
                                                            if (cljs.core.truth_(inst_12438)) {
                                                              var statearr_12511_12549 = state_12475__$1;
                                                              statearr_12511_12549[1] = 11;
                                                            } else {
                                                              var statearr_12512_12550 = state_12475__$1;
                                                              statearr_12512_12550[1] = 12;
                                                            }
                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                          } else {
                                                            if (state_val_12476 === 18) {
                                                              var inst_12428 = state_12475[15];
                                                              var inst_12429 = state_12475[17];
                                                              var inst_12435 = state_12475[16];
                                                              var inst_12452 = cljs.core.empty_QMARK_.call(null, inst_12428);
                                                              var inst_12453 = inst_12429.call(null, inst_12435);
                                                              var inst_12454 = cljs.core.not.call(null, inst_12453);
                                                              var inst_12455 = inst_12452 && inst_12454;
                                                              var state_12475__$1 = state_12475;
                                                              var statearr_12513_12551 = state_12475__$1;
                                                              statearr_12513_12551[2] = inst_12455;
                                                              statearr_12513_12551[1] = 19;
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              if (state_val_12476 === 8) {
                                                                var inst_12419 = state_12475[7];
                                                                var state_12475__$1 = state_12475;
                                                                var statearr_12514_12552 = state_12475__$1;
                                                                statearr_12514_12552[2] = inst_12419;
                                                                statearr_12514_12552[1] = 9;
                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                              } else {
                                                                return null;
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__7634__auto___12522, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m);
        return function(switch__7572__auto__, c__7634__auto___12522, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
          return function() {
            var cljs$core$async$mix_$_state_machine__7573__auto__ = null;
            var cljs$core$async$mix_$_state_machine__7573__auto____0 = function() {
              var statearr_12518 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_12518[0] = cljs$core$async$mix_$_state_machine__7573__auto__;
              statearr_12518[1] = 1;
              return statearr_12518;
            };
            var cljs$core$async$mix_$_state_machine__7573__auto____1 = function(state_12475) {
              while (true) {
                var ret_value__7574__auto__ = function() {
                  try {
                    while (true) {
                      var result__7575__auto__ = switch__7572__auto__.call(null, state_12475);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__7575__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__7575__auto__;
                      }
                      break;
                    }
                  } catch (e12519) {
                    if (e12519 instanceof Object) {
                      var ex__7576__auto__ = e12519;
                      var statearr_12520_12553 = state_12475;
                      statearr_12520_12553[5] = ex__7576__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_12475);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e12519;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7574__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__12554 = state_12475;
                  state_12475 = G__12554;
                  continue;
                } else {
                  return ret_value__7574__auto__;
                }
                break;
              }
            };
            cljs$core$async$mix_$_state_machine__7573__auto__ = function(state_12475) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$mix_$_state_machine__7573__auto____0.call(this);
                case 1:
                  return cljs$core$async$mix_$_state_machine__7573__auto____1.call(this, state_12475);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$mix_$_state_machine__7573__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$mix_$_state_machine__7573__auto____0;
            cljs$core$async$mix_$_state_machine__7573__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$mix_$_state_machine__7573__auto____1;
            return cljs$core$async$mix_$_state_machine__7573__auto__;
          }();
        }(switch__7572__auto__, c__7634__auto___12522, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m);
      }();
      var state__7636__auto__ = function() {
        var statearr_12521 = f__7635__auto__.call(null);
        statearr_12521[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7634__auto___12522;
        return statearr_12521;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7636__auto__);
    };
  }(c__7634__auto___12522, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m));
  return m;
};
cljs.core.async.admix = function cljs$core$async$admix(mix, ch) {
  return cljs.core.async.admix_STAR_.call(null, mix, ch);
};
cljs.core.async.unmix = function cljs$core$async$unmix(mix, ch) {
  return cljs.core.async.unmix_STAR_.call(null, mix, ch);
};
cljs.core.async.unmix_all = function cljs$core$async$unmix_all(mix) {
  return cljs.core.async.unmix_all_STAR_.call(null, mix);
};
cljs.core.async.toggle = function cljs$core$async$toggle(mix, state_map) {
  return cljs.core.async.toggle_STAR_.call(null, mix, state_map);
};
cljs.core.async.solo_mode = function cljs$core$async$solo_mode(mix, mode) {
  return cljs.core.async.solo_mode_STAR_.call(null, mix, mode);
};
cljs.core.async.Pub = function() {
  var obj12556 = {};
  return obj12556;
}();
cljs.core.async.sub_STAR_ = function cljs$core$async$sub_STAR_(p, v, ch, close_QMARK_) {
  if (function() {
    var and__4297__auto__ = p;
    if (and__4297__auto__) {
      return p.cljs$core$async$Pub$sub_STAR_$arity$4;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return p.cljs$core$async$Pub$sub_STAR_$arity$4(p, v, ch, close_QMARK_);
  } else {
    var x__4945__auto__ = p == null ? null : p;
    return function() {
      var or__4309__auto__ = cljs.core.async.sub_STAR_[goog.typeOf(x__4945__auto__)];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core.async.sub_STAR_["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Pub.sub*", p);
        }
      }
    }().call(null, p, v, ch, close_QMARK_);
  }
};
cljs.core.async.unsub_STAR_ = function cljs$core$async$unsub_STAR_(p, v, ch) {
  if (function() {
    var and__4297__auto__ = p;
    if (and__4297__auto__) {
      return p.cljs$core$async$Pub$unsub_STAR_$arity$3;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return p.cljs$core$async$Pub$unsub_STAR_$arity$3(p, v, ch);
  } else {
    var x__4945__auto__ = p == null ? null : p;
    return function() {
      var or__4309__auto__ = cljs.core.async.unsub_STAR_[goog.typeOf(x__4945__auto__)];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core.async.unsub_STAR_["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Pub.unsub*", p);
        }
      }
    }().call(null, p, v, ch);
  }
};
cljs.core.async.unsub_all_STAR_ = function cljs$core$async$unsub_all_STAR_() {
  var G__12558 = arguments.length;
  switch(G__12558) {
    case 1:
      return cljs.core.async.unsub_all_STAR_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.unsub_all_STAR_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.unsub_all_STAR_.cljs$core$IFn$_invoke$arity$1 = function(p) {
  if (function() {
    var and__4297__auto__ = p;
    if (and__4297__auto__) {
      return p.cljs$core$async$Pub$unsub_all_STAR_$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return p.cljs$core$async$Pub$unsub_all_STAR_$arity$1(p);
  } else {
    var x__4945__auto__ = p == null ? null : p;
    return function() {
      var or__4309__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__4945__auto__)];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core.async.unsub_all_STAR_["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
        }
      }
    }().call(null, p);
  }
};
cljs.core.async.unsub_all_STAR_.cljs$core$IFn$_invoke$arity$2 = function(p, v) {
  if (function() {
    var and__4297__auto__ = p;
    if (and__4297__auto__) {
      return p.cljs$core$async$Pub$unsub_all_STAR_$arity$2;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return p.cljs$core$async$Pub$unsub_all_STAR_$arity$2(p, v);
  } else {
    var x__4945__auto__ = p == null ? null : p;
    return function() {
      var or__4309__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__4945__auto__)];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core.async.unsub_all_STAR_["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
        }
      }
    }().call(null, p, v);
  }
};
cljs.core.async.unsub_all_STAR_.cljs$lang$maxFixedArity = 2;
cljs.core.async.pub = function cljs$core$async$pub() {
  var G__12562 = arguments.length;
  switch(G__12562) {
    case 2:
      return cljs.core.async.pub.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.pub.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.pub.cljs$core$IFn$_invoke$arity$2 = function(ch, topic_fn) {
  return cljs.core.async.pub.call(null, ch, topic_fn, cljs.core.constantly.call(null, null));
};
cljs.core.async.pub.cljs$core$IFn$_invoke$arity$3 = function(ch, topic_fn, buf_fn) {
  var mults = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var ensure_mult = function(mults) {
    return function(topic) {
      var or__4309__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, mults), topic);
      if (cljs.core.truth_(or__4309__auto__)) {
        return or__4309__auto__;
      } else {
        return cljs.core.get.call(null, cljs.core.swap_BANG_.call(null, mults, function(or__4309__auto__, mults) {
          return function(p1__12560_SHARP_) {
            if (cljs.core.truth_(p1__12560_SHARP_.call(null, topic))) {
              return p1__12560_SHARP_;
            } else {
              return cljs.core.assoc.call(null, p1__12560_SHARP_, topic, cljs.core.async.mult.call(null, cljs.core.async.chan.call(null, buf_fn.call(null, topic))));
            }
          };
        }(or__4309__auto__, mults)), topic);
      }
    };
  }(mults);
  var p = function() {
    if (typeof cljs.core.async.t12563 !== "undefined") {
    } else {
      cljs.core.async.t12563 = function(ch, topic_fn, buf_fn, mults, ensure_mult, meta12564) {
        this.ch = ch;
        this.topic_fn = topic_fn;
        this.buf_fn = buf_fn;
        this.mults = mults;
        this.ensure_mult = ensure_mult;
        this.meta12564 = meta12564;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
        this.cljs$lang$protocol_mask$partition1$ = 0;
      };
      cljs.core.async.t12563.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(mults, ensure_mult) {
        return function(_12565, meta12564__$1) {
          var self__ = this;
          var _12565__$1 = this;
          return new cljs.core.async.t12563(self__.ch, self__.topic_fn, self__.buf_fn, self__.mults, self__.ensure_mult, meta12564__$1);
        };
      }(mults, ensure_mult);
      cljs.core.async.t12563.prototype.cljs$core$IMeta$_meta$arity$1 = function(mults, ensure_mult) {
        return function(_12565) {
          var self__ = this;
          var _12565__$1 = this;
          return self__.meta12564;
        };
      }(mults, ensure_mult);
      cljs.core.async.t12563.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t12563.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(mults, ensure_mult) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.ch;
        };
      }(mults, ensure_mult);
      cljs.core.async.t12563.prototype.cljs$core$async$Pub$ = true;
      cljs.core.async.t12563.prototype.cljs$core$async$Pub$sub_STAR_$arity$4 = function(mults, ensure_mult) {
        return function(p, topic, ch__$1, close_QMARK_) {
          var self__ = this;
          var p__$1 = this;
          var m = self__.ensure_mult.call(null, topic);
          return cljs.core.async.tap.call(null, m, ch__$1, close_QMARK_);
        };
      }(mults, ensure_mult);
      cljs.core.async.t12563.prototype.cljs$core$async$Pub$unsub_STAR_$arity$3 = function(mults, ensure_mult) {
        return function(p, topic, ch__$1) {
          var self__ = this;
          var p__$1 = this;
          var temp__4422__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, self__.mults), topic);
          if (cljs.core.truth_(temp__4422__auto__)) {
            var m = temp__4422__auto__;
            return cljs.core.async.untap.call(null, m, ch__$1);
          } else {
            return null;
          }
        };
      }(mults, ensure_mult);
      cljs.core.async.t12563.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$1 = function(mults, ensure_mult) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return cljs.core.reset_BANG_.call(null, self__.mults, cljs.core.PersistentArrayMap.EMPTY);
        };
      }(mults, ensure_mult);
      cljs.core.async.t12563.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$2 = function(mults, ensure_mult) {
        return function(_, topic) {
          var self__ = this;
          var ___$1 = this;
          return cljs.core.swap_BANG_.call(null, self__.mults, cljs.core.dissoc, topic);
        };
      }(mults, ensure_mult);
      cljs.core.async.t12563.getBasis = function(mults, ensure_mult) {
        return function() {
          return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "ch", "ch", 1085813622, null), new cljs.core.Symbol(null, "topic-fn", "topic-fn", -862449736, null), new cljs.core.Symbol(null, "buf-fn", "buf-fn", -1200281591, null), new cljs.core.Symbol(null, "mults", "mults", -461114485, null), new cljs.core.Symbol(null, "ensure-mult", "ensure-mult", 1796584816, null), new cljs.core.Symbol(null, "meta12564", "meta12564", 372358350, null)], 
          null);
        };
      }(mults, ensure_mult);
      cljs.core.async.t12563.cljs$lang$type = true;
      cljs.core.async.t12563.cljs$lang$ctorStr = "cljs.core.async/t12563";
      cljs.core.async.t12563.cljs$lang$ctorPrWriter = function(mults, ensure_mult) {
        return function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
          return cljs.core._write.call(null, writer__4889__auto__, "cljs.core.async/t12563");
        };
      }(mults, ensure_mult);
      cljs.core.async.__GT_t12563 = function(mults, ensure_mult) {
        return function cljs$core$async$__GT_t12563(ch__$1, topic_fn__$1, buf_fn__$1, mults__$1, ensure_mult__$1, meta12564) {
          return new cljs.core.async.t12563(ch__$1, topic_fn__$1, buf_fn__$1, mults__$1, ensure_mult__$1, meta12564);
        };
      }(mults, ensure_mult);
    }
    return new cljs.core.async.t12563(ch, topic_fn, buf_fn, mults, ensure_mult, cljs.core.PersistentArrayMap.EMPTY);
  }();
  var c__7634__auto___12686 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__7634__auto___12686, mults, ensure_mult, p) {
    return function() {
      var f__7635__auto__ = function() {
        var switch__7572__auto__ = function(c__7634__auto___12686, mults, ensure_mult, p) {
          return function(state_12637) {
            var state_val_12638 = state_12637[1];
            if (state_val_12638 === 7) {
              var inst_12633 = state_12637[2];
              var state_12637__$1 = state_12637;
              var statearr_12639_12687 = state_12637__$1;
              statearr_12639_12687[2] = inst_12633;
              statearr_12639_12687[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_12638 === 20) {
                var state_12637__$1 = state_12637;
                var statearr_12640_12688 = state_12637__$1;
                statearr_12640_12688[2] = null;
                statearr_12640_12688[1] = 21;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_12638 === 1) {
                  var state_12637__$1 = state_12637;
                  var statearr_12641_12689 = state_12637__$1;
                  statearr_12641_12689[2] = null;
                  statearr_12641_12689[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_12638 === 24) {
                    var inst_12616 = state_12637[7];
                    var inst_12625 = cljs.core.swap_BANG_.call(null, mults, cljs.core.dissoc, inst_12616);
                    var state_12637__$1 = state_12637;
                    var statearr_12642_12690 = state_12637__$1;
                    statearr_12642_12690[2] = inst_12625;
                    statearr_12642_12690[1] = 25;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_12638 === 4) {
                      var inst_12568 = state_12637[8];
                      var inst_12568__$1 = state_12637[2];
                      var inst_12569 = inst_12568__$1 == null;
                      var state_12637__$1 = function() {
                        var statearr_12643 = state_12637;
                        statearr_12643[8] = inst_12568__$1;
                        return statearr_12643;
                      }();
                      if (cljs.core.truth_(inst_12569)) {
                        var statearr_12644_12691 = state_12637__$1;
                        statearr_12644_12691[1] = 5;
                      } else {
                        var statearr_12645_12692 = state_12637__$1;
                        statearr_12645_12692[1] = 6;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_12638 === 15) {
                        var inst_12610 = state_12637[2];
                        var state_12637__$1 = state_12637;
                        var statearr_12646_12693 = state_12637__$1;
                        statearr_12646_12693[2] = inst_12610;
                        statearr_12646_12693[1] = 12;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_12638 === 21) {
                          var inst_12630 = state_12637[2];
                          var state_12637__$1 = function() {
                            var statearr_12647 = state_12637;
                            statearr_12647[9] = inst_12630;
                            return statearr_12647;
                          }();
                          var statearr_12648_12694 = state_12637__$1;
                          statearr_12648_12694[2] = null;
                          statearr_12648_12694[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_12638 === 13) {
                            var inst_12592 = state_12637[10];
                            var inst_12594 = cljs.core.chunked_seq_QMARK_.call(null, inst_12592);
                            var state_12637__$1 = state_12637;
                            if (inst_12594) {
                              var statearr_12649_12695 = state_12637__$1;
                              statearr_12649_12695[1] = 16;
                            } else {
                              var statearr_12650_12696 = state_12637__$1;
                              statearr_12650_12696[1] = 17;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_12638 === 22) {
                              var inst_12622 = state_12637[2];
                              var state_12637__$1 = state_12637;
                              if (cljs.core.truth_(inst_12622)) {
                                var statearr_12651_12697 = state_12637__$1;
                                statearr_12651_12697[1] = 23;
                              } else {
                                var statearr_12652_12698 = state_12637__$1;
                                statearr_12652_12698[1] = 24;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_12638 === 6) {
                                var inst_12568 = state_12637[8];
                                var inst_12618 = state_12637[11];
                                var inst_12616 = state_12637[7];
                                var inst_12616__$1 = topic_fn.call(null, inst_12568);
                                var inst_12617 = cljs.core.deref.call(null, mults);
                                var inst_12618__$1 = cljs.core.get.call(null, inst_12617, inst_12616__$1);
                                var state_12637__$1 = function() {
                                  var statearr_12653 = state_12637;
                                  statearr_12653[11] = inst_12618__$1;
                                  statearr_12653[7] = inst_12616__$1;
                                  return statearr_12653;
                                }();
                                if (cljs.core.truth_(inst_12618__$1)) {
                                  var statearr_12654_12699 = state_12637__$1;
                                  statearr_12654_12699[1] = 19;
                                } else {
                                  var statearr_12655_12700 = state_12637__$1;
                                  statearr_12655_12700[1] = 20;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_12638 === 25) {
                                  var inst_12627 = state_12637[2];
                                  var state_12637__$1 = state_12637;
                                  var statearr_12656_12701 = state_12637__$1;
                                  statearr_12656_12701[2] = inst_12627;
                                  statearr_12656_12701[1] = 21;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_12638 === 17) {
                                    var inst_12592 = state_12637[10];
                                    var inst_12601 = cljs.core.first.call(null, inst_12592);
                                    var inst_12602 = cljs.core.async.muxch_STAR_.call(null, inst_12601);
                                    var inst_12603 = cljs.core.async.close_BANG_.call(null, inst_12602);
                                    var inst_12604 = cljs.core.next.call(null, inst_12592);
                                    var inst_12578 = inst_12604;
                                    var inst_12579 = null;
                                    var inst_12580 = 0;
                                    var inst_12581 = 0;
                                    var state_12637__$1 = function() {
                                      var statearr_12657 = state_12637;
                                      statearr_12657[12] = inst_12581;
                                      statearr_12657[13] = inst_12579;
                                      statearr_12657[14] = inst_12603;
                                      statearr_12657[15] = inst_12578;
                                      statearr_12657[16] = inst_12580;
                                      return statearr_12657;
                                    }();
                                    var statearr_12658_12702 = state_12637__$1;
                                    statearr_12658_12702[2] = null;
                                    statearr_12658_12702[1] = 8;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_12638 === 3) {
                                      var inst_12635 = state_12637[2];
                                      var state_12637__$1 = state_12637;
                                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_12637__$1, inst_12635);
                                    } else {
                                      if (state_val_12638 === 12) {
                                        var inst_12612 = state_12637[2];
                                        var state_12637__$1 = state_12637;
                                        var statearr_12659_12703 = state_12637__$1;
                                        statearr_12659_12703[2] = inst_12612;
                                        statearr_12659_12703[1] = 9;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_12638 === 2) {
                                          var state_12637__$1 = state_12637;
                                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_12637__$1, 4, ch);
                                        } else {
                                          if (state_val_12638 === 23) {
                                            var state_12637__$1 = state_12637;
                                            var statearr_12660_12704 = state_12637__$1;
                                            statearr_12660_12704[2] = null;
                                            statearr_12660_12704[1] = 25;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_12638 === 19) {
                                              var inst_12568 = state_12637[8];
                                              var inst_12618 = state_12637[11];
                                              var inst_12620 = cljs.core.async.muxch_STAR_.call(null, inst_12618);
                                              var state_12637__$1 = state_12637;
                                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_12637__$1, 22, inst_12620, inst_12568);
                                            } else {
                                              if (state_val_12638 === 11) {
                                                var inst_12592 = state_12637[10];
                                                var inst_12578 = state_12637[15];
                                                var inst_12592__$1 = cljs.core.seq.call(null, inst_12578);
                                                var state_12637__$1 = function() {
                                                  var statearr_12661 = state_12637;
                                                  statearr_12661[10] = inst_12592__$1;
                                                  return statearr_12661;
                                                }();
                                                if (inst_12592__$1) {
                                                  var statearr_12662_12705 = state_12637__$1;
                                                  statearr_12662_12705[1] = 13;
                                                } else {
                                                  var statearr_12663_12706 = state_12637__$1;
                                                  statearr_12663_12706[1] = 14;
                                                }
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_12638 === 9) {
                                                  var inst_12614 = state_12637[2];
                                                  var state_12637__$1 = state_12637;
                                                  var statearr_12664_12707 = state_12637__$1;
                                                  statearr_12664_12707[2] = inst_12614;
                                                  statearr_12664_12707[1] = 7;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_12638 === 5) {
                                                    var inst_12575 = cljs.core.deref.call(null, mults);
                                                    var inst_12576 = cljs.core.vals.call(null, inst_12575);
                                                    var inst_12577 = cljs.core.seq.call(null, inst_12576);
                                                    var inst_12578 = inst_12577;
                                                    var inst_12579 = null;
                                                    var inst_12580 = 0;
                                                    var inst_12581 = 0;
                                                    var state_12637__$1 = function() {
                                                      var statearr_12665 = state_12637;
                                                      statearr_12665[12] = inst_12581;
                                                      statearr_12665[13] = inst_12579;
                                                      statearr_12665[15] = inst_12578;
                                                      statearr_12665[16] = inst_12580;
                                                      return statearr_12665;
                                                    }();
                                                    var statearr_12666_12708 = state_12637__$1;
                                                    statearr_12666_12708[2] = null;
                                                    statearr_12666_12708[1] = 8;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_12638 === 14) {
                                                      var state_12637__$1 = state_12637;
                                                      var statearr_12670_12709 = state_12637__$1;
                                                      statearr_12670_12709[2] = null;
                                                      statearr_12670_12709[1] = 15;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_12638 === 16) {
                                                        var inst_12592 = state_12637[10];
                                                        var inst_12596 = cljs.core.chunk_first.call(null, inst_12592);
                                                        var inst_12597 = cljs.core.chunk_rest.call(null, inst_12592);
                                                        var inst_12598 = cljs.core.count.call(null, inst_12596);
                                                        var inst_12578 = inst_12597;
                                                        var inst_12579 = inst_12596;
                                                        var inst_12580 = inst_12598;
                                                        var inst_12581 = 0;
                                                        var state_12637__$1 = function() {
                                                          var statearr_12671 = state_12637;
                                                          statearr_12671[12] = inst_12581;
                                                          statearr_12671[13] = inst_12579;
                                                          statearr_12671[15] = inst_12578;
                                                          statearr_12671[16] = inst_12580;
                                                          return statearr_12671;
                                                        }();
                                                        var statearr_12672_12710 = state_12637__$1;
                                                        statearr_12672_12710[2] = null;
                                                        statearr_12672_12710[1] = 8;
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_12638 === 10) {
                                                          var inst_12581 = state_12637[12];
                                                          var inst_12579 = state_12637[13];
                                                          var inst_12578 = state_12637[15];
                                                          var inst_12580 = state_12637[16];
                                                          var inst_12586 = cljs.core._nth.call(null, inst_12579, inst_12581);
                                                          var inst_12587 = cljs.core.async.muxch_STAR_.call(null, inst_12586);
                                                          var inst_12588 = cljs.core.async.close_BANG_.call(null, inst_12587);
                                                          var inst_12589 = inst_12581 + 1;
                                                          var tmp12667 = inst_12579;
                                                          var tmp12668 = inst_12578;
                                                          var tmp12669 = inst_12580;
                                                          var inst_12578__$1 = tmp12668;
                                                          var inst_12579__$1 = tmp12667;
                                                          var inst_12580__$1 = tmp12669;
                                                          var inst_12581__$1 = inst_12589;
                                                          var state_12637__$1 = function() {
                                                            var statearr_12673 = state_12637;
                                                            statearr_12673[12] = inst_12581__$1;
                                                            statearr_12673[13] = inst_12579__$1;
                                                            statearr_12673[17] = inst_12588;
                                                            statearr_12673[15] = inst_12578__$1;
                                                            statearr_12673[16] = inst_12580__$1;
                                                            return statearr_12673;
                                                          }();
                                                          var statearr_12674_12711 = state_12637__$1;
                                                          statearr_12674_12711[2] = null;
                                                          statearr_12674_12711[1] = 8;
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          if (state_val_12638 === 18) {
                                                            var inst_12607 = state_12637[2];
                                                            var state_12637__$1 = state_12637;
                                                            var statearr_12675_12712 = state_12637__$1;
                                                            statearr_12675_12712[2] = inst_12607;
                                                            statearr_12675_12712[1] = 15;
                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                          } else {
                                                            if (state_val_12638 === 8) {
                                                              var inst_12581 = state_12637[12];
                                                              var inst_12580 = state_12637[16];
                                                              var inst_12583 = inst_12581 < inst_12580;
                                                              var inst_12584 = inst_12583;
                                                              var state_12637__$1 = state_12637;
                                                              if (cljs.core.truth_(inst_12584)) {
                                                                var statearr_12676_12713 = state_12637__$1;
                                                                statearr_12676_12713[1] = 10;
                                                              } else {
                                                                var statearr_12677_12714 = state_12637__$1;
                                                                statearr_12677_12714[1] = 11;
                                                              }
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              return null;
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__7634__auto___12686, mults, ensure_mult, p);
        return function(switch__7572__auto__, c__7634__auto___12686, mults, ensure_mult, p) {
          return function() {
            var cljs$core$async$state_machine__7573__auto__ = null;
            var cljs$core$async$state_machine__7573__auto____0 = function() {
              var statearr_12681 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_12681[0] = cljs$core$async$state_machine__7573__auto__;
              statearr_12681[1] = 1;
              return statearr_12681;
            };
            var cljs$core$async$state_machine__7573__auto____1 = function(state_12637) {
              while (true) {
                var ret_value__7574__auto__ = function() {
                  try {
                    while (true) {
                      var result__7575__auto__ = switch__7572__auto__.call(null, state_12637);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__7575__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__7575__auto__;
                      }
                      break;
                    }
                  } catch (e12682) {
                    if (e12682 instanceof Object) {
                      var ex__7576__auto__ = e12682;
                      var statearr_12683_12715 = state_12637;
                      statearr_12683_12715[5] = ex__7576__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_12637);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e12682;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7574__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__12716 = state_12637;
                  state_12637 = G__12716;
                  continue;
                } else {
                  return ret_value__7574__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__7573__auto__ = function(state_12637) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__7573__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__7573__auto____1.call(this, state_12637);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__7573__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__7573__auto____0;
            cljs$core$async$state_machine__7573__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__7573__auto____1;
            return cljs$core$async$state_machine__7573__auto__;
          }();
        }(switch__7572__auto__, c__7634__auto___12686, mults, ensure_mult, p);
      }();
      var state__7636__auto__ = function() {
        var statearr_12684 = f__7635__auto__.call(null);
        statearr_12684[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7634__auto___12686;
        return statearr_12684;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7636__auto__);
    };
  }(c__7634__auto___12686, mults, ensure_mult, p));
  return p;
};
cljs.core.async.pub.cljs$lang$maxFixedArity = 3;
cljs.core.async.sub = function cljs$core$async$sub() {
  var G__12718 = arguments.length;
  switch(G__12718) {
    case 3:
      return cljs.core.async.sub.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.async.sub.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.sub.cljs$core$IFn$_invoke$arity$3 = function(p, topic, ch) {
  return cljs.core.async.sub.call(null, p, topic, ch, true);
};
cljs.core.async.sub.cljs$core$IFn$_invoke$arity$4 = function(p, topic, ch, close_QMARK_) {
  return cljs.core.async.sub_STAR_.call(null, p, topic, ch, close_QMARK_);
};
cljs.core.async.sub.cljs$lang$maxFixedArity = 4;
cljs.core.async.unsub = function cljs$core$async$unsub(p, topic, ch) {
  return cljs.core.async.unsub_STAR_.call(null, p, topic, ch);
};
cljs.core.async.unsub_all = function cljs$core$async$unsub_all() {
  var G__12721 = arguments.length;
  switch(G__12721) {
    case 1:
      return cljs.core.async.unsub_all.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.unsub_all.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.unsub_all.cljs$core$IFn$_invoke$arity$1 = function(p) {
  return cljs.core.async.unsub_all_STAR_.call(null, p);
};
cljs.core.async.unsub_all.cljs$core$IFn$_invoke$arity$2 = function(p, topic) {
  return cljs.core.async.unsub_all_STAR_.call(null, p, topic);
};
cljs.core.async.unsub_all.cljs$lang$maxFixedArity = 2;
cljs.core.async.map = function cljs$core$async$map() {
  var G__12724 = arguments.length;
  switch(G__12724) {
    case 2:
      return cljs.core.async.map.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.map.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.map.cljs$core$IFn$_invoke$arity$2 = function(f, chs) {
  return cljs.core.async.map.call(null, f, chs, null);
};
cljs.core.async.map.cljs$core$IFn$_invoke$arity$3 = function(f, chs, buf_or_n) {
  var chs__$1 = cljs.core.vec.call(null, chs);
  var out = cljs.core.async.chan.call(null, buf_or_n);
  var cnt = cljs.core.count.call(null, chs__$1);
  var rets = cljs.core.object_array.call(null, cnt);
  var dchan = cljs.core.async.chan.call(null, 1);
  var dctr = cljs.core.atom.call(null, null);
  var done = cljs.core.mapv.call(null, function(chs__$1, out, cnt, rets, dchan, dctr) {
    return function(i) {
      return function(chs__$1, out, cnt, rets, dchan, dctr) {
        return function(ret) {
          rets[i] = ret;
          if (cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
            return cljs.core.async.put_BANG_.call(null, dchan, rets.slice(0));
          } else {
            return null;
          }
        };
      }(chs__$1, out, cnt, rets, dchan, dctr);
    };
  }(chs__$1, out, cnt, rets, dchan, dctr), cljs.core.range.call(null, cnt));
  var c__7634__auto___12794 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__7634__auto___12794, chs__$1, out, cnt, rets, dchan, dctr, done) {
    return function() {
      var f__7635__auto__ = function() {
        var switch__7572__auto__ = function(c__7634__auto___12794, chs__$1, out, cnt, rets, dchan, dctr, done) {
          return function(state_12763) {
            var state_val_12764 = state_12763[1];
            if (state_val_12764 === 7) {
              var state_12763__$1 = state_12763;
              var statearr_12765_12795 = state_12763__$1;
              statearr_12765_12795[2] = null;
              statearr_12765_12795[1] = 8;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_12764 === 1) {
                var state_12763__$1 = state_12763;
                var statearr_12766_12796 = state_12763__$1;
                statearr_12766_12796[2] = null;
                statearr_12766_12796[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_12764 === 4) {
                  var inst_12727 = state_12763[7];
                  var inst_12729 = inst_12727 < cnt;
                  var state_12763__$1 = state_12763;
                  if (cljs.core.truth_(inst_12729)) {
                    var statearr_12767_12797 = state_12763__$1;
                    statearr_12767_12797[1] = 6;
                  } else {
                    var statearr_12768_12798 = state_12763__$1;
                    statearr_12768_12798[1] = 7;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_12764 === 15) {
                    var inst_12759 = state_12763[2];
                    var state_12763__$1 = state_12763;
                    var statearr_12769_12799 = state_12763__$1;
                    statearr_12769_12799[2] = inst_12759;
                    statearr_12769_12799[1] = 3;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_12764 === 13) {
                      var inst_12752 = cljs.core.async.close_BANG_.call(null, out);
                      var state_12763__$1 = state_12763;
                      var statearr_12770_12800 = state_12763__$1;
                      statearr_12770_12800[2] = inst_12752;
                      statearr_12770_12800[1] = 15;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_12764 === 6) {
                        var state_12763__$1 = state_12763;
                        var statearr_12771_12801 = state_12763__$1;
                        statearr_12771_12801[2] = null;
                        statearr_12771_12801[1] = 11;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_12764 === 3) {
                          var inst_12761 = state_12763[2];
                          var state_12763__$1 = state_12763;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_12763__$1, inst_12761);
                        } else {
                          if (state_val_12764 === 12) {
                            var inst_12749 = state_12763[8];
                            var inst_12749__$1 = state_12763[2];
                            var inst_12750 = cljs.core.some.call(null, cljs.core.nil_QMARK_, inst_12749__$1);
                            var state_12763__$1 = function() {
                              var statearr_12772 = state_12763;
                              statearr_12772[8] = inst_12749__$1;
                              return statearr_12772;
                            }();
                            if (cljs.core.truth_(inst_12750)) {
                              var statearr_12773_12802 = state_12763__$1;
                              statearr_12773_12802[1] = 13;
                            } else {
                              var statearr_12774_12803 = state_12763__$1;
                              statearr_12774_12803[1] = 14;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_12764 === 2) {
                              var inst_12726 = cljs.core.reset_BANG_.call(null, dctr, cnt);
                              var inst_12727 = 0;
                              var state_12763__$1 = function() {
                                var statearr_12775 = state_12763;
                                statearr_12775[9] = inst_12726;
                                statearr_12775[7] = inst_12727;
                                return statearr_12775;
                              }();
                              var statearr_12776_12804 = state_12763__$1;
                              statearr_12776_12804[2] = null;
                              statearr_12776_12804[1] = 4;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_12764 === 11) {
                                var inst_12727 = state_12763[7];
                                var _ = cljs.core.async.impl.ioc_helpers.add_exception_frame.call(null, state_12763, 10, Object, null, 9);
                                var inst_12736 = chs__$1.call(null, inst_12727);
                                var inst_12737 = done.call(null, inst_12727);
                                var inst_12738 = cljs.core.async.take_BANG_.call(null, inst_12736, inst_12737);
                                var state_12763__$1 = state_12763;
                                var statearr_12777_12805 = state_12763__$1;
                                statearr_12777_12805[2] = inst_12738;
                                cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_12763__$1);
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_12764 === 9) {
                                  var inst_12727 = state_12763[7];
                                  var inst_12740 = state_12763[2];
                                  var inst_12741 = inst_12727 + 1;
                                  var inst_12727__$1 = inst_12741;
                                  var state_12763__$1 = function() {
                                    var statearr_12778 = state_12763;
                                    statearr_12778[10] = inst_12740;
                                    statearr_12778[7] = inst_12727__$1;
                                    return statearr_12778;
                                  }();
                                  var statearr_12779_12806 = state_12763__$1;
                                  statearr_12779_12806[2] = null;
                                  statearr_12779_12806[1] = 4;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_12764 === 5) {
                                    var inst_12747 = state_12763[2];
                                    var state_12763__$1 = function() {
                                      var statearr_12780 = state_12763;
                                      statearr_12780[11] = inst_12747;
                                      return statearr_12780;
                                    }();
                                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_12763__$1, 12, dchan);
                                  } else {
                                    if (state_val_12764 === 14) {
                                      var inst_12749 = state_12763[8];
                                      var inst_12754 = cljs.core.apply.call(null, f, inst_12749);
                                      var state_12763__$1 = state_12763;
                                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_12763__$1, 16, out, inst_12754);
                                    } else {
                                      if (state_val_12764 === 16) {
                                        var inst_12756 = state_12763[2];
                                        var state_12763__$1 = function() {
                                          var statearr_12781 = state_12763;
                                          statearr_12781[12] = inst_12756;
                                          return statearr_12781;
                                        }();
                                        var statearr_12782_12807 = state_12763__$1;
                                        statearr_12782_12807[2] = null;
                                        statearr_12782_12807[1] = 2;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_12764 === 10) {
                                          var inst_12731 = state_12763[2];
                                          var inst_12732 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                                          var state_12763__$1 = function() {
                                            var statearr_12783 = state_12763;
                                            statearr_12783[13] = inst_12731;
                                            return statearr_12783;
                                          }();
                                          var statearr_12784_12808 = state_12763__$1;
                                          statearr_12784_12808[2] = inst_12732;
                                          cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_12763__$1);
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_12764 === 8) {
                                            var inst_12745 = state_12763[2];
                                            var state_12763__$1 = state_12763;
                                            var statearr_12785_12809 = state_12763__$1;
                                            statearr_12785_12809[2] = inst_12745;
                                            statearr_12785_12809[1] = 5;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            return null;
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__7634__auto___12794, chs__$1, out, cnt, rets, dchan, dctr, done);
        return function(switch__7572__auto__, c__7634__auto___12794, chs__$1, out, cnt, rets, dchan, dctr, done) {
          return function() {
            var cljs$core$async$state_machine__7573__auto__ = null;
            var cljs$core$async$state_machine__7573__auto____0 = function() {
              var statearr_12789 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_12789[0] = cljs$core$async$state_machine__7573__auto__;
              statearr_12789[1] = 1;
              return statearr_12789;
            };
            var cljs$core$async$state_machine__7573__auto____1 = function(state_12763) {
              while (true) {
                var ret_value__7574__auto__ = function() {
                  try {
                    while (true) {
                      var result__7575__auto__ = switch__7572__auto__.call(null, state_12763);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__7575__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__7575__auto__;
                      }
                      break;
                    }
                  } catch (e12790) {
                    if (e12790 instanceof Object) {
                      var ex__7576__auto__ = e12790;
                      var statearr_12791_12810 = state_12763;
                      statearr_12791_12810[5] = ex__7576__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_12763);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e12790;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7574__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__12811 = state_12763;
                  state_12763 = G__12811;
                  continue;
                } else {
                  return ret_value__7574__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__7573__auto__ = function(state_12763) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__7573__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__7573__auto____1.call(this, state_12763);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__7573__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__7573__auto____0;
            cljs$core$async$state_machine__7573__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__7573__auto____1;
            return cljs$core$async$state_machine__7573__auto__;
          }();
        }(switch__7572__auto__, c__7634__auto___12794, chs__$1, out, cnt, rets, dchan, dctr, done);
      }();
      var state__7636__auto__ = function() {
        var statearr_12792 = f__7635__auto__.call(null);
        statearr_12792[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7634__auto___12794;
        return statearr_12792;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7636__auto__);
    };
  }(c__7634__auto___12794, chs__$1, out, cnt, rets, dchan, dctr, done));
  return out;
};
cljs.core.async.map.cljs$lang$maxFixedArity = 3;
cljs.core.async.merge = function cljs$core$async$merge() {
  var G__12814 = arguments.length;
  switch(G__12814) {
    case 1:
      return cljs.core.async.merge.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.merge.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.merge.cljs$core$IFn$_invoke$arity$1 = function(chs) {
  return cljs.core.async.merge.call(null, chs, null);
};
cljs.core.async.merge.cljs$core$IFn$_invoke$arity$2 = function(chs, buf_or_n) {
  var out = cljs.core.async.chan.call(null, buf_or_n);
  var c__7634__auto___12869 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__7634__auto___12869, out) {
    return function() {
      var f__7635__auto__ = function() {
        var switch__7572__auto__ = function(c__7634__auto___12869, out) {
          return function(state_12844) {
            var state_val_12845 = state_12844[1];
            if (state_val_12845 === 7) {
              var inst_12823 = state_12844[7];
              var inst_12824 = state_12844[8];
              var inst_12823__$1 = state_12844[2];
              var inst_12824__$1 = cljs.core.nth.call(null, inst_12823__$1, 0, null);
              var inst_12825 = cljs.core.nth.call(null, inst_12823__$1, 1, null);
              var inst_12826 = inst_12824__$1 == null;
              var state_12844__$1 = function() {
                var statearr_12846 = state_12844;
                statearr_12846[7] = inst_12823__$1;
                statearr_12846[9] = inst_12825;
                statearr_12846[8] = inst_12824__$1;
                return statearr_12846;
              }();
              if (cljs.core.truth_(inst_12826)) {
                var statearr_12847_12870 = state_12844__$1;
                statearr_12847_12870[1] = 8;
              } else {
                var statearr_12848_12871 = state_12844__$1;
                statearr_12848_12871[1] = 9;
              }
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_12845 === 1) {
                var inst_12815 = cljs.core.vec.call(null, chs);
                var inst_12816 = inst_12815;
                var state_12844__$1 = function() {
                  var statearr_12849 = state_12844;
                  statearr_12849[10] = inst_12816;
                  return statearr_12849;
                }();
                var statearr_12850_12872 = state_12844__$1;
                statearr_12850_12872[2] = null;
                statearr_12850_12872[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_12845 === 4) {
                  var inst_12816 = state_12844[10];
                  var state_12844__$1 = state_12844;
                  return cljs.core.async.ioc_alts_BANG_.call(null, state_12844__$1, 7, inst_12816);
                } else {
                  if (state_val_12845 === 6) {
                    var inst_12840 = state_12844[2];
                    var state_12844__$1 = state_12844;
                    var statearr_12851_12873 = state_12844__$1;
                    statearr_12851_12873[2] = inst_12840;
                    statearr_12851_12873[1] = 3;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_12845 === 3) {
                      var inst_12842 = state_12844[2];
                      var state_12844__$1 = state_12844;
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_12844__$1, inst_12842);
                    } else {
                      if (state_val_12845 === 2) {
                        var inst_12816 = state_12844[10];
                        var inst_12818 = cljs.core.count.call(null, inst_12816);
                        var inst_12819 = inst_12818 > 0;
                        var state_12844__$1 = state_12844;
                        if (cljs.core.truth_(inst_12819)) {
                          var statearr_12853_12874 = state_12844__$1;
                          statearr_12853_12874[1] = 4;
                        } else {
                          var statearr_12854_12875 = state_12844__$1;
                          statearr_12854_12875[1] = 5;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_12845 === 11) {
                          var inst_12816 = state_12844[10];
                          var inst_12833 = state_12844[2];
                          var tmp12852 = inst_12816;
                          var inst_12816__$1 = tmp12852;
                          var state_12844__$1 = function() {
                            var statearr_12855 = state_12844;
                            statearr_12855[11] = inst_12833;
                            statearr_12855[10] = inst_12816__$1;
                            return statearr_12855;
                          }();
                          var statearr_12856_12876 = state_12844__$1;
                          statearr_12856_12876[2] = null;
                          statearr_12856_12876[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_12845 === 9) {
                            var inst_12824 = state_12844[8];
                            var state_12844__$1 = state_12844;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_12844__$1, 11, out, inst_12824);
                          } else {
                            if (state_val_12845 === 5) {
                              var inst_12838 = cljs.core.async.close_BANG_.call(null, out);
                              var state_12844__$1 = state_12844;
                              var statearr_12857_12877 = state_12844__$1;
                              statearr_12857_12877[2] = inst_12838;
                              statearr_12857_12877[1] = 6;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_12845 === 10) {
                                var inst_12836 = state_12844[2];
                                var state_12844__$1 = state_12844;
                                var statearr_12858_12878 = state_12844__$1;
                                statearr_12858_12878[2] = inst_12836;
                                statearr_12858_12878[1] = 6;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_12845 === 8) {
                                  var inst_12823 = state_12844[7];
                                  var inst_12825 = state_12844[9];
                                  var inst_12824 = state_12844[8];
                                  var inst_12816 = state_12844[10];
                                  var inst_12828 = function() {
                                    var cs = inst_12816;
                                    var vec__12821 = inst_12823;
                                    var v = inst_12824;
                                    var c = inst_12825;
                                    return function(cs, vec__12821, v, c, inst_12823, inst_12825, inst_12824, inst_12816, state_val_12845, c__7634__auto___12869, out) {
                                      return function(p1__12812_SHARP_) {
                                        return cljs.core.not_EQ_.call(null, c, p1__12812_SHARP_);
                                      };
                                    }(cs, vec__12821, v, c, inst_12823, inst_12825, inst_12824, inst_12816, state_val_12845, c__7634__auto___12869, out);
                                  }();
                                  var inst_12829 = cljs.core.filterv.call(null, inst_12828, inst_12816);
                                  var inst_12816__$1 = inst_12829;
                                  var state_12844__$1 = function() {
                                    var statearr_12859 = state_12844;
                                    statearr_12859[10] = inst_12816__$1;
                                    return statearr_12859;
                                  }();
                                  var statearr_12860_12879 = state_12844__$1;
                                  statearr_12860_12879[2] = null;
                                  statearr_12860_12879[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__7634__auto___12869, out);
        return function(switch__7572__auto__, c__7634__auto___12869, out) {
          return function() {
            var cljs$core$async$state_machine__7573__auto__ = null;
            var cljs$core$async$state_machine__7573__auto____0 = function() {
              var statearr_12864 = [null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_12864[0] = cljs$core$async$state_machine__7573__auto__;
              statearr_12864[1] = 1;
              return statearr_12864;
            };
            var cljs$core$async$state_machine__7573__auto____1 = function(state_12844) {
              while (true) {
                var ret_value__7574__auto__ = function() {
                  try {
                    while (true) {
                      var result__7575__auto__ = switch__7572__auto__.call(null, state_12844);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__7575__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__7575__auto__;
                      }
                      break;
                    }
                  } catch (e12865) {
                    if (e12865 instanceof Object) {
                      var ex__7576__auto__ = e12865;
                      var statearr_12866_12880 = state_12844;
                      statearr_12866_12880[5] = ex__7576__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_12844);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e12865;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7574__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__12881 = state_12844;
                  state_12844 = G__12881;
                  continue;
                } else {
                  return ret_value__7574__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__7573__auto__ = function(state_12844) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__7573__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__7573__auto____1.call(this, state_12844);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__7573__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__7573__auto____0;
            cljs$core$async$state_machine__7573__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__7573__auto____1;
            return cljs$core$async$state_machine__7573__auto__;
          }();
        }(switch__7572__auto__, c__7634__auto___12869, out);
      }();
      var state__7636__auto__ = function() {
        var statearr_12867 = f__7635__auto__.call(null);
        statearr_12867[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7634__auto___12869;
        return statearr_12867;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7636__auto__);
    };
  }(c__7634__auto___12869, out));
  return out;
};
cljs.core.async.merge.cljs$lang$maxFixedArity = 2;
cljs.core.async.into = function cljs$core$async$into(coll, ch) {
  return cljs.core.async.reduce.call(null, cljs.core.conj, coll, ch);
};
cljs.core.async.take = function cljs$core$async$take() {
  var G__12883 = arguments.length;
  switch(G__12883) {
    case 2:
      return cljs.core.async.take.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.take.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.take.cljs$core$IFn$_invoke$arity$2 = function(n, ch) {
  return cljs.core.async.take.call(null, n, ch, null);
};
cljs.core.async.take.cljs$core$IFn$_invoke$arity$3 = function(n, ch, buf_or_n) {
  var out = cljs.core.async.chan.call(null, buf_or_n);
  var c__7634__auto___12931 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__7634__auto___12931, out) {
    return function() {
      var f__7635__auto__ = function() {
        var switch__7572__auto__ = function(c__7634__auto___12931, out) {
          return function(state_12907) {
            var state_val_12908 = state_12907[1];
            if (state_val_12908 === 7) {
              var inst_12889 = state_12907[7];
              var inst_12889__$1 = state_12907[2];
              var inst_12890 = inst_12889__$1 == null;
              var inst_12891 = cljs.core.not.call(null, inst_12890);
              var state_12907__$1 = function() {
                var statearr_12909 = state_12907;
                statearr_12909[7] = inst_12889__$1;
                return statearr_12909;
              }();
              if (inst_12891) {
                var statearr_12910_12932 = state_12907__$1;
                statearr_12910_12932[1] = 8;
              } else {
                var statearr_12911_12933 = state_12907__$1;
                statearr_12911_12933[1] = 9;
              }
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_12908 === 1) {
                var inst_12884 = 0;
                var state_12907__$1 = function() {
                  var statearr_12912 = state_12907;
                  statearr_12912[8] = inst_12884;
                  return statearr_12912;
                }();
                var statearr_12913_12934 = state_12907__$1;
                statearr_12913_12934[2] = null;
                statearr_12913_12934[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_12908 === 4) {
                  var state_12907__$1 = state_12907;
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_12907__$1, 7, ch);
                } else {
                  if (state_val_12908 === 6) {
                    var inst_12902 = state_12907[2];
                    var state_12907__$1 = state_12907;
                    var statearr_12914_12935 = state_12907__$1;
                    statearr_12914_12935[2] = inst_12902;
                    statearr_12914_12935[1] = 3;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_12908 === 3) {
                      var inst_12904 = state_12907[2];
                      var inst_12905 = cljs.core.async.close_BANG_.call(null, out);
                      var state_12907__$1 = function() {
                        var statearr_12915 = state_12907;
                        statearr_12915[9] = inst_12904;
                        return statearr_12915;
                      }();
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_12907__$1, inst_12905);
                    } else {
                      if (state_val_12908 === 2) {
                        var inst_12884 = state_12907[8];
                        var inst_12886 = inst_12884 < n;
                        var state_12907__$1 = state_12907;
                        if (cljs.core.truth_(inst_12886)) {
                          var statearr_12916_12936 = state_12907__$1;
                          statearr_12916_12936[1] = 4;
                        } else {
                          var statearr_12917_12937 = state_12907__$1;
                          statearr_12917_12937[1] = 5;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_12908 === 11) {
                          var inst_12884 = state_12907[8];
                          var inst_12894 = state_12907[2];
                          var inst_12895 = inst_12884 + 1;
                          var inst_12884__$1 = inst_12895;
                          var state_12907__$1 = function() {
                            var statearr_12918 = state_12907;
                            statearr_12918[8] = inst_12884__$1;
                            statearr_12918[10] = inst_12894;
                            return statearr_12918;
                          }();
                          var statearr_12919_12938 = state_12907__$1;
                          statearr_12919_12938[2] = null;
                          statearr_12919_12938[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_12908 === 9) {
                            var state_12907__$1 = state_12907;
                            var statearr_12920_12939 = state_12907__$1;
                            statearr_12920_12939[2] = null;
                            statearr_12920_12939[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_12908 === 5) {
                              var state_12907__$1 = state_12907;
                              var statearr_12921_12940 = state_12907__$1;
                              statearr_12921_12940[2] = null;
                              statearr_12921_12940[1] = 6;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_12908 === 10) {
                                var inst_12899 = state_12907[2];
                                var state_12907__$1 = state_12907;
                                var statearr_12922_12941 = state_12907__$1;
                                statearr_12922_12941[2] = inst_12899;
                                statearr_12922_12941[1] = 6;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_12908 === 8) {
                                  var inst_12889 = state_12907[7];
                                  var state_12907__$1 = state_12907;
                                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_12907__$1, 11, out, inst_12889);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__7634__auto___12931, out);
        return function(switch__7572__auto__, c__7634__auto___12931, out) {
          return function() {
            var cljs$core$async$state_machine__7573__auto__ = null;
            var cljs$core$async$state_machine__7573__auto____0 = function() {
              var statearr_12926 = [null, null, null, null, null, null, null, null, null, null, null];
              statearr_12926[0] = cljs$core$async$state_machine__7573__auto__;
              statearr_12926[1] = 1;
              return statearr_12926;
            };
            var cljs$core$async$state_machine__7573__auto____1 = function(state_12907) {
              while (true) {
                var ret_value__7574__auto__ = function() {
                  try {
                    while (true) {
                      var result__7575__auto__ = switch__7572__auto__.call(null, state_12907);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__7575__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__7575__auto__;
                      }
                      break;
                    }
                  } catch (e12927) {
                    if (e12927 instanceof Object) {
                      var ex__7576__auto__ = e12927;
                      var statearr_12928_12942 = state_12907;
                      statearr_12928_12942[5] = ex__7576__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_12907);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e12927;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7574__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__12943 = state_12907;
                  state_12907 = G__12943;
                  continue;
                } else {
                  return ret_value__7574__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__7573__auto__ = function(state_12907) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__7573__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__7573__auto____1.call(this, state_12907);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__7573__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__7573__auto____0;
            cljs$core$async$state_machine__7573__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__7573__auto____1;
            return cljs$core$async$state_machine__7573__auto__;
          }();
        }(switch__7572__auto__, c__7634__auto___12931, out);
      }();
      var state__7636__auto__ = function() {
        var statearr_12929 = f__7635__auto__.call(null);
        statearr_12929[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7634__auto___12931;
        return statearr_12929;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7636__auto__);
    };
  }(c__7634__auto___12931, out));
  return out;
};
cljs.core.async.take.cljs$lang$maxFixedArity = 3;
cljs.core.async.map_LT_ = function cljs$core$async$map_LT_(f, ch) {
  if (typeof cljs.core.async.t12951 !== "undefined") {
  } else {
    cljs.core.async.t12951 = function(map_LT_, f, ch, meta12952) {
      this.map_LT_ = map_LT_;
      this.f = f;
      this.ch = ch;
      this.meta12952 = meta12952;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.async.t12951.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_12953, meta12952__$1) {
      var self__ = this;
      var _12953__$1 = this;
      return new cljs.core.async.t12951(self__.map_LT_, self__.f, self__.ch, meta12952__$1);
    };
    cljs.core.async.t12951.prototype.cljs$core$IMeta$_meta$arity$1 = function(_12953) {
      var self__ = this;
      var _12953__$1 = this;
      return self__.meta12952;
    };
    cljs.core.async.t12951.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t12951.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t12951.prototype.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.closed_QMARK_.call(null, self__.ch);
    };
    cljs.core.async.t12951.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t12951.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, function() {
        if (typeof cljs.core.async.t12954 !== "undefined") {
        } else {
          cljs.core.async.t12954 = function(map_LT_, f, ch, meta12952, _, fn1, meta12955) {
            this.map_LT_ = map_LT_;
            this.f = f;
            this.ch = ch;
            this.meta12952 = meta12952;
            this._ = _;
            this.fn1 = fn1;
            this.meta12955 = meta12955;
            this.cljs$lang$protocol_mask$partition0$ = 393216;
            this.cljs$lang$protocol_mask$partition1$ = 0;
          };
          cljs.core.async.t12954.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(___$1) {
            return function(_12956, meta12955__$1) {
              var self__ = this;
              var _12956__$1 = this;
              return new cljs.core.async.t12954(self__.map_LT_, self__.f, self__.ch, self__.meta12952, self__._, self__.fn1, meta12955__$1);
            };
          }(___$1);
          cljs.core.async.t12954.prototype.cljs$core$IMeta$_meta$arity$1 = function(___$1) {
            return function(_12956) {
              var self__ = this;
              var _12956__$1 = this;
              return self__.meta12955;
            };
          }(___$1);
          cljs.core.async.t12954.prototype.cljs$core$async$impl$protocols$Handler$ = true;
          cljs.core.async.t12954.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(___$1) {
            return function(___$1) {
              var self__ = this;
              var ___$2 = this;
              return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.fn1);
            };
          }(___$1);
          cljs.core.async.t12954.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(___$1) {
            return function(___$1) {
              var self__ = this;
              var ___$2 = this;
              var f1 = cljs.core.async.impl.protocols.commit.call(null, self__.fn1);
              return function(f1, ___$2, ___$1) {
                return function(p1__12944_SHARP_) {
                  return f1.call(null, p1__12944_SHARP_ == null ? null : self__.f.call(null, p1__12944_SHARP_));
                };
              }(f1, ___$2, ___$1);
            };
          }(___$1);
          cljs.core.async.t12954.getBasis = function(___$1) {
            return function() {
              return new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "map\x3c", "map\x3c", -1235808357, null), new cljs.core.Symbol(null, "f", "f", 43394975, null), new cljs.core.Symbol(null, "ch", "ch", 1085813622, null), new cljs.core.Symbol(null, "meta12952", "meta12952", -582009987, null), new cljs.core.Symbol(null, "_", "_", -1201019570, null), new cljs.core.Symbol(null, "fn1", "fn1", 895834444, null), new cljs.core.Symbol(null, "meta12955", 
              "meta12955", -1463071323, null)], null);
            };
          }(___$1);
          cljs.core.async.t12954.cljs$lang$type = true;
          cljs.core.async.t12954.cljs$lang$ctorStr = "cljs.core.async/t12954";
          cljs.core.async.t12954.cljs$lang$ctorPrWriter = function(___$1) {
            return function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
              return cljs.core._write.call(null, writer__4889__auto__, "cljs.core.async/t12954");
            };
          }(___$1);
          cljs.core.async.__GT_t12954 = function(___$1) {
            return function cljs$core$async$map_LT__$___GT_t12954(map_LT___$1, f__$1, ch__$1, meta12952__$1, ___$2, fn1__$1, meta12955) {
              return new cljs.core.async.t12954(map_LT___$1, f__$1, ch__$1, meta12952__$1, ___$2, fn1__$1, meta12955);
            };
          }(___$1);
        }
        return new cljs.core.async.t12954(self__.map_LT_, self__.f, self__.ch, self__.meta12952, ___$1, fn1, cljs.core.PersistentArrayMap.EMPTY);
      }());
      if (cljs.core.truth_(function() {
        var and__4297__auto__ = ret;
        if (cljs.core.truth_(and__4297__auto__)) {
          return !(cljs.core.deref.call(null, ret) == null);
        } else {
          return and__4297__auto__;
        }
      }())) {
        return cljs.core.async.impl.channels.box.call(null, self__.f.call(null, cljs.core.deref.call(null, ret)));
      } else {
        return ret;
      }
    };
    cljs.core.async.t12951.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t12951.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn1);
    };
    cljs.core.async.t12951.getBasis = function() {
      return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "map\x3c", "map\x3c", -1235808357, null), new cljs.core.Symbol(null, "f", "f", 43394975, null), new cljs.core.Symbol(null, "ch", "ch", 1085813622, null), new cljs.core.Symbol(null, "meta12952", "meta12952", -582009987, null)], null);
    };
    cljs.core.async.t12951.cljs$lang$type = true;
    cljs.core.async.t12951.cljs$lang$ctorStr = "cljs.core.async/t12951";
    cljs.core.async.t12951.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
      return cljs.core._write.call(null, writer__4889__auto__, "cljs.core.async/t12951");
    };
    cljs.core.async.__GT_t12951 = function cljs$core$async$map_LT__$___GT_t12951(map_LT___$1, f__$1, ch__$1, meta12952) {
      return new cljs.core.async.t12951(map_LT___$1, f__$1, ch__$1, meta12952);
    };
  }
  return new cljs.core.async.t12951(cljs$core$async$map_LT_, f, ch, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.map_GT_ = function cljs$core$async$map_GT_(f, ch) {
  if (typeof cljs.core.async.t12960 !== "undefined") {
  } else {
    cljs.core.async.t12960 = function(map_GT_, f, ch, meta12961) {
      this.map_GT_ = map_GT_;
      this.f = f;
      this.ch = ch;
      this.meta12961 = meta12961;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.async.t12960.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_12962, meta12961__$1) {
      var self__ = this;
      var _12962__$1 = this;
      return new cljs.core.async.t12960(self__.map_GT_, self__.f, self__.ch, meta12961__$1);
    };
    cljs.core.async.t12960.prototype.cljs$core$IMeta$_meta$arity$1 = function(_12962) {
      var self__ = this;
      var _12962__$1 = this;
      return self__.meta12961;
    };
    cljs.core.async.t12960.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t12960.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t12960.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t12960.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1);
    };
    cljs.core.async.t12960.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t12960.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, self__.f.call(null, val), fn1);
    };
    cljs.core.async.t12960.getBasis = function() {
      return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "map\x3e", "map\x3e", 1676369295, null), new cljs.core.Symbol(null, "f", "f", 43394975, null), new cljs.core.Symbol(null, "ch", "ch", 1085813622, null), new cljs.core.Symbol(null, "meta12961", "meta12961", 1977208995, null)], null);
    };
    cljs.core.async.t12960.cljs$lang$type = true;
    cljs.core.async.t12960.cljs$lang$ctorStr = "cljs.core.async/t12960";
    cljs.core.async.t12960.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
      return cljs.core._write.call(null, writer__4889__auto__, "cljs.core.async/t12960");
    };
    cljs.core.async.__GT_t12960 = function cljs$core$async$map_GT__$___GT_t12960(map_GT___$1, f__$1, ch__$1, meta12961) {
      return new cljs.core.async.t12960(map_GT___$1, f__$1, ch__$1, meta12961);
    };
  }
  return new cljs.core.async.t12960(cljs$core$async$map_GT_, f, ch, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.filter_GT_ = function cljs$core$async$filter_GT_(p, ch) {
  if (typeof cljs.core.async.t12966 !== "undefined") {
  } else {
    cljs.core.async.t12966 = function(filter_GT_, p, ch, meta12967) {
      this.filter_GT_ = filter_GT_;
      this.p = p;
      this.ch = ch;
      this.meta12967 = meta12967;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.async.t12966.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_12968, meta12967__$1) {
      var self__ = this;
      var _12968__$1 = this;
      return new cljs.core.async.t12966(self__.filter_GT_, self__.p, self__.ch, meta12967__$1);
    };
    cljs.core.async.t12966.prototype.cljs$core$IMeta$_meta$arity$1 = function(_12968) {
      var self__ = this;
      var _12968__$1 = this;
      return self__.meta12967;
    };
    cljs.core.async.t12966.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t12966.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t12966.prototype.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.closed_QMARK_.call(null, self__.ch);
    };
    cljs.core.async.t12966.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t12966.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1);
    };
    cljs.core.async.t12966.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t12966.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn1) {
      var self__ = this;
      var ___$1 = this;
      if (cljs.core.truth_(self__.p.call(null, val))) {
        return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn1);
      } else {
        return cljs.core.async.impl.channels.box.call(null, cljs.core.not.call(null, cljs.core.async.impl.protocols.closed_QMARK_.call(null, self__.ch)));
      }
    };
    cljs.core.async.t12966.getBasis = function() {
      return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "filter\x3e", "filter\x3e", -37644455, null), new cljs.core.Symbol(null, "p", "p", 1791580836, null), new cljs.core.Symbol(null, "ch", "ch", 1085813622, null), new cljs.core.Symbol(null, "meta12967", "meta12967", -1696972169, null)], null);
    };
    cljs.core.async.t12966.cljs$lang$type = true;
    cljs.core.async.t12966.cljs$lang$ctorStr = "cljs.core.async/t12966";
    cljs.core.async.t12966.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
      return cljs.core._write.call(null, writer__4889__auto__, "cljs.core.async/t12966");
    };
    cljs.core.async.__GT_t12966 = function cljs$core$async$filter_GT__$___GT_t12966(filter_GT___$1, p__$1, ch__$1, meta12967) {
      return new cljs.core.async.t12966(filter_GT___$1, p__$1, ch__$1, meta12967);
    };
  }
  return new cljs.core.async.t12966(cljs$core$async$filter_GT_, p, ch, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.remove_GT_ = function cljs$core$async$remove_GT_(p, ch) {
  return cljs.core.async.filter_GT_.call(null, cljs.core.complement.call(null, p), ch);
};
cljs.core.async.filter_LT_ = function cljs$core$async$filter_LT_() {
  var G__12970 = arguments.length;
  switch(G__12970) {
    case 2:
      return cljs.core.async.filter_LT_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.filter_LT_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.filter_LT_.cljs$core$IFn$_invoke$arity$2 = function(p, ch) {
  return cljs.core.async.filter_LT_.call(null, p, ch, null);
};
cljs.core.async.filter_LT_.cljs$core$IFn$_invoke$arity$3 = function(p, ch, buf_or_n) {
  var out = cljs.core.async.chan.call(null, buf_or_n);
  var c__7634__auto___13013 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__7634__auto___13013, out) {
    return function() {
      var f__7635__auto__ = function() {
        var switch__7572__auto__ = function(c__7634__auto___13013, out) {
          return function(state_12991) {
            var state_val_12992 = state_12991[1];
            if (state_val_12992 === 7) {
              var inst_12987 = state_12991[2];
              var state_12991__$1 = state_12991;
              var statearr_12993_13014 = state_12991__$1;
              statearr_12993_13014[2] = inst_12987;
              statearr_12993_13014[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_12992 === 1) {
                var state_12991__$1 = state_12991;
                var statearr_12994_13015 = state_12991__$1;
                statearr_12994_13015[2] = null;
                statearr_12994_13015[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_12992 === 4) {
                  var inst_12973 = state_12991[7];
                  var inst_12973__$1 = state_12991[2];
                  var inst_12974 = inst_12973__$1 == null;
                  var state_12991__$1 = function() {
                    var statearr_12995 = state_12991;
                    statearr_12995[7] = inst_12973__$1;
                    return statearr_12995;
                  }();
                  if (cljs.core.truth_(inst_12974)) {
                    var statearr_12996_13016 = state_12991__$1;
                    statearr_12996_13016[1] = 5;
                  } else {
                    var statearr_12997_13017 = state_12991__$1;
                    statearr_12997_13017[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_12992 === 6) {
                    var inst_12973 = state_12991[7];
                    var inst_12978 = p.call(null, inst_12973);
                    var state_12991__$1 = state_12991;
                    if (cljs.core.truth_(inst_12978)) {
                      var statearr_12998_13018 = state_12991__$1;
                      statearr_12998_13018[1] = 8;
                    } else {
                      var statearr_12999_13019 = state_12991__$1;
                      statearr_12999_13019[1] = 9;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_12992 === 3) {
                      var inst_12989 = state_12991[2];
                      var state_12991__$1 = state_12991;
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_12991__$1, inst_12989);
                    } else {
                      if (state_val_12992 === 2) {
                        var state_12991__$1 = state_12991;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_12991__$1, 4, ch);
                      } else {
                        if (state_val_12992 === 11) {
                          var inst_12981 = state_12991[2];
                          var state_12991__$1 = state_12991;
                          var statearr_13000_13020 = state_12991__$1;
                          statearr_13000_13020[2] = inst_12981;
                          statearr_13000_13020[1] = 10;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_12992 === 9) {
                            var state_12991__$1 = state_12991;
                            var statearr_13001_13021 = state_12991__$1;
                            statearr_13001_13021[2] = null;
                            statearr_13001_13021[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_12992 === 5) {
                              var inst_12976 = cljs.core.async.close_BANG_.call(null, out);
                              var state_12991__$1 = state_12991;
                              var statearr_13002_13022 = state_12991__$1;
                              statearr_13002_13022[2] = inst_12976;
                              statearr_13002_13022[1] = 7;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_12992 === 10) {
                                var inst_12984 = state_12991[2];
                                var state_12991__$1 = function() {
                                  var statearr_13003 = state_12991;
                                  statearr_13003[8] = inst_12984;
                                  return statearr_13003;
                                }();
                                var statearr_13004_13023 = state_12991__$1;
                                statearr_13004_13023[2] = null;
                                statearr_13004_13023[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_12992 === 8) {
                                  var inst_12973 = state_12991[7];
                                  var state_12991__$1 = state_12991;
                                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_12991__$1, 11, out, inst_12973);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__7634__auto___13013, out);
        return function(switch__7572__auto__, c__7634__auto___13013, out) {
          return function() {
            var cljs$core$async$state_machine__7573__auto__ = null;
            var cljs$core$async$state_machine__7573__auto____0 = function() {
              var statearr_13008 = [null, null, null, null, null, null, null, null, null];
              statearr_13008[0] = cljs$core$async$state_machine__7573__auto__;
              statearr_13008[1] = 1;
              return statearr_13008;
            };
            var cljs$core$async$state_machine__7573__auto____1 = function(state_12991) {
              while (true) {
                var ret_value__7574__auto__ = function() {
                  try {
                    while (true) {
                      var result__7575__auto__ = switch__7572__auto__.call(null, state_12991);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__7575__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__7575__auto__;
                      }
                      break;
                    }
                  } catch (e13009) {
                    if (e13009 instanceof Object) {
                      var ex__7576__auto__ = e13009;
                      var statearr_13010_13024 = state_12991;
                      statearr_13010_13024[5] = ex__7576__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_12991);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e13009;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7574__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__13025 = state_12991;
                  state_12991 = G__13025;
                  continue;
                } else {
                  return ret_value__7574__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__7573__auto__ = function(state_12991) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__7573__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__7573__auto____1.call(this, state_12991);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__7573__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__7573__auto____0;
            cljs$core$async$state_machine__7573__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__7573__auto____1;
            return cljs$core$async$state_machine__7573__auto__;
          }();
        }(switch__7572__auto__, c__7634__auto___13013, out);
      }();
      var state__7636__auto__ = function() {
        var statearr_13011 = f__7635__auto__.call(null);
        statearr_13011[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7634__auto___13013;
        return statearr_13011;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7636__auto__);
    };
  }(c__7634__auto___13013, out));
  return out;
};
cljs.core.async.filter_LT_.cljs$lang$maxFixedArity = 3;
cljs.core.async.remove_LT_ = function cljs$core$async$remove_LT_() {
  var G__13027 = arguments.length;
  switch(G__13027) {
    case 2:
      return cljs.core.async.remove_LT_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.remove_LT_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.remove_LT_.cljs$core$IFn$_invoke$arity$2 = function(p, ch) {
  return cljs.core.async.remove_LT_.call(null, p, ch, null);
};
cljs.core.async.remove_LT_.cljs$core$IFn$_invoke$arity$3 = function(p, ch, buf_or_n) {
  return cljs.core.async.filter_LT_.call(null, cljs.core.complement.call(null, p), ch, buf_or_n);
};
cljs.core.async.remove_LT_.cljs$lang$maxFixedArity = 3;
cljs.core.async.mapcat_STAR_ = function cljs$core$async$mapcat_STAR_(f, in$, out) {
  var c__7634__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__7634__auto__) {
    return function() {
      var f__7635__auto__ = function() {
        var switch__7572__auto__ = function(c__7634__auto__) {
          return function(state_13194) {
            var state_val_13195 = state_13194[1];
            if (state_val_13195 === 7) {
              var inst_13190 = state_13194[2];
              var state_13194__$1 = state_13194;
              var statearr_13196_13237 = state_13194__$1;
              statearr_13196_13237[2] = inst_13190;
              statearr_13196_13237[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_13195 === 20) {
                var inst_13160 = state_13194[7];
                var inst_13171 = state_13194[2];
                var inst_13172 = cljs.core.next.call(null, inst_13160);
                var inst_13146 = inst_13172;
                var inst_13147 = null;
                var inst_13148 = 0;
                var inst_13149 = 0;
                var state_13194__$1 = function() {
                  var statearr_13197 = state_13194;
                  statearr_13197[8] = inst_13146;
                  statearr_13197[9] = inst_13148;
                  statearr_13197[10] = inst_13149;
                  statearr_13197[11] = inst_13147;
                  statearr_13197[12] = inst_13171;
                  return statearr_13197;
                }();
                var statearr_13198_13238 = state_13194__$1;
                statearr_13198_13238[2] = null;
                statearr_13198_13238[1] = 8;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_13195 === 1) {
                  var state_13194__$1 = state_13194;
                  var statearr_13199_13239 = state_13194__$1;
                  statearr_13199_13239[2] = null;
                  statearr_13199_13239[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_13195 === 4) {
                    var inst_13135 = state_13194[13];
                    var inst_13135__$1 = state_13194[2];
                    var inst_13136 = inst_13135__$1 == null;
                    var state_13194__$1 = function() {
                      var statearr_13200 = state_13194;
                      statearr_13200[13] = inst_13135__$1;
                      return statearr_13200;
                    }();
                    if (cljs.core.truth_(inst_13136)) {
                      var statearr_13201_13240 = state_13194__$1;
                      statearr_13201_13240[1] = 5;
                    } else {
                      var statearr_13202_13241 = state_13194__$1;
                      statearr_13202_13241[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_13195 === 15) {
                      var state_13194__$1 = state_13194;
                      var statearr_13206_13242 = state_13194__$1;
                      statearr_13206_13242[2] = null;
                      statearr_13206_13242[1] = 16;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_13195 === 21) {
                        var state_13194__$1 = state_13194;
                        var statearr_13207_13243 = state_13194__$1;
                        statearr_13207_13243[2] = null;
                        statearr_13207_13243[1] = 23;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_13195 === 13) {
                          var inst_13146 = state_13194[8];
                          var inst_13148 = state_13194[9];
                          var inst_13149 = state_13194[10];
                          var inst_13147 = state_13194[11];
                          var inst_13156 = state_13194[2];
                          var inst_13157 = inst_13149 + 1;
                          var tmp13203 = inst_13146;
                          var tmp13204 = inst_13148;
                          var tmp13205 = inst_13147;
                          var inst_13146__$1 = tmp13203;
                          var inst_13147__$1 = tmp13205;
                          var inst_13148__$1 = tmp13204;
                          var inst_13149__$1 = inst_13157;
                          var state_13194__$1 = function() {
                            var statearr_13208 = state_13194;
                            statearr_13208[8] = inst_13146__$1;
                            statearr_13208[14] = inst_13156;
                            statearr_13208[9] = inst_13148__$1;
                            statearr_13208[10] = inst_13149__$1;
                            statearr_13208[11] = inst_13147__$1;
                            return statearr_13208;
                          }();
                          var statearr_13209_13244 = state_13194__$1;
                          statearr_13209_13244[2] = null;
                          statearr_13209_13244[1] = 8;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_13195 === 22) {
                            var state_13194__$1 = state_13194;
                            var statearr_13210_13245 = state_13194__$1;
                            statearr_13210_13245[2] = null;
                            statearr_13210_13245[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_13195 === 6) {
                              var inst_13135 = state_13194[13];
                              var inst_13144 = f.call(null, inst_13135);
                              var inst_13145 = cljs.core.seq.call(null, inst_13144);
                              var inst_13146 = inst_13145;
                              var inst_13147 = null;
                              var inst_13148 = 0;
                              var inst_13149 = 0;
                              var state_13194__$1 = function() {
                                var statearr_13211 = state_13194;
                                statearr_13211[8] = inst_13146;
                                statearr_13211[9] = inst_13148;
                                statearr_13211[10] = inst_13149;
                                statearr_13211[11] = inst_13147;
                                return statearr_13211;
                              }();
                              var statearr_13212_13246 = state_13194__$1;
                              statearr_13212_13246[2] = null;
                              statearr_13212_13246[1] = 8;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_13195 === 17) {
                                var inst_13160 = state_13194[7];
                                var inst_13164 = cljs.core.chunk_first.call(null, inst_13160);
                                var inst_13165 = cljs.core.chunk_rest.call(null, inst_13160);
                                var inst_13166 = cljs.core.count.call(null, inst_13164);
                                var inst_13146 = inst_13165;
                                var inst_13147 = inst_13164;
                                var inst_13148 = inst_13166;
                                var inst_13149 = 0;
                                var state_13194__$1 = function() {
                                  var statearr_13213 = state_13194;
                                  statearr_13213[8] = inst_13146;
                                  statearr_13213[9] = inst_13148;
                                  statearr_13213[10] = inst_13149;
                                  statearr_13213[11] = inst_13147;
                                  return statearr_13213;
                                }();
                                var statearr_13214_13247 = state_13194__$1;
                                statearr_13214_13247[2] = null;
                                statearr_13214_13247[1] = 8;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_13195 === 3) {
                                  var inst_13192 = state_13194[2];
                                  var state_13194__$1 = state_13194;
                                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_13194__$1, inst_13192);
                                } else {
                                  if (state_val_13195 === 12) {
                                    var inst_13180 = state_13194[2];
                                    var state_13194__$1 = state_13194;
                                    var statearr_13215_13248 = state_13194__$1;
                                    statearr_13215_13248[2] = inst_13180;
                                    statearr_13215_13248[1] = 9;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_13195 === 2) {
                                      var state_13194__$1 = state_13194;
                                      return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_13194__$1, 4, in$);
                                    } else {
                                      if (state_val_13195 === 23) {
                                        var inst_13188 = state_13194[2];
                                        var state_13194__$1 = state_13194;
                                        var statearr_13216_13249 = state_13194__$1;
                                        statearr_13216_13249[2] = inst_13188;
                                        statearr_13216_13249[1] = 7;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_13195 === 19) {
                                          var inst_13175 = state_13194[2];
                                          var state_13194__$1 = state_13194;
                                          var statearr_13217_13250 = state_13194__$1;
                                          statearr_13217_13250[2] = inst_13175;
                                          statearr_13217_13250[1] = 16;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_13195 === 11) {
                                            var inst_13146 = state_13194[8];
                                            var inst_13160 = state_13194[7];
                                            var inst_13160__$1 = cljs.core.seq.call(null, inst_13146);
                                            var state_13194__$1 = function() {
                                              var statearr_13218 = state_13194;
                                              statearr_13218[7] = inst_13160__$1;
                                              return statearr_13218;
                                            }();
                                            if (inst_13160__$1) {
                                              var statearr_13219_13251 = state_13194__$1;
                                              statearr_13219_13251[1] = 14;
                                            } else {
                                              var statearr_13220_13252 = state_13194__$1;
                                              statearr_13220_13252[1] = 15;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_13195 === 9) {
                                              var inst_13182 = state_13194[2];
                                              var inst_13183 = cljs.core.async.impl.protocols.closed_QMARK_.call(null, out);
                                              var state_13194__$1 = function() {
                                                var statearr_13221 = state_13194;
                                                statearr_13221[15] = inst_13182;
                                                return statearr_13221;
                                              }();
                                              if (cljs.core.truth_(inst_13183)) {
                                                var statearr_13222_13253 = state_13194__$1;
                                                statearr_13222_13253[1] = 21;
                                              } else {
                                                var statearr_13223_13254 = state_13194__$1;
                                                statearr_13223_13254[1] = 22;
                                              }
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_13195 === 5) {
                                                var inst_13138 = cljs.core.async.close_BANG_.call(null, out);
                                                var state_13194__$1 = state_13194;
                                                var statearr_13224_13255 = state_13194__$1;
                                                statearr_13224_13255[2] = inst_13138;
                                                statearr_13224_13255[1] = 7;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_13195 === 14) {
                                                  var inst_13160 = state_13194[7];
                                                  var inst_13162 = cljs.core.chunked_seq_QMARK_.call(null, inst_13160);
                                                  var state_13194__$1 = state_13194;
                                                  if (inst_13162) {
                                                    var statearr_13225_13256 = state_13194__$1;
                                                    statearr_13225_13256[1] = 17;
                                                  } else {
                                                    var statearr_13226_13257 = state_13194__$1;
                                                    statearr_13226_13257[1] = 18;
                                                  }
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_13195 === 16) {
                                                    var inst_13178 = state_13194[2];
                                                    var state_13194__$1 = state_13194;
                                                    var statearr_13227_13258 = state_13194__$1;
                                                    statearr_13227_13258[2] = inst_13178;
                                                    statearr_13227_13258[1] = 12;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_13195 === 10) {
                                                      var inst_13149 = state_13194[10];
                                                      var inst_13147 = state_13194[11];
                                                      var inst_13154 = cljs.core._nth.call(null, inst_13147, inst_13149);
                                                      var state_13194__$1 = state_13194;
                                                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_13194__$1, 13, out, inst_13154);
                                                    } else {
                                                      if (state_val_13195 === 18) {
                                                        var inst_13160 = state_13194[7];
                                                        var inst_13169 = cljs.core.first.call(null, inst_13160);
                                                        var state_13194__$1 = state_13194;
                                                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_13194__$1, 20, out, inst_13169);
                                                      } else {
                                                        if (state_val_13195 === 8) {
                                                          var inst_13148 = state_13194[9];
                                                          var inst_13149 = state_13194[10];
                                                          var inst_13151 = inst_13149 < inst_13148;
                                                          var inst_13152 = inst_13151;
                                                          var state_13194__$1 = state_13194;
                                                          if (cljs.core.truth_(inst_13152)) {
                                                            var statearr_13228_13259 = state_13194__$1;
                                                            statearr_13228_13259[1] = 10;
                                                          } else {
                                                            var statearr_13229_13260 = state_13194__$1;
                                                            statearr_13229_13260[1] = 11;
                                                          }
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          return null;
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__7634__auto__);
        return function(switch__7572__auto__, c__7634__auto__) {
          return function() {
            var cljs$core$async$mapcat_STAR__$_state_machine__7573__auto__ = null;
            var cljs$core$async$mapcat_STAR__$_state_machine__7573__auto____0 = function() {
              var statearr_13233 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_13233[0] = cljs$core$async$mapcat_STAR__$_state_machine__7573__auto__;
              statearr_13233[1] = 1;
              return statearr_13233;
            };
            var cljs$core$async$mapcat_STAR__$_state_machine__7573__auto____1 = function(state_13194) {
              while (true) {
                var ret_value__7574__auto__ = function() {
                  try {
                    while (true) {
                      var result__7575__auto__ = switch__7572__auto__.call(null, state_13194);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__7575__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__7575__auto__;
                      }
                      break;
                    }
                  } catch (e13234) {
                    if (e13234 instanceof Object) {
                      var ex__7576__auto__ = e13234;
                      var statearr_13235_13261 = state_13194;
                      statearr_13235_13261[5] = ex__7576__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_13194);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e13234;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7574__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__13262 = state_13194;
                  state_13194 = G__13262;
                  continue;
                } else {
                  return ret_value__7574__auto__;
                }
                break;
              }
            };
            cljs$core$async$mapcat_STAR__$_state_machine__7573__auto__ = function(state_13194) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$mapcat_STAR__$_state_machine__7573__auto____0.call(this);
                case 1:
                  return cljs$core$async$mapcat_STAR__$_state_machine__7573__auto____1.call(this, state_13194);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$mapcat_STAR__$_state_machine__7573__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$mapcat_STAR__$_state_machine__7573__auto____0;
            cljs$core$async$mapcat_STAR__$_state_machine__7573__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$mapcat_STAR__$_state_machine__7573__auto____1;
            return cljs$core$async$mapcat_STAR__$_state_machine__7573__auto__;
          }();
        }(switch__7572__auto__, c__7634__auto__);
      }();
      var state__7636__auto__ = function() {
        var statearr_13236 = f__7635__auto__.call(null);
        statearr_13236[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7634__auto__;
        return statearr_13236;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7636__auto__);
    };
  }(c__7634__auto__));
  return c__7634__auto__;
};
cljs.core.async.mapcat_LT_ = function cljs$core$async$mapcat_LT_() {
  var G__13264 = arguments.length;
  switch(G__13264) {
    case 2:
      return cljs.core.async.mapcat_LT_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.mapcat_LT_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.mapcat_LT_.cljs$core$IFn$_invoke$arity$2 = function(f, in$) {
  return cljs.core.async.mapcat_LT_.call(null, f, in$, null);
};
cljs.core.async.mapcat_LT_.cljs$core$IFn$_invoke$arity$3 = function(f, in$, buf_or_n) {
  var out = cljs.core.async.chan.call(null, buf_or_n);
  cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
  return out;
};
cljs.core.async.mapcat_LT_.cljs$lang$maxFixedArity = 3;
cljs.core.async.mapcat_GT_ = function cljs$core$async$mapcat_GT_() {
  var G__13267 = arguments.length;
  switch(G__13267) {
    case 2:
      return cljs.core.async.mapcat_GT_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.mapcat_GT_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.mapcat_GT_.cljs$core$IFn$_invoke$arity$2 = function(f, out) {
  return cljs.core.async.mapcat_GT_.call(null, f, out, null);
};
cljs.core.async.mapcat_GT_.cljs$core$IFn$_invoke$arity$3 = function(f, out, buf_or_n) {
  var in$ = cljs.core.async.chan.call(null, buf_or_n);
  cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
  return in$;
};
cljs.core.async.mapcat_GT_.cljs$lang$maxFixedArity = 3;
cljs.core.async.unique = function cljs$core$async$unique() {
  var G__13270 = arguments.length;
  switch(G__13270) {
    case 1:
      return cljs.core.async.unique.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.unique.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.unique.cljs$core$IFn$_invoke$arity$1 = function(ch) {
  return cljs.core.async.unique.call(null, ch, null);
};
cljs.core.async.unique.cljs$core$IFn$_invoke$arity$2 = function(ch, buf_or_n) {
  var out = cljs.core.async.chan.call(null, buf_or_n);
  var c__7634__auto___13320 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__7634__auto___13320, out) {
    return function() {
      var f__7635__auto__ = function() {
        var switch__7572__auto__ = function(c__7634__auto___13320, out) {
          return function(state_13294) {
            var state_val_13295 = state_13294[1];
            if (state_val_13295 === 7) {
              var inst_13289 = state_13294[2];
              var state_13294__$1 = state_13294;
              var statearr_13296_13321 = state_13294__$1;
              statearr_13296_13321[2] = inst_13289;
              statearr_13296_13321[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_13295 === 1) {
                var inst_13271 = null;
                var state_13294__$1 = function() {
                  var statearr_13297 = state_13294;
                  statearr_13297[7] = inst_13271;
                  return statearr_13297;
                }();
                var statearr_13298_13322 = state_13294__$1;
                statearr_13298_13322[2] = null;
                statearr_13298_13322[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_13295 === 4) {
                  var inst_13274 = state_13294[8];
                  var inst_13274__$1 = state_13294[2];
                  var inst_13275 = inst_13274__$1 == null;
                  var inst_13276 = cljs.core.not.call(null, inst_13275);
                  var state_13294__$1 = function() {
                    var statearr_13299 = state_13294;
                    statearr_13299[8] = inst_13274__$1;
                    return statearr_13299;
                  }();
                  if (inst_13276) {
                    var statearr_13300_13323 = state_13294__$1;
                    statearr_13300_13323[1] = 5;
                  } else {
                    var statearr_13301_13324 = state_13294__$1;
                    statearr_13301_13324[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_13295 === 6) {
                    var state_13294__$1 = state_13294;
                    var statearr_13302_13325 = state_13294__$1;
                    statearr_13302_13325[2] = null;
                    statearr_13302_13325[1] = 7;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_13295 === 3) {
                      var inst_13291 = state_13294[2];
                      var inst_13292 = cljs.core.async.close_BANG_.call(null, out);
                      var state_13294__$1 = function() {
                        var statearr_13303 = state_13294;
                        statearr_13303[9] = inst_13291;
                        return statearr_13303;
                      }();
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_13294__$1, inst_13292);
                    } else {
                      if (state_val_13295 === 2) {
                        var state_13294__$1 = state_13294;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_13294__$1, 4, ch);
                      } else {
                        if (state_val_13295 === 11) {
                          var inst_13274 = state_13294[8];
                          var inst_13283 = state_13294[2];
                          var inst_13271 = inst_13274;
                          var state_13294__$1 = function() {
                            var statearr_13304 = state_13294;
                            statearr_13304[7] = inst_13271;
                            statearr_13304[10] = inst_13283;
                            return statearr_13304;
                          }();
                          var statearr_13305_13326 = state_13294__$1;
                          statearr_13305_13326[2] = null;
                          statearr_13305_13326[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_13295 === 9) {
                            var inst_13274 = state_13294[8];
                            var state_13294__$1 = state_13294;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_13294__$1, 11, out, inst_13274);
                          } else {
                            if (state_val_13295 === 5) {
                              var inst_13274 = state_13294[8];
                              var inst_13271 = state_13294[7];
                              var inst_13278 = cljs.core._EQ_.call(null, inst_13274, inst_13271);
                              var state_13294__$1 = state_13294;
                              if (inst_13278) {
                                var statearr_13307_13327 = state_13294__$1;
                                statearr_13307_13327[1] = 8;
                              } else {
                                var statearr_13308_13328 = state_13294__$1;
                                statearr_13308_13328[1] = 9;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_13295 === 10) {
                                var inst_13286 = state_13294[2];
                                var state_13294__$1 = state_13294;
                                var statearr_13309_13329 = state_13294__$1;
                                statearr_13309_13329[2] = inst_13286;
                                statearr_13309_13329[1] = 7;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_13295 === 8) {
                                  var inst_13271 = state_13294[7];
                                  var tmp13306 = inst_13271;
                                  var inst_13271__$1 = tmp13306;
                                  var state_13294__$1 = function() {
                                    var statearr_13310 = state_13294;
                                    statearr_13310[7] = inst_13271__$1;
                                    return statearr_13310;
                                  }();
                                  var statearr_13311_13330 = state_13294__$1;
                                  statearr_13311_13330[2] = null;
                                  statearr_13311_13330[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__7634__auto___13320, out);
        return function(switch__7572__auto__, c__7634__auto___13320, out) {
          return function() {
            var cljs$core$async$state_machine__7573__auto__ = null;
            var cljs$core$async$state_machine__7573__auto____0 = function() {
              var statearr_13315 = [null, null, null, null, null, null, null, null, null, null, null];
              statearr_13315[0] = cljs$core$async$state_machine__7573__auto__;
              statearr_13315[1] = 1;
              return statearr_13315;
            };
            var cljs$core$async$state_machine__7573__auto____1 = function(state_13294) {
              while (true) {
                var ret_value__7574__auto__ = function() {
                  try {
                    while (true) {
                      var result__7575__auto__ = switch__7572__auto__.call(null, state_13294);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__7575__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__7575__auto__;
                      }
                      break;
                    }
                  } catch (e13316) {
                    if (e13316 instanceof Object) {
                      var ex__7576__auto__ = e13316;
                      var statearr_13317_13331 = state_13294;
                      statearr_13317_13331[5] = ex__7576__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_13294);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e13316;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7574__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__13332 = state_13294;
                  state_13294 = G__13332;
                  continue;
                } else {
                  return ret_value__7574__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__7573__auto__ = function(state_13294) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__7573__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__7573__auto____1.call(this, state_13294);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__7573__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__7573__auto____0;
            cljs$core$async$state_machine__7573__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__7573__auto____1;
            return cljs$core$async$state_machine__7573__auto__;
          }();
        }(switch__7572__auto__, c__7634__auto___13320, out);
      }();
      var state__7636__auto__ = function() {
        var statearr_13318 = f__7635__auto__.call(null);
        statearr_13318[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7634__auto___13320;
        return statearr_13318;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7636__auto__);
    };
  }(c__7634__auto___13320, out));
  return out;
};
cljs.core.async.unique.cljs$lang$maxFixedArity = 2;
cljs.core.async.partition = function cljs$core$async$partition() {
  var G__13334 = arguments.length;
  switch(G__13334) {
    case 2:
      return cljs.core.async.partition.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.partition.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.partition.cljs$core$IFn$_invoke$arity$2 = function(n, ch) {
  return cljs.core.async.partition.call(null, n, ch, null);
};
cljs.core.async.partition.cljs$core$IFn$_invoke$arity$3 = function(n, ch, buf_or_n) {
  var out = cljs.core.async.chan.call(null, buf_or_n);
  var c__7634__auto___13403 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__7634__auto___13403, out) {
    return function() {
      var f__7635__auto__ = function() {
        var switch__7572__auto__ = function(c__7634__auto___13403, out) {
          return function(state_13372) {
            var state_val_13373 = state_13372[1];
            if (state_val_13373 === 7) {
              var inst_13368 = state_13372[2];
              var state_13372__$1 = state_13372;
              var statearr_13374_13404 = state_13372__$1;
              statearr_13374_13404[2] = inst_13368;
              statearr_13374_13404[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_13373 === 1) {
                var inst_13335 = new Array(n);
                var inst_13336 = inst_13335;
                var inst_13337 = 0;
                var state_13372__$1 = function() {
                  var statearr_13375 = state_13372;
                  statearr_13375[7] = inst_13337;
                  statearr_13375[8] = inst_13336;
                  return statearr_13375;
                }();
                var statearr_13376_13405 = state_13372__$1;
                statearr_13376_13405[2] = null;
                statearr_13376_13405[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_13373 === 4) {
                  var inst_13340 = state_13372[9];
                  var inst_13340__$1 = state_13372[2];
                  var inst_13341 = inst_13340__$1 == null;
                  var inst_13342 = cljs.core.not.call(null, inst_13341);
                  var state_13372__$1 = function() {
                    var statearr_13377 = state_13372;
                    statearr_13377[9] = inst_13340__$1;
                    return statearr_13377;
                  }();
                  if (inst_13342) {
                    var statearr_13378_13406 = state_13372__$1;
                    statearr_13378_13406[1] = 5;
                  } else {
                    var statearr_13379_13407 = state_13372__$1;
                    statearr_13379_13407[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_13373 === 15) {
                    var inst_13362 = state_13372[2];
                    var state_13372__$1 = state_13372;
                    var statearr_13380_13408 = state_13372__$1;
                    statearr_13380_13408[2] = inst_13362;
                    statearr_13380_13408[1] = 14;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_13373 === 13) {
                      var state_13372__$1 = state_13372;
                      var statearr_13381_13409 = state_13372__$1;
                      statearr_13381_13409[2] = null;
                      statearr_13381_13409[1] = 14;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_13373 === 6) {
                        var inst_13337 = state_13372[7];
                        var inst_13358 = inst_13337 > 0;
                        var state_13372__$1 = state_13372;
                        if (cljs.core.truth_(inst_13358)) {
                          var statearr_13382_13410 = state_13372__$1;
                          statearr_13382_13410[1] = 12;
                        } else {
                          var statearr_13383_13411 = state_13372__$1;
                          statearr_13383_13411[1] = 13;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_13373 === 3) {
                          var inst_13370 = state_13372[2];
                          var state_13372__$1 = state_13372;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_13372__$1, inst_13370);
                        } else {
                          if (state_val_13373 === 12) {
                            var inst_13336 = state_13372[8];
                            var inst_13360 = cljs.core.vec.call(null, inst_13336);
                            var state_13372__$1 = state_13372;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_13372__$1, 15, out, inst_13360);
                          } else {
                            if (state_val_13373 === 2) {
                              var state_13372__$1 = state_13372;
                              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_13372__$1, 4, ch);
                            } else {
                              if (state_val_13373 === 11) {
                                var inst_13352 = state_13372[2];
                                var inst_13353 = new Array(n);
                                var inst_13336 = inst_13353;
                                var inst_13337 = 0;
                                var state_13372__$1 = function() {
                                  var statearr_13384 = state_13372;
                                  statearr_13384[7] = inst_13337;
                                  statearr_13384[8] = inst_13336;
                                  statearr_13384[10] = inst_13352;
                                  return statearr_13384;
                                }();
                                var statearr_13385_13412 = state_13372__$1;
                                statearr_13385_13412[2] = null;
                                statearr_13385_13412[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_13373 === 9) {
                                  var inst_13336 = state_13372[8];
                                  var inst_13350 = cljs.core.vec.call(null, inst_13336);
                                  var state_13372__$1 = state_13372;
                                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_13372__$1, 11, out, inst_13350);
                                } else {
                                  if (state_val_13373 === 5) {
                                    var inst_13340 = state_13372[9];
                                    var inst_13337 = state_13372[7];
                                    var inst_13336 = state_13372[8];
                                    var inst_13345 = state_13372[11];
                                    var inst_13344 = inst_13336[inst_13337] = inst_13340;
                                    var inst_13345__$1 = inst_13337 + 1;
                                    var inst_13346 = inst_13345__$1 < n;
                                    var state_13372__$1 = function() {
                                      var statearr_13386 = state_13372;
                                      statearr_13386[12] = inst_13344;
                                      statearr_13386[11] = inst_13345__$1;
                                      return statearr_13386;
                                    }();
                                    if (cljs.core.truth_(inst_13346)) {
                                      var statearr_13387_13413 = state_13372__$1;
                                      statearr_13387_13413[1] = 8;
                                    } else {
                                      var statearr_13388_13414 = state_13372__$1;
                                      statearr_13388_13414[1] = 9;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_13373 === 14) {
                                      var inst_13365 = state_13372[2];
                                      var inst_13366 = cljs.core.async.close_BANG_.call(null, out);
                                      var state_13372__$1 = function() {
                                        var statearr_13390 = state_13372;
                                        statearr_13390[13] = inst_13365;
                                        return statearr_13390;
                                      }();
                                      var statearr_13391_13415 = state_13372__$1;
                                      statearr_13391_13415[2] = inst_13366;
                                      statearr_13391_13415[1] = 7;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_13373 === 10) {
                                        var inst_13356 = state_13372[2];
                                        var state_13372__$1 = state_13372;
                                        var statearr_13392_13416 = state_13372__$1;
                                        statearr_13392_13416[2] = inst_13356;
                                        statearr_13392_13416[1] = 7;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_13373 === 8) {
                                          var inst_13336 = state_13372[8];
                                          var inst_13345 = state_13372[11];
                                          var tmp13389 = inst_13336;
                                          var inst_13336__$1 = tmp13389;
                                          var inst_13337 = inst_13345;
                                          var state_13372__$1 = function() {
                                            var statearr_13393 = state_13372;
                                            statearr_13393[7] = inst_13337;
                                            statearr_13393[8] = inst_13336__$1;
                                            return statearr_13393;
                                          }();
                                          var statearr_13394_13417 = state_13372__$1;
                                          statearr_13394_13417[2] = null;
                                          statearr_13394_13417[1] = 2;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          return null;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__7634__auto___13403, out);
        return function(switch__7572__auto__, c__7634__auto___13403, out) {
          return function() {
            var cljs$core$async$state_machine__7573__auto__ = null;
            var cljs$core$async$state_machine__7573__auto____0 = function() {
              var statearr_13398 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_13398[0] = cljs$core$async$state_machine__7573__auto__;
              statearr_13398[1] = 1;
              return statearr_13398;
            };
            var cljs$core$async$state_machine__7573__auto____1 = function(state_13372) {
              while (true) {
                var ret_value__7574__auto__ = function() {
                  try {
                    while (true) {
                      var result__7575__auto__ = switch__7572__auto__.call(null, state_13372);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__7575__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__7575__auto__;
                      }
                      break;
                    }
                  } catch (e13399) {
                    if (e13399 instanceof Object) {
                      var ex__7576__auto__ = e13399;
                      var statearr_13400_13418 = state_13372;
                      statearr_13400_13418[5] = ex__7576__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_13372);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e13399;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7574__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__13419 = state_13372;
                  state_13372 = G__13419;
                  continue;
                } else {
                  return ret_value__7574__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__7573__auto__ = function(state_13372) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__7573__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__7573__auto____1.call(this, state_13372);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__7573__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__7573__auto____0;
            cljs$core$async$state_machine__7573__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__7573__auto____1;
            return cljs$core$async$state_machine__7573__auto__;
          }();
        }(switch__7572__auto__, c__7634__auto___13403, out);
      }();
      var state__7636__auto__ = function() {
        var statearr_13401 = f__7635__auto__.call(null);
        statearr_13401[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7634__auto___13403;
        return statearr_13401;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7636__auto__);
    };
  }(c__7634__auto___13403, out));
  return out;
};
cljs.core.async.partition.cljs$lang$maxFixedArity = 3;
cljs.core.async.partition_by = function cljs$core$async$partition_by() {
  var G__13421 = arguments.length;
  switch(G__13421) {
    case 2:
      return cljs.core.async.partition_by.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.partition_by.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.partition_by.cljs$core$IFn$_invoke$arity$2 = function(f, ch) {
  return cljs.core.async.partition_by.call(null, f, ch, null);
};
cljs.core.async.partition_by.cljs$core$IFn$_invoke$arity$3 = function(f, ch, buf_or_n) {
  var out = cljs.core.async.chan.call(null, buf_or_n);
  var c__7634__auto___13494 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__7634__auto___13494, out) {
    return function() {
      var f__7635__auto__ = function() {
        var switch__7572__auto__ = function(c__7634__auto___13494, out) {
          return function(state_13463) {
            var state_val_13464 = state_13463[1];
            if (state_val_13464 === 7) {
              var inst_13459 = state_13463[2];
              var state_13463__$1 = state_13463;
              var statearr_13465_13495 = state_13463__$1;
              statearr_13465_13495[2] = inst_13459;
              statearr_13465_13495[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_13464 === 1) {
                var inst_13422 = [];
                var inst_13423 = inst_13422;
                var inst_13424 = new cljs.core.Keyword("cljs.core.async", "nothing", "cljs.core.async/nothing", -69252123);
                var state_13463__$1 = function() {
                  var statearr_13466 = state_13463;
                  statearr_13466[7] = inst_13423;
                  statearr_13466[8] = inst_13424;
                  return statearr_13466;
                }();
                var statearr_13467_13496 = state_13463__$1;
                statearr_13467_13496[2] = null;
                statearr_13467_13496[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_13464 === 4) {
                  var inst_13427 = state_13463[9];
                  var inst_13427__$1 = state_13463[2];
                  var inst_13428 = inst_13427__$1 == null;
                  var inst_13429 = cljs.core.not.call(null, inst_13428);
                  var state_13463__$1 = function() {
                    var statearr_13468 = state_13463;
                    statearr_13468[9] = inst_13427__$1;
                    return statearr_13468;
                  }();
                  if (inst_13429) {
                    var statearr_13469_13497 = state_13463__$1;
                    statearr_13469_13497[1] = 5;
                  } else {
                    var statearr_13470_13498 = state_13463__$1;
                    statearr_13470_13498[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_13464 === 15) {
                    var inst_13453 = state_13463[2];
                    var state_13463__$1 = state_13463;
                    var statearr_13471_13499 = state_13463__$1;
                    statearr_13471_13499[2] = inst_13453;
                    statearr_13471_13499[1] = 14;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_13464 === 13) {
                      var state_13463__$1 = state_13463;
                      var statearr_13472_13500 = state_13463__$1;
                      statearr_13472_13500[2] = null;
                      statearr_13472_13500[1] = 14;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_13464 === 6) {
                        var inst_13423 = state_13463[7];
                        var inst_13448 = inst_13423.length;
                        var inst_13449 = inst_13448 > 0;
                        var state_13463__$1 = state_13463;
                        if (cljs.core.truth_(inst_13449)) {
                          var statearr_13473_13501 = state_13463__$1;
                          statearr_13473_13501[1] = 12;
                        } else {
                          var statearr_13474_13502 = state_13463__$1;
                          statearr_13474_13502[1] = 13;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_13464 === 3) {
                          var inst_13461 = state_13463[2];
                          var state_13463__$1 = state_13463;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_13463__$1, inst_13461);
                        } else {
                          if (state_val_13464 === 12) {
                            var inst_13423 = state_13463[7];
                            var inst_13451 = cljs.core.vec.call(null, inst_13423);
                            var state_13463__$1 = state_13463;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_13463__$1, 15, out, inst_13451);
                          } else {
                            if (state_val_13464 === 2) {
                              var state_13463__$1 = state_13463;
                              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_13463__$1, 4, ch);
                            } else {
                              if (state_val_13464 === 11) {
                                var inst_13427 = state_13463[9];
                                var inst_13431 = state_13463[10];
                                var inst_13441 = state_13463[2];
                                var inst_13442 = [];
                                var inst_13443 = inst_13442.push(inst_13427);
                                var inst_13423 = inst_13442;
                                var inst_13424 = inst_13431;
                                var state_13463__$1 = function() {
                                  var statearr_13475 = state_13463;
                                  statearr_13475[7] = inst_13423;
                                  statearr_13475[11] = inst_13441;
                                  statearr_13475[8] = inst_13424;
                                  statearr_13475[12] = inst_13443;
                                  return statearr_13475;
                                }();
                                var statearr_13476_13503 = state_13463__$1;
                                statearr_13476_13503[2] = null;
                                statearr_13476_13503[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_13464 === 9) {
                                  var inst_13423 = state_13463[7];
                                  var inst_13439 = cljs.core.vec.call(null, inst_13423);
                                  var state_13463__$1 = state_13463;
                                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_13463__$1, 11, out, inst_13439);
                                } else {
                                  if (state_val_13464 === 5) {
                                    var inst_13424 = state_13463[8];
                                    var inst_13427 = state_13463[9];
                                    var inst_13431 = state_13463[10];
                                    var inst_13431__$1 = f.call(null, inst_13427);
                                    var inst_13432 = cljs.core._EQ_.call(null, inst_13431__$1, inst_13424);
                                    var inst_13433 = cljs.core.keyword_identical_QMARK_.call(null, inst_13424, new cljs.core.Keyword("cljs.core.async", "nothing", "cljs.core.async/nothing", -69252123));
                                    var inst_13434 = inst_13432 || inst_13433;
                                    var state_13463__$1 = function() {
                                      var statearr_13477 = state_13463;
                                      statearr_13477[10] = inst_13431__$1;
                                      return statearr_13477;
                                    }();
                                    if (cljs.core.truth_(inst_13434)) {
                                      var statearr_13478_13504 = state_13463__$1;
                                      statearr_13478_13504[1] = 8;
                                    } else {
                                      var statearr_13479_13505 = state_13463__$1;
                                      statearr_13479_13505[1] = 9;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_13464 === 14) {
                                      var inst_13456 = state_13463[2];
                                      var inst_13457 = cljs.core.async.close_BANG_.call(null, out);
                                      var state_13463__$1 = function() {
                                        var statearr_13481 = state_13463;
                                        statearr_13481[13] = inst_13456;
                                        return statearr_13481;
                                      }();
                                      var statearr_13482_13506 = state_13463__$1;
                                      statearr_13482_13506[2] = inst_13457;
                                      statearr_13482_13506[1] = 7;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_13464 === 10) {
                                        var inst_13446 = state_13463[2];
                                        var state_13463__$1 = state_13463;
                                        var statearr_13483_13507 = state_13463__$1;
                                        statearr_13483_13507[2] = inst_13446;
                                        statearr_13483_13507[1] = 7;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_13464 === 8) {
                                          var inst_13423 = state_13463[7];
                                          var inst_13427 = state_13463[9];
                                          var inst_13431 = state_13463[10];
                                          var inst_13436 = inst_13423.push(inst_13427);
                                          var tmp13480 = inst_13423;
                                          var inst_13423__$1 = tmp13480;
                                          var inst_13424 = inst_13431;
                                          var state_13463__$1 = function() {
                                            var statearr_13484 = state_13463;
                                            statearr_13484[7] = inst_13423__$1;
                                            statearr_13484[14] = inst_13436;
                                            statearr_13484[8] = inst_13424;
                                            return statearr_13484;
                                          }();
                                          var statearr_13485_13508 = state_13463__$1;
                                          statearr_13485_13508[2] = null;
                                          statearr_13485_13508[1] = 2;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          return null;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__7634__auto___13494, out);
        return function(switch__7572__auto__, c__7634__auto___13494, out) {
          return function() {
            var cljs$core$async$state_machine__7573__auto__ = null;
            var cljs$core$async$state_machine__7573__auto____0 = function() {
              var statearr_13489 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_13489[0] = cljs$core$async$state_machine__7573__auto__;
              statearr_13489[1] = 1;
              return statearr_13489;
            };
            var cljs$core$async$state_machine__7573__auto____1 = function(state_13463) {
              while (true) {
                var ret_value__7574__auto__ = function() {
                  try {
                    while (true) {
                      var result__7575__auto__ = switch__7572__auto__.call(null, state_13463);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__7575__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__7575__auto__;
                      }
                      break;
                    }
                  } catch (e13490) {
                    if (e13490 instanceof Object) {
                      var ex__7576__auto__ = e13490;
                      var statearr_13491_13509 = state_13463;
                      statearr_13491_13509[5] = ex__7576__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_13463);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e13490;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7574__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__13510 = state_13463;
                  state_13463 = G__13510;
                  continue;
                } else {
                  return ret_value__7574__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__7573__auto__ = function(state_13463) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__7573__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__7573__auto____1.call(this, state_13463);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__7573__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__7573__auto____0;
            cljs$core$async$state_machine__7573__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__7573__auto____1;
            return cljs$core$async$state_machine__7573__auto__;
          }();
        }(switch__7572__auto__, c__7634__auto___13494, out);
      }();
      var state__7636__auto__ = function() {
        var statearr_13492 = f__7635__auto__.call(null);
        statearr_13492[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7634__auto___13494;
        return statearr_13492;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7636__auto__);
    };
  }(c__7634__auto___13494, out));
  return out;
};
cljs.core.async.partition_by.cljs$lang$maxFixedArity = 3;
goog.provide("metaverse.core");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("metaverse.util");
metaverse.core.render = function metaverse$core$render(ts, renderer, scene, camera) {
  requestAnimationFrame(function(p1__18947_SHARP_) {
    return metaverse$core$render.call(null, p1__18947_SHARP_, renderer, scene, camera);
  });
  return renderer.render(scene, camera);
};
metaverse.core.add_single_cube = function metaverse$core$add_single_cube(c) {
  var geom = new THREE.BoxGeometry(1, 1, 1);
  var material = new THREE.MeshBasicMaterial({"color":15746048});
  var cube = new THREE.Mesh(geom, material);
  var c__7634__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__7634__auto__, geom, material, cube) {
    return function() {
      var f__7635__auto__ = function() {
        var switch__7572__auto__ = function(c__7634__auto__, geom, material, cube) {
          return function(state_18975) {
            var state_val_18976 = state_18975[1];
            if (state_val_18976 === 1) {
              var inst_18966 = [new cljs.core.Keyword(null, "geometry", "geometry", -405034994)];
              var inst_18967 = [new cljs.core.Keyword(null, "0x0000", "0x0000", 1541547801)];
              var inst_18968 = [cube];
              var inst_18969 = cljs.core.PersistentHashMap.fromArrays(inst_18967, inst_18968);
              var inst_18970 = [inst_18969];
              var inst_18971 = cljs.core.PersistentHashMap.fromArrays(inst_18966, inst_18970);
              var state_18975__$1 = state_18975;
              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_18975__$1, 2, c, inst_18971);
            } else {
              if (state_val_18976 === 2) {
                var inst_18973 = state_18975[2];
                var state_18975__$1 = state_18975;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_18975__$1, inst_18973);
              } else {
                return null;
              }
            }
          };
        }(c__7634__auto__, geom, material, cube);
        return function(switch__7572__auto__, c__7634__auto__, geom, material, cube) {
          return function() {
            var metaverse$core$add_single_cube_$_state_machine__7573__auto__ = null;
            var metaverse$core$add_single_cube_$_state_machine__7573__auto____0 = function() {
              var statearr_18980 = [null, null, null, null, null, null, null];
              statearr_18980[0] = metaverse$core$add_single_cube_$_state_machine__7573__auto__;
              statearr_18980[1] = 1;
              return statearr_18980;
            };
            var metaverse$core$add_single_cube_$_state_machine__7573__auto____1 = function(state_18975) {
              while (true) {
                var ret_value__7574__auto__ = function() {
                  try {
                    while (true) {
                      var result__7575__auto__ = switch__7572__auto__.call(null, state_18975);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__7575__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__7575__auto__;
                      }
                      break;
                    }
                  } catch (e18981) {
                    if (e18981 instanceof Object) {
                      var ex__7576__auto__ = e18981;
                      var statearr_18982_18984 = state_18975;
                      statearr_18982_18984[5] = ex__7576__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_18975);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e18981;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7574__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__18985 = state_18975;
                  state_18975 = G__18985;
                  continue;
                } else {
                  return ret_value__7574__auto__;
                }
                break;
              }
            };
            metaverse$core$add_single_cube_$_state_machine__7573__auto__ = function(state_18975) {
              switch(arguments.length) {
                case 0:
                  return metaverse$core$add_single_cube_$_state_machine__7573__auto____0.call(this);
                case 1:
                  return metaverse$core$add_single_cube_$_state_machine__7573__auto____1.call(this, state_18975);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            metaverse$core$add_single_cube_$_state_machine__7573__auto__.cljs$core$IFn$_invoke$arity$0 = metaverse$core$add_single_cube_$_state_machine__7573__auto____0;
            metaverse$core$add_single_cube_$_state_machine__7573__auto__.cljs$core$IFn$_invoke$arity$1 = metaverse$core$add_single_cube_$_state_machine__7573__auto____1;
            return metaverse$core$add_single_cube_$_state_machine__7573__auto__;
          }();
        }(switch__7572__auto__, c__7634__auto__, geom, material, cube);
      }();
      var state__7636__auto__ = function() {
        var statearr_18983 = f__7635__auto__.call(null);
        statearr_18983[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7634__auto__;
        return statearr_18983;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7636__auto__);
    };
  }(c__7634__auto__, geom, material, cube));
  return c__7634__auto__;
};
metaverse.core.set_initial_camera_position = function metaverse$core$set_initial_camera_position(c) {
  var c__7634__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__7634__auto__) {
    return function() {
      var f__7635__auto__ = function() {
        var switch__7572__auto__ = function(c__7634__auto__) {
          return function(state_19013) {
            var state_val_19014 = state_19013[1];
            if (state_val_19014 === 1) {
              var inst_19004 = [new cljs.core.Keyword(null, "camera", "camera", -1190348585)];
              var inst_19005 = [new cljs.core.Keyword(null, "z", "z", -789527183)];
              var inst_19006 = [5];
              var inst_19007 = cljs.core.PersistentHashMap.fromArrays(inst_19005, inst_19006);
              var inst_19008 = [inst_19007];
              var inst_19009 = cljs.core.PersistentHashMap.fromArrays(inst_19004, inst_19008);
              var state_19013__$1 = state_19013;
              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_19013__$1, 2, c, inst_19009);
            } else {
              if (state_val_19014 === 2) {
                var inst_19011 = state_19013[2];
                var state_19013__$1 = state_19013;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_19013__$1, inst_19011);
              } else {
                return null;
              }
            }
          };
        }(c__7634__auto__);
        return function(switch__7572__auto__, c__7634__auto__) {
          return function() {
            var metaverse$core$set_initial_camera_position_$_state_machine__7573__auto__ = null;
            var metaverse$core$set_initial_camera_position_$_state_machine__7573__auto____0 = function() {
              var statearr_19018 = [null, null, null, null, null, null, null];
              statearr_19018[0] = metaverse$core$set_initial_camera_position_$_state_machine__7573__auto__;
              statearr_19018[1] = 1;
              return statearr_19018;
            };
            var metaverse$core$set_initial_camera_position_$_state_machine__7573__auto____1 = function(state_19013) {
              while (true) {
                var ret_value__7574__auto__ = function() {
                  try {
                    while (true) {
                      var result__7575__auto__ = switch__7572__auto__.call(null, state_19013);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__7575__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__7575__auto__;
                      }
                      break;
                    }
                  } catch (e19019) {
                    if (e19019 instanceof Object) {
                      var ex__7576__auto__ = e19019;
                      var statearr_19020_19022 = state_19013;
                      statearr_19020_19022[5] = ex__7576__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_19013);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e19019;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7574__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__19023 = state_19013;
                  state_19013 = G__19023;
                  continue;
                } else {
                  return ret_value__7574__auto__;
                }
                break;
              }
            };
            metaverse$core$set_initial_camera_position_$_state_machine__7573__auto__ = function(state_19013) {
              switch(arguments.length) {
                case 0:
                  return metaverse$core$set_initial_camera_position_$_state_machine__7573__auto____0.call(this);
                case 1:
                  return metaverse$core$set_initial_camera_position_$_state_machine__7573__auto____1.call(this, state_19013);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            metaverse$core$set_initial_camera_position_$_state_machine__7573__auto__.cljs$core$IFn$_invoke$arity$0 = metaverse$core$set_initial_camera_position_$_state_machine__7573__auto____0;
            metaverse$core$set_initial_camera_position_$_state_machine__7573__auto__.cljs$core$IFn$_invoke$arity$1 = metaverse$core$set_initial_camera_position_$_state_machine__7573__auto____1;
            return metaverse$core$set_initial_camera_position_$_state_machine__7573__auto__;
          }();
        }(switch__7572__auto__, c__7634__auto__);
      }();
      var state__7636__auto__ = function() {
        var statearr_19021 = f__7635__auto__.call(null);
        statearr_19021[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7634__auto__;
        return statearr_19021;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7636__auto__);
    };
  }(c__7634__auto__));
  return c__7634__auto__;
};
metaverse.core.rotate_fn = function metaverse$core$rotate_fn(c) {
  var c__7634__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__7634__auto__) {
    return function() {
      var f__7635__auto__ = function() {
        var switch__7572__auto__ = function(c__7634__auto__) {
          return function(state_19075) {
            var state_val_19076 = state_19075[1];
            if (state_val_19076 === 1) {
              var inst_19055 = [new cljs.core.Keyword(null, "modifications", "modifications", 2043415709)];
              var inst_19056 = [new cljs.core.Keyword(null, "0x0000", "0x0000", 1541547801)];
              var inst_19057 = cljs.core.PersistentVector.EMPTY_NODE;
              var inst_19058 = ["rotation", "x"];
              var inst_19059 = new cljs.core.PersistentVector(null, 2, 5, inst_19057, inst_19058, null);
              var inst_19060 = cljs.core.PersistentVector.EMPTY_NODE;
              var inst_19061 = ["rotation", "y"];
              var inst_19062 = new cljs.core.PersistentVector(null, 2, 5, inst_19060, inst_19061, null);
              var inst_19063 = [inst_19059, inst_19062];
              var inst_19064 = function() {
                return function(inst_19055, inst_19056, inst_19057, inst_19058, inst_19059, inst_19060, inst_19061, inst_19062, inst_19063, state_val_19076, c__7634__auto__) {
                  return function(p1__19024_SHARP_) {
                    return p1__19024_SHARP_ + .1;
                  };
                }(inst_19055, inst_19056, inst_19057, inst_19058, inst_19059, inst_19060, inst_19061, inst_19062, inst_19063, state_val_19076, c__7634__auto__);
              }();
              var inst_19065 = function() {
                return function(inst_19055, inst_19056, inst_19057, inst_19058, inst_19059, inst_19060, inst_19061, inst_19062, inst_19063, inst_19064, state_val_19076, c__7634__auto__) {
                  return function(p1__19025_SHARP_) {
                    return p1__19025_SHARP_ + .1;
                  };
                }(inst_19055, inst_19056, inst_19057, inst_19058, inst_19059, inst_19060, inst_19061, inst_19062, inst_19063, inst_19064, state_val_19076, c__7634__auto__);
              }();
              var inst_19066 = [inst_19064, inst_19065];
              var inst_19067 = cljs.core.PersistentHashMap.fromArrays(inst_19063, inst_19066);
              var inst_19068 = [inst_19067];
              var inst_19069 = cljs.core.PersistentHashMap.fromArrays(inst_19056, inst_19068);
              var inst_19070 = [inst_19069];
              var inst_19071 = cljs.core.PersistentHashMap.fromArrays(inst_19055, inst_19070);
              var state_19075__$1 = state_19075;
              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_19075__$1, 2, c, inst_19071);
            } else {
              if (state_val_19076 === 2) {
                var inst_19073 = state_19075[2];
                var state_19075__$1 = state_19075;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_19075__$1, inst_19073);
              } else {
                return null;
              }
            }
          };
        }(c__7634__auto__);
        return function(switch__7572__auto__, c__7634__auto__) {
          return function() {
            var metaverse$core$rotate_fn_$_state_machine__7573__auto__ = null;
            var metaverse$core$rotate_fn_$_state_machine__7573__auto____0 = function() {
              var statearr_19080 = [null, null, null, null, null, null, null];
              statearr_19080[0] = metaverse$core$rotate_fn_$_state_machine__7573__auto__;
              statearr_19080[1] = 1;
              return statearr_19080;
            };
            var metaverse$core$rotate_fn_$_state_machine__7573__auto____1 = function(state_19075) {
              while (true) {
                var ret_value__7574__auto__ = function() {
                  try {
                    while (true) {
                      var result__7575__auto__ = switch__7572__auto__.call(null, state_19075);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__7575__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__7575__auto__;
                      }
                      break;
                    }
                  } catch (e19081) {
                    if (e19081 instanceof Object) {
                      var ex__7576__auto__ = e19081;
                      var statearr_19082_19084 = state_19075;
                      statearr_19082_19084[5] = ex__7576__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_19075);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e19081;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7574__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__19085 = state_19075;
                  state_19075 = G__19085;
                  continue;
                } else {
                  return ret_value__7574__auto__;
                }
                break;
              }
            };
            metaverse$core$rotate_fn_$_state_machine__7573__auto__ = function(state_19075) {
              switch(arguments.length) {
                case 0:
                  return metaverse$core$rotate_fn_$_state_machine__7573__auto____0.call(this);
                case 1:
                  return metaverse$core$rotate_fn_$_state_machine__7573__auto____1.call(this, state_19075);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            metaverse$core$rotate_fn_$_state_machine__7573__auto__.cljs$core$IFn$_invoke$arity$0 = metaverse$core$rotate_fn_$_state_machine__7573__auto____0;
            metaverse$core$rotate_fn_$_state_machine__7573__auto__.cljs$core$IFn$_invoke$arity$1 = metaverse$core$rotate_fn_$_state_machine__7573__auto____1;
            return metaverse$core$rotate_fn_$_state_machine__7573__auto__;
          }();
        }(switch__7572__auto__, c__7634__auto__);
      }();
      var state__7636__auto__ = function() {
        var statearr_19083 = f__7635__auto__.call(null);
        statearr_19083[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7634__auto__;
        return statearr_19083;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7636__auto__);
    };
  }(c__7634__auto__));
  return c__7634__auto__;
};
metaverse.core.main = function metaverse$core$main() {
  var render_state = cljs.core.async.chan.call(null);
  var scene = new THREE.Scene;
  var camera = new THREE.PerspectiveCamera(75, window["innerWidth"] / window["innerHeight"], .1, 1E3);
  var renderer = new THREE.WebGLRenderer;
  renderer.setSize(window["innerWidth"], window["innerHeight"]);
  document.body.appendChild(renderer.domElement);
  var c__7634__auto___20080 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__7634__auto___20080, render_state, scene, camera, renderer) {
    return function() {
      var f__7635__auto__ = function() {
        var switch__7572__auto__ = function(c__7634__auto___20080, render_state, scene, camera, renderer) {
          return function(state_19917) {
            var state_val_19918 = state_19917[1];
            if (state_val_19918 === 65) {
              var state_19917__$1 = state_19917;
              var statearr_19922_20081 = state_19917__$1;
              statearr_19922_20081[2] = null;
              statearr_19922_20081[1] = 66;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_19918 === 70) {
                var inst_19857 = state_19917[7];
                var inst_19824 = state_19917[8];
                var inst_19857__$1 = cljs.core.seq.call(null, inst_19824);
                var state_19917__$1 = function() {
                  var statearr_19923 = state_19917;
                  statearr_19923[7] = inst_19857__$1;
                  return statearr_19923;
                }();
                if (inst_19857__$1) {
                  var statearr_19924_20082 = state_19917__$1;
                  statearr_19924_20082[1] = 75;
                } else {
                  var statearr_19925_20083 = state_19917__$1;
                  statearr_19925_20083[1] = 76;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_19918 === 62) {
                  var inst_19591 = state_19917[9];
                  var inst_19803 = state_19917[10];
                  var inst_19816 = state_19917[11];
                  var inst_19813 = cljs.core.first.call(null, inst_19803);
                  var inst_19814 = cljs.core.nth.call(null, inst_19813, 0, null);
                  var inst_19815 = cljs.core.nth.call(null, inst_19813, 1, null);
                  var inst_19816__$1 = cljs.core.get.call(null, inst_19591, inst_19814);
                  var state_19917__$1 = function() {
                    var statearr_19929 = state_19917;
                    statearr_19929[12] = inst_19815;
                    statearr_19929[11] = inst_19816__$1;
                    return statearr_19929;
                  }();
                  if (cljs.core.truth_(inst_19816__$1)) {
                    var statearr_19930_20084 = state_19917__$1;
                    statearr_19930_20084[1] = 64;
                  } else {
                    var statearr_19931_20085 = state_19917__$1;
                    statearr_19931_20085[1] = 65;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_19918 === 74) {
                    var inst_19826 = state_19917[13];
                    var inst_19825 = state_19917[14];
                    var inst_19835 = state_19917[15];
                    var inst_19836 = state_19917[16];
                    var inst_19824 = state_19917[8];
                    var inst_19827 = state_19917[17];
                    var inst_19839 = state_19917[18];
                    var inst_19847 = state_19917[2];
                    var inst_19848 = cljs.core.PersistentVector.EMPTY_NODE;
                    var inst_19849 = inst_19835.call(null, inst_19836);
                    var inst_19850 = [inst_19849];
                    var inst_19851 = new cljs.core.PersistentVector(null, 1, 5, inst_19848, inst_19850, null);
                    var inst_19852 = cljs.core.concat.call(null, inst_19839, inst_19847, inst_19851);
                    var inst_19853 = cljs.core.apply.call(null, cljs.core.aset, inst_19852);
                    var inst_19854 = inst_19827 + 1;
                    var tmp19919 = inst_19826;
                    var tmp19920 = inst_19825;
                    var tmp19921 = inst_19824;
                    var inst_19824__$1 = tmp19921;
                    var inst_19825__$1 = tmp19920;
                    var inst_19826__$1 = tmp19919;
                    var inst_19827__$1 = inst_19854;
                    var state_19917__$1 = function() {
                      var statearr_19932 = state_19917;
                      statearr_19932[13] = inst_19826__$1;
                      statearr_19932[19] = inst_19853;
                      statearr_19932[14] = inst_19825__$1;
                      statearr_19932[8] = inst_19824__$1;
                      statearr_19932[17] = inst_19827__$1;
                      return statearr_19932;
                    }();
                    var statearr_19933_20086 = state_19917__$1;
                    statearr_19933_20086[2] = null;
                    statearr_19933_20086[1] = 67;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_19918 === 7) {
                      var inst_19598 = state_19917[20];
                      var inst_19599 = state_19917[21];
                      var inst_19601 = state_19917[22];
                      var inst_19600 = state_19917[23];
                      var inst_19607 = cljs.core._nth.call(null, inst_19599, inst_19601);
                      var inst_19608 = cljs.core.nth.call(null, inst_19607, 0, null);
                      var inst_19609 = cljs.core.nth.call(null, inst_19607, 1, null);
                      var inst_19610 = scene.add(inst_19609);
                      var inst_19611 = inst_19601 + 1;
                      var tmp19926 = inst_19598;
                      var tmp19927 = inst_19599;
                      var tmp19928 = inst_19600;
                      var inst_19598__$1 = tmp19926;
                      var inst_19599__$1 = tmp19927;
                      var inst_19600__$1 = tmp19928;
                      var inst_19601__$1 = inst_19611;
                      var state_19917__$1 = function() {
                        var statearr_19934 = state_19917;
                        statearr_19934[24] = inst_19610;
                        statearr_19934[25] = inst_19608;
                        statearr_19934[20] = inst_19598__$1;
                        statearr_19934[21] = inst_19599__$1;
                        statearr_19934[22] = inst_19601__$1;
                        statearr_19934[23] = inst_19600__$1;
                        return statearr_19934;
                      }();
                      var statearr_19935_20087 = state_19917__$1;
                      statearr_19935_20087[2] = null;
                      statearr_19935_20087[1] = 5;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_19918 === 59) {
                        var state_19917__$1 = state_19917;
                        var statearr_19936_20088 = state_19917__$1;
                        statearr_19936_20088[2] = null;
                        statearr_19936_20088[1] = 60;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_19918 === 20) {
                          var inst_19693 = state_19917[2];
                          var state_19917__$1 = state_19917;
                          var statearr_19937_20089 = state_19917__$1;
                          statearr_19937_20089[2] = inst_19693;
                          statearr_19937_20089[1] = 17;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_19918 === 72) {
                            var inst_19834 = state_19917[26];
                            var state_19917__$1 = state_19917;
                            var statearr_19938_20090 = state_19917__$1;
                            statearr_19938_20090[2] = inst_19834;
                            statearr_19938_20090[1] = 74;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_19918 === 58) {
                              var inst_19803 = state_19917[10];
                              var inst_19805 = cljs.core.chunked_seq_QMARK_.call(null, inst_19803);
                              var state_19917__$1 = state_19917;
                              if (inst_19805) {
                                var statearr_19939_20091 = state_19917__$1;
                                statearr_19939_20091[1] = 61;
                              } else {
                                var statearr_19940_20092 = state_19917__$1;
                                statearr_19940_20092[1] = 62;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_19918 === 60) {
                                var inst_19908 = state_19917[2];
                                var state_19917__$1 = state_19917;
                                var statearr_19941_20093 = state_19917__$1;
                                statearr_19941_20093[2] = inst_19908;
                                statearr_19941_20093[1] = 37;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_19918 === 27) {
                                  var inst_19667 = state_19917[27];
                                  var inst_19671 = cljs.core.chunk_first.call(null, inst_19667);
                                  var inst_19672 = cljs.core.chunk_rest.call(null, inst_19667);
                                  var inst_19673 = cljs.core.count.call(null, inst_19671);
                                  var inst_19647 = inst_19672;
                                  var inst_19648 = inst_19671;
                                  var inst_19649 = inst_19673;
                                  var inst_19650 = 0;
                                  var state_19917__$1 = function() {
                                    var statearr_19942 = state_19917;
                                    statearr_19942[28] = inst_19649;
                                    statearr_19942[29] = inst_19650;
                                    statearr_19942[30] = inst_19648;
                                    statearr_19942[31] = inst_19647;
                                    return statearr_19942;
                                  }();
                                  var statearr_19943_20094 = state_19917__$1;
                                  statearr_19943_20094[2] = null;
                                  statearr_19943_20094[1] = 16;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_19918 === 1) {
                                    var inst_19583 = cljs.core.PersistentHashMap.EMPTY;
                                    var inst_19584 = inst_19583;
                                    var state_19917__$1 = function() {
                                      var statearr_19944 = state_19917;
                                      statearr_19944[32] = inst_19584;
                                      return statearr_19944;
                                    }();
                                    var statearr_19945_20095 = state_19917__$1;
                                    statearr_19945_20095[2] = null;
                                    statearr_19945_20095[1] = 2;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_19918 === 69) {
                                      var inst_19825 = state_19917[14];
                                      var inst_19834 = state_19917[26];
                                      var inst_19816 = state_19917[11];
                                      var inst_19827 = state_19917[17];
                                      var inst_19833 = cljs.core._nth.call(null, inst_19825, inst_19827);
                                      var inst_19834__$1 = cljs.core.nth.call(null, inst_19833, 0, null);
                                      var inst_19835 = cljs.core.nth.call(null, inst_19833, 1, null);
                                      var inst_19836 = cljs.core.apply.call(null, cljs.core.aget, inst_19816, inst_19834__$1);
                                      var inst_19837 = cljs.core.PersistentVector.EMPTY_NODE;
                                      var inst_19838 = [inst_19816];
                                      var inst_19839 = new cljs.core.PersistentVector(null, 1, 5, inst_19837, inst_19838, null);
                                      var inst_19840 = cljs.core.sequential_QMARK_.call(null, inst_19834__$1);
                                      var state_19917__$1 = function() {
                                        var statearr_19946 = state_19917;
                                        statearr_19946[26] = inst_19834__$1;
                                        statearr_19946[15] = inst_19835;
                                        statearr_19946[16] = inst_19836;
                                        statearr_19946[18] = inst_19839;
                                        return statearr_19946;
                                      }();
                                      if (inst_19840) {
                                        var statearr_19947_20096 = state_19917__$1;
                                        statearr_19947_20096[1] = 72;
                                      } else {
                                        var statearr_19948_20097 = state_19917__$1;
                                        statearr_19948_20097[1] = 73;
                                      }
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_19918 === 24) {
                                        var inst_19667 = state_19917[27];
                                        var inst_19669 = cljs.core.chunked_seq_QMARK_.call(null, inst_19667);
                                        var state_19917__$1 = state_19917;
                                        if (inst_19669) {
                                          var statearr_19949_20098 = state_19917__$1;
                                          statearr_19949_20098[1] = 27;
                                        } else {
                                          var statearr_19950_20099 = state_19917__$1;
                                          statearr_19950_20099[1] = 28;
                                        }
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_19918 === 55) {
                                          var inst_19766 = state_19917[33];
                                          var state_19917__$1 = state_19917;
                                          var statearr_19951_20100 = state_19917__$1;
                                          statearr_19951_20100[2] = inst_19766;
                                          statearr_19951_20100[1] = 57;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_19918 === 39) {
                                            var state_19917__$1 = state_19917;
                                            var statearr_19952_20101 = state_19917__$1;
                                            statearr_19952_20101[2] = null;
                                            statearr_19952_20101[1] = 40;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_19918 === 46) {
                                              var inst_19732 = state_19917[34];
                                              var state_19917__$1 = state_19917;
                                              var statearr_19953_20102 = state_19917__$1;
                                              statearr_19953_20102[2] = inst_19732;
                                              statearr_19953_20102[1] = 48;
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_19918 === 4) {
                                                var inst_19584 = state_19917[32];
                                                var inst_19587 = state_19917[2];
                                                var inst_19588 = (new cljs.core.Keyword(null, "geometry", "geometry", -405034994)).cljs$core$IFn$_invoke$arity$1(inst_19587);
                                                var inst_19589 = (new cljs.core.Keyword(null, "camera", "camera", -1190348585)).cljs$core$IFn$_invoke$arity$1(inst_19587);
                                                var inst_19590 = (new cljs.core.Keyword(null, "modifications", "modifications", 2043415709)).cljs$core$IFn$_invoke$arity$1(inst_19587);
                                                var inst_19591 = cljs.core.merge.call(null, inst_19584, inst_19588);
                                                var inst_19596 = cljs.core.seq.call(null, inst_19588);
                                                var inst_19597 = cljs.core.seq.call(null, inst_19596);
                                                var inst_19598 = inst_19597;
                                                var inst_19599 = null;
                                                var inst_19600 = 0;
                                                var inst_19601 = 0;
                                                var state_19917__$1 = function() {
                                                  var statearr_19954 = state_19917;
                                                  statearr_19954[9] = inst_19591;
                                                  statearr_19954[35] = inst_19590;
                                                  statearr_19954[36] = inst_19589;
                                                  statearr_19954[20] = inst_19598;
                                                  statearr_19954[21] = inst_19599;
                                                  statearr_19954[22] = inst_19601;
                                                  statearr_19954[23] = inst_19600;
                                                  return statearr_19954;
                                                }();
                                                var statearr_19955_20103 = state_19917__$1;
                                                statearr_19955_20103[2] = null;
                                                statearr_19955_20103[1] = 5;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_19918 === 77) {
                                                  var inst_19894 = state_19917[2];
                                                  var state_19917__$1 = state_19917;
                                                  var statearr_19956_20104 = state_19917__$1;
                                                  statearr_19956_20104[2] = inst_19894;
                                                  statearr_19956_20104[1] = 71;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_19918 === 54) {
                                                    var inst_19789 = state_19917[2];
                                                    var state_19917__$1 = state_19917;
                                                    var statearr_19960_20105 = state_19917__$1;
                                                    statearr_19960_20105[2] = inst_19789;
                                                    statearr_19960_20105[1] = 51;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_19918 === 15) {
                                                      var inst_19631 = state_19917[2];
                                                      var state_19917__$1 = state_19917;
                                                      var statearr_19961_20106 = state_19917__$1;
                                                      statearr_19961_20106[2] = inst_19631;
                                                      statearr_19961_20106[1] = 12;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_19918 === 48) {
                                                        var inst_19733 = state_19917[37];
                                                        var inst_19734 = state_19917[38];
                                                        var inst_19722 = state_19917[39];
                                                        var inst_19737 = state_19917[40];
                                                        var inst_19725 = state_19917[41];
                                                        var inst_19723 = state_19917[42];
                                                        var inst_19724 = state_19917[43];
                                                        var inst_19745 = state_19917[2];
                                                        var inst_19746 = cljs.core.PersistentVector.EMPTY_NODE;
                                                        var inst_19747 = inst_19733.call(null, inst_19734);
                                                        var inst_19748 = [inst_19747];
                                                        var inst_19749 = new cljs.core.PersistentVector(null, 1, 5, inst_19746, inst_19748, null);
                                                        var inst_19750 = cljs.core.concat.call(null, inst_19737, inst_19745, inst_19749);
                                                        var inst_19751 = cljs.core.apply.call(null, cljs.core.aset, inst_19750);
                                                        var inst_19752 = inst_19725 + 1;
                                                        var tmp19957 = inst_19722;
                                                        var tmp19958 = inst_19723;
                                                        var tmp19959 = inst_19724;
                                                        var inst_19722__$1 = tmp19957;
                                                        var inst_19723__$1 = tmp19958;
                                                        var inst_19724__$1 = tmp19959;
                                                        var inst_19725__$1 = inst_19752;
                                                        var state_19917__$1 = function() {
                                                          var statearr_19962 = state_19917;
                                                          statearr_19962[39] = inst_19722__$1;
                                                          statearr_19962[41] = inst_19725__$1;
                                                          statearr_19962[44] = inst_19751;
                                                          statearr_19962[42] = inst_19723__$1;
                                                          statearr_19962[43] = inst_19724__$1;
                                                          return statearr_19962;
                                                        }();
                                                        var statearr_19963_20107 = state_19917__$1;
                                                        statearr_19963_20107[2] = null;
                                                        statearr_19963_20107[1] = 41;
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_19918 === 50) {
                                                          var state_19917__$1 = state_19917;
                                                          var statearr_19964_20108 = state_19917__$1;
                                                          statearr_19964_20108[2] = null;
                                                          statearr_19964_20108[1] = 51;
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          if (state_val_19918 === 75) {
                                                            var inst_19857 = state_19917[7];
                                                            var inst_19859 = cljs.core.chunked_seq_QMARK_.call(null, inst_19857);
                                                            var state_19917__$1 = state_19917;
                                                            if (inst_19859) {
                                                              var statearr_19965_20109 = state_19917__$1;
                                                              statearr_19965_20109[1] = 78;
                                                            } else {
                                                              var statearr_19966_20110 = state_19917__$1;
                                                              statearr_19966_20110[1] = 79;
                                                            }
                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                          } else {
                                                            if (state_val_19918 === 21) {
                                                              var inst_19655 = state_19917[45];
                                                              var inst_19589 = state_19917[36];
                                                              var inst_19658 = cljs.core.name.call(null, inst_19655);
                                                              var inst_19659 = cljs.core.get.call(null, inst_19589, inst_19655);
                                                              var inst_19660 = camera["position"][inst_19658] = inst_19659;
                                                              var state_19917__$1 = state_19917;
                                                              var statearr_19967_20111 = state_19917__$1;
                                                              statearr_19967_20111[2] = inst_19660;
                                                              statearr_19967_20111[1] = 23;
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              if (state_val_19918 === 31) {
                                                                var state_19917__$1 = state_19917;
                                                                var statearr_19971_20112 = state_19917__$1;
                                                                statearr_19971_20112[2] = null;
                                                                statearr_19971_20112[1] = 32;
                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                              } else {
                                                                if (state_val_19918 === 32) {
                                                                  var inst_19667 = state_19917[27];
                                                                  var inst_19684 = state_19917[2];
                                                                  var inst_19685 = cljs.core.next.call(null, inst_19667);
                                                                  var inst_19647 = inst_19685;
                                                                  var inst_19648 = null;
                                                                  var inst_19649 = 0;
                                                                  var inst_19650 = 0;
                                                                  var state_19917__$1 = function() {
                                                                    var statearr_19972 = state_19917;
                                                                    statearr_19972[28] = inst_19649;
                                                                    statearr_19972[46] = inst_19684;
                                                                    statearr_19972[29] = inst_19650;
                                                                    statearr_19972[30] = inst_19648;
                                                                    statearr_19972[31] = inst_19647;
                                                                    return statearr_19972;
                                                                  }();
                                                                  var statearr_19973_20113 = state_19917__$1;
                                                                  statearr_19973_20113[2] = null;
                                                                  statearr_19973_20113[1] = 16;
                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                } else {
                                                                  if (state_val_19918 === 40) {
                                                                    var inst_19703 = state_19917[47];
                                                                    var inst_19705 = state_19917[48];
                                                                    var inst_19702 = state_19917[49];
                                                                    var inst_19704 = state_19917[50];
                                                                    var inst_19799 = state_19917[2];
                                                                    var inst_19800 = inst_19705 + 1;
                                                                    var tmp19968 = inst_19703;
                                                                    var tmp19969 = inst_19702;
                                                                    var tmp19970 = inst_19704;
                                                                    var inst_19702__$1 = tmp19969;
                                                                    var inst_19703__$1 = tmp19968;
                                                                    var inst_19704__$1 = tmp19970;
                                                                    var inst_19705__$1 = inst_19800;
                                                                    var state_19917__$1 = function() {
                                                                      var statearr_19974 = state_19917;
                                                                      statearr_19974[47] = inst_19703__$1;
                                                                      statearr_19974[51] = inst_19799;
                                                                      statearr_19974[48] = inst_19705__$1;
                                                                      statearr_19974[49] = inst_19702__$1;
                                                                      statearr_19974[50] = inst_19704__$1;
                                                                      return statearr_19974;
                                                                    }();
                                                                    var statearr_19975_20114 = state_19917__$1;
                                                                    statearr_19975_20114[2] = null;
                                                                    statearr_19975_20114[1] = 33;
                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                  } else {
                                                                    if (state_val_19918 === 56) {
                                                                      var inst_19766 = state_19917[33];
                                                                      var inst_19775 = cljs.core.PersistentVector.EMPTY_NODE;
                                                                      var inst_19776 = [inst_19766];
                                                                      var inst_19777 = new cljs.core.PersistentVector(null, 1, 5, inst_19775, inst_19776, null);
                                                                      var state_19917__$1 = state_19917;
                                                                      var statearr_19976_20115 = state_19917__$1;
                                                                      statearr_19976_20115[2] = inst_19777;
                                                                      statearr_19976_20115[1] = 57;
                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                    } else {
                                                                      if (state_val_19918 === 33) {
                                                                        var inst_19705 = state_19917[48];
                                                                        var inst_19704 = state_19917[50];
                                                                        var inst_19707 = inst_19705 < inst_19704;
                                                                        var inst_19708 = inst_19707;
                                                                        var state_19917__$1 = state_19917;
                                                                        if (cljs.core.truth_(inst_19708)) {
                                                                          var statearr_19977_20116 = state_19917__$1;
                                                                          statearr_19977_20116[1] = 35;
                                                                        } else {
                                                                          var statearr_19978_20117 = state_19917__$1;
                                                                          statearr_19978_20117[1] = 36;
                                                                        }
                                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                      } else {
                                                                        if (state_val_19918 === 13) {
                                                                          var inst_19614 = state_19917[52];
                                                                          var inst_19618 = cljs.core.chunk_first.call(null, inst_19614);
                                                                          var inst_19619 = cljs.core.chunk_rest.call(null, inst_19614);
                                                                          var inst_19620 = cljs.core.count.call(null, inst_19618);
                                                                          var inst_19598 = inst_19619;
                                                                          var inst_19599 = inst_19618;
                                                                          var inst_19600 = inst_19620;
                                                                          var inst_19601 = 0;
                                                                          var state_19917__$1 = function() {
                                                                            var statearr_19979 = state_19917;
                                                                            statearr_19979[20] = inst_19598;
                                                                            statearr_19979[21] = inst_19599;
                                                                            statearr_19979[22] = inst_19601;
                                                                            statearr_19979[23] = inst_19600;
                                                                            return statearr_19979;
                                                                          }();
                                                                          var statearr_19980_20118 = state_19917__$1;
                                                                          statearr_19980_20118[2] = null;
                                                                          statearr_19980_20118[1] = 5;
                                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                        } else {
                                                                          if (state_val_19918 === 22) {
                                                                            var state_19917__$1 = state_19917;
                                                                            var statearr_19981_20119 = state_19917__$1;
                                                                            statearr_19981_20119[2] = null;
                                                                            statearr_19981_20119[1] = 23;
                                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                          } else {
                                                                            if (state_val_19918 === 36) {
                                                                              var inst_19702 = state_19917[49];
                                                                              var inst_19803 = state_19917[10];
                                                                              var inst_19803__$1 = cljs.core.seq.call(null, inst_19702);
                                                                              var state_19917__$1 = function() {
                                                                                var statearr_19982 = state_19917;
                                                                                statearr_19982[10] = inst_19803__$1;
                                                                                return statearr_19982;
                                                                              }();
                                                                              if (inst_19803__$1) {
                                                                                var statearr_19983_20120 = state_19917__$1;
                                                                                statearr_19983_20120[1] = 58;
                                                                              } else {
                                                                                var statearr_19984_20121 = state_19917__$1;
                                                                                statearr_19984_20121[1] = 59;
                                                                              }
                                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                            } else {
                                                                              if (state_val_19918 === 41) {
                                                                                var inst_19725 = state_19917[41];
                                                                                var inst_19724 = state_19917[43];
                                                                                var inst_19727 = inst_19725 < inst_19724;
                                                                                var inst_19728 = inst_19727;
                                                                                var state_19917__$1 = state_19917;
                                                                                if (cljs.core.truth_(inst_19728)) {
                                                                                  var statearr_19985_20122 = state_19917__$1;
                                                                                  statearr_19985_20122[1] = 43;
                                                                                } else {
                                                                                  var statearr_19986_20123 = state_19917__$1;
                                                                                  statearr_19986_20123[1] = 44;
                                                                                }
                                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                              } else {
                                                                                if (state_val_19918 === 43) {
                                                                                  var inst_19732 = state_19917[34];
                                                                                  var inst_19725 = state_19917[41];
                                                                                  var inst_19714 = state_19917[53];
                                                                                  var inst_19723 = state_19917[42];
                                                                                  var inst_19731 = cljs.core._nth.call(null, inst_19723, inst_19725);
                                                                                  var inst_19732__$1 = cljs.core.nth.call(null, inst_19731, 0, null);
                                                                                  var inst_19733 = cljs.core.nth.call(null, inst_19731, 1, null);
                                                                                  var inst_19734 = cljs.core.apply.call(null, cljs.core.aget, inst_19714, inst_19732__$1);
                                                                                  var inst_19735 = cljs.core.PersistentVector.EMPTY_NODE;
                                                                                  var inst_19736 = [inst_19714];
                                                                                  var inst_19737 = new cljs.core.PersistentVector(null, 1, 5, inst_19735, inst_19736, null);
                                                                                  var inst_19738 = cljs.core.sequential_QMARK_.call(null, inst_19732__$1);
                                                                                  var state_19917__$1 = function() {
                                                                                    var statearr_19987 = state_19917;
                                                                                    statearr_19987[37] = inst_19733;
                                                                                    statearr_19987[38] = inst_19734;
                                                                                    statearr_19987[34] = inst_19732__$1;
                                                                                    statearr_19987[40] = inst_19737;
                                                                                    return statearr_19987;
                                                                                  }();
                                                                                  if (inst_19738) {
                                                                                    var statearr_19988_20124 = state_19917__$1;
                                                                                    statearr_19988_20124[1] = 46;
                                                                                  } else {
                                                                                    var statearr_19989_20125 = state_19917__$1;
                                                                                    statearr_19989_20125[1] = 47;
                                                                                  }
                                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                } else {
                                                                                  if (state_val_19918 === 61) {
                                                                                    var inst_19803 = state_19917[10];
                                                                                    var inst_19807 = cljs.core.chunk_first.call(null, inst_19803);
                                                                                    var inst_19808 = cljs.core.chunk_rest.call(null, inst_19803);
                                                                                    var inst_19809 = cljs.core.count.call(null, inst_19807);
                                                                                    var inst_19702 = inst_19808;
                                                                                    var inst_19703 = inst_19807;
                                                                                    var inst_19704 = inst_19809;
                                                                                    var inst_19705 = 0;
                                                                                    var state_19917__$1 = function() {
                                                                                      var statearr_19990 = state_19917;
                                                                                      statearr_19990[47] = inst_19703;
                                                                                      statearr_19990[48] = inst_19705;
                                                                                      statearr_19990[49] = inst_19702;
                                                                                      statearr_19990[50] = inst_19704;
                                                                                      return statearr_19990;
                                                                                    }();
                                                                                    var statearr_19991_20126 = state_19917__$1;
                                                                                    statearr_19991_20126[2] = null;
                                                                                    statearr_19991_20126[1] = 33;
                                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                  } else {
                                                                                    if (state_val_19918 === 29) {
                                                                                      var inst_19688 = state_19917[2];
                                                                                      var state_19917__$1 = state_19917;
                                                                                      var statearr_19992_20127 = state_19917__$1;
                                                                                      statearr_19992_20127[2] = inst_19688;
                                                                                      statearr_19992_20127[1] = 26;
                                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                    } else {
                                                                                      if (state_val_19918 === 44) {
                                                                                        var inst_19755 = state_19917[54];
                                                                                        var inst_19722 = state_19917[39];
                                                                                        var inst_19755__$1 = cljs.core.seq.call(null, inst_19722);
                                                                                        var state_19917__$1 = function() {
                                                                                          var statearr_19993 = state_19917;
                                                                                          statearr_19993[54] = inst_19755__$1;
                                                                                          return statearr_19993;
                                                                                        }();
                                                                                        if (inst_19755__$1) {
                                                                                          var statearr_19994_20128 = state_19917__$1;
                                                                                          statearr_19994_20128[1] = 49;
                                                                                        } else {
                                                                                          var statearr_19995_20129 = state_19917__$1;
                                                                                          statearr_19995_20129[1] = 50;
                                                                                        }
                                                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                      } else {
                                                                                        if (state_val_19918 === 6) {
                                                                                          var inst_19638 = state_19917[2];
                                                                                          var inst_19643 = cljs.core.PersistentVector.EMPTY_NODE;
                                                                                          var inst_19644 = [new cljs.core.Keyword(null, "x", "x", 2099068185), new cljs.core.Keyword(null, "y", "y", -1757859776), new cljs.core.Keyword(null, "z", "z", -789527183)];
                                                                                          var inst_19645 = new cljs.core.PersistentVector(null, 3, 5, inst_19643, inst_19644, null);
                                                                                          var inst_19646 = cljs.core.seq.call(null, inst_19645);
                                                                                          var inst_19647 = inst_19646;
                                                                                          var inst_19648 = null;
                                                                                          var inst_19649 = 0;
                                                                                          var inst_19650 = 0;
                                                                                          var state_19917__$1 = function() {
                                                                                            var statearr_19996 = state_19917;
                                                                                            statearr_19996[28] = inst_19649;
                                                                                            statearr_19996[55] = inst_19638;
                                                                                            statearr_19996[29] = inst_19650;
                                                                                            statearr_19996[30] = inst_19648;
                                                                                            statearr_19996[31] = inst_19647;
                                                                                            return statearr_19996;
                                                                                          }();
                                                                                          var statearr_19997_20130 = state_19917__$1;
                                                                                          statearr_19997_20130[2] = null;
                                                                                          statearr_19997_20130[1] = 16;
                                                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                        } else {
                                                                                          if (state_val_19918 === 28) {
                                                                                            var inst_19667 = state_19917[27];
                                                                                            var inst_19589 = state_19917[36];
                                                                                            var inst_19676 = state_19917[56];
                                                                                            var inst_19676__$1 = cljs.core.first.call(null, inst_19667);
                                                                                            var inst_19677 = cljs.core.contains_QMARK_.call(null, inst_19589, inst_19676__$1);
                                                                                            var state_19917__$1 = function() {
                                                                                              var statearr_19998 = state_19917;
                                                                                              statearr_19998[56] = inst_19676__$1;
                                                                                              return statearr_19998;
                                                                                            }();
                                                                                            if (inst_19677) {
                                                                                              var statearr_19999_20131 = state_19917__$1;
                                                                                              statearr_19999_20131[1] = 30;
                                                                                            } else {
                                                                                              var statearr_20000_20132 = state_19917__$1;
                                                                                              statearr_20000_20132[1] = 31;
                                                                                            }
                                                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                          } else {
                                                                                            if (state_val_19918 === 64) {
                                                                                              var inst_19815 = state_19917[12];
                                                                                              var inst_19822 = cljs.core.seq.call(null, inst_19815);
                                                                                              var inst_19823 = cljs.core.seq.call(null, inst_19822);
                                                                                              var inst_19824 = inst_19823;
                                                                                              var inst_19825 = null;
                                                                                              var inst_19826 = 0;
                                                                                              var inst_19827 = 0;
                                                                                              var state_19917__$1 = function() {
                                                                                                var statearr_20001 = state_19917;
                                                                                                statearr_20001[13] = inst_19826;
                                                                                                statearr_20001[14] = inst_19825;
                                                                                                statearr_20001[8] = inst_19824;
                                                                                                statearr_20001[17] = inst_19827;
                                                                                                return statearr_20001;
                                                                                              }();
                                                                                              var statearr_20002_20133 = state_19917__$1;
                                                                                              statearr_20002_20133[2] = null;
                                                                                              statearr_20002_20133[1] = 67;
                                                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                            } else {
                                                                                              if (state_val_19918 === 51) {
                                                                                                var inst_19792 = state_19917[2];
                                                                                                var state_19917__$1 = state_19917;
                                                                                                var statearr_20003_20134 = state_19917__$1;
                                                                                                statearr_20003_20134[2] = inst_19792;
                                                                                                statearr_20003_20134[1] = 45;
                                                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                              } else {
                                                                                                if (state_val_19918 === 25) {
                                                                                                  var state_19917__$1 = state_19917;
                                                                                                  var statearr_20004_20135 = state_19917__$1;
                                                                                                  statearr_20004_20135[2] = null;
                                                                                                  statearr_20004_20135[1] = 26;
                                                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                } else {
                                                                                                  if (state_val_19918 === 34) {
                                                                                                    var inst_19591 = state_19917[9];
                                                                                                    var inst_19912 = state_19917[2];
                                                                                                    var inst_19584 = inst_19591;
                                                                                                    var state_19917__$1 = function() {
                                                                                                      var statearr_20005 = state_19917;
                                                                                                      statearr_20005[57] = inst_19912;
                                                                                                      statearr_20005[32] = inst_19584;
                                                                                                      return statearr_20005;
                                                                                                    }();
                                                                                                    var statearr_20006_20136 = state_19917__$1;
                                                                                                    statearr_20006_20136[2] = null;
                                                                                                    statearr_20006_20136[1] = 2;
                                                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                  } else {
                                                                                                    if (state_val_19918 === 17) {
                                                                                                      var inst_19590 = state_19917[35];
                                                                                                      var inst_19695 = state_19917[2];
                                                                                                      var inst_19700 = cljs.core.seq.call(null, inst_19590);
                                                                                                      var inst_19701 = cljs.core.seq.call(null, inst_19700);
                                                                                                      var inst_19702 = inst_19701;
                                                                                                      var inst_19703 = null;
                                                                                                      var inst_19704 = 0;
                                                                                                      var inst_19705 = 0;
                                                                                                      var state_19917__$1 = function() {
                                                                                                        var statearr_20007 = state_19917;
                                                                                                        statearr_20007[47] = inst_19703;
                                                                                                        statearr_20007[48] = inst_19705;
                                                                                                        statearr_20007[49] = inst_19702;
                                                                                                        statearr_20007[50] = inst_19704;
                                                                                                        statearr_20007[58] = inst_19695;
                                                                                                        return statearr_20007;
                                                                                                      }();
                                                                                                      var statearr_20008_20137 = state_19917__$1;
                                                                                                      statearr_20008_20137[2] = null;
                                                                                                      statearr_20008_20137[1] = 33;
                                                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                    } else {
                                                                                                      if (state_val_19918 === 3) {
                                                                                                        var inst_19915 = state_19917[2];
                                                                                                        var state_19917__$1 = state_19917;
                                                                                                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_19917__$1, inst_19915);
                                                                                                      } else {
                                                                                                        if (state_val_19918 === 12) {
                                                                                                          var inst_19634 = state_19917[2];
                                                                                                          var state_19917__$1 = state_19917;
                                                                                                          var statearr_20009_20138 = state_19917__$1;
                                                                                                          statearr_20009_20138[2] = inst_19634;
                                                                                                          statearr_20009_20138[1] = 9;
                                                                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                        } else {
                                                                                                          if (state_val_19918 === 2) {
                                                                                                            var state_19917__$1 = state_19917;
                                                                                                            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_19917__$1, 4, render_state);
                                                                                                          } else {
                                                                                                            if (state_val_19918 === 66) {
                                                                                                              var inst_19803 = state_19917[10];
                                                                                                              var inst_19901 = state_19917[2];
                                                                                                              var inst_19902 = cljs.core.next.call(null, inst_19803);
                                                                                                              var inst_19702 = inst_19902;
                                                                                                              var inst_19703 = null;
                                                                                                              var inst_19704 = 0;
                                                                                                              var inst_19705 = 0;
                                                                                                              var state_19917__$1 = function() {
                                                                                                                var statearr_20013 = state_19917;
                                                                                                                statearr_20013[47] = inst_19703;
                                                                                                                statearr_20013[48] = inst_19705;
                                                                                                                statearr_20013[49] = inst_19702;
                                                                                                                statearr_20013[50] = inst_19704;
                                                                                                                statearr_20013[59] = inst_19901;
                                                                                                                return statearr_20013;
                                                                                                              }();
                                                                                                              var statearr_20014_20139 = state_19917__$1;
                                                                                                              statearr_20014_20139[2] = null;
                                                                                                              statearr_20014_20139[1] = 33;
                                                                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                            } else {
                                                                                                              if (state_val_19918 === 23) {
                                                                                                                var inst_19649 = state_19917[28];
                                                                                                                var inst_19650 = state_19917[29];
                                                                                                                var inst_19648 = state_19917[30];
                                                                                                                var inst_19647 = state_19917[31];
                                                                                                                var inst_19663 = state_19917[2];
                                                                                                                var inst_19664 = inst_19650 + 1;
                                                                                                                var tmp20010 = inst_19649;
                                                                                                                var tmp20011 = inst_19648;
                                                                                                                var tmp20012 = inst_19647;
                                                                                                                var inst_19647__$1 = tmp20012;
                                                                                                                var inst_19648__$1 = tmp20011;
                                                                                                                var inst_19649__$1 = tmp20010;
                                                                                                                var inst_19650__$1 = inst_19664;
                                                                                                                var state_19917__$1 = function() {
                                                                                                                  var statearr_20015 = state_19917;
                                                                                                                  statearr_20015[60] = inst_19663;
                                                                                                                  statearr_20015[28] = inst_19649__$1;
                                                                                                                  statearr_20015[29] = inst_19650__$1;
                                                                                                                  statearr_20015[30] = inst_19648__$1;
                                                                                                                  statearr_20015[31] = inst_19647__$1;
                                                                                                                  return statearr_20015;
                                                                                                                }();
                                                                                                                var statearr_20016_20140 = state_19917__$1;
                                                                                                                statearr_20016_20140[2] = null;
                                                                                                                statearr_20016_20140[1] = 16;
                                                                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                              } else {
                                                                                                                if (state_val_19918 === 47) {
                                                                                                                  var inst_19732 = state_19917[34];
                                                                                                                  var inst_19741 = cljs.core.PersistentVector.EMPTY_NODE;
                                                                                                                  var inst_19742 = [inst_19732];
                                                                                                                  var inst_19743 = new cljs.core.PersistentVector(null, 1, 5, inst_19741, inst_19742, null);
                                                                                                                  var state_19917__$1 = state_19917;
                                                                                                                  var statearr_20017_20141 = state_19917__$1;
                                                                                                                  statearr_20017_20141[2] = inst_19743;
                                                                                                                  statearr_20017_20141[1] = 48;
                                                                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                                } else {
                                                                                                                  if (state_val_19918 === 35) {
                                                                                                                    var inst_19703 = state_19917[47];
                                                                                                                    var inst_19591 = state_19917[9];
                                                                                                                    var inst_19705 = state_19917[48];
                                                                                                                    var inst_19714 = state_19917[53];
                                                                                                                    var inst_19711 = cljs.core._nth.call(null, inst_19703, inst_19705);
                                                                                                                    var inst_19712 = cljs.core.nth.call(null, inst_19711, 0, null);
                                                                                                                    var inst_19713 = cljs.core.nth.call(null, inst_19711, 1, null);
                                                                                                                    var inst_19714__$1 = cljs.core.get.call(null, inst_19591, inst_19712);
                                                                                                                    var state_19917__$1 = function() {
                                                                                                                      var statearr_20018 = state_19917;
                                                                                                                      statearr_20018[61] = inst_19713;
                                                                                                                      statearr_20018[53] = inst_19714__$1;
                                                                                                                      return statearr_20018;
                                                                                                                    }();
                                                                                                                    if (cljs.core.truth_(inst_19714__$1)) {
                                                                                                                      var statearr_20019_20142 = state_19917__$1;
                                                                                                                      statearr_20019_20142[1] = 38;
                                                                                                                    } else {
                                                                                                                      var statearr_20020_20143 = state_19917__$1;
                                                                                                                      statearr_20020_20143[1] = 39;
                                                                                                                    }
                                                                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                                  } else {
                                                                                                                    if (state_val_19918 === 82) {
                                                                                                                      var inst_19868 = state_19917[62];
                                                                                                                      var inst_19877 = cljs.core.PersistentVector.EMPTY_NODE;
                                                                                                                      var inst_19878 = [inst_19868];
                                                                                                                      var inst_19879 = new cljs.core.PersistentVector(null, 1, 5, inst_19877, inst_19878, null);
                                                                                                                      var state_19917__$1 = state_19917;
                                                                                                                      var statearr_20021_20144 = state_19917__$1;
                                                                                                                      statearr_20021_20144[2] = inst_19879;
                                                                                                                      statearr_20021_20144[1] = 83;
                                                                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                                    } else {
                                                                                                                      if (state_val_19918 === 76) {
                                                                                                                        var state_19917__$1 = state_19917;
                                                                                                                        var statearr_20022_20145 = state_19917__$1;
                                                                                                                        statearr_20022_20145[2] = null;
                                                                                                                        statearr_20022_20145[1] = 77;
                                                                                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                                      } else {
                                                                                                                        if (state_val_19918 === 19) {
                                                                                                                          var inst_19667 = state_19917[27];
                                                                                                                          var inst_19647 = state_19917[31];
                                                                                                                          var inst_19667__$1 = cljs.core.seq.call(null, inst_19647);
                                                                                                                          var state_19917__$1 = function() {
                                                                                                                            var statearr_20023 = state_19917;
                                                                                                                            statearr_20023[27] = inst_19667__$1;
                                                                                                                            return statearr_20023;
                                                                                                                          }();
                                                                                                                          if (inst_19667__$1) {
                                                                                                                            var statearr_20024_20146 = state_19917__$1;
                                                                                                                            statearr_20024_20146[1] = 24;
                                                                                                                          } else {
                                                                                                                            var statearr_20025_20147 = state_19917__$1;
                                                                                                                            statearr_20025_20147[1] = 25;
                                                                                                                          }
                                                                                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                                        } else {
                                                                                                                          if (state_val_19918 === 57) {
                                                                                                                            var inst_19755 = state_19917[54];
                                                                                                                            var inst_19771 = state_19917[63];
                                                                                                                            var inst_19768 = state_19917[64];
                                                                                                                            var inst_19767 = state_19917[65];
                                                                                                                            var inst_19779 = state_19917[2];
                                                                                                                            var inst_19780 = cljs.core.PersistentVector.EMPTY_NODE;
                                                                                                                            var inst_19781 = inst_19767.call(null, inst_19768);
                                                                                                                            var inst_19782 = [inst_19781];
                                                                                                                            var inst_19783 = new cljs.core.PersistentVector(null, 1, 5, inst_19780, inst_19782, null);
                                                                                                                            var inst_19784 = cljs.core.concat.call(null, inst_19771, inst_19779, inst_19783);
                                                                                                                            var inst_19785 = cljs.core.apply.call(null, cljs.core.aset, inst_19784);
                                                                                                                            var inst_19786 = cljs.core.next.call(null, inst_19755);
                                                                                                                            var inst_19722 = inst_19786;
                                                                                                                            var inst_19723 = null;
                                                                                                                            var inst_19724 = 0;
                                                                                                                            var inst_19725 = 0;
                                                                                                                            var state_19917__$1 = function() {
                                                                                                                              var statearr_20026 = state_19917;
                                                                                                                              statearr_20026[39] = inst_19722;
                                                                                                                              statearr_20026[66] = inst_19785;
                                                                                                                              statearr_20026[41] = inst_19725;
                                                                                                                              statearr_20026[42] = inst_19723;
                                                                                                                              statearr_20026[43] = inst_19724;
                                                                                                                              return statearr_20026;
                                                                                                                            }();
                                                                                                                            var statearr_20027_20148 = state_19917__$1;
                                                                                                                            statearr_20027_20148[2] = null;
                                                                                                                            statearr_20027_20148[1] = 41;
                                                                                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                                          } else {
                                                                                                                            if (state_val_19918 === 68) {
                                                                                                                              var inst_19898 = state_19917[2];
                                                                                                                              var state_19917__$1 = state_19917;
                                                                                                                              var statearr_20028_20149 = state_19917__$1;
                                                                                                                              statearr_20028_20149[2] = inst_19898;
                                                                                                                              statearr_20028_20149[1] = 66;
                                                                                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                                            } else {
                                                                                                                              if (state_val_19918 === 11) {
                                                                                                                                var state_19917__$1 = state_19917;
                                                                                                                                var statearr_20029_20150 = state_19917__$1;
                                                                                                                                statearr_20029_20150[2] = null;
                                                                                                                                statearr_20029_20150[1] = 12;
                                                                                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                                              } else {
                                                                                                                                if (state_val_19918 === 9) {
                                                                                                                                  var inst_19636 = state_19917[2];
                                                                                                                                  var state_19917__$1 = state_19917;
                                                                                                                                  var statearr_20030_20151 = state_19917__$1;
                                                                                                                                  statearr_20030_20151[2] = inst_19636;
                                                                                                                                  statearr_20030_20151[1] = 6;
                                                                                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                                                } else {
                                                                                                                                  if (state_val_19918 === 5) {
                                                                                                                                    var inst_19601 = state_19917[22];
                                                                                                                                    var inst_19600 = state_19917[23];
                                                                                                                                    var inst_19603 = inst_19601 < inst_19600;
                                                                                                                                    var inst_19604 = inst_19603;
                                                                                                                                    var state_19917__$1 = state_19917;
                                                                                                                                    if (cljs.core.truth_(inst_19604)) {
                                                                                                                                      var statearr_20031_20152 = state_19917__$1;
                                                                                                                                      statearr_20031_20152[1] = 7;
                                                                                                                                    } else {
                                                                                                                                      var statearr_20032_20153 = state_19917__$1;
                                                                                                                                      statearr_20032_20153[1] = 8;
                                                                                                                                    }
                                                                                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                                                  } else {
                                                                                                                                    if (state_val_19918 === 83) {
                                                                                                                                      var inst_19870 = state_19917[67];
                                                                                                                                      var inst_19873 = state_19917[68];
                                                                                                                                      var inst_19857 = state_19917[7];
                                                                                                                                      var inst_19869 = state_19917[69];
                                                                                                                                      var inst_19881 = state_19917[2];
                                                                                                                                      var inst_19882 = cljs.core.PersistentVector.EMPTY_NODE;
                                                                                                                                      var inst_19883 = inst_19869.call(null, inst_19870);
                                                                                                                                      var inst_19884 = [inst_19883];
                                                                                                                                      var inst_19885 = new cljs.core.PersistentVector(null, 1, 5, inst_19882, inst_19884, null);
                                                                                                                                      var inst_19886 = cljs.core.concat.call(null, inst_19873, inst_19881, inst_19885);
                                                                                                                                      var inst_19887 = cljs.core.apply.call(null, cljs.core.aset, inst_19886);
                                                                                                                                      var inst_19888 = cljs.core.next.call(null, inst_19857);
                                                                                                                                      var inst_19824 = inst_19888;
                                                                                                                                      var inst_19825 = null;
                                                                                                                                      var inst_19826 = 0;
                                                                                                                                      var inst_19827 = 0;
                                                                                                                                      var state_19917__$1 = function() {
                                                                                                                                        var statearr_20033 = state_19917;
                                                                                                                                        statearr_20033[13] = inst_19826;
                                                                                                                                        statearr_20033[14] = inst_19825;
                                                                                                                                        statearr_20033[70] = inst_19887;
                                                                                                                                        statearr_20033[8] = inst_19824;
                                                                                                                                        statearr_20033[17] = inst_19827;
                                                                                                                                        return statearr_20033;
                                                                                                                                      }();
                                                                                                                                      var statearr_20034_20154 = state_19917__$1;
                                                                                                                                      statearr_20034_20154[2] = null;
                                                                                                                                      statearr_20034_20154[1] = 67;
                                                                                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                                                    } else {
                                                                                                                                      if (state_val_19918 === 14) {
                                                                                                                                        var inst_19614 = state_19917[52];
                                                                                                                                        var inst_19624 = cljs.core.first.call(null, inst_19614);
                                                                                                                                        var inst_19625 = cljs.core.nth.call(null, inst_19624, 0, null);
                                                                                                                                        var inst_19626 = cljs.core.nth.call(null, inst_19624, 1, null);
                                                                                                                                        var inst_19627 = scene.add(inst_19626);
                                                                                                                                        var inst_19628 = cljs.core.next.call(null, inst_19614);
                                                                                                                                        var inst_19598 = inst_19628;
                                                                                                                                        var inst_19599 = null;
                                                                                                                                        var inst_19600 = 0;
                                                                                                                                        var inst_19601 = 0;
                                                                                                                                        var state_19917__$1 = function() {
                                                                                                                                          var statearr_20035 = state_19917;
                                                                                                                                          statearr_20035[20] = inst_19598;
                                                                                                                                          statearr_20035[21] = inst_19599;
                                                                                                                                          statearr_20035[71] = inst_19625;
                                                                                                                                          statearr_20035[72] = inst_19627;
                                                                                                                                          statearr_20035[22] = inst_19601;
                                                                                                                                          statearr_20035[23] = inst_19600;
                                                                                                                                          return statearr_20035;
                                                                                                                                        }();
                                                                                                                                        var statearr_20036_20155 = state_19917__$1;
                                                                                                                                        statearr_20036_20155[2] = null;
                                                                                                                                        statearr_20036_20155[1] = 5;
                                                                                                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                                                      } else {
                                                                                                                                        if (state_val_19918 === 45) {
                                                                                                                                          var inst_19794 = state_19917[2];
                                                                                                                                          var state_19917__$1 = state_19917;
                                                                                                                                          var statearr_20037_20156 = state_19917__$1;
                                                                                                                                          statearr_20037_20156[2] = inst_19794;
                                                                                                                                          statearr_20037_20156[1] = 42;
                                                                                                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                                                        } else {
                                                                                                                                          if (state_val_19918 === 53) {
                                                                                                                                            var inst_19755 = state_19917[54];
                                                                                                                                            var inst_19766 = state_19917[33];
                                                                                                                                            var inst_19714 = state_19917[53];
                                                                                                                                            var inst_19765 = cljs.core.first.call(null, inst_19755);
                                                                                                                                            var inst_19766__$1 = cljs.core.nth.call(null, inst_19765, 0, null);
                                                                                                                                            var inst_19767 = cljs.core.nth.call(null, inst_19765, 1, null);
                                                                                                                                            var inst_19768 = cljs.core.apply.call(null, cljs.core.aget, inst_19714, inst_19766__$1);
                                                                                                                                            var inst_19769 = cljs.core.PersistentVector.EMPTY_NODE;
                                                                                                                                            var inst_19770 = [inst_19714];
                                                                                                                                            var inst_19771 = new cljs.core.PersistentVector(null, 1, 5, inst_19769, inst_19770, null);
                                                                                                                                            var inst_19772 = cljs.core.sequential_QMARK_.call(null, inst_19766__$1);
                                                                                                                                            var state_19917__$1 = function() {
                                                                                                                                              var statearr_20038 = state_19917;
                                                                                                                                              statearr_20038[63] = inst_19771;
                                                                                                                                              statearr_20038[64] = inst_19768;
                                                                                                                                              statearr_20038[33] = inst_19766__$1;
                                                                                                                                              statearr_20038[65] = inst_19767;
                                                                                                                                              return statearr_20038;
                                                                                                                                            }();
                                                                                                                                            if (inst_19772) {
                                                                                                                                              var statearr_20039_20157 = state_19917__$1;
                                                                                                                                              statearr_20039_20157[1] = 55;
                                                                                                                                            } else {
                                                                                                                                              var statearr_20040_20158 = state_19917__$1;
                                                                                                                                              statearr_20040_20158[1] = 56;
                                                                                                                                            }
                                                                                                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                                                          } else {
                                                                                                                                            if (state_val_19918 === 78) {
                                                                                                                                              var inst_19857 = state_19917[7];
                                                                                                                                              var inst_19861 = cljs.core.chunk_first.call(null, inst_19857);
                                                                                                                                              var inst_19862 = cljs.core.chunk_rest.call(null, inst_19857);
                                                                                                                                              var inst_19863 = cljs.core.count.call(null, inst_19861);
                                                                                                                                              var inst_19824 = inst_19862;
                                                                                                                                              var inst_19825 = inst_19861;
                                                                                                                                              var inst_19826 = inst_19863;
                                                                                                                                              var inst_19827 = 0;
                                                                                                                                              var state_19917__$1 = function() {
                                                                                                                                                var statearr_20041 = state_19917;
                                                                                                                                                statearr_20041[13] = inst_19826;
                                                                                                                                                statearr_20041[14] = inst_19825;
                                                                                                                                                statearr_20041[8] = inst_19824;
                                                                                                                                                statearr_20041[17] = inst_19827;
                                                                                                                                                return statearr_20041;
                                                                                                                                              }();
                                                                                                                                              var statearr_20042_20159 = state_19917__$1;
                                                                                                                                              statearr_20042_20159[2] = null;
                                                                                                                                              statearr_20042_20159[1] = 67;
                                                                                                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                                                            } else {
                                                                                                                                              if (state_val_19918 === 26) {
                                                                                                                                                var inst_19691 = state_19917[2];
                                                                                                                                                var state_19917__$1 = state_19917;
                                                                                                                                                var statearr_20043_20160 = state_19917__$1;
                                                                                                                                                statearr_20043_20160[2] = inst_19691;
                                                                                                                                                statearr_20043_20160[1] = 20;
                                                                                                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                                                              } else {
                                                                                                                                                if (state_val_19918 === 16) {
                                                                                                                                                  var inst_19649 = state_19917[28];
                                                                                                                                                  var inst_19650 = state_19917[29];
                                                                                                                                                  var inst_19652 = inst_19650 < inst_19649;
                                                                                                                                                  var inst_19653 = inst_19652;
                                                                                                                                                  var state_19917__$1 = state_19917;
                                                                                                                                                  if (cljs.core.truth_(inst_19653)) {
                                                                                                                                                    var statearr_20044_20161 = state_19917__$1;
                                                                                                                                                    statearr_20044_20161[1] = 18;
                                                                                                                                                  } else {
                                                                                                                                                    var statearr_20045_20162 = state_19917__$1;
                                                                                                                                                    statearr_20045_20162[1] = 19;
                                                                                                                                                  }
                                                                                                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                                                                } else {
                                                                                                                                                  if (state_val_19918 === 81) {
                                                                                                                                                    var inst_19868 = state_19917[62];
                                                                                                                                                    var state_19917__$1 = state_19917;
                                                                                                                                                    var statearr_20046_20163 = state_19917__$1;
                                                                                                                                                    statearr_20046_20163[2] = inst_19868;
                                                                                                                                                    statearr_20046_20163[1] = 83;
                                                                                                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                                                                  } else {
                                                                                                                                                    if (state_val_19918 === 79) {
                                                                                                                                                      var inst_19857 = state_19917[7];
                                                                                                                                                      var inst_19816 = state_19917[11];
                                                                                                                                                      var inst_19868 = state_19917[62];
                                                                                                                                                      var inst_19867 = cljs.core.first.call(null, inst_19857);
                                                                                                                                                      var inst_19868__$1 = cljs.core.nth.call(null, inst_19867, 0, null);
                                                                                                                                                      var inst_19869 = cljs.core.nth.call(null, inst_19867, 1, null);
                                                                                                                                                      var inst_19870 = cljs.core.apply.call(null, cljs.core.aget, inst_19816, inst_19868__$1);
                                                                                                                                                      var inst_19871 = cljs.core.PersistentVector.EMPTY_NODE;
                                                                                                                                                      var inst_19872 = [inst_19816];
                                                                                                                                                      var inst_19873 = new cljs.core.PersistentVector(null, 1, 5, inst_19871, inst_19872, null);
                                                                                                                                                      var inst_19874 = cljs.core.sequential_QMARK_.call(null, inst_19868__$1);
                                                                                                                                                      var state_19917__$1 = function() {
                                                                                                                                                        var statearr_20047 = state_19917;
                                                                                                                                                        statearr_20047[67] = inst_19870;
                                                                                                                                                        statearr_20047[68] = inst_19873;
                                                                                                                                                        statearr_20047[69] = inst_19869;
                                                                                                                                                        statearr_20047[62] = inst_19868__$1;
                                                                                                                                                        return statearr_20047;
                                                                                                                                                      }();
                                                                                                                                                      if (inst_19874) {
                                                                                                                                                        var statearr_20048_20164 = state_19917__$1;
                                                                                                                                                        statearr_20048_20164[1] = 81;
                                                                                                                                                      } else {
                                                                                                                                                        var statearr_20049_20165 = state_19917__$1;
                                                                                                                                                        statearr_20049_20165[1] = 82;
                                                                                                                                                      }
                                                                                                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                                                                    } else {
                                                                                                                                                      if (state_val_19918 === 38) {
                                                                                                                                                        var inst_19713 = state_19917[61];
                                                                                                                                                        var inst_19720 = cljs.core.seq.call(null, inst_19713);
                                                                                                                                                        var inst_19721 = cljs.core.seq.call(null, inst_19720);
                                                                                                                                                        var inst_19722 = inst_19721;
                                                                                                                                                        var inst_19723 = null;
                                                                                                                                                        var inst_19724 = 0;
                                                                                                                                                        var inst_19725 = 0;
                                                                                                                                                        var state_19917__$1 = function() {
                                                                                                                                                          var statearr_20050 = state_19917;
                                                                                                                                                          statearr_20050[39] = inst_19722;
                                                                                                                                                          statearr_20050[41] = inst_19725;
                                                                                                                                                          statearr_20050[42] = inst_19723;
                                                                                                                                                          statearr_20050[43] = inst_19724;
                                                                                                                                                          return statearr_20050;
                                                                                                                                                        }();
                                                                                                                                                        var statearr_20051_20166 = state_19917__$1;
                                                                                                                                                        statearr_20051_20166[2] = null;
                                                                                                                                                        statearr_20051_20166[1] = 41;
                                                                                                                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                                                                      } else {
                                                                                                                                                        if (state_val_19918 === 30) {
                                                                                                                                                          var inst_19589 = state_19917[36];
                                                                                                                                                          var inst_19676 = state_19917[56];
                                                                                                                                                          var inst_19679 = cljs.core.name.call(null, inst_19676);
                                                                                                                                                          var inst_19680 = cljs.core.get.call(null, inst_19589, inst_19676);
                                                                                                                                                          var inst_19681 = camera["position"][inst_19679] = inst_19680;
                                                                                                                                                          var state_19917__$1 = state_19917;
                                                                                                                                                          var statearr_20052_20167 = state_19917__$1;
                                                                                                                                                          statearr_20052_20167[2] = inst_19681;
                                                                                                                                                          statearr_20052_20167[1] = 32;
                                                                                                                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                                                                        } else {
                                                                                                                                                          if (state_val_19918 === 73) {
                                                                                                                                                            var inst_19834 = state_19917[26];
                                                                                                                                                            var inst_19843 = cljs.core.PersistentVector.EMPTY_NODE;
                                                                                                                                                            var inst_19844 = [inst_19834];
                                                                                                                                                            var inst_19845 = new cljs.core.PersistentVector(null, 1, 5, inst_19843, inst_19844, null);
                                                                                                                                                            var state_19917__$1 = state_19917;
                                                                                                                                                            var statearr_20053_20168 = state_19917__$1;
                                                                                                                                                            statearr_20053_20168[2] = inst_19845;
                                                                                                                                                            statearr_20053_20168[1] = 74;
                                                                                                                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                                                                          } else {
                                                                                                                                                            if (state_val_19918 === 10) {
                                                                                                                                                              var inst_19614 = state_19917[52];
                                                                                                                                                              var inst_19616 = cljs.core.chunked_seq_QMARK_.call(null, inst_19614);
                                                                                                                                                              var state_19917__$1 = state_19917;
                                                                                                                                                              if (inst_19616) {
                                                                                                                                                                var statearr_20054_20169 = state_19917__$1;
                                                                                                                                                                statearr_20054_20169[1] = 13;
                                                                                                                                                              } else {
                                                                                                                                                                var statearr_20055_20170 = state_19917__$1;
                                                                                                                                                                statearr_20055_20170[1] = 14;
                                                                                                                                                              }
                                                                                                                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                                                                            } else {
                                                                                                                                                              if (state_val_19918 === 18) {
                                                                                                                                                                var inst_19655 = state_19917[45];
                                                                                                                                                                var inst_19589 = state_19917[36];
                                                                                                                                                                var inst_19650 = state_19917[29];
                                                                                                                                                                var inst_19648 = state_19917[30];
                                                                                                                                                                var inst_19655__$1 = cljs.core._nth.call(null, inst_19648, inst_19650);
                                                                                                                                                                var inst_19656 = cljs.core.contains_QMARK_.call(null, inst_19589, inst_19655__$1);
                                                                                                                                                                var state_19917__$1 = function() {
                                                                                                                                                                  var statearr_20056 = state_19917;
                                                                                                                                                                  statearr_20056[45] = inst_19655__$1;
                                                                                                                                                                  return statearr_20056;
                                                                                                                                                                }();
                                                                                                                                                                if (inst_19656) {
                                                                                                                                                                  var statearr_20057_20171 = state_19917__$1;
                                                                                                                                                                  statearr_20057_20171[1] = 21;
                                                                                                                                                                } else {
                                                                                                                                                                  var statearr_20058_20172 = state_19917__$1;
                                                                                                                                                                  statearr_20058_20172[1] = 22;
                                                                                                                                                                }
                                                                                                                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                                                                              } else {
                                                                                                                                                                if (state_val_19918 === 52) {
                                                                                                                                                                  var inst_19755 = state_19917[54];
                                                                                                                                                                  var inst_19759 = cljs.core.chunk_first.call(null, inst_19755);
                                                                                                                                                                  var inst_19760 = cljs.core.chunk_rest.call(null, inst_19755);
                                                                                                                                                                  var inst_19761 = cljs.core.count.call(null, inst_19759);
                                                                                                                                                                  var inst_19722 = inst_19760;
                                                                                                                                                                  var inst_19723 = inst_19759;
                                                                                                                                                                  var inst_19724 = inst_19761;
                                                                                                                                                                  var inst_19725 = 0;
                                                                                                                                                                  var state_19917__$1 = function() {
                                                                                                                                                                    var statearr_20059 = state_19917;
                                                                                                                                                                    statearr_20059[39] = inst_19722;
                                                                                                                                                                    statearr_20059[41] = inst_19725;
                                                                                                                                                                    statearr_20059[42] = inst_19723;
                                                                                                                                                                    statearr_20059[43] = inst_19724;
                                                                                                                                                                    return statearr_20059;
                                                                                                                                                                  }();
                                                                                                                                                                  var statearr_20060_20173 = state_19917__$1;
                                                                                                                                                                  statearr_20060_20173[2] = null;
                                                                                                                                                                  statearr_20060_20173[1] = 41;
                                                                                                                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                                                                                } else {
                                                                                                                                                                  if (state_val_19918 === 67) {
                                                                                                                                                                    var inst_19826 = state_19917[13];
                                                                                                                                                                    var inst_19827 = state_19917[17];
                                                                                                                                                                    var inst_19829 = inst_19827 < inst_19826;
                                                                                                                                                                    var inst_19830 = inst_19829;
                                                                                                                                                                    var state_19917__$1 = state_19917;
                                                                                                                                                                    if (cljs.core.truth_(inst_19830)) {
                                                                                                                                                                      var statearr_20061_20174 = state_19917__$1;
                                                                                                                                                                      statearr_20061_20174[1] = 69;
                                                                                                                                                                    } else {
                                                                                                                                                                      var statearr_20062_20175 = state_19917__$1;
                                                                                                                                                                      statearr_20062_20175[1] = 70;
                                                                                                                                                                    }
                                                                                                                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                                                                                  } else {
                                                                                                                                                                    if (state_val_19918 === 71) {
                                                                                                                                                                      var inst_19896 = state_19917[2];
                                                                                                                                                                      var state_19917__$1 = state_19917;
                                                                                                                                                                      var statearr_20063_20176 = state_19917__$1;
                                                                                                                                                                      statearr_20063_20176[2] = inst_19896;
                                                                                                                                                                      statearr_20063_20176[1] = 68;
                                                                                                                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                                                                                    } else {
                                                                                                                                                                      if (state_val_19918 === 42) {
                                                                                                                                                                        var inst_19796 = state_19917[2];
                                                                                                                                                                        var state_19917__$1 = state_19917;
                                                                                                                                                                        var statearr_20064_20177 = state_19917__$1;
                                                                                                                                                                        statearr_20064_20177[2] = inst_19796;
                                                                                                                                                                        statearr_20064_20177[1] = 40;
                                                                                                                                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                                                                                      } else {
                                                                                                                                                                        if (state_val_19918 === 80) {
                                                                                                                                                                          var inst_19891 = state_19917[2];
                                                                                                                                                                          var state_19917__$1 = state_19917;
                                                                                                                                                                          var statearr_20065_20178 = state_19917__$1;
                                                                                                                                                                          statearr_20065_20178[2] = inst_19891;
                                                                                                                                                                          statearr_20065_20178[1] = 77;
                                                                                                                                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                                                                                        } else {
                                                                                                                                                                          if (state_val_19918 === 37) {
                                                                                                                                                                            var inst_19910 = state_19917[2];
                                                                                                                                                                            var state_19917__$1 = state_19917;
                                                                                                                                                                            var statearr_20066_20179 = state_19917__$1;
                                                                                                                                                                            statearr_20066_20179[2] = inst_19910;
                                                                                                                                                                            statearr_20066_20179[1] = 34;
                                                                                                                                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                                                                                          } else {
                                                                                                                                                                            if (state_val_19918 === 63) {
                                                                                                                                                                              var inst_19905 = state_19917[2];
                                                                                                                                                                              var state_19917__$1 = state_19917;
                                                                                                                                                                              var statearr_20067_20180 = state_19917__$1;
                                                                                                                                                                              statearr_20067_20180[2] = inst_19905;
                                                                                                                                                                              statearr_20067_20180[1] = 60;
                                                                                                                                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                                                                                            } else {
                                                                                                                                                                              if (state_val_19918 === 8) {
                                                                                                                                                                                var inst_19598 = state_19917[20];
                                                                                                                                                                                var inst_19614 = state_19917[52];
                                                                                                                                                                                var inst_19614__$1 = cljs.core.seq.call(null, inst_19598);
                                                                                                                                                                                var state_19917__$1 = function() {
                                                                                                                                                                                  var statearr_20068 = state_19917;
                                                                                                                                                                                  statearr_20068[52] = inst_19614__$1;
                                                                                                                                                                                  return statearr_20068;
                                                                                                                                                                                }();
                                                                                                                                                                                if (inst_19614__$1) {
                                                                                                                                                                                  var statearr_20069_20181 = state_19917__$1;
                                                                                                                                                                                  statearr_20069_20181[1] = 10;
                                                                                                                                                                                } else {
                                                                                                                                                                                  var statearr_20070_20182 = state_19917__$1;
                                                                                                                                                                                  statearr_20070_20182[1] = 11;
                                                                                                                                                                                }
                                                                                                                                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                                                                                              } else {
                                                                                                                                                                                if (state_val_19918 === 49) {
                                                                                                                                                                                  var inst_19755 = state_19917[54];
                                                                                                                                                                                  var inst_19757 = cljs.core.chunked_seq_QMARK_.call(null, inst_19755);
                                                                                                                                                                                  var state_19917__$1 = state_19917;
                                                                                                                                                                                  if (inst_19757) {
                                                                                                                                                                                    var statearr_20071_20183 = state_19917__$1;
                                                                                                                                                                                    statearr_20071_20183[1] = 52;
                                                                                                                                                                                  } else {
                                                                                                                                                                                    var statearr_20072_20184 = state_19917__$1;
                                                                                                                                                                                    statearr_20072_20184[1] = 53;
                                                                                                                                                                                  }
                                                                                                                                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                                                                                                } else {
                                                                                                                                                                                  return null;
                                                                                                                                                                                }
                                                                                                                                                                              }
                                                                                                                                                                            }
                                                                                                                                                                          }
                                                                                                                                                                        }
                                                                                                                                                                      }
                                                                                                                                                                    }
                                                                                                                                                                  }
                                                                                                                                                                }
                                                                                                                                                              }
                                                                                                                                                            }
                                                                                                                                                          }
                                                                                                                                                        }
                                                                                                                                                      }
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                                              }
                                                                                                                                            }
                                                                                                                                          }
                                                                                                                                        }
                                                                                                                                      }
                                                                                                                                    }
                                                                                                                                  }
                                                                                                                                }
                                                                                                                              }
                                                                                                                            }
                                                                                                                          }
                                                                                                                        }
                                                                                                                      }
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__7634__auto___20080, render_state, scene, camera, renderer);
        return function(switch__7572__auto__, c__7634__auto___20080, render_state, scene, camera, renderer) {
          return function() {
            var metaverse$core$main_$_state_machine__7573__auto__ = null;
            var metaverse$core$main_$_state_machine__7573__auto____0 = function() {
              var statearr_20076 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_20076[0] = metaverse$core$main_$_state_machine__7573__auto__;
              statearr_20076[1] = 1;
              return statearr_20076;
            };
            var metaverse$core$main_$_state_machine__7573__auto____1 = function(state_19917) {
              while (true) {
                var ret_value__7574__auto__ = function() {
                  try {
                    while (true) {
                      var result__7575__auto__ = switch__7572__auto__.call(null, state_19917);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__7575__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__7575__auto__;
                      }
                      break;
                    }
                  } catch (e20077) {
                    if (e20077 instanceof Object) {
                      var ex__7576__auto__ = e20077;
                      var statearr_20078_20185 = state_19917;
                      statearr_20078_20185[5] = ex__7576__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_19917);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e20077;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__7574__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__20186 = state_19917;
                  state_19917 = G__20186;
                  continue;
                } else {
                  return ret_value__7574__auto__;
                }
                break;
              }
            };
            metaverse$core$main_$_state_machine__7573__auto__ = function(state_19917) {
              switch(arguments.length) {
                case 0:
                  return metaverse$core$main_$_state_machine__7573__auto____0.call(this);
                case 1:
                  return metaverse$core$main_$_state_machine__7573__auto____1.call(this, state_19917);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            metaverse$core$main_$_state_machine__7573__auto__.cljs$core$IFn$_invoke$arity$0 = metaverse$core$main_$_state_machine__7573__auto____0;
            metaverse$core$main_$_state_machine__7573__auto__.cljs$core$IFn$_invoke$arity$1 = metaverse$core$main_$_state_machine__7573__auto____1;
            return metaverse$core$main_$_state_machine__7573__auto__;
          }();
        }(switch__7572__auto__, c__7634__auto___20080, render_state, scene, camera, renderer);
      }();
      var state__7636__auto__ = function() {
        var statearr_20079 = f__7635__auto__.call(null);
        statearr_20079[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__7634__auto___20080;
        return statearr_20079;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__7636__auto__);
    };
  }(c__7634__auto___20080, render_state, scene, camera, renderer));
  metaverse.core.add_single_cube.call(null, render_state);
  metaverse.core.set_initial_camera_position.call(null, render_state);
  metaverse.util.recur_infinitely.call(null, cljs.core.partial.call(null, metaverse.core.rotate_fn, render_state), 50);
  return metaverse.core.render.call(null, 0, renderer, scene, camera);
};
metaverse.util.append_onload.call(null, metaverse.core.main);

//# sourceMappingURL=main.js.map