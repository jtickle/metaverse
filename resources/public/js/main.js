if(typeof Math.imul == "undefined" || (Math.imul(0xffffffff,5) == 0)) {
    Math.imul = function (a, b) {
        var ah  = (a >>> 16) & 0xffff;
        var al = a & 0xffff;
        var bh  = (b >>> 16) & 0xffff;
        var bl = b & 0xffff;
        // the shift by 0 fixes the sign on the high part
        // the final |0 converts the unsigned value into a signed value
        return ((al * bl) + (((ah * bl + al * bh) << 16) >>> 0)|0);
    }
}


var CLOSURE_NO_DEPS = true;
var COMPILED = false;
var goog = goog || {};
goog.global = this;
goog.global.CLOSURE_UNCOMPILED_DEFINES;
goog.global.CLOSURE_DEFINES;
goog.isDef = function(val) {
  return val !== void 0;
};
goog.exportPath_ = function(name, opt_object, opt_objectToExportTo) {
  var parts = name.split(".");
  var cur = opt_objectToExportTo || goog.global;
  if (!(parts[0] in cur) && cur.execScript) {
    cur.execScript("var " + parts[0]);
  }
  for (var part;parts.length && (part = parts.shift());) {
    if (!parts.length && goog.isDef(opt_object)) {
      cur[part] = opt_object;
    } else {
      if (cur[part]) {
        cur = cur[part];
      } else {
        cur = cur[part] = {};
      }
    }
  }
};
goog.define = function(name, defaultValue) {
  var value = defaultValue;
  if (!COMPILED) {
    if (goog.global.CLOSURE_UNCOMPILED_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_UNCOMPILED_DEFINES, name)) {
      value = goog.global.CLOSURE_UNCOMPILED_DEFINES[name];
    } else {
      if (goog.global.CLOSURE_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_DEFINES, name)) {
        value = goog.global.CLOSURE_DEFINES[name];
      }
    }
  }
  goog.exportPath_(name, value);
};
goog.define("goog.DEBUG", true);
goog.define("goog.LOCALE", "en");
goog.define("goog.TRUSTED_SITE", true);
goog.define("goog.STRICT_MODE_COMPATIBLE", false);
goog.define("goog.DISALLOW_TEST_ONLY_CODE", COMPILED && !goog.DEBUG);
goog.define("goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING", false);
goog.provide = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      throw Error('Namespace "' + name + '" already declared.');
    }
  }
  goog.constructNamespace_(name);
};
goog.constructNamespace_ = function(name, opt_obj) {
  if (!COMPILED) {
    delete goog.implicitNamespaces_[name];
    var namespace = name;
    while (namespace = namespace.substring(0, namespace.lastIndexOf("."))) {
      if (goog.getObjectByName(namespace)) {
        break;
      }
      goog.implicitNamespaces_[namespace] = true;
    }
  }
  goog.exportPath_(name, opt_obj);
};
goog.VALID_MODULE_RE_ = /^[a-zA-Z_$][a-zA-Z0-9._$]*$/;
goog.module = function(name) {
  if (!goog.isString(name) || !name || name.search(goog.VALID_MODULE_RE_) == -1) {
    throw Error("Invalid module identifier");
  }
  if (!goog.isInModuleLoader_()) {
    throw Error("Module " + name + " has been loaded incorrectly.");
  }
  if (goog.moduleLoaderState_.moduleName) {
    throw Error("goog.module may only be called once per module.");
  }
  goog.moduleLoaderState_.moduleName = name;
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      throw Error('Namespace "' + name + '" already declared.');
    }
    delete goog.implicitNamespaces_[name];
  }
};
goog.module.get = function(name) {
  return goog.module.getInternal_(name);
};
goog.module.getInternal_ = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      return name in goog.loadedModules_ ? goog.loadedModules_[name] : goog.getObjectByName(name);
    } else {
      return null;
    }
  }
};
goog.moduleLoaderState_ = null;
goog.isInModuleLoader_ = function() {
  return goog.moduleLoaderState_ != null;
};
goog.module.declareTestMethods = function() {
  if (!goog.isInModuleLoader_()) {
    throw new Error("goog.module.declareTestMethods must be called from " + "within a goog.module");
  }
  goog.moduleLoaderState_.declareTestMethods = true;
};
goog.module.declareLegacyNamespace = function() {
  if (!COMPILED && !goog.isInModuleLoader_()) {
    throw new Error("goog.module.declareLegacyNamespace must be called from " + "within a goog.module");
  }
  if (!COMPILED && !goog.moduleLoaderState_.moduleName) {
    throw Error("goog.module must be called prior to " + "goog.module.declareLegacyNamespace.");
  }
  goog.moduleLoaderState_.declareLegacyNamespace = true;
};
goog.setTestOnly = function(opt_message) {
  if (goog.DISALLOW_TEST_ONLY_CODE) {
    opt_message = opt_message || "";
    throw Error("Importing test-only code into non-debug environment" + (opt_message ? ": " + opt_message : "."));
  }
};
goog.forwardDeclare = function(name) {
};
if (!COMPILED) {
  goog.isProvided_ = function(name) {
    return name in goog.loadedModules_ || !goog.implicitNamespaces_[name] && goog.isDefAndNotNull(goog.getObjectByName(name));
  };
  goog.implicitNamespaces_ = {"goog.module":true};
}
goog.getObjectByName = function(name, opt_obj) {
  var parts = name.split(".");
  var cur = opt_obj || goog.global;
  for (var part;part = parts.shift();) {
    if (goog.isDefAndNotNull(cur[part])) {
      cur = cur[part];
    } else {
      return null;
    }
  }
  return cur;
};
goog.globalize = function(obj, opt_global) {
  var global = opt_global || goog.global;
  for (var x in obj) {
    global[x] = obj[x];
  }
};
goog.addDependency = function(relPath, provides, requires, opt_isModule) {
  if (goog.DEPENDENCIES_ENABLED) {
    var provide, require;
    var path = relPath.replace(/\\/g, "/");
    var deps = goog.dependencies_;
    for (var i = 0;provide = provides[i];i++) {
      deps.nameToPath[provide] = path;
      deps.pathIsModule[path] = !!opt_isModule;
    }
    for (var j = 0;require = requires[j];j++) {
      if (!(path in deps.requires)) {
        deps.requires[path] = {};
      }
      deps.requires[path][require] = true;
    }
  }
};
goog.define("goog.ENABLE_DEBUG_LOADER", true);
goog.logToConsole_ = function(msg) {
  if (goog.global.console) {
    goog.global.console["error"](msg);
  }
};
goog.require = function(name) {
  if (!COMPILED) {
    if (goog.ENABLE_DEBUG_LOADER && goog.IS_OLD_IE_) {
      goog.maybeProcessDeferredDep_(name);
    }
    if (goog.isProvided_(name)) {
      if (goog.isInModuleLoader_()) {
        return goog.module.getInternal_(name);
      } else {
        return null;
      }
    }
    if (goog.ENABLE_DEBUG_LOADER) {
      var path = goog.getPathFromDeps_(name);
      if (path) {
        goog.included_[path] = true;
        goog.writeScripts_();
        return null;
      }
    }
    var errorMessage = "goog.require could not find: " + name;
    goog.logToConsole_(errorMessage);
    throw Error(errorMessage);
  }
};
goog.basePath = "";
goog.global.CLOSURE_BASE_PATH;
goog.global.CLOSURE_NO_DEPS;
goog.global.CLOSURE_IMPORT_SCRIPT;
goog.nullFunction = function() {
};
goog.abstractMethod = function() {
  throw Error("unimplemented abstract method");
};
goog.addSingletonGetter = function(ctor) {
  ctor.getInstance = function() {
    if (ctor.instance_) {
      return ctor.instance_;
    }
    if (goog.DEBUG) {
      goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor;
    }
    return ctor.instance_ = new ctor;
  };
};
goog.instantiatedSingletons_ = [];
goog.define("goog.LOAD_MODULE_USING_EVAL", true);
goog.define("goog.SEAL_MODULE_EXPORTS", goog.DEBUG);
goog.loadedModules_ = {};
goog.DEPENDENCIES_ENABLED = !COMPILED && goog.ENABLE_DEBUG_LOADER;
if (goog.DEPENDENCIES_ENABLED) {
  goog.included_ = {};
  goog.dependencies_ = {pathIsModule:{}, nameToPath:{}, requires:{}, visited:{}, written:{}, deferred:{}};
  goog.inHtmlDocument_ = function() {
    var doc = goog.global.document;
    return typeof doc != "undefined" && "write" in doc;
  };
  goog.findBasePath_ = function() {
    if (goog.global.CLOSURE_BASE_PATH) {
      goog.basePath = goog.global.CLOSURE_BASE_PATH;
      return;
    } else {
      if (!goog.inHtmlDocument_()) {
        return;
      }
    }
    var doc = goog.global.document;
    var scripts = doc.getElementsByTagName("SCRIPT");
    for (var i = scripts.length - 1;i >= 0;--i) {
      var script = (scripts[i]);
      var src = script.src;
      var qmark = src.lastIndexOf("?");
      var l = qmark == -1 ? src.length : qmark;
      if (src.substr(l - 7, 7) == "base.js") {
        goog.basePath = src.substr(0, l - 7);
        return;
      }
    }
  };
  goog.importScript_ = function(src, opt_sourceText) {
    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;
    if (importScript(src, opt_sourceText)) {
      goog.dependencies_.written[src] = true;
    }
  };
  goog.IS_OLD_IE_ = !goog.global.atob && goog.global.document && goog.global.document.all;
  goog.importModule_ = function(src) {
    var bootstrap = 'goog.retrieveAndExecModule_("' + src + '");';
    if (goog.importScript_("", bootstrap)) {
      goog.dependencies_.written[src] = true;
    }
  };
  goog.queuedModules_ = [];
  goog.wrapModule_ = function(srcUrl, scriptText) {
    if (!goog.LOAD_MODULE_USING_EVAL || !goog.isDef(goog.global.JSON)) {
      return "" + "goog.loadModule(function(exports) {" + '"use strict";' + scriptText + "\n" + ";return exports" + "});" + "\n//# sourceURL\x3d" + srcUrl + "\n";
    } else {
      return "" + "goog.loadModule(" + goog.global.JSON.stringify(scriptText + "\n//# sourceURL\x3d" + srcUrl + "\n") + ");";
    }
  };
  goog.loadQueuedModules_ = function() {
    var count = goog.queuedModules_.length;
    if (count > 0) {
      var queue = goog.queuedModules_;
      goog.queuedModules_ = [];
      for (var i = 0;i < count;i++) {
        var path = queue[i];
        goog.maybeProcessDeferredPath_(path);
      }
    }
  };
  goog.maybeProcessDeferredDep_ = function(name) {
    if (goog.isDeferredModule_(name) && goog.allDepsAreAvailable_(name)) {
      var path = goog.getPathFromDeps_(name);
      goog.maybeProcessDeferredPath_(goog.basePath + path);
    }
  };
  goog.isDeferredModule_ = function(name) {
    var path = goog.getPathFromDeps_(name);
    if (path && goog.dependencies_.pathIsModule[path]) {
      var abspath = goog.basePath + path;
      return abspath in goog.dependencies_.deferred;
    }
    return false;
  };
  goog.allDepsAreAvailable_ = function(name) {
    var path = goog.getPathFromDeps_(name);
    if (path && path in goog.dependencies_.requires) {
      for (var requireName in goog.dependencies_.requires[path]) {
        if (!goog.isProvided_(requireName) && !goog.isDeferredModule_(requireName)) {
          return false;
        }
      }
    }
    return true;
  };
  goog.maybeProcessDeferredPath_ = function(abspath) {
    if (abspath in goog.dependencies_.deferred) {
      var src = goog.dependencies_.deferred[abspath];
      delete goog.dependencies_.deferred[abspath];
      goog.globalEval(src);
    }
  };
  goog.loadModule = function(moduleDef) {
    var previousState = goog.moduleLoaderState_;
    try {
      goog.moduleLoaderState_ = {moduleName:undefined, declareTestMethods:false};
      var exports;
      if (goog.isFunction(moduleDef)) {
        exports = moduleDef.call(goog.global, {});
      } else {
        if (goog.isString(moduleDef)) {
          exports = goog.loadModuleFromSource_.call(goog.global, moduleDef);
        } else {
          throw Error("Invalid module definition");
        }
      }
      var moduleName = goog.moduleLoaderState_.moduleName;
      if (!goog.isString(moduleName) || !moduleName) {
        throw Error('Invalid module name "' + moduleName + '"');
      }
      if (goog.moduleLoaderState_.declareLegacyNamespace) {
        goog.constructNamespace_(moduleName, exports);
      } else {
        if (goog.SEAL_MODULE_EXPORTS && Object.seal) {
          Object.seal(exports);
        }
      }
      goog.loadedModules_[moduleName] = exports;
      if (goog.moduleLoaderState_.declareTestMethods) {
        for (var entry in exports) {
          if (entry.indexOf("test", 0) === 0 || entry == "tearDown" || entry == "setUp" || entry == "setUpPage" || entry == "tearDownPage") {
            goog.global[entry] = exports[entry];
          }
        }
      }
    } finally {
      goog.moduleLoaderState_ = previousState;
    }
  };
  goog.loadModuleFromSource_ = function(source) {
    var exports = {};
    eval(arguments[0]);
    return exports;
  };
  goog.writeScriptSrcNode_ = function(src) {
    goog.global.document.write('\x3cscript type\x3d"text/javascript" src\x3d"' + src + '"\x3e\x3c/' + "script\x3e");
  };
  goog.appendScriptSrcNode_ = function(src) {
    var doc = goog.global.document;
    var scriptEl = doc.createElement("script");
    scriptEl.type = "text/javascript";
    scriptEl.src = src;
    scriptEl.defer = false;
    scriptEl.async = false;
    doc.head.appendChild(scriptEl);
  };
  goog.writeScriptTag_ = function(src, opt_sourceText) {
    if (goog.inHtmlDocument_()) {
      var doc = goog.global.document;
      if (!goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING && doc.readyState == "complete") {
        var isDeps = /\bdeps.js$/.test(src);
        if (isDeps) {
          return false;
        } else {
          throw Error('Cannot write "' + src + '" after document load');
        }
      }
      var isOldIE = goog.IS_OLD_IE_;
      if (opt_sourceText === undefined) {
        if (!isOldIE) {
          if (goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING) {
            goog.appendScriptSrcNode_(src);
          } else {
            goog.writeScriptSrcNode_(src);
          }
        } else {
          var state = " onreadystatechange\x3d'goog.onScriptLoad_(this, " + ++goog.lastNonModuleScriptIndex_ + ")' ";
          doc.write('\x3cscript type\x3d"text/javascript" src\x3d"' + src + '"' + state + "\x3e\x3c/" + "script\x3e");
        }
      } else {
        doc.write('\x3cscript type\x3d"text/javascript"\x3e' + opt_sourceText + "\x3c/" + "script\x3e");
      }
      return true;
    } else {
      return false;
    }
  };
  goog.lastNonModuleScriptIndex_ = 0;
  goog.onScriptLoad_ = function(script, scriptIndex) {
    if (script.readyState == "complete" && goog.lastNonModuleScriptIndex_ == scriptIndex) {
      goog.loadQueuedModules_();
    }
    return true;
  };
  goog.writeScripts_ = function() {
    var scripts = [];
    var seenScript = {};
    var deps = goog.dependencies_;
    function visitNode(path) {
      if (path in deps.written) {
        return;
      }
      if (path in deps.visited) {
        if (!(path in seenScript)) {
          seenScript[path] = true;
          scripts.push(path);
        }
        return;
      }
      deps.visited[path] = true;
      if (path in deps.requires) {
        for (var requireName in deps.requires[path]) {
          if (!goog.isProvided_(requireName)) {
            if (requireName in deps.nameToPath) {
              visitNode(deps.nameToPath[requireName]);
            } else {
              throw Error("Undefined nameToPath for " + requireName);
            }
          }
        }
      }
      if (!(path in seenScript)) {
        seenScript[path] = true;
        scripts.push(path);
      }
    }
    for (var path in goog.included_) {
      if (!deps.written[path]) {
        visitNode(path);
      }
    }
    for (var i = 0;i < scripts.length;i++) {
      var path = scripts[i];
      goog.dependencies_.written[path] = true;
    }
    var moduleState = goog.moduleLoaderState_;
    goog.moduleLoaderState_ = null;
    var loadingModule = false;
    for (var i = 0;i < scripts.length;i++) {
      var path = scripts[i];
      if (path) {
        if (!deps.pathIsModule[path]) {
          goog.importScript_(goog.basePath + path);
        } else {
          loadingModule = true;
          goog.importModule_(goog.basePath + path);
        }
      } else {
        goog.moduleLoaderState_ = moduleState;
        throw Error("Undefined script input");
      }
    }
    goog.moduleLoaderState_ = moduleState;
  };
  goog.getPathFromDeps_ = function(rule) {
    if (rule in goog.dependencies_.nameToPath) {
      return goog.dependencies_.nameToPath[rule];
    } else {
      return null;
    }
  };
  goog.findBasePath_();
  if (!goog.global.CLOSURE_NO_DEPS) {
    goog.importScript_(goog.basePath + "deps.js");
  }
}
goog.normalizePath_ = function(path) {
  var components = path.split("/");
  var i = 0;
  while (i < components.length) {
    if (components[i] == ".") {
      components.splice(i, 1);
    } else {
      if (i && components[i] == ".." && components[i - 1] && components[i - 1] != "..") {
        components.splice(--i, 2);
      } else {
        i++;
      }
    }
  }
  return components.join("/");
};
goog.loadFileSync_ = function(src) {
  if (goog.global.CLOSURE_LOAD_FILE_SYNC) {
    return goog.global.CLOSURE_LOAD_FILE_SYNC(src);
  } else {
    var xhr = new goog.global["XMLHttpRequest"];
    xhr.open("get", src, false);
    xhr.send();
    return xhr.responseText;
  }
};
goog.retrieveAndExecModule_ = function(src) {
  if (!COMPILED) {
    var originalPath = src;
    src = goog.normalizePath_(src);
    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;
    var scriptText = goog.loadFileSync_(src);
    if (scriptText != null) {
      var execModuleScript = goog.wrapModule_(src, scriptText);
      var isOldIE = goog.IS_OLD_IE_;
      if (isOldIE) {
        goog.dependencies_.deferred[originalPath] = execModuleScript;
        goog.queuedModules_.push(originalPath);
      } else {
        importScript(src, execModuleScript);
      }
    } else {
      throw new Error("load of " + src + "failed");
    }
  }
};
goog.typeOf = function(value) {
  var s = typeof value;
  if (s == "object") {
    if (value) {
      if (value instanceof Array) {
        return "array";
      } else {
        if (value instanceof Object) {
          return s;
        }
      }
      var className = Object.prototype.toString.call((value));
      if (className == "[object Window]") {
        return "object";
      }
      if (className == "[object Array]" || typeof value.length == "number" && typeof value.splice != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("splice")) {
        return "array";
      }
      if (className == "[object Function]" || typeof value.call != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("call")) {
        return "function";
      }
    } else {
      return "null";
    }
  } else {
    if (s == "function" && typeof value.call == "undefined") {
      return "object";
    }
  }
  return s;
};
goog.isNull = function(val) {
  return val === null;
};
goog.isDefAndNotNull = function(val) {
  return val != null;
};
goog.isArray = function(val) {
  return goog.typeOf(val) == "array";
};
goog.isArrayLike = function(val) {
  var type = goog.typeOf(val);
  return type == "array" || type == "object" && typeof val.length == "number";
};
goog.isDateLike = function(val) {
  return goog.isObject(val) && typeof val.getFullYear == "function";
};
goog.isString = function(val) {
  return typeof val == "string";
};
goog.isBoolean = function(val) {
  return typeof val == "boolean";
};
goog.isNumber = function(val) {
  return typeof val == "number";
};
goog.isFunction = function(val) {
  return goog.typeOf(val) == "function";
};
goog.isObject = function(val) {
  var type = typeof val;
  return type == "object" && val != null || type == "function";
};
goog.getUid = function(obj) {
  return obj[goog.UID_PROPERTY_] || (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_);
};
goog.hasUid = function(obj) {
  return !!obj[goog.UID_PROPERTY_];
};
goog.removeUid = function(obj) {
  if ("removeAttribute" in obj) {
    obj.removeAttribute(goog.UID_PROPERTY_);
  }
  try {
    delete obj[goog.UID_PROPERTY_];
  } catch (ex) {
  }
};
goog.UID_PROPERTY_ = "closure_uid_" + (Math.random() * 1E9 >>> 0);
goog.uidCounter_ = 0;
goog.getHashCode = goog.getUid;
goog.removeHashCode = goog.removeUid;
goog.cloneObject = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.cloneObject(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.bindNative_ = function(fn, selfObj, var_args) {
  return (fn.call.apply(fn.bind, arguments));
};
goog.bindJs_ = function(fn, selfObj, var_args) {
  if (!fn) {
    throw new Error;
  }
  if (arguments.length > 2) {
    var boundArgs = Array.prototype.slice.call(arguments, 2);
    return function() {
      var newArgs = Array.prototype.slice.call(arguments);
      Array.prototype.unshift.apply(newArgs, boundArgs);
      return fn.apply(selfObj, newArgs);
    };
  } else {
    return function() {
      return fn.apply(selfObj, arguments);
    };
  }
};
goog.bind = function(fn, selfObj, var_args) {
  if (Function.prototype.bind && Function.prototype.bind.toString().indexOf("native code") != -1) {
    goog.bind = goog.bindNative_;
  } else {
    goog.bind = goog.bindJs_;
  }
  return goog.bind.apply(null, arguments);
};
goog.partial = function(fn, var_args) {
  var args = Array.prototype.slice.call(arguments, 1);
  return function() {
    var newArgs = args.slice();
    newArgs.push.apply(newArgs, arguments);
    return fn.apply(this, newArgs);
  };
};
goog.mixin = function(target, source) {
  for (var x in source) {
    target[x] = source[x];
  }
};
goog.now = goog.TRUSTED_SITE && Date.now || function() {
  return +new Date;
};
goog.globalEval = function(script) {
  if (goog.global.execScript) {
    goog.global.execScript(script, "JavaScript");
  } else {
    if (goog.global.eval) {
      if (goog.evalWorksForGlobals_ == null) {
        goog.global.eval("var _et_ \x3d 1;");
        if (typeof goog.global["_et_"] != "undefined") {
          delete goog.global["_et_"];
          goog.evalWorksForGlobals_ = true;
        } else {
          goog.evalWorksForGlobals_ = false;
        }
      }
      if (goog.evalWorksForGlobals_) {
        goog.global.eval(script);
      } else {
        var doc = goog.global.document;
        var scriptElt = doc.createElement("SCRIPT");
        scriptElt.type = "text/javascript";
        scriptElt.defer = false;
        scriptElt.appendChild(doc.createTextNode(script));
        doc.body.appendChild(scriptElt);
        doc.body.removeChild(scriptElt);
      }
    } else {
      throw Error("goog.globalEval not available");
    }
  }
};
goog.evalWorksForGlobals_ = null;
goog.cssNameMapping_;
goog.cssNameMappingStyle_;
goog.getCssName = function(className, opt_modifier) {
  var getMapping = function(cssName) {
    return goog.cssNameMapping_[cssName] || cssName;
  };
  var renameByParts = function(cssName) {
    var parts = cssName.split("-");
    var mapped = [];
    for (var i = 0;i < parts.length;i++) {
      mapped.push(getMapping(parts[i]));
    }
    return mapped.join("-");
  };
  var rename;
  if (goog.cssNameMapping_) {
    rename = goog.cssNameMappingStyle_ == "BY_WHOLE" ? getMapping : renameByParts;
  } else {
    rename = function(a) {
      return a;
    };
  }
  if (opt_modifier) {
    return className + "-" + rename(opt_modifier);
  } else {
    return rename(className);
  }
};
goog.setCssNameMapping = function(mapping, opt_style) {
  goog.cssNameMapping_ = mapping;
  goog.cssNameMappingStyle_ = opt_style;
};
goog.global.CLOSURE_CSS_NAME_MAPPING;
if (!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING) {
  goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING;
}
goog.getMsg = function(str, opt_values) {
  if (opt_values) {
    str = str.replace(/\{\$([^}]+)}/g, function(match, key) {
      return key in opt_values ? opt_values[key] : match;
    });
  }
  return str;
};
goog.getMsgWithFallback = function(a, b) {
  return a;
};
goog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {
  goog.exportPath_(publicPath, object, opt_objectToExportTo);
};
goog.exportProperty = function(object, publicName, symbol) {
  object[publicName] = symbol;
};
goog.inherits = function(childCtor, parentCtor) {
  function tempCtor() {
  }
  tempCtor.prototype = parentCtor.prototype;
  childCtor.superClass_ = parentCtor.prototype;
  childCtor.prototype = new tempCtor;
  childCtor.prototype.constructor = childCtor;
  childCtor.base = function(me, methodName, var_args) {
    var args = new Array(arguments.length - 2);
    for (var i = 2;i < arguments.length;i++) {
      args[i - 2] = arguments[i];
    }
    return parentCtor.prototype[methodName].apply(me, args);
  };
};
goog.base = function(me, opt_methodName, var_args) {
  var caller = arguments.callee.caller;
  if (goog.STRICT_MODE_COMPATIBLE || goog.DEBUG && !caller) {
    throw Error("arguments.caller not defined.  goog.base() cannot be used " + "with strict mode code. See " + "http://www.ecma-international.org/ecma-262/5.1/#sec-C");
  }
  if (caller.superClass_) {
    var ctorArgs = new Array(arguments.length - 1);
    for (var i = 1;i < arguments.length;i++) {
      ctorArgs[i - 1] = arguments[i];
    }
    return caller.superClass_.constructor.apply(me, ctorArgs);
  }
  var args = new Array(arguments.length - 2);
  for (var i = 2;i < arguments.length;i++) {
    args[i - 2] = arguments[i];
  }
  var foundCaller = false;
  for (var ctor = me.constructor;ctor;ctor = ctor.superClass_ && ctor.superClass_.constructor) {
    if (ctor.prototype[opt_methodName] === caller) {
      foundCaller = true;
    } else {
      if (foundCaller) {
        return ctor.prototype[opt_methodName].apply(me, args);
      }
    }
  }
  if (me[opt_methodName] === caller) {
    return me.constructor.prototype[opt_methodName].apply(me, args);
  } else {
    throw Error("goog.base called from a method of one name " + "to a method of a different name");
  }
};
goog.scope = function(fn) {
  fn.call(goog.global);
};
if (!COMPILED) {
  goog.global["COMPILED"] = COMPILED;
}
goog.defineClass = function(superClass, def) {
  var constructor = def.constructor;
  var statics = def.statics;
  if (!constructor || constructor == Object.prototype.constructor) {
    constructor = function() {
      throw Error("cannot instantiate an interface (no constructor defined).");
    };
  }
  var cls = goog.defineClass.createSealingConstructor_(constructor, superClass);
  if (superClass) {
    goog.inherits(cls, superClass);
  }
  delete def.constructor;
  delete def.statics;
  goog.defineClass.applyProperties_(cls.prototype, def);
  if (statics != null) {
    if (statics instanceof Function) {
      statics(cls);
    } else {
      goog.defineClass.applyProperties_(cls, statics);
    }
  }
  return cls;
};
goog.defineClass.ClassDescriptor;
goog.define("goog.defineClass.SEAL_CLASS_INSTANCES", goog.DEBUG);
goog.defineClass.createSealingConstructor_ = function(ctr, superClass) {
  if (goog.defineClass.SEAL_CLASS_INSTANCES && Object.seal instanceof Function) {
    if (superClass && superClass.prototype && superClass.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_]) {
      return ctr;
    }
    var wrappedCtr = function() {
      var instance = ctr.apply(this, arguments) || this;
      instance[goog.UID_PROPERTY_] = instance[goog.UID_PROPERTY_];
      if (this.constructor === wrappedCtr) {
        Object.seal(instance);
      }
      return instance;
    };
    return wrappedCtr;
  }
  return ctr;
};
goog.defineClass.OBJECT_PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.defineClass.applyProperties_ = function(target, source) {
  var key;
  for (key in source) {
    if (Object.prototype.hasOwnProperty.call(source, key)) {
      target[key] = source[key];
    }
  }
  for (var i = 0;i < goog.defineClass.OBJECT_PROTOTYPE_FIELDS_.length;i++) {
    key = goog.defineClass.OBJECT_PROTOTYPE_FIELDS_[i];
    if (Object.prototype.hasOwnProperty.call(source, key)) {
      target[key] = source[key];
    }
  }
};
goog.tagUnsealableClass = function(ctr) {
  if (!COMPILED && goog.defineClass.SEAL_CLASS_INSTANCES) {
    ctr.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_] = true;
  }
};
goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_ = "goog_defineClass_legacy_unsealable";
goog.provide("goog.string");
goog.provide("goog.string.Unicode");
goog.define("goog.string.DETECT_DOUBLE_ESCAPING", false);
goog.define("goog.string.FORCE_NON_DOM_HTML_UNESCAPING", false);
goog.string.Unicode = {NBSP:"\u00a0"};
goog.string.startsWith = function(str, prefix) {
  return str.lastIndexOf(prefix, 0) == 0;
};
goog.string.endsWith = function(str, suffix) {
  var l = str.length - suffix.length;
  return l >= 0 && str.indexOf(suffix, l) == l;
};
goog.string.caseInsensitiveStartsWith = function(str, prefix) {
  return goog.string.caseInsensitiveCompare(prefix, str.substr(0, prefix.length)) == 0;
};
goog.string.caseInsensitiveEndsWith = function(str, suffix) {
  return goog.string.caseInsensitiveCompare(suffix, str.substr(str.length - suffix.length, suffix.length)) == 0;
};
goog.string.caseInsensitiveEquals = function(str1, str2) {
  return str1.toLowerCase() == str2.toLowerCase();
};
goog.string.subs = function(str, var_args) {
  var splitParts = str.split("%s");
  var returnString = "";
  var subsArguments = Array.prototype.slice.call(arguments, 1);
  while (subsArguments.length && splitParts.length > 1) {
    returnString += splitParts.shift() + subsArguments.shift();
  }
  return returnString + splitParts.join("%s");
};
goog.string.collapseWhitespace = function(str) {
  return str.replace(/[\s\xa0]+/g, " ").replace(/^\s+|\s+$/g, "");
};
goog.string.isEmptyOrWhitespace = function(str) {
  return /^[\s\xa0]*$/.test(str);
};
goog.string.isEmptyString = function(str) {
  return str.length == 0;
};
goog.string.isEmpty = goog.string.isEmptyOrWhitespace;
goog.string.isEmptyOrWhitespaceSafe = function(str) {
  return goog.string.isEmptyOrWhitespace(goog.string.makeSafe(str));
};
goog.string.isEmptySafe = goog.string.isEmptyOrWhitespaceSafe;
goog.string.isBreakingWhitespace = function(str) {
  return !/[^\t\n\r ]/.test(str);
};
goog.string.isAlpha = function(str) {
  return !/[^a-zA-Z]/.test(str);
};
goog.string.isNumeric = function(str) {
  return !/[^0-9]/.test(str);
};
goog.string.isAlphaNumeric = function(str) {
  return !/[^a-zA-Z0-9]/.test(str);
};
goog.string.isSpace = function(ch) {
  return ch == " ";
};
goog.string.isUnicodeChar = function(ch) {
  return ch.length == 1 && ch >= " " && ch <= "~" || ch >= "\u0080" && ch <= "\ufffd";
};
goog.string.stripNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)+/g, " ");
};
goog.string.canonicalizeNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)/g, "\n");
};
goog.string.normalizeWhitespace = function(str) {
  return str.replace(/\xa0|\s/g, " ");
};
goog.string.normalizeSpaces = function(str) {
  return str.replace(/\xa0|[ \t]+/g, " ");
};
goog.string.collapseBreakingSpaces = function(str) {
  return str.replace(/[\t\r\n ]+/g, " ").replace(/^[\t\r\n ]+|[\t\r\n ]+$/g, "");
};
goog.string.trim = goog.TRUSTED_SITE && String.prototype.trim ? function(str) {
  return str.trim();
} : function(str) {
  return str.replace(/^[\s\xa0]+|[\s\xa0]+$/g, "");
};
goog.string.trimLeft = function(str) {
  return str.replace(/^[\s\xa0]+/, "");
};
goog.string.trimRight = function(str) {
  return str.replace(/[\s\xa0]+$/, "");
};
goog.string.caseInsensitiveCompare = function(str1, str2) {
  var test1 = String(str1).toLowerCase();
  var test2 = String(str2).toLowerCase();
  if (test1 < test2) {
    return -1;
  } else {
    if (test1 == test2) {
      return 0;
    } else {
      return 1;
    }
  }
};
goog.string.numerateCompareRegExp_ = /(\.\d+)|(\d+)|(\D+)/g;
goog.string.numerateCompare = function(str1, str2) {
  if (str1 == str2) {
    return 0;
  }
  if (!str1) {
    return -1;
  }
  if (!str2) {
    return 1;
  }
  var tokens1 = str1.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var tokens2 = str2.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var count = Math.min(tokens1.length, tokens2.length);
  for (var i = 0;i < count;i++) {
    var a = tokens1[i];
    var b = tokens2[i];
    if (a != b) {
      var num1 = parseInt(a, 10);
      if (!isNaN(num1)) {
        var num2 = parseInt(b, 10);
        if (!isNaN(num2) && num1 - num2) {
          return num1 - num2;
        }
      }
      return a < b ? -1 : 1;
    }
  }
  if (tokens1.length != tokens2.length) {
    return tokens1.length - tokens2.length;
  }
  return str1 < str2 ? -1 : 1;
};
goog.string.urlEncode = function(str) {
  return encodeURIComponent(String(str));
};
goog.string.urlDecode = function(str) {
  return decodeURIComponent(str.replace(/\+/g, " "));
};
goog.string.newLineToBr = function(str, opt_xml) {
  return str.replace(/(\r\n|\r|\n)/g, opt_xml ? "\x3cbr /\x3e" : "\x3cbr\x3e");
};
goog.string.htmlEscape = function(str, opt_isLikelyToContainHtmlChars) {
  if (opt_isLikelyToContainHtmlChars) {
    str = str.replace(goog.string.AMP_RE_, "\x26amp;").replace(goog.string.LT_RE_, "\x26lt;").replace(goog.string.GT_RE_, "\x26gt;").replace(goog.string.QUOT_RE_, "\x26quot;").replace(goog.string.SINGLE_QUOTE_RE_, "\x26#39;").replace(goog.string.NULL_RE_, "\x26#0;");
    if (goog.string.DETECT_DOUBLE_ESCAPING) {
      str = str.replace(goog.string.E_RE_, "\x26#101;");
    }
    return str;
  } else {
    if (!goog.string.ALL_RE_.test(str)) {
      return str;
    }
    if (str.indexOf("\x26") != -1) {
      str = str.replace(goog.string.AMP_RE_, "\x26amp;");
    }
    if (str.indexOf("\x3c") != -1) {
      str = str.replace(goog.string.LT_RE_, "\x26lt;");
    }
    if (str.indexOf("\x3e") != -1) {
      str = str.replace(goog.string.GT_RE_, "\x26gt;");
    }
    if (str.indexOf('"') != -1) {
      str = str.replace(goog.string.QUOT_RE_, "\x26quot;");
    }
    if (str.indexOf("'") != -1) {
      str = str.replace(goog.string.SINGLE_QUOTE_RE_, "\x26#39;");
    }
    if (str.indexOf("\x00") != -1) {
      str = str.replace(goog.string.NULL_RE_, "\x26#0;");
    }
    if (goog.string.DETECT_DOUBLE_ESCAPING && str.indexOf("e") != -1) {
      str = str.replace(goog.string.E_RE_, "\x26#101;");
    }
    return str;
  }
};
goog.string.AMP_RE_ = /&/g;
goog.string.LT_RE_ = /</g;
goog.string.GT_RE_ = />/g;
goog.string.QUOT_RE_ = /"/g;
goog.string.SINGLE_QUOTE_RE_ = /'/g;
goog.string.NULL_RE_ = /\x00/g;
goog.string.E_RE_ = /e/g;
goog.string.ALL_RE_ = goog.string.DETECT_DOUBLE_ESCAPING ? /[\x00&<>"'e]/ : /[\x00&<>"']/;
goog.string.unescapeEntities = function(str) {
  if (goog.string.contains(str, "\x26")) {
    if (!goog.string.FORCE_NON_DOM_HTML_UNESCAPING && "document" in goog.global) {
      return goog.string.unescapeEntitiesUsingDom_(str);
    } else {
      return goog.string.unescapePureXmlEntities_(str);
    }
  }
  return str;
};
goog.string.unescapeEntitiesWithDocument = function(str, document) {
  if (goog.string.contains(str, "\x26")) {
    return goog.string.unescapeEntitiesUsingDom_(str, document);
  }
  return str;
};
goog.string.unescapeEntitiesUsingDom_ = function(str, opt_document) {
  var seen = {"\x26amp;":"\x26", "\x26lt;":"\x3c", "\x26gt;":"\x3e", "\x26quot;":'"'};
  var div;
  if (opt_document) {
    div = opt_document.createElement("div");
  } else {
    div = goog.global.document.createElement("div");
  }
  return str.replace(goog.string.HTML_ENTITY_PATTERN_, function(s, entity) {
    var value = seen[s];
    if (value) {
      return value;
    }
    if (entity.charAt(0) == "#") {
      var n = Number("0" + entity.substr(1));
      if (!isNaN(n)) {
        value = String.fromCharCode(n);
      }
    }
    if (!value) {
      div.innerHTML = s + " ";
      value = div.firstChild.nodeValue.slice(0, -1);
    }
    return seen[s] = value;
  });
};
goog.string.unescapePureXmlEntities_ = function(str) {
  return str.replace(/&([^;]+);/g, function(s, entity) {
    switch(entity) {
      case "amp":
        return "\x26";
      case "lt":
        return "\x3c";
      case "gt":
        return "\x3e";
      case "quot":
        return '"';
      default:
        if (entity.charAt(0) == "#") {
          var n = Number("0" + entity.substr(1));
          if (!isNaN(n)) {
            return String.fromCharCode(n);
          }
        }
        return s;
    }
  });
};
goog.string.HTML_ENTITY_PATTERN_ = /&([^;\s<&]+);?/g;
goog.string.whitespaceEscape = function(str, opt_xml) {
  return goog.string.newLineToBr(str.replace(/  /g, " \x26#160;"), opt_xml);
};
goog.string.preserveSpaces = function(str) {
  return str.replace(/(^|[\n ]) /g, "$1" + goog.string.Unicode.NBSP);
};
goog.string.stripQuotes = function(str, quoteChars) {
  var length = quoteChars.length;
  for (var i = 0;i < length;i++) {
    var quoteChar = length == 1 ? quoteChars : quoteChars.charAt(i);
    if (str.charAt(0) == quoteChar && str.charAt(str.length - 1) == quoteChar) {
      return str.substring(1, str.length - 1);
    }
  }
  return str;
};
goog.string.truncate = function(str, chars, opt_protectEscapedCharacters) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (str.length > chars) {
    str = str.substring(0, chars - 3) + "...";
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.truncateMiddle = function(str, chars, opt_protectEscapedCharacters, opt_trailingChars) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (opt_trailingChars && str.length > chars) {
    if (opt_trailingChars > chars) {
      opt_trailingChars = chars;
    }
    var endPoint = str.length - opt_trailingChars;
    var startPoint = chars - opt_trailingChars;
    str = str.substring(0, startPoint) + "..." + str.substring(endPoint);
  } else {
    if (str.length > chars) {
      var half = Math.floor(chars / 2);
      var endPos = str.length - half;
      half += chars % 2;
      str = str.substring(0, half) + "..." + str.substring(endPos);
    }
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.specialEscapeChars_ = {"\x00":"\\0", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\x0B", '"':'\\"', "\\":"\\\\"};
goog.string.jsEscapeCache_ = {"'":"\\'"};
goog.string.quote = function(s) {
  s = String(s);
  if (s.quote) {
    return s.quote();
  } else {
    var sb = ['"'];
    for (var i = 0;i < s.length;i++) {
      var ch = s.charAt(i);
      var cc = ch.charCodeAt(0);
      sb[i + 1] = goog.string.specialEscapeChars_[ch] || (cc > 31 && cc < 127 ? ch : goog.string.escapeChar(ch));
    }
    sb.push('"');
    return sb.join("");
  }
};
goog.string.escapeString = function(str) {
  var sb = [];
  for (var i = 0;i < str.length;i++) {
    sb[i] = goog.string.escapeChar(str.charAt(i));
  }
  return sb.join("");
};
goog.string.escapeChar = function(c) {
  if (c in goog.string.jsEscapeCache_) {
    return goog.string.jsEscapeCache_[c];
  }
  if (c in goog.string.specialEscapeChars_) {
    return goog.string.jsEscapeCache_[c] = goog.string.specialEscapeChars_[c];
  }
  var rv = c;
  var cc = c.charCodeAt(0);
  if (cc > 31 && cc < 127) {
    rv = c;
  } else {
    if (cc < 256) {
      rv = "\\x";
      if (cc < 16 || cc > 256) {
        rv += "0";
      }
    } else {
      rv = "\\u";
      if (cc < 4096) {
        rv += "0";
      }
    }
    rv += cc.toString(16).toUpperCase();
  }
  return goog.string.jsEscapeCache_[c] = rv;
};
goog.string.contains = function(str, subString) {
  return str.indexOf(subString) != -1;
};
goog.string.caseInsensitiveContains = function(str, subString) {
  return goog.string.contains(str.toLowerCase(), subString.toLowerCase());
};
goog.string.countOf = function(s, ss) {
  return s && ss ? s.split(ss).length - 1 : 0;
};
goog.string.removeAt = function(s, index, stringLength) {
  var resultStr = s;
  if (index >= 0 && index < s.length && stringLength > 0) {
    resultStr = s.substr(0, index) + s.substr(index + stringLength, s.length - index - stringLength);
  }
  return resultStr;
};
goog.string.remove = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "");
  return s.replace(re, "");
};
goog.string.removeAll = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "g");
  return s.replace(re, "");
};
goog.string.regExpEscape = function(s) {
  return String(s).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, "\\$1").replace(/\x08/g, "\\x08");
};
goog.string.repeat = function(string, length) {
  return (new Array(length + 1)).join(string);
};
goog.string.padNumber = function(num, length, opt_precision) {
  var s = goog.isDef(opt_precision) ? num.toFixed(opt_precision) : String(num);
  var index = s.indexOf(".");
  if (index == -1) {
    index = s.length;
  }
  return goog.string.repeat("0", Math.max(0, length - index)) + s;
};
goog.string.makeSafe = function(obj) {
  return obj == null ? "" : String(obj);
};
goog.string.buildString = function(var_args) {
  return Array.prototype.join.call(arguments, "");
};
goog.string.getRandomString = function() {
  var x = 2147483648;
  return Math.floor(Math.random() * x).toString(36) + Math.abs(Math.floor(Math.random() * x) ^ goog.now()).toString(36);
};
goog.string.compareVersions = function(version1, version2) {
  var order = 0;
  var v1Subs = goog.string.trim(String(version1)).split(".");
  var v2Subs = goog.string.trim(String(version2)).split(".");
  var subCount = Math.max(v1Subs.length, v2Subs.length);
  for (var subIdx = 0;order == 0 && subIdx < subCount;subIdx++) {
    var v1Sub = v1Subs[subIdx] || "";
    var v2Sub = v2Subs[subIdx] || "";
    var v1CompParser = new RegExp("(\\d*)(\\D*)", "g");
    var v2CompParser = new RegExp("(\\d*)(\\D*)", "g");
    do {
      var v1Comp = v1CompParser.exec(v1Sub) || ["", "", ""];
      var v2Comp = v2CompParser.exec(v2Sub) || ["", "", ""];
      if (v1Comp[0].length == 0 && v2Comp[0].length == 0) {
        break;
      }
      var v1CompNum = v1Comp[1].length == 0 ? 0 : parseInt(v1Comp[1], 10);
      var v2CompNum = v2Comp[1].length == 0 ? 0 : parseInt(v2Comp[1], 10);
      order = goog.string.compareElements_(v1CompNum, v2CompNum) || goog.string.compareElements_(v1Comp[2].length == 0, v2Comp[2].length == 0) || goog.string.compareElements_(v1Comp[2], v2Comp[2]);
    } while (order == 0);
  }
  return order;
};
goog.string.compareElements_ = function(left, right) {
  if (left < right) {
    return -1;
  } else {
    if (left > right) {
      return 1;
    }
  }
  return 0;
};
goog.string.HASHCODE_MAX_ = 4294967296;
goog.string.hashCode = function(str) {
  var result = 0;
  for (var i = 0;i < str.length;++i) {
    result = 31 * result + str.charCodeAt(i);
    result %= goog.string.HASHCODE_MAX_;
  }
  return result;
};
goog.string.uniqueStringCounter_ = Math.random() * 2147483648 | 0;
goog.string.createUniqueString = function() {
  return "goog_" + goog.string.uniqueStringCounter_++;
};
goog.string.toNumber = function(str) {
  var num = Number(str);
  if (num == 0 && goog.string.isEmptyOrWhitespace(str)) {
    return NaN;
  }
  return num;
};
goog.string.isLowerCamelCase = function(str) {
  return /^[a-z]+([A-Z][a-z]*)*$/.test(str);
};
goog.string.isUpperCamelCase = function(str) {
  return /^([A-Z][a-z]*)+$/.test(str);
};
goog.string.toCamelCase = function(str) {
  return String(str).replace(/\-([a-z])/g, function(all, match) {
    return match.toUpperCase();
  });
};
goog.string.toSelectorCase = function(str) {
  return String(str).replace(/([A-Z])/g, "-$1").toLowerCase();
};
goog.string.toTitleCase = function(str, opt_delimiters) {
  var delimiters = goog.isString(opt_delimiters) ? goog.string.regExpEscape(opt_delimiters) : "\\s";
  delimiters = delimiters ? "|[" + delimiters + "]+" : "";
  var regexp = new RegExp("(^" + delimiters + ")([a-z])", "g");
  return str.replace(regexp, function(all, p1, p2) {
    return p1 + p2.toUpperCase();
  });
};
goog.string.capitalize = function(str) {
  return String(str.charAt(0)).toUpperCase() + String(str.substr(1)).toLowerCase();
};
goog.string.parseInt = function(value) {
  if (isFinite(value)) {
    value = String(value);
  }
  if (goog.isString(value)) {
    return /^\s*-?0x/i.test(value) ? parseInt(value, 16) : parseInt(value, 10);
  }
  return NaN;
};
goog.string.splitLimit = function(str, separator, limit) {
  var parts = str.split(separator);
  var returnVal = [];
  while (limit > 0 && parts.length) {
    returnVal.push(parts.shift());
    limit--;
  }
  if (parts.length) {
    returnVal.push(parts.join(separator));
  }
  return returnVal;
};
goog.string.editDistance = function(a, b) {
  var v0 = [];
  var v1 = [];
  if (a == b) {
    return 0;
  }
  if (!a.length || !b.length) {
    return Math.max(a.length, b.length);
  }
  for (var i = 0;i < b.length + 1;i++) {
    v0[i] = i;
  }
  for (var i = 0;i < a.length;i++) {
    v1[0] = i + 1;
    for (var j = 0;j < b.length;j++) {
      var cost = a[i] != b[j];
      v1[j + 1] = Math.min(v1[j] + 1, v0[j + 1] + 1, v0[j] + cost);
    }
    for (var j = 0;j < v0.length;j++) {
      v0[j] = v1[j];
    }
  }
  return v1[b.length];
};
goog.provide("goog.object");
goog.object.forEach = function(obj, f, opt_obj) {
  for (var key in obj) {
    f.call(opt_obj, obj[key], key, obj);
  }
};
goog.object.filter = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      res[key] = obj[key];
    }
  }
  return res;
};
goog.object.map = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    res[key] = f.call(opt_obj, obj[key], key, obj);
  }
  return res;
};
goog.object.some = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      return true;
    }
  }
  return false;
};
goog.object.every = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (!f.call(opt_obj, obj[key], key, obj)) {
      return false;
    }
  }
  return true;
};
goog.object.getCount = function(obj) {
  var rv = 0;
  for (var key in obj) {
    rv++;
  }
  return rv;
};
goog.object.getAnyKey = function(obj) {
  for (var key in obj) {
    return key;
  }
};
goog.object.getAnyValue = function(obj) {
  for (var key in obj) {
    return obj[key];
  }
};
goog.object.contains = function(obj, val) {
  return goog.object.containsValue(obj, val);
};
goog.object.getValues = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = obj[key];
  }
  return res;
};
goog.object.getKeys = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = key;
  }
  return res;
};
goog.object.getValueByKeys = function(obj, var_args) {
  var isArrayLike = goog.isArrayLike(var_args);
  var keys = isArrayLike ? var_args : arguments;
  for (var i = isArrayLike ? 0 : 1;i < keys.length;i++) {
    obj = obj[keys[i]];
    if (!goog.isDef(obj)) {
      break;
    }
  }
  return obj;
};
goog.object.containsKey = function(obj, key) {
  return key in obj;
};
goog.object.containsValue = function(obj, val) {
  for (var key in obj) {
    if (obj[key] == val) {
      return true;
    }
  }
  return false;
};
goog.object.findKey = function(obj, f, opt_this) {
  for (var key in obj) {
    if (f.call(opt_this, obj[key], key, obj)) {
      return key;
    }
  }
  return undefined;
};
goog.object.findValue = function(obj, f, opt_this) {
  var key = goog.object.findKey(obj, f, opt_this);
  return key && obj[key];
};
goog.object.isEmpty = function(obj) {
  for (var key in obj) {
    return false;
  }
  return true;
};
goog.object.clear = function(obj) {
  for (var i in obj) {
    delete obj[i];
  }
};
goog.object.remove = function(obj, key) {
  var rv;
  if (rv = key in obj) {
    delete obj[key];
  }
  return rv;
};
goog.object.add = function(obj, key, val) {
  if (key in obj) {
    throw Error('The object already contains the key "' + key + '"');
  }
  goog.object.set(obj, key, val);
};
goog.object.get = function(obj, key, opt_val) {
  if (key in obj) {
    return obj[key];
  }
  return opt_val;
};
goog.object.set = function(obj, key, value) {
  obj[key] = value;
};
goog.object.setIfUndefined = function(obj, key, value) {
  return key in obj ? obj[key] : obj[key] = value;
};
goog.object.setWithReturnValueIfNotSet = function(obj, key, f) {
  if (key in obj) {
    return obj[key];
  }
  var val = f();
  obj[key] = val;
  return val;
};
goog.object.equals = function(a, b) {
  for (var k in a) {
    if (!(k in b) || a[k] !== b[k]) {
      return false;
    }
  }
  for (var k in b) {
    if (!(k in a)) {
      return false;
    }
  }
  return true;
};
goog.object.clone = function(obj) {
  var res = {};
  for (var key in obj) {
    res[key] = obj[key];
  }
  return res;
};
goog.object.unsafeClone = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.object.unsafeClone(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.object.transpose = function(obj) {
  var transposed = {};
  for (var key in obj) {
    transposed[obj[key]] = key;
  }
  return transposed;
};
goog.object.PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.object.extend = function(target, var_args) {
  var key, source;
  for (var i = 1;i < arguments.length;i++) {
    source = arguments[i];
    for (key in source) {
      target[key] = source[key];
    }
    for (var j = 0;j < goog.object.PROTOTYPE_FIELDS_.length;j++) {
      key = goog.object.PROTOTYPE_FIELDS_[j];
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }
};
goog.object.create = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.create.apply(null, arguments[0]);
  }
  if (argLength % 2) {
    throw Error("Uneven number of arguments");
  }
  var rv = {};
  for (var i = 0;i < argLength;i += 2) {
    rv[arguments[i]] = arguments[i + 1];
  }
  return rv;
};
goog.object.createSet = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.createSet.apply(null, arguments[0]);
  }
  var rv = {};
  for (var i = 0;i < argLength;i++) {
    rv[arguments[i]] = true;
  }
  return rv;
};
goog.object.createImmutableView = function(obj) {
  var result = obj;
  if (Object.isFrozen && !Object.isFrozen(obj)) {
    result = Object.create(obj);
    Object.freeze(result);
  }
  return result;
};
goog.object.isImmutableView = function(obj) {
  return !!Object.isFrozen && Object.isFrozen(obj);
};
goog.provide("goog.string.StringBuffer");
goog.string.StringBuffer = function(opt_a1, var_args) {
  if (opt_a1 != null) {
    this.append.apply(this, arguments);
  }
};
goog.string.StringBuffer.prototype.buffer_ = "";
goog.string.StringBuffer.prototype.set = function(s) {
  this.buffer_ = "" + s;
};
goog.string.StringBuffer.prototype.append = function(a1, opt_a2, var_args) {
  this.buffer_ += a1;
  if (opt_a2 != null) {
    for (var i = 1;i < arguments.length;i++) {
      this.buffer_ += arguments[i];
    }
  }
  return this;
};
goog.string.StringBuffer.prototype.clear = function() {
  this.buffer_ = "";
};
goog.string.StringBuffer.prototype.getLength = function() {
  return this.buffer_.length;
};
goog.string.StringBuffer.prototype.toString = function() {
  return this.buffer_;
};
goog.provide("goog.debug.Error");
goog.debug.Error = function(opt_msg) {
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, goog.debug.Error);
  } else {
    var stack = (new Error).stack;
    if (stack) {
      this.stack = stack;
    }
  }
  if (opt_msg) {
    this.message = String(opt_msg);
  }
  this.reportErrorToServer = true;
};
goog.inherits(goog.debug.Error, Error);
goog.debug.Error.prototype.name = "CustomError";
goog.provide("goog.dom.NodeType");
goog.dom.NodeType = {ELEMENT:1, ATTRIBUTE:2, TEXT:3, CDATA_SECTION:4, ENTITY_REFERENCE:5, ENTITY:6, PROCESSING_INSTRUCTION:7, COMMENT:8, DOCUMENT:9, DOCUMENT_TYPE:10, DOCUMENT_FRAGMENT:11, NOTATION:12};
goog.provide("goog.asserts");
goog.provide("goog.asserts.AssertionError");
goog.require("goog.debug.Error");
goog.require("goog.dom.NodeType");
goog.require("goog.string");
goog.define("goog.asserts.ENABLE_ASSERTS", goog.DEBUG);
goog.asserts.AssertionError = function(messagePattern, messageArgs) {
  messageArgs.unshift(messagePattern);
  goog.debug.Error.call(this, goog.string.subs.apply(null, messageArgs));
  messageArgs.shift();
  this.messagePattern = messagePattern;
};
goog.inherits(goog.asserts.AssertionError, goog.debug.Error);
goog.asserts.AssertionError.prototype.name = "AssertionError";
goog.asserts.DEFAULT_ERROR_HANDLER = function(e) {
  throw e;
};
goog.asserts.errorHandler_ = goog.asserts.DEFAULT_ERROR_HANDLER;
goog.asserts.doAssertFailure_ = function(defaultMessage, defaultArgs, givenMessage, givenArgs) {
  var message = "Assertion failed";
  if (givenMessage) {
    message += ": " + givenMessage;
    var args = givenArgs;
  } else {
    if (defaultMessage) {
      message += ": " + defaultMessage;
      args = defaultArgs;
    }
  }
  var e = new goog.asserts.AssertionError("" + message, args || []);
  goog.asserts.errorHandler_(e);
};
goog.asserts.setErrorHandler = function(errorHandler) {
  if (goog.asserts.ENABLE_ASSERTS) {
    goog.asserts.errorHandler_ = errorHandler;
  }
};
goog.asserts.assert = function(condition, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !condition) {
    goog.asserts.doAssertFailure_("", null, opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return condition;
};
goog.asserts.fail = function(opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS) {
    goog.asserts.errorHandler_(new goog.asserts.AssertionError("Failure" + (opt_message ? ": " + opt_message : ""), Array.prototype.slice.call(arguments, 1)));
  }
};
goog.asserts.assertNumber = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isNumber(value)) {
    goog.asserts.doAssertFailure_("Expected number but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return (value);
};
goog.asserts.assertString = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isString(value)) {
    goog.asserts.doAssertFailure_("Expected string but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return (value);
};
goog.asserts.assertFunction = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isFunction(value)) {
    goog.asserts.doAssertFailure_("Expected function but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return (value);
};
goog.asserts.assertObject = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isObject(value)) {
    goog.asserts.doAssertFailure_("Expected object but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return (value);
};
goog.asserts.assertArray = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isArray(value)) {
    goog.asserts.doAssertFailure_("Expected array but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return (value);
};
goog.asserts.assertBoolean = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isBoolean(value)) {
    goog.asserts.doAssertFailure_("Expected boolean but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return (value);
};
goog.asserts.assertElement = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && (!goog.isObject(value) || value.nodeType != goog.dom.NodeType.ELEMENT)) {
    goog.asserts.doAssertFailure_("Expected Element but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return (value);
};
goog.asserts.assertInstanceof = function(value, type, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !(value instanceof type)) {
    goog.asserts.doAssertFailure_("Expected instanceof %s but got %s.", [goog.asserts.getType_(type), goog.asserts.getType_(value)], opt_message, Array.prototype.slice.call(arguments, 3));
  }
  return value;
};
goog.asserts.assertObjectPrototypeIsIntact = function() {
  for (var key in Object.prototype) {
    goog.asserts.fail(key + " should not be enumerable in Object.prototype.");
  }
};
goog.asserts.getType_ = function(value) {
  if (value instanceof Function) {
    return value.displayName || value.name || "unknown type name";
  } else {
    if (value instanceof Object) {
      return value.constructor.displayName || value.constructor.name || Object.prototype.toString.call(value);
    } else {
      return value === null ? "null" : typeof value;
    }
  }
};
goog.provide("goog.array");
goog.provide("goog.array.ArrayLike");
goog.require("goog.asserts");
goog.define("goog.NATIVE_ARRAY_PROTOTYPES", goog.TRUSTED_SITE);
goog.define("goog.array.ASSUME_NATIVE_FUNCTIONS", false);
goog.array.ArrayLike;
goog.array.peek = function(array) {
  return array[array.length - 1];
};
goog.array.last = goog.array.peek;
goog.array.ARRAY_PROTOTYPE_ = Array.prototype;
goog.array.indexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.indexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.indexOf.call(arr, obj, opt_fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? 0 : opt_fromIndex < 0 ? Math.max(0, arr.length + opt_fromIndex) : opt_fromIndex;
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return -1;
    }
    return arr.indexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i < arr.length;i++) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return -1;
};
goog.array.lastIndexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.lastIndexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  return goog.array.ARRAY_PROTOTYPE_.lastIndexOf.call(arr, obj, fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  if (fromIndex < 0) {
    fromIndex = Math.max(0, arr.length + fromIndex);
  }
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return -1;
    }
    return arr.lastIndexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i >= 0;i--) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return -1;
};
goog.array.forEach = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.forEach) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  goog.array.ARRAY_PROTOTYPE_.forEach.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.forEachRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;--i) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.filter = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.filter) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.filter.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = [];
  var resLength = 0;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      var val = arr2[i];
      if (f.call(opt_obj, val, i, arr)) {
        res[resLength++] = val;
      }
    }
  }
  return res;
};
goog.array.map = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.map) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.map.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = new Array(l);
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      res[i] = f.call(opt_obj, arr2[i], i, arr);
    }
  }
  return res;
};
goog.array.reduce = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.reduce) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return goog.array.ARRAY_PROTOTYPE_.reduce.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEach(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.reduceRight = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.reduceRight) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return goog.array.ARRAY_PROTOTYPE_.reduceRight.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEachRight(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.some = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.some) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.some.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return true;
    }
  }
  return false;
};
goog.array.every = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.every) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.every.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && !f.call(opt_obj, arr2[i], i, arr)) {
      return false;
    }
  }
  return true;
};
goog.array.count = function(arr, f, opt_obj) {
  var count = 0;
  goog.array.forEach(arr, function(element, index, arr) {
    if (f.call(opt_obj, element, index, arr)) {
      ++count;
    }
  }, opt_obj);
  return count;
};
goog.array.find = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndex = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return -1;
};
goog.array.findRight = function(arr, f, opt_obj) {
  var i = goog.array.findIndexRight(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndexRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;i--) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return -1;
};
goog.array.contains = function(arr, obj) {
  return goog.array.indexOf(arr, obj) >= 0;
};
goog.array.isEmpty = function(arr) {
  return arr.length == 0;
};
goog.array.clear = function(arr) {
  if (!goog.isArray(arr)) {
    for (var i = arr.length - 1;i >= 0;i--) {
      delete arr[i];
    }
  }
  arr.length = 0;
};
goog.array.insert = function(arr, obj) {
  if (!goog.array.contains(arr, obj)) {
    arr.push(obj);
  }
};
goog.array.insertAt = function(arr, obj, opt_i) {
  goog.array.splice(arr, opt_i, 0, obj);
};
goog.array.insertArrayAt = function(arr, elementsToAdd, opt_i) {
  goog.partial(goog.array.splice, arr, opt_i, 0).apply(null, elementsToAdd);
};
goog.array.insertBefore = function(arr, obj, opt_obj2) {
  var i;
  if (arguments.length == 2 || (i = goog.array.indexOf(arr, opt_obj2)) < 0) {
    arr.push(obj);
  } else {
    goog.array.insertAt(arr, obj, i);
  }
};
goog.array.remove = function(arr, obj) {
  var i = goog.array.indexOf(arr, obj);
  var rv;
  if (rv = i >= 0) {
    goog.array.removeAt(arr, i);
  }
  return rv;
};
goog.array.removeAt = function(arr, i) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.call(arr, i, 1).length == 1;
};
goog.array.removeIf = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  if (i >= 0) {
    goog.array.removeAt(arr, i);
    return true;
  }
  return false;
};
goog.array.removeAllIf = function(arr, f, opt_obj) {
  var removedCount = 0;
  goog.array.forEachRight(arr, function(val, index) {
    if (f.call(opt_obj, val, index, arr)) {
      if (goog.array.removeAt(arr, index)) {
        removedCount++;
      }
    }
  });
  return removedCount;
};
goog.array.concat = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.join = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.toArray = function(object) {
  var length = object.length;
  if (length > 0) {
    var rv = new Array(length);
    for (var i = 0;i < length;i++) {
      rv[i] = object[i];
    }
    return rv;
  }
  return [];
};
goog.array.clone = goog.array.toArray;
goog.array.extend = function(arr1, var_args) {
  for (var i = 1;i < arguments.length;i++) {
    var arr2 = arguments[i];
    if (goog.isArrayLike(arr2)) {
      var len1 = arr1.length || 0;
      var len2 = arr2.length || 0;
      arr1.length = len1 + len2;
      for (var j = 0;j < len2;j++) {
        arr1[len1 + j] = arr2[j];
      }
    } else {
      arr1.push(arr2);
    }
  }
};
goog.array.splice = function(arr, index, howMany, var_args) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.apply(arr, goog.array.slice(arguments, 1));
};
goog.array.slice = function(arr, start, opt_end) {
  goog.asserts.assert(arr.length != null);
  if (arguments.length <= 2) {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start);
  } else {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start, opt_end);
  }
};
goog.array.removeDuplicates = function(arr, opt_rv, opt_hashFn) {
  var returnArray = opt_rv || arr;
  var defaultHashFn = function(item) {
    return goog.isObject(current) ? "o" + goog.getUid(current) : (typeof current).charAt(0) + current;
  };
  var hashFn = opt_hashFn || defaultHashFn;
  var seen = {}, cursorInsert = 0, cursorRead = 0;
  while (cursorRead < arr.length) {
    var current = arr[cursorRead++];
    var key = hashFn(current);
    if (!Object.prototype.hasOwnProperty.call(seen, key)) {
      seen[key] = true;
      returnArray[cursorInsert++] = current;
    }
  }
  returnArray.length = cursorInsert;
};
goog.array.binarySearch = function(arr, target, opt_compareFn) {
  return goog.array.binarySearch_(arr, opt_compareFn || goog.array.defaultCompare, false, target);
};
goog.array.binarySelect = function(arr, evaluator, opt_obj) {
  return goog.array.binarySearch_(arr, evaluator, true, undefined, opt_obj);
};
goog.array.binarySearch_ = function(arr, compareFn, isEvaluator, opt_target, opt_selfObj) {
  var left = 0;
  var right = arr.length;
  var found;
  while (left < right) {
    var middle = left + right >> 1;
    var compareResult;
    if (isEvaluator) {
      compareResult = compareFn.call(opt_selfObj, arr[middle], middle, arr);
    } else {
      compareResult = compareFn(opt_target, arr[middle]);
    }
    if (compareResult > 0) {
      left = middle + 1;
    } else {
      right = middle;
      found = !compareResult;
    }
  }
  return found ? left : ~left;
};
goog.array.sort = function(arr, opt_compareFn) {
  arr.sort(opt_compareFn || goog.array.defaultCompare);
};
goog.array.stableSort = function(arr, opt_compareFn) {
  for (var i = 0;i < arr.length;i++) {
    arr[i] = {index:i, value:arr[i]};
  }
  var valueCompareFn = opt_compareFn || goog.array.defaultCompare;
  function stableCompareFn(obj1, obj2) {
    return valueCompareFn(obj1.value, obj2.value) || obj1.index - obj2.index;
  }
  goog.array.sort(arr, stableCompareFn);
  for (var i = 0;i < arr.length;i++) {
    arr[i] = arr[i].value;
  }
};
goog.array.sortByKey = function(arr, keyFn, opt_compareFn) {
  var keyCompareFn = opt_compareFn || goog.array.defaultCompare;
  goog.array.sort(arr, function(a, b) {
    return keyCompareFn(keyFn(a), keyFn(b));
  });
};
goog.array.sortObjectsByKey = function(arr, key, opt_compareFn) {
  goog.array.sortByKey(arr, function(obj) {
    return obj[key];
  }, opt_compareFn);
};
goog.array.isSorted = function(arr, opt_compareFn, opt_strict) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  for (var i = 1;i < arr.length;i++) {
    var compareResult = compare(arr[i - 1], arr[i]);
    if (compareResult > 0 || compareResult == 0 && opt_strict) {
      return false;
    }
  }
  return true;
};
goog.array.equals = function(arr1, arr2, opt_equalsFn) {
  if (!goog.isArrayLike(arr1) || !goog.isArrayLike(arr2) || arr1.length != arr2.length) {
    return false;
  }
  var l = arr1.length;
  var equalsFn = opt_equalsFn || goog.array.defaultCompareEquality;
  for (var i = 0;i < l;i++) {
    if (!equalsFn(arr1[i], arr2[i])) {
      return false;
    }
  }
  return true;
};
goog.array.compare3 = function(arr1, arr2, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  var l = Math.min(arr1.length, arr2.length);
  for (var i = 0;i < l;i++) {
    var result = compare(arr1[i], arr2[i]);
    if (result != 0) {
      return result;
    }
  }
  return goog.array.defaultCompare(arr1.length, arr2.length);
};
goog.array.defaultCompare = function(a, b) {
  return a > b ? 1 : a < b ? -1 : 0;
};
goog.array.inverseDefaultCompare = function(a, b) {
  return -goog.array.defaultCompare(a, b);
};
goog.array.defaultCompareEquality = function(a, b) {
  return a === b;
};
goog.array.binaryInsert = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  if (index < 0) {
    goog.array.insertAt(array, value, -(index + 1));
    return true;
  }
  return false;
};
goog.array.binaryRemove = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  return index >= 0 ? goog.array.removeAt(array, index) : false;
};
goog.array.bucket = function(array, sorter, opt_obj) {
  var buckets = {};
  for (var i = 0;i < array.length;i++) {
    var value = array[i];
    var key = sorter.call(opt_obj, value, i, array);
    if (goog.isDef(key)) {
      var bucket = buckets[key] || (buckets[key] = []);
      bucket.push(value);
    }
  }
  return buckets;
};
goog.array.toObject = function(arr, keyFunc, opt_obj) {
  var ret = {};
  goog.array.forEach(arr, function(element, index) {
    ret[keyFunc.call(opt_obj, element, index, arr)] = element;
  });
  return ret;
};
goog.array.range = function(startOrEnd, opt_end, opt_step) {
  var array = [];
  var start = 0;
  var end = startOrEnd;
  var step = opt_step || 1;
  if (opt_end !== undefined) {
    start = startOrEnd;
    end = opt_end;
  }
  if (step * (end - start) < 0) {
    return [];
  }
  if (step > 0) {
    for (var i = start;i < end;i += step) {
      array.push(i);
    }
  } else {
    for (var i = start;i > end;i += step) {
      array.push(i);
    }
  }
  return array;
};
goog.array.repeat = function(value, n) {
  var array = [];
  for (var i = 0;i < n;i++) {
    array[i] = value;
  }
  return array;
};
goog.array.flatten = function(var_args) {
  var CHUNK_SIZE = 8192;
  var result = [];
  for (var i = 0;i < arguments.length;i++) {
    var element = arguments[i];
    if (goog.isArray(element)) {
      for (var c = 0;c < element.length;c += CHUNK_SIZE) {
        var chunk = goog.array.slice(element, c, c + CHUNK_SIZE);
        var recurseResult = goog.array.flatten.apply(null, chunk);
        for (var r = 0;r < recurseResult.length;r++) {
          result.push(recurseResult[r]);
        }
      }
    } else {
      result.push(element);
    }
  }
  return result;
};
goog.array.rotate = function(array, n) {
  goog.asserts.assert(array.length != null);
  if (array.length) {
    n %= array.length;
    if (n > 0) {
      goog.array.ARRAY_PROTOTYPE_.unshift.apply(array, array.splice(-n, n));
    } else {
      if (n < 0) {
        goog.array.ARRAY_PROTOTYPE_.push.apply(array, array.splice(0, -n));
      }
    }
  }
  return array;
};
goog.array.moveItem = function(arr, fromIndex, toIndex) {
  goog.asserts.assert(fromIndex >= 0 && fromIndex < arr.length);
  goog.asserts.assert(toIndex >= 0 && toIndex < arr.length);
  var removedItems = goog.array.ARRAY_PROTOTYPE_.splice.call(arr, fromIndex, 1);
  goog.array.ARRAY_PROTOTYPE_.splice.call(arr, toIndex, 0, removedItems[0]);
};
goog.array.zip = function(var_args) {
  if (!arguments.length) {
    return [];
  }
  var result = [];
  for (var i = 0;true;i++) {
    var value = [];
    for (var j = 0;j < arguments.length;j++) {
      var arr = arguments[j];
      if (i >= arr.length) {
        return result;
      }
      value.push(arr[i]);
    }
    result.push(value);
  }
};
goog.array.shuffle = function(arr, opt_randFn) {
  var randFn = opt_randFn || Math.random;
  for (var i = arr.length - 1;i > 0;i--) {
    var j = Math.floor(randFn() * (i + 1));
    var tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
  }
};
goog.array.copyByIndex = function(arr, index_arr) {
  var result = [];
  goog.array.forEach(index_arr, function(index) {
    result.push(arr[index]);
  });
  return result;
};
goog.provide("cljs.core");
goog.require("goog.string");
goog.require("goog.object");
goog.require("goog.array");
goog.require("goog.string.StringBuffer");
cljs.core._STAR_clojurescript_version_STAR_ = "0.0-3308";
cljs.core._STAR_unchecked_if_STAR_ = false;
cljs.core._STAR_target_STAR_ = "default";
if (typeof cljs.core._STAR_print_fn_STAR_ !== "undefined") {
} else {
  cljs.core._STAR_print_fn_STAR_ = function cljs$core$_STAR_print_fn_STAR_(_) {
    throw new Error("No *print-fn* fn set for evaluation environment");
  };
}
cljs.core.set_print_fn_BANG_ = function cljs$core$set_print_fn_BANG_(f) {
  return cljs.core._STAR_print_fn_STAR_ = f;
};
cljs.core._STAR_flush_on_newline_STAR_ = true;
cljs.core._STAR_print_newline_STAR_ = true;
cljs.core._STAR_print_readably_STAR_ = true;
cljs.core._STAR_print_meta_STAR_ = false;
cljs.core._STAR_print_dup_STAR_ = false;
cljs.core._STAR_print_length_STAR_ = null;
cljs.core._STAR_print_level_STAR_ = null;
if (typeof cljs.core._STAR_loaded_libs_STAR_ !== "undefined") {
} else {
  cljs.core._STAR_loaded_libs_STAR_ = null;
}
cljs.core.pr_opts = function cljs$core$pr_opts() {
  return new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", -151457939), cljs.core._STAR_flush_on_newline_STAR_, new cljs.core.Keyword(null, "readably", "readably", 1129599760), cljs.core._STAR_print_readably_STAR_, new cljs.core.Keyword(null, "meta", "meta", 1499536964), cljs.core._STAR_print_meta_STAR_, new cljs.core.Keyword(null, "dup", "dup", 556298533), cljs.core._STAR_print_dup_STAR_, new cljs.core.Keyword(null, "print-length", "print-length", 
  1931866356), cljs.core._STAR_print_length_STAR_], null);
};
cljs.core.enable_console_print_BANG_ = function cljs$core$enable_console_print_BANG_() {
  cljs.core._STAR_print_newline_STAR_ = false;
  return cljs.core._STAR_print_fn_STAR_ = function() {
    var G__6342__delegate = function(args) {
      return console.log.apply(console, function() {
        var G__6341 = args;
        return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1 ? cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(G__6341) : cljs.core.into_array.call(null, G__6341);
      }());
    };
    var G__6342 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        var G__6343__i = 0, G__6343__a = new Array(arguments.length - 0);
        while (G__6343__i < G__6343__a.length) {
          G__6343__a[G__6343__i] = arguments[G__6343__i + 0];
          ++G__6343__i;
        }
        args = new cljs.core.IndexedSeq(G__6343__a, 0);
      }
      return G__6342__delegate.call(this, args);
    };
    G__6342.cljs$lang$maxFixedArity = 0;
    G__6342.cljs$lang$applyTo = function(arglist__6344) {
      var args = cljs.core.seq(arglist__6344);
      return G__6342__delegate(args);
    };
    G__6342.cljs$core$IFn$_invoke$arity$variadic = G__6342__delegate;
    return G__6342;
  }();
};
cljs.core.truth_ = function cljs$core$truth_(x) {
  return x != null && x !== false;
};
cljs.core.not_native = null;
cljs.core.identical_QMARK_ = function cljs$core$identical_QMARK_(x, y) {
  return x === y;
};
cljs.core.nil_QMARK_ = function cljs$core$nil_QMARK_(x) {
  return x == null;
};
cljs.core.array_QMARK_ = function cljs$core$array_QMARK_(x) {
  if (cljs.core._STAR_target_STAR_ === "nodejs") {
    return Array.isArray(x);
  } else {
    return x instanceof Array;
  }
};
cljs.core.number_QMARK_ = function cljs$core$number_QMARK_(n) {
  return typeof n === "number";
};
cljs.core.not = function cljs$core$not(x) {
  if (cljs.core.truth_(x)) {
    return false;
  } else {
    return true;
  }
};
cljs.core.some_QMARK_ = function cljs$core$some_QMARK_(x) {
  return !(x == null);
};
cljs.core.object_QMARK_ = function cljs$core$object_QMARK_(x) {
  if (!(x == null)) {
    return x.constructor === Object;
  } else {
    return false;
  }
};
cljs.core.string_QMARK_ = function cljs$core$string_QMARK_(x) {
  var G__6346 = x;
  return goog.isString(G__6346);
};
cljs.core.native_satisfies_QMARK_ = function cljs$core$native_satisfies_QMARK_(p, x) {
  var x__$1 = x == null ? null : x;
  if (p[function() {
    var G__6348 = x__$1;
    return goog.typeOf(G__6348);
  }()]) {
    return true;
  } else {
    if (p["_"]) {
      return true;
    } else {
      return false;
    }
  }
};
cljs.core.is_proto_ = function cljs$core$is_proto_(x) {
  return x.constructor.prototype === x;
};
cljs.core._STAR_main_cli_fn_STAR_ = null;
cljs.core.type = function cljs$core$type(x) {
  if (x == null) {
    return null;
  } else {
    return x.constructor;
  }
};
cljs.core.missing_protocol = function cljs$core$missing_protocol(proto, obj) {
  var ty = cljs.core.type(obj);
  var ty__$1 = cljs.core.truth_(function() {
    var and__4297__auto__ = ty;
    if (cljs.core.truth_(and__4297__auto__)) {
      return ty.cljs$lang$type;
    } else {
      return and__4297__auto__;
    }
  }()) ? ty.cljs$lang$ctorStr : function() {
    var G__6350 = obj;
    return goog.typeOf(G__6350);
  }();
  return new Error(["No protocol method ", proto, " defined for type ", ty__$1, ": ", obj].join(""));
};
cljs.core.type__GT_str = function cljs$core$type__GT_str(ty) {
  var temp__4420__auto__ = ty.cljs$lang$ctorStr;
  if (cljs.core.truth_(temp__4420__auto__)) {
    var s = temp__4420__auto__;
    return s;
  } else {
    return [cljs.core.str(ty)].join("");
  }
};
cljs.core.load_file = function cljs$core$load_file(file) {
  if (cljs.core.truth_(COMPILED)) {
    return null;
  } else {
    return goog.nodeGlobalRequire(file);
  }
};
if (typeof Symbol !== "undefined" && function() {
  var G__6352 = Symbol;
  return goog.typeOf(G__6352);
}() === "function") {
  cljs.core.ITER_SYMBOL = Symbol.iterator;
} else {
  cljs.core.ITER_SYMBOL = "@@iterator";
}
cljs.core.make_array = function cljs$core$make_array() {
  var G__6354 = arguments.length;
  switch(G__6354) {
    case 1:
      return cljs.core.make_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.make_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.make_array.cljs$core$IFn$_invoke$arity$1 = function(size) {
  return new Array(size);
};
cljs.core.make_array.cljs$core$IFn$_invoke$arity$2 = function(type, size) {
  return new Array(size);
};
cljs.core.make_array.cljs$lang$maxFixedArity = 2;
cljs.core.aclone = function cljs$core$aclone(arr) {
  var len = arr.length;
  var new_arr = new Array(len);
  var n__5194__auto___6356 = len;
  var i_6357 = 0;
  while (true) {
    if (i_6357 < n__5194__auto___6356) {
      new_arr[i_6357] = arr[i_6357];
      var G__6358 = i_6357 + 1;
      i_6357 = G__6358;
      continue;
    } else {
    }
    break;
  }
  return new_arr;
};
cljs.core.array = function cljs$core$array(var_args) {
  var a = new Array(arguments.length);
  var i = 0;
  while (true) {
    if (i < a.length) {
      a[i] = arguments[i];
      var G__6359 = i + 1;
      i = G__6359;
      continue;
    } else {
      return a;
    }
    break;
  }
};
cljs.core.aget = function cljs$core$aget() {
  var G__6364 = arguments.length;
  switch(G__6364) {
    case 2:
      return cljs.core.aget.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.aget.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5360__auto__);
  }
};
cljs.core.aget.cljs$core$IFn$_invoke$arity$2 = function(array, i) {
  return array[i];
};
cljs.core.aget.cljs$core$IFn$_invoke$arity$variadic = function(array, i, idxs) {
  var G__6365 = cljs.core.aget;
  var G__6366 = array[i];
  var G__6367 = idxs;
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$3 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$3(G__6365, G__6366, G__6367) : cljs.core.apply.call(null, G__6365, G__6366, G__6367);
};
cljs.core.aget.cljs$lang$applyTo = function(seq6360) {
  var G__6361 = cljs.core.first(seq6360);
  var seq6360__$1 = cljs.core.next(seq6360);
  var G__6362 = cljs.core.first(seq6360__$1);
  var seq6360__$2 = cljs.core.next(seq6360__$1);
  return cljs.core.aget.cljs$core$IFn$_invoke$arity$variadic(G__6361, G__6362, seq6360__$2);
};
cljs.core.aget.cljs$lang$maxFixedArity = 2;
cljs.core.aset = function cljs$core$aset() {
  var G__6374 = arguments.length;
  switch(G__6374) {
    case 3:
      return cljs.core.aset.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 3), 0);
      return cljs.core.aset.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5360__auto__);
  }
};
cljs.core.aset.cljs$core$IFn$_invoke$arity$3 = function(array, i, val) {
  return array[i] = val;
};
cljs.core.aset.cljs$core$IFn$_invoke$arity$variadic = function(array, idx, idx2, idxv) {
  var G__6375 = cljs.core.aset;
  var G__6376 = array[idx];
  var G__6377 = idx2;
  var G__6378 = idxv;
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$4 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$4(G__6375, G__6376, G__6377, G__6378) : cljs.core.apply.call(null, G__6375, G__6376, G__6377, G__6378);
};
cljs.core.aset.cljs$lang$applyTo = function(seq6369) {
  var G__6370 = cljs.core.first(seq6369);
  var seq6369__$1 = cljs.core.next(seq6369);
  var G__6371 = cljs.core.first(seq6369__$1);
  var seq6369__$2 = cljs.core.next(seq6369__$1);
  var G__6372 = cljs.core.first(seq6369__$2);
  var seq6369__$3 = cljs.core.next(seq6369__$2);
  return cljs.core.aset.cljs$core$IFn$_invoke$arity$variadic(G__6370, G__6371, G__6372, seq6369__$3);
};
cljs.core.aset.cljs$lang$maxFixedArity = 3;
cljs.core.alength = function cljs$core$alength(array) {
  return array.length;
};
cljs.core.into_array = function cljs$core$into_array() {
  var G__6381 = arguments.length;
  switch(G__6381) {
    case 1:
      return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.into_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.into_array.cljs$core$IFn$_invoke$arity$1 = function(aseq) {
  return cljs.core.into_array.cljs$core$IFn$_invoke$arity$2(null, aseq);
};
cljs.core.into_array.cljs$core$IFn$_invoke$arity$2 = function(type, aseq) {
  var G__6382 = function(a, x) {
    a.push(x);
    return a;
  };
  var G__6383 = [];
  var G__6384 = aseq;
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(G__6382, G__6383, G__6384) : cljs.core.reduce.call(null, G__6382, G__6383, G__6384);
};
cljs.core.into_array.cljs$lang$maxFixedArity = 2;
cljs.core.js_invoke = function cljs$core$js_invoke() {
  var argseq__5349__auto__ = 2 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0) : null;
  return cljs.core.js_invoke.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5349__auto__);
};
cljs.core.js_invoke.cljs$core$IFn$_invoke$arity$variadic = function(obj, s, args) {
  return obj[s].apply(obj, cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(args));
};
cljs.core.js_invoke.cljs$lang$maxFixedArity = 2;
cljs.core.js_invoke.cljs$lang$applyTo = function(seq6386) {
  var G__6387 = cljs.core.first(seq6386);
  var seq6386__$1 = cljs.core.next(seq6386);
  var G__6388 = cljs.core.first(seq6386__$1);
  var seq6386__$2 = cljs.core.next(seq6386__$1);
  return cljs.core.js_invoke.cljs$core$IFn$_invoke$arity$variadic(G__6387, G__6388, seq6386__$2);
};
cljs.core.Fn = function() {
  var obj6390 = {};
  return obj6390;
}();
cljs.core.IFn = function() {
  var obj6392 = {};
  return obj6392;
}();
cljs.core._invoke = function cljs$core$_invoke() {
  var G__6394 = arguments.length;
  switch(G__6394) {
    case 1:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    case 7:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$7(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6]);
      break;
    case 8:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$8(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7]);
      break;
    case 9:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$9(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8]);
      break;
    case 10:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$10(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9]);
      break;
    case 11:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$11(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10]);
      break;
    case 12:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$12(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11]);
      break;
    case 13:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$13(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12]);
      break;
    case 14:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$14(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13]);
      break;
    case 15:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$15(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14]);
      break;
    case 16:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$16(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15]);
      break;
    case 17:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$17(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16]);
      break;
    case 18:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$18(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16], arguments[17]);
      break;
    case 19:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$19(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16], arguments[17], arguments[18]);
      break;
    case 20:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$20(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16], arguments[17], arguments[18], arguments[19]);
      break;
    case 21:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$21(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16], arguments[17], arguments[18], arguments[19], arguments[20]);
      break;
    case 22:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$22(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16], arguments[17], arguments[18], arguments[19], arguments[20], arguments[21]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$1 = function(this$) {
  if (function() {
    var and__4297__auto__ = this$;
    if (and__4297__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$1(this$);
  } else {
    var x__4945__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4309__auto__ = cljs.core._invoke[function() {
        var G__6396 = x__4945__auto__;
        return goog.typeOf(G__6396);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._invoke["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$2 = function(this$, a) {
  if (function() {
    var and__4297__auto__ = this$;
    if (and__4297__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$2;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$2(this$, a);
  } else {
    var x__4945__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4309__auto__ = cljs.core._invoke[function() {
        var G__6398 = x__4945__auto__;
        return goog.typeOf(G__6398);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._invoke["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$3 = function(this$, a, b) {
  if (function() {
    var and__4297__auto__ = this$;
    if (and__4297__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$3;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$3(this$, a, b);
  } else {
    var x__4945__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4309__auto__ = cljs.core._invoke[function() {
        var G__6400 = x__4945__auto__;
        return goog.typeOf(G__6400);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._invoke["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$4 = function(this$, a, b, c) {
  if (function() {
    var and__4297__auto__ = this$;
    if (and__4297__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$4;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$4(this$, a, b, c);
  } else {
    var x__4945__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4309__auto__ = cljs.core._invoke[function() {
        var G__6402 = x__4945__auto__;
        return goog.typeOf(G__6402);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._invoke["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$5 = function(this$, a, b, c, d) {
  if (function() {
    var and__4297__auto__ = this$;
    if (and__4297__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$5;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d);
  } else {
    var x__4945__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4309__auto__ = cljs.core._invoke[function() {
        var G__6404 = x__4945__auto__;
        return goog.typeOf(G__6404);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._invoke["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$6 = function(this$, a, b, c, d, e) {
  if (function() {
    var and__4297__auto__ = this$;
    if (and__4297__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$6;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e);
  } else {
    var x__4945__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4309__auto__ = cljs.core._invoke[function() {
        var G__6406 = x__4945__auto__;
        return goog.typeOf(G__6406);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._invoke["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$7 = function(this$, a, b, c, d, e, f) {
  if (function() {
    var and__4297__auto__ = this$;
    if (and__4297__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$7;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f);
  } else {
    var x__4945__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4309__auto__ = cljs.core._invoke[function() {
        var G__6408 = x__4945__auto__;
        return goog.typeOf(G__6408);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._invoke["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$8 = function(this$, a, b, c, d, e, f, g) {
  if (function() {
    var and__4297__auto__ = this$;
    if (and__4297__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$8;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g);
  } else {
    var x__4945__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4309__auto__ = cljs.core._invoke[function() {
        var G__6410 = x__4945__auto__;
        return goog.typeOf(G__6410);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._invoke["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$9 = function(this$, a, b, c, d, e, f, g, h) {
  if (function() {
    var and__4297__auto__ = this$;
    if (and__4297__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$9;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h);
  } else {
    var x__4945__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4309__auto__ = cljs.core._invoke[function() {
        var G__6412 = x__4945__auto__;
        return goog.typeOf(G__6412);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._invoke["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$10 = function(this$, a, b, c, d, e, f, g, h, i) {
  if (function() {
    var and__4297__auto__ = this$;
    if (and__4297__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$10;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i);
  } else {
    var x__4945__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4309__auto__ = cljs.core._invoke[function() {
        var G__6414 = x__4945__auto__;
        return goog.typeOf(G__6414);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._invoke["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h, i);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$11 = function(this$, a, b, c, d, e, f, g, h, i, j) {
  if (function() {
    var and__4297__auto__ = this$;
    if (and__4297__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$11;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j);
  } else {
    var x__4945__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4309__auto__ = cljs.core._invoke[function() {
        var G__6416 = x__4945__auto__;
        return goog.typeOf(G__6416);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._invoke["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h, i, j);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$12 = function(this$, a, b, c, d, e, f, g, h, i, j, k) {
  if (function() {
    var and__4297__auto__ = this$;
    if (and__4297__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$12;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k);
  } else {
    var x__4945__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4309__auto__ = cljs.core._invoke[function() {
        var G__6418 = x__4945__auto__;
        return goog.typeOf(G__6418);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._invoke["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$13 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l) {
  if (function() {
    var and__4297__auto__ = this$;
    if (and__4297__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$13;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l);
  } else {
    var x__4945__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4309__auto__ = cljs.core._invoke[function() {
        var G__6420 = x__4945__auto__;
        return goog.typeOf(G__6420);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._invoke["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$14 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) {
  if (function() {
    var and__4297__auto__ = this$;
    if (and__4297__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$14;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
  } else {
    var x__4945__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4309__auto__ = cljs.core._invoke[function() {
        var G__6422 = x__4945__auto__;
        return goog.typeOf(G__6422);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._invoke["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$15 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  if (function() {
    var and__4297__auto__ = this$;
    if (and__4297__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$15;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  } else {
    var x__4945__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4309__auto__ = cljs.core._invoke[function() {
        var G__6424 = x__4945__auto__;
        return goog.typeOf(G__6424);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._invoke["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$16 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  if (function() {
    var and__4297__auto__ = this$;
    if (and__4297__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$16;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  } else {
    var x__4945__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4309__auto__ = cljs.core._invoke[function() {
        var G__6426 = x__4945__auto__;
        return goog.typeOf(G__6426);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._invoke["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$17 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  if (function() {
    var and__4297__auto__ = this$;
    if (and__4297__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$17;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  } else {
    var x__4945__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4309__auto__ = cljs.core._invoke[function() {
        var G__6428 = x__4945__auto__;
        return goog.typeOf(G__6428);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._invoke["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$18 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  if (function() {
    var and__4297__auto__ = this$;
    if (and__4297__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$18;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  } else {
    var x__4945__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4309__auto__ = cljs.core._invoke[function() {
        var G__6430 = x__4945__auto__;
        return goog.typeOf(G__6430);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._invoke["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$19 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  if (function() {
    var and__4297__auto__ = this$;
    if (and__4297__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$19;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  } else {
    var x__4945__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4309__auto__ = cljs.core._invoke[function() {
        var G__6432 = x__4945__auto__;
        return goog.typeOf(G__6432);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._invoke["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$20 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  if (function() {
    var and__4297__auto__ = this$;
    if (and__4297__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$20;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  } else {
    var x__4945__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4309__auto__ = cljs.core._invoke[function() {
        var G__6434 = x__4945__auto__;
        return goog.typeOf(G__6434);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._invoke["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$21 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  if (function() {
    var and__4297__auto__ = this$;
    if (and__4297__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$21;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  } else {
    var x__4945__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4309__auto__ = cljs.core._invoke[function() {
        var G__6436 = x__4945__auto__;
        return goog.typeOf(G__6436);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._invoke["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$22 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  if (function() {
    var and__4297__auto__ = this$;
    if (and__4297__auto__) {
      return this$.cljs$core$IFn$_invoke$arity$22;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return this$.cljs$core$IFn$_invoke$arity$22(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
  } else {
    var x__4945__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4309__auto__ = cljs.core._invoke[function() {
        var G__6438 = x__4945__auto__;
        return goog.typeOf(G__6438);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._invoke["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IFn.-invoke", this$);
        }
      }
    }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
  }
};
cljs.core._invoke.cljs$lang$maxFixedArity = 22;
cljs.core.ICloneable = function() {
  var obj6441 = {};
  return obj6441;
}();
cljs.core._clone = function cljs$core$_clone(value) {
  if (function() {
    var and__4297__auto__ = value;
    if (and__4297__auto__) {
      return value.cljs$core$ICloneable$_clone$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return value.cljs$core$ICloneable$_clone$arity$1(value);
  } else {
    var x__4945__auto__ = value == null ? null : value;
    return function() {
      var or__4309__auto__ = cljs.core._clone[function() {
        var G__6445 = x__4945__auto__;
        return goog.typeOf(G__6445);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._clone["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ICloneable.-clone", value);
        }
      }
    }().call(null, value);
  }
};
cljs.core.ICounted = function() {
  var obj6447 = {};
  return obj6447;
}();
cljs.core._count = function cljs$core$_count(coll) {
  if (function() {
    var and__4297__auto__ = coll;
    if (and__4297__auto__) {
      return coll.cljs$core$ICounted$_count$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return coll.cljs$core$ICounted$_count$arity$1(coll);
  } else {
    var x__4945__auto__ = coll == null ? null : coll;
    return function() {
      var or__4309__auto__ = cljs.core._count[function() {
        var G__6451 = x__4945__auto__;
        return goog.typeOf(G__6451);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._count["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ICounted.-count", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IEmptyableCollection = function() {
  var obj6453 = {};
  return obj6453;
}();
cljs.core._empty = function cljs$core$_empty(coll) {
  if (function() {
    var and__4297__auto__ = coll;
    if (and__4297__auto__) {
      return coll.cljs$core$IEmptyableCollection$_empty$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return coll.cljs$core$IEmptyableCollection$_empty$arity$1(coll);
  } else {
    var x__4945__auto__ = coll == null ? null : coll;
    return function() {
      var or__4309__auto__ = cljs.core._empty[function() {
        var G__6457 = x__4945__auto__;
        return goog.typeOf(G__6457);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._empty["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEmptyableCollection.-empty", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ICollection = function() {
  var obj6459 = {};
  return obj6459;
}();
cljs.core._conj = function cljs$core$_conj(coll, o) {
  if (function() {
    var and__4297__auto__ = coll;
    if (and__4297__auto__) {
      return coll.cljs$core$ICollection$_conj$arity$2;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return coll.cljs$core$ICollection$_conj$arity$2(coll, o);
  } else {
    var x__4945__auto__ = coll == null ? null : coll;
    return function() {
      var or__4309__auto__ = cljs.core._conj[function() {
        var G__6463 = x__4945__auto__;
        return goog.typeOf(G__6463);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._conj["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ICollection.-conj", coll);
        }
      }
    }().call(null, coll, o);
  }
};
cljs.core.IIndexed = function() {
  var obj6465 = {};
  return obj6465;
}();
cljs.core._nth = function cljs$core$_nth() {
  var G__6467 = arguments.length;
  switch(G__6467) {
    case 2:
      return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core._nth.cljs$core$IFn$_invoke$arity$2 = function(coll, n) {
  if (function() {
    var and__4297__auto__ = coll;
    if (and__4297__auto__) {
      return coll.cljs$core$IIndexed$_nth$arity$2;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return coll.cljs$core$IIndexed$_nth$arity$2(coll, n);
  } else {
    var x__4945__auto__ = coll == null ? null : coll;
    return function() {
      var or__4309__auto__ = cljs.core._nth[function() {
        var G__6469 = x__4945__auto__;
        return goog.typeOf(G__6469);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._nth["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IIndexed.-nth", coll);
        }
      }
    }().call(null, coll, n);
  }
};
cljs.core._nth.cljs$core$IFn$_invoke$arity$3 = function(coll, n, not_found) {
  if (function() {
    var and__4297__auto__ = coll;
    if (and__4297__auto__) {
      return coll.cljs$core$IIndexed$_nth$arity$3;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return coll.cljs$core$IIndexed$_nth$arity$3(coll, n, not_found);
  } else {
    var x__4945__auto__ = coll == null ? null : coll;
    return function() {
      var or__4309__auto__ = cljs.core._nth[function() {
        var G__6471 = x__4945__auto__;
        return goog.typeOf(G__6471);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._nth["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IIndexed.-nth", coll);
        }
      }
    }().call(null, coll, n, not_found);
  }
};
cljs.core._nth.cljs$lang$maxFixedArity = 3;
cljs.core.ASeq = function() {
  var obj6474 = {};
  return obj6474;
}();
cljs.core.ISeq = function() {
  var obj6476 = {};
  return obj6476;
}();
cljs.core._first = function cljs$core$_first(coll) {
  if (function() {
    var and__4297__auto__ = coll;
    if (and__4297__auto__) {
      return coll.cljs$core$ISeq$_first$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_first$arity$1(coll);
  } else {
    var x__4945__auto__ = coll == null ? null : coll;
    return function() {
      var or__4309__auto__ = cljs.core._first[function() {
        var G__6480 = x__4945__auto__;
        return goog.typeOf(G__6480);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._first["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISeq.-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._rest = function cljs$core$_rest(coll) {
  if (function() {
    var and__4297__auto__ = coll;
    if (and__4297__auto__) {
      return coll.cljs$core$ISeq$_rest$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_rest$arity$1(coll);
  } else {
    var x__4945__auto__ = coll == null ? null : coll;
    return function() {
      var or__4309__auto__ = cljs.core._rest[function() {
        var G__6484 = x__4945__auto__;
        return goog.typeOf(G__6484);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._rest["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISeq.-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INext = function() {
  var obj6486 = {};
  return obj6486;
}();
cljs.core._next = function cljs$core$_next(coll) {
  if (function() {
    var and__4297__auto__ = coll;
    if (and__4297__auto__) {
      return coll.cljs$core$INext$_next$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return coll.cljs$core$INext$_next$arity$1(coll);
  } else {
    var x__4945__auto__ = coll == null ? null : coll;
    return function() {
      var or__4309__auto__ = cljs.core._next[function() {
        var G__6490 = x__4945__auto__;
        return goog.typeOf(G__6490);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._next["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("INext.-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ILookup = function() {
  var obj6492 = {};
  return obj6492;
}();
cljs.core._lookup = function cljs$core$_lookup() {
  var G__6494 = arguments.length;
  switch(G__6494) {
    case 2:
      return cljs.core._lookup.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core._lookup.cljs$core$IFn$_invoke$arity$2 = function(o, k) {
  if (function() {
    var and__4297__auto__ = o;
    if (and__4297__auto__) {
      return o.cljs$core$ILookup$_lookup$arity$2;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return o.cljs$core$ILookup$_lookup$arity$2(o, k);
  } else {
    var x__4945__auto__ = o == null ? null : o;
    return function() {
      var or__4309__auto__ = cljs.core._lookup[function() {
        var G__6496 = x__4945__auto__;
        return goog.typeOf(G__6496);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._lookup["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ILookup.-lookup", o);
        }
      }
    }().call(null, o, k);
  }
};
cljs.core._lookup.cljs$core$IFn$_invoke$arity$3 = function(o, k, not_found) {
  if (function() {
    var and__4297__auto__ = o;
    if (and__4297__auto__) {
      return o.cljs$core$ILookup$_lookup$arity$3;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return o.cljs$core$ILookup$_lookup$arity$3(o, k, not_found);
  } else {
    var x__4945__auto__ = o == null ? null : o;
    return function() {
      var or__4309__auto__ = cljs.core._lookup[function() {
        var G__6498 = x__4945__auto__;
        return goog.typeOf(G__6498);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._lookup["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ILookup.-lookup", o);
        }
      }
    }().call(null, o, k, not_found);
  }
};
cljs.core._lookup.cljs$lang$maxFixedArity = 3;
cljs.core.IAssociative = function() {
  var obj6501 = {};
  return obj6501;
}();
cljs.core._contains_key_QMARK_ = function cljs$core$_contains_key_QMARK_(coll, k) {
  if (function() {
    var and__4297__auto__ = coll;
    if (and__4297__auto__) {
      return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2(coll, k);
  } else {
    var x__4945__auto__ = coll == null ? null : coll;
    return function() {
      var or__4309__auto__ = cljs.core._contains_key_QMARK_[function() {
        var G__6505 = x__4945__auto__;
        return goog.typeOf(G__6505);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._contains_key_QMARK_["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IAssociative.-contains-key?", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core._assoc = function cljs$core$_assoc(coll, k, v) {
  if (function() {
    var and__4297__auto__ = coll;
    if (and__4297__auto__) {
      return coll.cljs$core$IAssociative$_assoc$arity$3;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_assoc$arity$3(coll, k, v);
  } else {
    var x__4945__auto__ = coll == null ? null : coll;
    return function() {
      var or__4309__auto__ = cljs.core._assoc[function() {
        var G__6509 = x__4945__auto__;
        return goog.typeOf(G__6509);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._assoc["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IAssociative.-assoc", coll);
        }
      }
    }().call(null, coll, k, v);
  }
};
cljs.core.IMap = function() {
  var obj6511 = {};
  return obj6511;
}();
cljs.core._dissoc = function cljs$core$_dissoc(coll, k) {
  if (function() {
    var and__4297__auto__ = coll;
    if (and__4297__auto__) {
      return coll.cljs$core$IMap$_dissoc$arity$2;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return coll.cljs$core$IMap$_dissoc$arity$2(coll, k);
  } else {
    var x__4945__auto__ = coll == null ? null : coll;
    return function() {
      var or__4309__auto__ = cljs.core._dissoc[function() {
        var G__6515 = x__4945__auto__;
        return goog.typeOf(G__6515);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._dissoc["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMap.-dissoc", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core.IMapEntry = function() {
  var obj6517 = {};
  return obj6517;
}();
cljs.core._key = function cljs$core$_key(coll) {
  if (function() {
    var and__4297__auto__ = coll;
    if (and__4297__auto__) {
      return coll.cljs$core$IMapEntry$_key$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_key$arity$1(coll);
  } else {
    var x__4945__auto__ = coll == null ? null : coll;
    return function() {
      var or__4309__auto__ = cljs.core._key[function() {
        var G__6521 = x__4945__auto__;
        return goog.typeOf(G__6521);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._key["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMapEntry.-key", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._val = function cljs$core$_val(coll) {
  if (function() {
    var and__4297__auto__ = coll;
    if (and__4297__auto__) {
      return coll.cljs$core$IMapEntry$_val$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_val$arity$1(coll);
  } else {
    var x__4945__auto__ = coll == null ? null : coll;
    return function() {
      var or__4309__auto__ = cljs.core._val[function() {
        var G__6525 = x__4945__auto__;
        return goog.typeOf(G__6525);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._val["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMapEntry.-val", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISet = function() {
  var obj6527 = {};
  return obj6527;
}();
cljs.core._disjoin = function cljs$core$_disjoin(coll, v) {
  if (function() {
    var and__4297__auto__ = coll;
    if (and__4297__auto__) {
      return coll.cljs$core$ISet$_disjoin$arity$2;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return coll.cljs$core$ISet$_disjoin$arity$2(coll, v);
  } else {
    var x__4945__auto__ = coll == null ? null : coll;
    return function() {
      var or__4309__auto__ = cljs.core._disjoin[function() {
        var G__6531 = x__4945__auto__;
        return goog.typeOf(G__6531);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._disjoin["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISet.-disjoin", coll);
        }
      }
    }().call(null, coll, v);
  }
};
cljs.core.IStack = function() {
  var obj6533 = {};
  return obj6533;
}();
cljs.core._peek = function cljs$core$_peek(coll) {
  if (function() {
    var and__4297__auto__ = coll;
    if (and__4297__auto__) {
      return coll.cljs$core$IStack$_peek$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_peek$arity$1(coll);
  } else {
    var x__4945__auto__ = coll == null ? null : coll;
    return function() {
      var or__4309__auto__ = cljs.core._peek[function() {
        var G__6537 = x__4945__auto__;
        return goog.typeOf(G__6537);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._peek["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IStack.-peek", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._pop = function cljs$core$_pop(coll) {
  if (function() {
    var and__4297__auto__ = coll;
    if (and__4297__auto__) {
      return coll.cljs$core$IStack$_pop$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_pop$arity$1(coll);
  } else {
    var x__4945__auto__ = coll == null ? null : coll;
    return function() {
      var or__4309__auto__ = cljs.core._pop[function() {
        var G__6541 = x__4945__auto__;
        return goog.typeOf(G__6541);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._pop["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IStack.-pop", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IVector = function() {
  var obj6543 = {};
  return obj6543;
}();
cljs.core._assoc_n = function cljs$core$_assoc_n(coll, n, val) {
  if (function() {
    var and__4297__auto__ = coll;
    if (and__4297__auto__) {
      return coll.cljs$core$IVector$_assoc_n$arity$3;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return coll.cljs$core$IVector$_assoc_n$arity$3(coll, n, val);
  } else {
    var x__4945__auto__ = coll == null ? null : coll;
    return function() {
      var or__4309__auto__ = cljs.core._assoc_n[function() {
        var G__6547 = x__4945__auto__;
        return goog.typeOf(G__6547);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._assoc_n["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IVector.-assoc-n", coll);
        }
      }
    }().call(null, coll, n, val);
  }
};
cljs.core.IDeref = function() {
  var obj6549 = {};
  return obj6549;
}();
cljs.core._deref = function cljs$core$_deref(o) {
  if (function() {
    var and__4297__auto__ = o;
    if (and__4297__auto__) {
      return o.cljs$core$IDeref$_deref$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return o.cljs$core$IDeref$_deref$arity$1(o);
  } else {
    var x__4945__auto__ = o == null ? null : o;
    return function() {
      var or__4309__auto__ = cljs.core._deref[function() {
        var G__6553 = x__4945__auto__;
        return goog.typeOf(G__6553);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._deref["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IDeref.-deref", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IDerefWithTimeout = function() {
  var obj6555 = {};
  return obj6555;
}();
cljs.core._deref_with_timeout = function cljs$core$_deref_with_timeout(o, msec, timeout_val) {
  if (function() {
    var and__4297__auto__ = o;
    if (and__4297__auto__) {
      return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3(o, msec, timeout_val);
  } else {
    var x__4945__auto__ = o == null ? null : o;
    return function() {
      var or__4309__auto__ = cljs.core._deref_with_timeout[function() {
        var G__6559 = x__4945__auto__;
        return goog.typeOf(G__6559);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._deref_with_timeout["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IDerefWithTimeout.-deref-with-timeout", o);
        }
      }
    }().call(null, o, msec, timeout_val);
  }
};
cljs.core.IMeta = function() {
  var obj6561 = {};
  return obj6561;
}();
cljs.core._meta = function cljs$core$_meta(o) {
  if (function() {
    var and__4297__auto__ = o;
    if (and__4297__auto__) {
      return o.cljs$core$IMeta$_meta$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return o.cljs$core$IMeta$_meta$arity$1(o);
  } else {
    var x__4945__auto__ = o == null ? null : o;
    return function() {
      var or__4309__auto__ = cljs.core._meta[function() {
        var G__6565 = x__4945__auto__;
        return goog.typeOf(G__6565);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._meta["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMeta.-meta", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IWithMeta = function() {
  var obj6567 = {};
  return obj6567;
}();
cljs.core._with_meta = function cljs$core$_with_meta(o, meta) {
  if (function() {
    var and__4297__auto__ = o;
    if (and__4297__auto__) {
      return o.cljs$core$IWithMeta$_with_meta$arity$2;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return o.cljs$core$IWithMeta$_with_meta$arity$2(o, meta);
  } else {
    var x__4945__auto__ = o == null ? null : o;
    return function() {
      var or__4309__auto__ = cljs.core._with_meta[function() {
        var G__6571 = x__4945__auto__;
        return goog.typeOf(G__6571);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._with_meta["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWithMeta.-with-meta", o);
        }
      }
    }().call(null, o, meta);
  }
};
cljs.core.IReduce = function() {
  var obj6573 = {};
  return obj6573;
}();
cljs.core._reduce = function cljs$core$_reduce() {
  var G__6575 = arguments.length;
  switch(G__6575) {
    case 2:
      return cljs.core._reduce.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._reduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core._reduce.cljs$core$IFn$_invoke$arity$2 = function(coll, f) {
  if (function() {
    var and__4297__auto__ = coll;
    if (and__4297__auto__) {
      return coll.cljs$core$IReduce$_reduce$arity$2;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return coll.cljs$core$IReduce$_reduce$arity$2(coll, f);
  } else {
    var x__4945__auto__ = coll == null ? null : coll;
    return function() {
      var or__4309__auto__ = cljs.core._reduce[function() {
        var G__6577 = x__4945__auto__;
        return goog.typeOf(G__6577);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._reduce["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IReduce.-reduce", coll);
        }
      }
    }().call(null, coll, f);
  }
};
cljs.core._reduce.cljs$core$IFn$_invoke$arity$3 = function(coll, f, start) {
  if (function() {
    var and__4297__auto__ = coll;
    if (and__4297__auto__) {
      return coll.cljs$core$IReduce$_reduce$arity$3;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return coll.cljs$core$IReduce$_reduce$arity$3(coll, f, start);
  } else {
    var x__4945__auto__ = coll == null ? null : coll;
    return function() {
      var or__4309__auto__ = cljs.core._reduce[function() {
        var G__6579 = x__4945__auto__;
        return goog.typeOf(G__6579);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._reduce["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IReduce.-reduce", coll);
        }
      }
    }().call(null, coll, f, start);
  }
};
cljs.core._reduce.cljs$lang$maxFixedArity = 3;
cljs.core.IKVReduce = function() {
  var obj6582 = {};
  return obj6582;
}();
cljs.core._kv_reduce = function cljs$core$_kv_reduce(coll, f, init) {
  if (function() {
    var and__4297__auto__ = coll;
    if (and__4297__auto__) {
      return coll.cljs$core$IKVReduce$_kv_reduce$arity$3;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return coll.cljs$core$IKVReduce$_kv_reduce$arity$3(coll, f, init);
  } else {
    var x__4945__auto__ = coll == null ? null : coll;
    return function() {
      var or__4309__auto__ = cljs.core._kv_reduce[function() {
        var G__6586 = x__4945__auto__;
        return goog.typeOf(G__6586);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._kv_reduce["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IKVReduce.-kv-reduce", coll);
        }
      }
    }().call(null, coll, f, init);
  }
};
cljs.core.IEquiv = function() {
  var obj6588 = {};
  return obj6588;
}();
cljs.core._equiv = function cljs$core$_equiv(o, other) {
  if (function() {
    var and__4297__auto__ = o;
    if (and__4297__auto__) {
      return o.cljs$core$IEquiv$_equiv$arity$2;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return o.cljs$core$IEquiv$_equiv$arity$2(o, other);
  } else {
    var x__4945__auto__ = o == null ? null : o;
    return function() {
      var or__4309__auto__ = cljs.core._equiv[function() {
        var G__6592 = x__4945__auto__;
        return goog.typeOf(G__6592);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._equiv["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEquiv.-equiv", o);
        }
      }
    }().call(null, o, other);
  }
};
cljs.core.IHash = function() {
  var obj6594 = {};
  return obj6594;
}();
cljs.core._hash = function cljs$core$_hash(o) {
  if (function() {
    var and__4297__auto__ = o;
    if (and__4297__auto__) {
      return o.cljs$core$IHash$_hash$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return o.cljs$core$IHash$_hash$arity$1(o);
  } else {
    var x__4945__auto__ = o == null ? null : o;
    return function() {
      var or__4309__auto__ = cljs.core._hash[function() {
        var G__6598 = x__4945__auto__;
        return goog.typeOf(G__6598);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._hash["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IHash.-hash", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISeqable = function() {
  var obj6600 = {};
  return obj6600;
}();
cljs.core._seq = function cljs$core$_seq(o) {
  if (function() {
    var and__4297__auto__ = o;
    if (and__4297__auto__) {
      return o.cljs$core$ISeqable$_seq$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return o.cljs$core$ISeqable$_seq$arity$1(o);
  } else {
    var x__4945__auto__ = o == null ? null : o;
    return function() {
      var or__4309__auto__ = cljs.core._seq[function() {
        var G__6604 = x__4945__auto__;
        return goog.typeOf(G__6604);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._seq["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISeqable.-seq", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISequential = function() {
  var obj6606 = {};
  return obj6606;
}();
cljs.core.IList = function() {
  var obj6608 = {};
  return obj6608;
}();
cljs.core.IRecord = function() {
  var obj6610 = {};
  return obj6610;
}();
cljs.core.IReversible = function() {
  var obj6612 = {};
  return obj6612;
}();
cljs.core._rseq = function cljs$core$_rseq(coll) {
  if (function() {
    var and__4297__auto__ = coll;
    if (and__4297__auto__) {
      return coll.cljs$core$IReversible$_rseq$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return coll.cljs$core$IReversible$_rseq$arity$1(coll);
  } else {
    var x__4945__auto__ = coll == null ? null : coll;
    return function() {
      var or__4309__auto__ = cljs.core._rseq[function() {
        var G__6616 = x__4945__auto__;
        return goog.typeOf(G__6616);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._rseq["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IReversible.-rseq", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISorted = function() {
  var obj6618 = {};
  return obj6618;
}();
cljs.core._sorted_seq = function cljs$core$_sorted_seq(coll, ascending_QMARK_) {
  if (function() {
    var and__4297__auto__ = coll;
    if (and__4297__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq$arity$2;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq$arity$2(coll, ascending_QMARK_);
  } else {
    var x__4945__auto__ = coll == null ? null : coll;
    return function() {
      var or__4309__auto__ = cljs.core._sorted_seq[function() {
        var G__6622 = x__4945__auto__;
        return goog.typeOf(G__6622);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._sorted_seq["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISorted.-sorted-seq", coll);
        }
      }
    }().call(null, coll, ascending_QMARK_);
  }
};
cljs.core._sorted_seq_from = function cljs$core$_sorted_seq_from(coll, k, ascending_QMARK_) {
  if (function() {
    var and__4297__auto__ = coll;
    if (and__4297__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq_from$arity$3;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq_from$arity$3(coll, k, ascending_QMARK_);
  } else {
    var x__4945__auto__ = coll == null ? null : coll;
    return function() {
      var or__4309__auto__ = cljs.core._sorted_seq_from[function() {
        var G__6626 = x__4945__auto__;
        return goog.typeOf(G__6626);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._sorted_seq_from["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISorted.-sorted-seq-from", coll);
        }
      }
    }().call(null, coll, k, ascending_QMARK_);
  }
};
cljs.core._entry_key = function cljs$core$_entry_key(coll, entry) {
  if (function() {
    var and__4297__auto__ = coll;
    if (and__4297__auto__) {
      return coll.cljs$core$ISorted$_entry_key$arity$2;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_entry_key$arity$2(coll, entry);
  } else {
    var x__4945__auto__ = coll == null ? null : coll;
    return function() {
      var or__4309__auto__ = cljs.core._entry_key[function() {
        var G__6630 = x__4945__auto__;
        return goog.typeOf(G__6630);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._entry_key["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISorted.-entry-key", coll);
        }
      }
    }().call(null, coll, entry);
  }
};
cljs.core._comparator = function cljs$core$_comparator(coll) {
  if (function() {
    var and__4297__auto__ = coll;
    if (and__4297__auto__) {
      return coll.cljs$core$ISorted$_comparator$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_comparator$arity$1(coll);
  } else {
    var x__4945__auto__ = coll == null ? null : coll;
    return function() {
      var or__4309__auto__ = cljs.core._comparator[function() {
        var G__6634 = x__4945__auto__;
        return goog.typeOf(G__6634);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._comparator["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISorted.-comparator", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IWriter = function() {
  var obj6636 = {};
  return obj6636;
}();
cljs.core._write = function cljs$core$_write(writer, s) {
  if (function() {
    var and__4297__auto__ = writer;
    if (and__4297__auto__) {
      return writer.cljs$core$IWriter$_write$arity$2;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_write$arity$2(writer, s);
  } else {
    var x__4945__auto__ = writer == null ? null : writer;
    return function() {
      var or__4309__auto__ = cljs.core._write[function() {
        var G__6640 = x__4945__auto__;
        return goog.typeOf(G__6640);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._write["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWriter.-write", writer);
        }
      }
    }().call(null, writer, s);
  }
};
cljs.core._flush = function cljs$core$_flush(writer) {
  if (function() {
    var and__4297__auto__ = writer;
    if (and__4297__auto__) {
      return writer.cljs$core$IWriter$_flush$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_flush$arity$1(writer);
  } else {
    var x__4945__auto__ = writer == null ? null : writer;
    return function() {
      var or__4309__auto__ = cljs.core._flush[function() {
        var G__6644 = x__4945__auto__;
        return goog.typeOf(G__6644);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._flush["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWriter.-flush", writer);
        }
      }
    }().call(null, writer);
  }
};
cljs.core.IPrintWithWriter = function() {
  var obj6646 = {};
  return obj6646;
}();
cljs.core._pr_writer = function cljs$core$_pr_writer(o, writer, opts) {
  if (function() {
    var and__4297__auto__ = o;
    if (and__4297__auto__) {
      return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3(o, writer, opts);
  } else {
    var x__4945__auto__ = o == null ? null : o;
    return function() {
      var or__4309__auto__ = cljs.core._pr_writer[function() {
        var G__6650 = x__4945__auto__;
        return goog.typeOf(G__6650);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._pr_writer["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IPrintWithWriter.-pr-writer", o);
        }
      }
    }().call(null, o, writer, opts);
  }
};
cljs.core.IPending = function() {
  var obj6652 = {};
  return obj6652;
}();
cljs.core._realized_QMARK_ = function cljs$core$_realized_QMARK_(d) {
  if (function() {
    var and__4297__auto__ = d;
    if (and__4297__auto__) {
      return d.cljs$core$IPending$_realized_QMARK_$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return d.cljs$core$IPending$_realized_QMARK_$arity$1(d);
  } else {
    var x__4945__auto__ = d == null ? null : d;
    return function() {
      var or__4309__auto__ = cljs.core._realized_QMARK_[function() {
        var G__6656 = x__4945__auto__;
        return goog.typeOf(G__6656);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._realized_QMARK_["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IPending.-realized?", d);
        }
      }
    }().call(null, d);
  }
};
cljs.core.IWatchable = function() {
  var obj6658 = {};
  return obj6658;
}();
cljs.core._notify_watches = function cljs$core$_notify_watches(this$, oldval, newval) {
  if (function() {
    var and__4297__auto__ = this$;
    if (and__4297__auto__) {
      return this$.cljs$core$IWatchable$_notify_watches$arity$3;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_notify_watches$arity$3(this$, oldval, newval);
  } else {
    var x__4945__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4309__auto__ = cljs.core._notify_watches[function() {
        var G__6662 = x__4945__auto__;
        return goog.typeOf(G__6662);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._notify_watches["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWatchable.-notify-watches", this$);
        }
      }
    }().call(null, this$, oldval, newval);
  }
};
cljs.core._add_watch = function cljs$core$_add_watch(this$, key, f) {
  if (function() {
    var and__4297__auto__ = this$;
    if (and__4297__auto__) {
      return this$.cljs$core$IWatchable$_add_watch$arity$3;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_add_watch$arity$3(this$, key, f);
  } else {
    var x__4945__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4309__auto__ = cljs.core._add_watch[function() {
        var G__6666 = x__4945__auto__;
        return goog.typeOf(G__6666);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._add_watch["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWatchable.-add-watch", this$);
        }
      }
    }().call(null, this$, key, f);
  }
};
cljs.core._remove_watch = function cljs$core$_remove_watch(this$, key) {
  if (function() {
    var and__4297__auto__ = this$;
    if (and__4297__auto__) {
      return this$.cljs$core$IWatchable$_remove_watch$arity$2;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_remove_watch$arity$2(this$, key);
  } else {
    var x__4945__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4309__auto__ = cljs.core._remove_watch[function() {
        var G__6670 = x__4945__auto__;
        return goog.typeOf(G__6670);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._remove_watch["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IWatchable.-remove-watch", this$);
        }
      }
    }().call(null, this$, key);
  }
};
cljs.core.IEditableCollection = function() {
  var obj6672 = {};
  return obj6672;
}();
cljs.core._as_transient = function cljs$core$_as_transient(coll) {
  if (function() {
    var and__4297__auto__ = coll;
    if (and__4297__auto__) {
      return coll.cljs$core$IEditableCollection$_as_transient$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return coll.cljs$core$IEditableCollection$_as_transient$arity$1(coll);
  } else {
    var x__4945__auto__ = coll == null ? null : coll;
    return function() {
      var or__4309__auto__ = cljs.core._as_transient[function() {
        var G__6676 = x__4945__auto__;
        return goog.typeOf(G__6676);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._as_transient["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEditableCollection.-as-transient", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ITransientCollection = function() {
  var obj6678 = {};
  return obj6678;
}();
cljs.core._conj_BANG_ = function cljs$core$_conj_BANG_(tcoll, val) {
  if (function() {
    var and__4297__auto__ = tcoll;
    if (and__4297__auto__) {
      return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2(tcoll, val);
  } else {
    var x__4945__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__4309__auto__ = cljs.core._conj_BANG_[function() {
        var G__6682 = x__4945__auto__;
        return goog.typeOf(G__6682);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._conj_BANG_["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientCollection.-conj!", tcoll);
        }
      }
    }().call(null, tcoll, val);
  }
};
cljs.core._persistent_BANG_ = function cljs$core$_persistent_BANG_(tcoll) {
  if (function() {
    var and__4297__auto__ = tcoll;
    if (and__4297__auto__) {
      return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(tcoll);
  } else {
    var x__4945__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__4309__auto__ = cljs.core._persistent_BANG_[function() {
        var G__6686 = x__4945__auto__;
        return goog.typeOf(G__6686);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._persistent_BANG_["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientCollection.-persistent!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientAssociative = function() {
  var obj6688 = {};
  return obj6688;
}();
cljs.core._assoc_BANG_ = function cljs$core$_assoc_BANG_(tcoll, key, val) {
  if (function() {
    var and__4297__auto__ = tcoll;
    if (and__4297__auto__) {
      return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(tcoll, key, val);
  } else {
    var x__4945__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__4309__auto__ = cljs.core._assoc_BANG_[function() {
        var G__6692 = x__4945__auto__;
        return goog.typeOf(G__6692);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._assoc_BANG_["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientAssociative.-assoc!", tcoll);
        }
      }
    }().call(null, tcoll, key, val);
  }
};
cljs.core.ITransientMap = function() {
  var obj6694 = {};
  return obj6694;
}();
cljs.core._dissoc_BANG_ = function cljs$core$_dissoc_BANG_(tcoll, key) {
  if (function() {
    var and__4297__auto__ = tcoll;
    if (and__4297__auto__) {
      return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2(tcoll, key);
  } else {
    var x__4945__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__4309__auto__ = cljs.core._dissoc_BANG_[function() {
        var G__6698 = x__4945__auto__;
        return goog.typeOf(G__6698);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._dissoc_BANG_["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientMap.-dissoc!", tcoll);
        }
      }
    }().call(null, tcoll, key);
  }
};
cljs.core.ITransientVector = function() {
  var obj6700 = {};
  return obj6700;
}();
cljs.core._assoc_n_BANG_ = function cljs$core$_assoc_n_BANG_(tcoll, n, val) {
  if (function() {
    var and__4297__auto__ = tcoll;
    if (and__4297__auto__) {
      return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3(tcoll, n, val);
  } else {
    var x__4945__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__4309__auto__ = cljs.core._assoc_n_BANG_[function() {
        var G__6704 = x__4945__auto__;
        return goog.typeOf(G__6704);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._assoc_n_BANG_["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientVector.-assoc-n!", tcoll);
        }
      }
    }().call(null, tcoll, n, val);
  }
};
cljs.core._pop_BANG_ = function cljs$core$_pop_BANG_(tcoll) {
  if (function() {
    var and__4297__auto__ = tcoll;
    if (and__4297__auto__) {
      return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1(tcoll);
  } else {
    var x__4945__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__4309__auto__ = cljs.core._pop_BANG_[function() {
        var G__6708 = x__4945__auto__;
        return goog.typeOf(G__6708);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._pop_BANG_["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientVector.-pop!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientSet = function() {
  var obj6710 = {};
  return obj6710;
}();
cljs.core._disjoin_BANG_ = function cljs$core$_disjoin_BANG_(tcoll, v) {
  if (function() {
    var and__4297__auto__ = tcoll;
    if (and__4297__auto__) {
      return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2(tcoll, v);
  } else {
    var x__4945__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__4309__auto__ = cljs.core._disjoin_BANG_[function() {
        var G__6714 = x__4945__auto__;
        return goog.typeOf(G__6714);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._disjoin_BANG_["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ITransientSet.-disjoin!", tcoll);
        }
      }
    }().call(null, tcoll, v);
  }
};
cljs.core.IComparable = function() {
  var obj6716 = {};
  return obj6716;
}();
cljs.core._compare = function cljs$core$_compare(x, y) {
  if (function() {
    var and__4297__auto__ = x;
    if (and__4297__auto__) {
      return x.cljs$core$IComparable$_compare$arity$2;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return x.cljs$core$IComparable$_compare$arity$2(x, y);
  } else {
    var x__4945__auto__ = x == null ? null : x;
    return function() {
      var or__4309__auto__ = cljs.core._compare[function() {
        var G__6720 = x__4945__auto__;
        return goog.typeOf(G__6720);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._compare["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IComparable.-compare", x);
        }
      }
    }().call(null, x, y);
  }
};
cljs.core.IChunk = function() {
  var obj6722 = {};
  return obj6722;
}();
cljs.core._drop_first = function cljs$core$_drop_first(coll) {
  if (function() {
    var and__4297__auto__ = coll;
    if (and__4297__auto__) {
      return coll.cljs$core$IChunk$_drop_first$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return coll.cljs$core$IChunk$_drop_first$arity$1(coll);
  } else {
    var x__4945__auto__ = coll == null ? null : coll;
    return function() {
      var or__4309__auto__ = cljs.core._drop_first[function() {
        var G__6726 = x__4945__auto__;
        return goog.typeOf(G__6726);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._drop_first["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IChunk.-drop-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedSeq = function() {
  var obj6728 = {};
  return obj6728;
}();
cljs.core._chunked_first = function cljs$core$_chunked_first(coll) {
  if (function() {
    var and__4297__auto__ = coll;
    if (and__4297__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1(coll);
  } else {
    var x__4945__auto__ = coll == null ? null : coll;
    return function() {
      var or__4309__auto__ = cljs.core._chunked_first[function() {
        var G__6732 = x__4945__auto__;
        return goog.typeOf(G__6732);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._chunked_first["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IChunkedSeq.-chunked-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._chunked_rest = function cljs$core$_chunked_rest(coll) {
  if (function() {
    var and__4297__auto__ = coll;
    if (and__4297__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1(coll);
  } else {
    var x__4945__auto__ = coll == null ? null : coll;
    return function() {
      var or__4309__auto__ = cljs.core._chunked_rest[function() {
        var G__6736 = x__4945__auto__;
        return goog.typeOf(G__6736);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._chunked_rest["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IChunkedSeq.-chunked-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedNext = function() {
  var obj6738 = {};
  return obj6738;
}();
cljs.core._chunked_next = function cljs$core$_chunked_next(coll) {
  if (function() {
    var and__4297__auto__ = coll;
    if (and__4297__auto__) {
      return coll.cljs$core$IChunkedNext$_chunked_next$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedNext$_chunked_next$arity$1(coll);
  } else {
    var x__4945__auto__ = coll == null ? null : coll;
    return function() {
      var or__4309__auto__ = cljs.core._chunked_next[function() {
        var G__6742 = x__4945__auto__;
        return goog.typeOf(G__6742);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._chunked_next["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IChunkedNext.-chunked-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INamed = function() {
  var obj6744 = {};
  return obj6744;
}();
cljs.core._name = function cljs$core$_name(x) {
  if (function() {
    var and__4297__auto__ = x;
    if (and__4297__auto__) {
      return x.cljs$core$INamed$_name$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_name$arity$1(x);
  } else {
    var x__4945__auto__ = x == null ? null : x;
    return function() {
      var or__4309__auto__ = cljs.core._name[function() {
        var G__6748 = x__4945__auto__;
        return goog.typeOf(G__6748);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._name["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("INamed.-name", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._namespace = function cljs$core$_namespace(x) {
  if (function() {
    var and__4297__auto__ = x;
    if (and__4297__auto__) {
      return x.cljs$core$INamed$_namespace$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_namespace$arity$1(x);
  } else {
    var x__4945__auto__ = x == null ? null : x;
    return function() {
      var or__4309__auto__ = cljs.core._namespace[function() {
        var G__6752 = x__4945__auto__;
        return goog.typeOf(G__6752);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._namespace["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("INamed.-namespace", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.IAtom = function() {
  var obj6754 = {};
  return obj6754;
}();
cljs.core.IReset = function() {
  var obj6756 = {};
  return obj6756;
}();
cljs.core._reset_BANG_ = function cljs$core$_reset_BANG_(o, new_value) {
  if (function() {
    var and__4297__auto__ = o;
    if (and__4297__auto__) {
      return o.cljs$core$IReset$_reset_BANG_$arity$2;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return o.cljs$core$IReset$_reset_BANG_$arity$2(o, new_value);
  } else {
    var x__4945__auto__ = o == null ? null : o;
    return function() {
      var or__4309__auto__ = cljs.core._reset_BANG_[function() {
        var G__6760 = x__4945__auto__;
        return goog.typeOf(G__6760);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._reset_BANG_["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IReset.-reset!", o);
        }
      }
    }().call(null, o, new_value);
  }
};
cljs.core.ISwap = function() {
  var obj6762 = {};
  return obj6762;
}();
cljs.core._swap_BANG_ = function cljs$core$_swap_BANG_() {
  var G__6764 = arguments.length;
  switch(G__6764) {
    case 2:
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$2 = function(o, f) {
  if (function() {
    var and__4297__auto__ = o;
    if (and__4297__auto__) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$2;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return o.cljs$core$ISwap$_swap_BANG_$arity$2(o, f);
  } else {
    var x__4945__auto__ = o == null ? null : o;
    return function() {
      var or__4309__auto__ = cljs.core._swap_BANG_[function() {
        var G__6766 = x__4945__auto__;
        return goog.typeOf(G__6766);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._swap_BANG_["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISwap.-swap!", o);
        }
      }
    }().call(null, o, f);
  }
};
cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$3 = function(o, f, a) {
  if (function() {
    var and__4297__auto__ = o;
    if (and__4297__auto__) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$3;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return o.cljs$core$ISwap$_swap_BANG_$arity$3(o, f, a);
  } else {
    var x__4945__auto__ = o == null ? null : o;
    return function() {
      var or__4309__auto__ = cljs.core._swap_BANG_[function() {
        var G__6768 = x__4945__auto__;
        return goog.typeOf(G__6768);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._swap_BANG_["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISwap.-swap!", o);
        }
      }
    }().call(null, o, f, a);
  }
};
cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$4 = function(o, f, a, b) {
  if (function() {
    var and__4297__auto__ = o;
    if (and__4297__auto__) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$4;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return o.cljs$core$ISwap$_swap_BANG_$arity$4(o, f, a, b);
  } else {
    var x__4945__auto__ = o == null ? null : o;
    return function() {
      var or__4309__auto__ = cljs.core._swap_BANG_[function() {
        var G__6770 = x__4945__auto__;
        return goog.typeOf(G__6770);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._swap_BANG_["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISwap.-swap!", o);
        }
      }
    }().call(null, o, f, a, b);
  }
};
cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$5 = function(o, f, a, b, xs) {
  if (function() {
    var and__4297__auto__ = o;
    if (and__4297__auto__) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$5;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return o.cljs$core$ISwap$_swap_BANG_$arity$5(o, f, a, b, xs);
  } else {
    var x__4945__auto__ = o == null ? null : o;
    return function() {
      var or__4309__auto__ = cljs.core._swap_BANG_[function() {
        var G__6772 = x__4945__auto__;
        return goog.typeOf(G__6772);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._swap_BANG_["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("ISwap.-swap!", o);
        }
      }
    }().call(null, o, f, a, b, xs);
  }
};
cljs.core._swap_BANG_.cljs$lang$maxFixedArity = 5;
cljs.core.IVolatile = function() {
  var obj6775 = {};
  return obj6775;
}();
cljs.core._vreset_BANG_ = function cljs$core$_vreset_BANG_(o, new_value) {
  if (function() {
    var and__4297__auto__ = o;
    if (and__4297__auto__) {
      return o.cljs$core$IVolatile$_vreset_BANG_$arity$2;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return o.cljs$core$IVolatile$_vreset_BANG_$arity$2(o, new_value);
  } else {
    var x__4945__auto__ = o == null ? null : o;
    return function() {
      var or__4309__auto__ = cljs.core._vreset_BANG_[function() {
        var G__6779 = x__4945__auto__;
        return goog.typeOf(G__6779);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._vreset_BANG_["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IVolatile.-vreset!", o);
        }
      }
    }().call(null, o, new_value);
  }
};
cljs.core.IIterable = function() {
  var obj6781 = {};
  return obj6781;
}();
cljs.core._iterator = function cljs$core$_iterator(coll) {
  if (function() {
    var and__4297__auto__ = coll;
    if (and__4297__auto__) {
      return coll.cljs$core$IIterable$_iterator$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return coll.cljs$core$IIterable$_iterator$arity$1(coll);
  } else {
    var x__4945__auto__ = coll == null ? null : coll;
    return function() {
      var or__4309__auto__ = cljs.core._iterator[function() {
        var G__6785 = x__4945__auto__;
        return goog.typeOf(G__6785);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._iterator["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IIterable.-iterator", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.StringBufferWriter = function(sb) {
  this.sb = sb;
  this.cljs$lang$protocol_mask$partition0$ = 1073741824;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_write$arity$2 = function(_, s) {
  var self__ = this;
  var ___$1 = this;
  return self__.sb.append(s);
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_flush$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return null;
};
cljs.core.StringBufferWriter.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "sb", "sb", -1249746442, null)], null);
};
cljs.core.StringBufferWriter.cljs$lang$type = true;
cljs.core.StringBufferWriter.cljs$lang$ctorStr = "cljs.core/StringBufferWriter";
cljs.core.StringBufferWriter.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/StringBufferWriter");
};
cljs.core.__GT_StringBufferWriter = function cljs$core$__GT_StringBufferWriter(sb) {
  return new cljs.core.StringBufferWriter(sb);
};
cljs.core.pr_str_STAR_ = function cljs$core$pr_str_STAR_(obj) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  obj.cljs$core$IPrintWithWriter$_pr_writer$arity$3(null, writer, cljs.core.pr_opts());
  writer.cljs$core$IWriter$_flush$arity$1(null);
  return [cljs.core.str(sb)].join("");
};
cljs.core.int_rotate_left = function cljs$core$int_rotate_left(x, n) {
  return x << n | x >>> -n;
};
if (typeof Math.imul !== "undefined" && !(function() {
  var G__6788 = 4294967295;
  var G__6789 = 5;
  return Math.imul(G__6788, G__6789);
}() === 0)) {
  cljs.core.imul = function cljs$core$imul(a, b) {
    var G__6792 = a;
    var G__6793 = b;
    return Math.imul(G__6792, G__6793);
  };
} else {
  cljs.core.imul = function cljs$core$imul(a, b) {
    var ah = a >>> 16 & 65535;
    var al = a & 65535;
    var bh = b >>> 16 & 65535;
    var bl = b & 65535;
    return al * bl + (ah * bl + al * bh << 16 >>> 0) | 0;
  };
}
cljs.core.m3_seed = 0;
cljs.core.m3_C1 = 3432918353 | 0;
cljs.core.m3_C2 = 461845907 | 0;
cljs.core.m3_mix_K1 = function cljs$core$m3_mix_K1(k1) {
  return cljs.core.imul(cljs.core.int_rotate_left(cljs.core.imul(k1 | 0, cljs.core.m3_C1), 15), cljs.core.m3_C2);
};
cljs.core.m3_mix_H1 = function cljs$core$m3_mix_H1(h1, k1) {
  return cljs.core.imul(cljs.core.int_rotate_left((h1 | 0) ^ (k1 | 0), 13), 5) + (3864292196 | 0) | 0;
};
cljs.core.m3_fmix = function cljs$core$m3_fmix(h1, len) {
  var h1__$1 = h1 | 0;
  var h1__$2 = h1__$1 ^ len;
  var h1__$3 = h1__$2 ^ h1__$2 >>> 16;
  var h1__$4 = cljs.core.imul(h1__$3, 2246822507 | 0);
  var h1__$5 = h1__$4 ^ h1__$4 >>> 13;
  var h1__$6 = cljs.core.imul(h1__$5, 3266489909 | 0);
  var h1__$7 = h1__$6 ^ h1__$6 >>> 16;
  return h1__$7;
};
cljs.core.m3_hash_int = function cljs$core$m3_hash_int(in$) {
  if (in$ === 0) {
    return in$;
  } else {
    var k1 = cljs.core.m3_mix_K1(in$);
    var h1 = cljs.core.m3_mix_H1(cljs.core.m3_seed, k1);
    return cljs.core.m3_fmix(h1, 4);
  }
};
cljs.core.m3_hash_unencoded_chars = function cljs$core$m3_hash_unencoded_chars(in$) {
  var h1 = function() {
    var i = 1;
    var h1 = cljs.core.m3_seed;
    while (true) {
      if (i < in$.length) {
        var G__6794 = i + 2;
        var G__6795 = cljs.core.m3_mix_H1(h1, cljs.core.m3_mix_K1(in$.charCodeAt(i - 1) | in$.charCodeAt(i) << 16));
        i = G__6794;
        h1 = G__6795;
        continue;
      } else {
        return h1;
      }
      break;
    }
  }();
  var h1__$1 = (in$.length & 1) === 1 ? h1 ^ cljs.core.m3_mix_K1(in$.charCodeAt(in$.length - 1)) : h1;
  return cljs.core.m3_fmix(h1__$1, cljs.core.imul(2, in$.length));
};
cljs.core.string_hash_cache = function() {
  var obj6797 = {};
  return obj6797;
}();
cljs.core.string_hash_cache_count = 0;
cljs.core.hash_string_STAR_ = function cljs$core$hash_string_STAR_(s) {
  if (!(s == null)) {
    var len = s.length;
    if (len > 0) {
      var i = 0;
      var hash = 0;
      while (true) {
        if (i < len) {
          var G__6798 = i + 1;
          var G__6799 = cljs.core.imul(31, hash) + s.charCodeAt(i);
          i = G__6798;
          hash = G__6799;
          continue;
        } else {
          return hash;
        }
        break;
      }
    } else {
      return 0;
    }
  } else {
    return 0;
  }
};
cljs.core.add_to_string_hash_cache = function cljs$core$add_to_string_hash_cache(k) {
  var h = cljs.core.hash_string_STAR_(k);
  cljs.core.string_hash_cache[k] = h;
  cljs.core.string_hash_cache_count = cljs.core.string_hash_cache_count + 1;
  return h;
};
cljs.core.hash_string = function cljs$core$hash_string(k) {
  if (cljs.core.string_hash_cache_count > 255) {
    cljs.core.string_hash_cache = function() {
      var obj6803 = {};
      return obj6803;
    }();
    cljs.core.string_hash_cache_count = 0;
  } else {
  }
  var h = cljs.core.string_hash_cache[k];
  if (typeof h === "number") {
    return h;
  } else {
    return cljs.core.add_to_string_hash_cache(k);
  }
};
cljs.core.hash = function cljs$core$hash(o) {
  if (function() {
    var G__6806 = o;
    if (G__6806) {
      var bit__4976__auto__ = G__6806.cljs$lang$protocol_mask$partition0$ & 4194304;
      if (bit__4976__auto__ || G__6806.cljs$core$IHash$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return o.cljs$core$IHash$_hash$arity$1(null);
  } else {
    if (typeof o === "number") {
      return function() {
        var G__6807 = o;
        return Math.floor(G__6807);
      }() % 2147483647;
    } else {
      if (o === true) {
        return 1;
      } else {
        if (o === false) {
          return 0;
        } else {
          if (typeof o === "string") {
            return cljs.core.m3_hash_int(cljs.core.hash_string(o));
          } else {
            if (o instanceof Date) {
              return o.valueOf();
            } else {
              if (o == null) {
                return 0;
              } else {
                return cljs.core._hash(o);
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.hash_combine = function cljs$core$hash_combine(seed, hash) {
  return seed ^ hash + 2654435769 + (seed << 6) + (seed >> 2);
};
cljs.core.instance_QMARK_ = function cljs$core$instance_QMARK_(t, o) {
  return o instanceof t;
};
cljs.core.symbol_QMARK_ = function cljs$core$symbol_QMARK_(x) {
  return x instanceof cljs.core.Symbol;
};
cljs.core.hash_symbol = function cljs$core$hash_symbol(sym) {
  return cljs.core.hash_combine(cljs.core.m3_hash_unencoded_chars(sym.name), cljs.core.hash_string(sym.ns));
};
cljs.core.compare_symbols = function cljs$core$compare_symbols(a, b) {
  if (a.str === b.str) {
    return 0;
  } else {
    if (cljs.core.truth_(function() {
      var and__4297__auto__ = cljs.core.not(a.ns);
      if (and__4297__auto__) {
        return b.ns;
      } else {
        return and__4297__auto__;
      }
    }())) {
      return -1;
    } else {
      if (cljs.core.truth_(a.ns)) {
        if (cljs.core.not(b.ns)) {
          return 1;
        } else {
          var nsc = function() {
            var G__6814 = a.ns;
            var G__6815 = b.ns;
            return goog.array.defaultCompare(G__6814, G__6815);
          }();
          if (0 === nsc) {
            var G__6816 = a.name;
            var G__6817 = b.name;
            return goog.array.defaultCompare(G__6816, G__6817);
          } else {
            return nsc;
          }
        }
      } else {
        var G__6818 = a.name;
        var G__6819 = b.name;
        return goog.array.defaultCompare(G__6818, G__6819);
      }
    }
  }
};
cljs.core.Symbol = function(ns, name, str, _hash, _meta) {
  this.ns = ns;
  this.name = name;
  this.str = str;
  this._hash = _hash;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 2154168321;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Symbol.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.str;
};
cljs.core.Symbol.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Symbol.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Symbol) {
    return self__.str === other.str;
  } else {
    return false;
  }
};
cljs.core.Symbol.prototype.call = function() {
  var G__6821 = null;
  var G__6821__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll, sym, null);
  };
  var G__6821__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll, sym, not_found);
  };
  G__6821 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__6821__2.call(this, self__, coll);
      case 3:
        return G__6821__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__6821.cljs$core$IFn$_invoke$arity$2 = G__6821__2;
  G__6821.cljs$core$IFn$_invoke$arity$3 = G__6821__3;
  return G__6821;
}();
cljs.core.Symbol.prototype.apply = function(self__, args6820) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args6820)));
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll, sym, null);
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll, sym, not_found);
};
cljs.core.Symbol.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__._meta;
};
cljs.core.Symbol.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Symbol(self__.ns, self__.name, self__.str, self__._hash, new_meta);
};
cljs.core.Symbol.prototype.cljs$core$IHash$_hash$arity$1 = function(sym) {
  var self__ = this;
  var sym__$1 = this;
  var h__4725__auto__ = self__._hash;
  if (!(h__4725__auto__ == null)) {
    return h__4725__auto__;
  } else {
    var h__4725__auto____$1 = cljs.core.hash_symbol(sym__$1);
    self__._hash = h__4725__auto____$1;
    return h__4725__auto____$1;
  }
};
cljs.core.Symbol.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Symbol.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Symbol.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write(writer, self__.str);
};
cljs.core.Symbol.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "ns", "ns", 2082130287, null), new cljs.core.Symbol(null, "name", "name", -810760592, null), new cljs.core.Symbol(null, "str", "str", -1564826950, null), new cljs.core.Symbol(null, "_hash", "_hash", -2130838312, null), new cljs.core.Symbol(null, "_meta", "_meta", -1716892533, null)], null);
};
cljs.core.Symbol.cljs$lang$type = true;
cljs.core.Symbol.cljs$lang$ctorStr = "cljs.core/Symbol";
cljs.core.Symbol.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/Symbol");
};
cljs.core.__GT_Symbol = function cljs$core$__GT_Symbol(ns, name, str, _hash, _meta) {
  return new cljs.core.Symbol(ns, name, str, _hash, _meta);
};
cljs.core.symbol = function cljs$core$symbol() {
  var G__6823 = arguments.length;
  switch(G__6823) {
    case 1:
      return cljs.core.symbol.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.symbol.cljs$core$IFn$_invoke$arity$1 = function(name) {
  if (name instanceof cljs.core.Symbol) {
    return name;
  } else {
    return cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(null, name);
  }
};
cljs.core.symbol.cljs$core$IFn$_invoke$arity$2 = function(ns, name) {
  var sym_str = !(ns == null) ? [cljs.core.str(ns), cljs.core.str("/"), cljs.core.str(name)].join("") : name;
  return new cljs.core.Symbol(ns, name, sym_str, null, null);
};
cljs.core.symbol.cljs$lang$maxFixedArity = 2;
cljs.core.Var = function(val, sym, _meta) {
  this.val = val;
  this.sym = sym;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 163841;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.Var.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
};
cljs.core.Var.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__._meta;
};
cljs.core.Var.prototype.cljs$core$Fn$ = true;
cljs.core.Var.prototype.call = function() {
  var G__6870 = null;
  var G__6870__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null);
  };
  var G__6870__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a);
  };
  var G__6870__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b);
  };
  var G__6870__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c);
  };
  var G__6870__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d);
  };
  var G__6870__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e);
  };
  var G__6870__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f);
  };
  var G__6870__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g);
  };
  var G__6870__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h);
  };
  var G__6870__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i);
  };
  var G__6870__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j);
  };
  var G__6870__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k);
  };
  var G__6870__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  };
  var G__6870__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  };
  var G__6870__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  };
  var G__6870__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  };
  var G__6870__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  };
  var G__6870__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  };
  var G__6870__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  };
  var G__6870__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  };
  var G__6870__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  };
  var G__6870__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__6826 = function() {
      return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    }();
    var G__6827 = a;
    var G__6828 = b;
    var G__6829 = c;
    var G__6830 = d;
    var G__6831 = e;
    var G__6832 = f;
    var G__6833 = g;
    var G__6834 = h;
    var G__6835 = i;
    var G__6836 = j;
    var G__6837 = k;
    var G__6838 = l;
    var G__6839 = m;
    var G__6840 = n;
    var G__6841 = o;
    var G__6842 = p;
    var G__6843 = q;
    var G__6844 = r;
    var G__6845 = s;
    var G__6846 = t;
    var G__6847 = rest;
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(G__6826, G__6827, G__6828, G__6829, G__6830, G__6831, G__6832, G__6833, G__6834, G__6835, G__6836, G__6837, G__6838, G__6839, G__6840, G__6841, G__6842, G__6843, G__6844, G__6845, G__6846, G__6847) : cljs.core.apply.call(null, G__6826, G__6827, G__6828, G__6829, G__6830, G__6831, G__6832, G__6833, G__6834, G__6835, G__6836, G__6837, G__6838, G__6839, G__6840, G__6841, G__6842, G__6843, G__6844, 
    G__6845, G__6846, G__6847);
  };
  G__6870 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__6870__1.call(this, self__);
      case 2:
        return G__6870__2.call(this, self__, a);
      case 3:
        return G__6870__3.call(this, self__, a, b);
      case 4:
        return G__6870__4.call(this, self__, a, b, c);
      case 5:
        return G__6870__5.call(this, self__, a, b, c, d);
      case 6:
        return G__6870__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__6870__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__6870__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__6870__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__6870__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__6870__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__6870__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__6870__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__6870__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__6870__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__6870__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__6870__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__6870__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__6870__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__6870__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__6870__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__6870__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__6870.cljs$core$IFn$_invoke$arity$1 = G__6870__1;
  G__6870.cljs$core$IFn$_invoke$arity$2 = G__6870__2;
  G__6870.cljs$core$IFn$_invoke$arity$3 = G__6870__3;
  G__6870.cljs$core$IFn$_invoke$arity$4 = G__6870__4;
  G__6870.cljs$core$IFn$_invoke$arity$5 = G__6870__5;
  G__6870.cljs$core$IFn$_invoke$arity$6 = G__6870__6;
  G__6870.cljs$core$IFn$_invoke$arity$7 = G__6870__7;
  G__6870.cljs$core$IFn$_invoke$arity$8 = G__6870__8;
  G__6870.cljs$core$IFn$_invoke$arity$9 = G__6870__9;
  G__6870.cljs$core$IFn$_invoke$arity$10 = G__6870__10;
  G__6870.cljs$core$IFn$_invoke$arity$11 = G__6870__11;
  G__6870.cljs$core$IFn$_invoke$arity$12 = G__6870__12;
  G__6870.cljs$core$IFn$_invoke$arity$13 = G__6870__13;
  G__6870.cljs$core$IFn$_invoke$arity$14 = G__6870__14;
  G__6870.cljs$core$IFn$_invoke$arity$15 = G__6870__15;
  G__6870.cljs$core$IFn$_invoke$arity$16 = G__6870__16;
  G__6870.cljs$core$IFn$_invoke$arity$17 = G__6870__17;
  G__6870.cljs$core$IFn$_invoke$arity$18 = G__6870__18;
  G__6870.cljs$core$IFn$_invoke$arity$19 = G__6870__19;
  G__6870.cljs$core$IFn$_invoke$arity$20 = G__6870__20;
  G__6870.cljs$core$IFn$_invoke$arity$21 = G__6870__21;
  G__6870.cljs$core$IFn$_invoke$arity$22 = G__6870__22;
  return G__6870;
}();
cljs.core.Var.prototype.apply = function(self__, args6825) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args6825)));
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var _ = this;
  return function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }().call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var _ = this;
  var G__6848 = function() {
    return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  }();
  var G__6849 = a;
  var G__6850 = b;
  var G__6851 = c;
  var G__6852 = d;
  var G__6853 = e;
  var G__6854 = f;
  var G__6855 = g;
  var G__6856 = h;
  var G__6857 = i;
  var G__6858 = j;
  var G__6859 = k;
  var G__6860 = l;
  var G__6861 = m;
  var G__6862 = n;
  var G__6863 = o;
  var G__6864 = p;
  var G__6865 = q;
  var G__6866 = r;
  var G__6867 = s;
  var G__6868 = t;
  var G__6869 = rest;
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(G__6848, G__6849, G__6850, G__6851, G__6852, G__6853, G__6854, G__6855, G__6856, G__6857, G__6858, G__6859, G__6860, G__6861, G__6862, G__6863, G__6864, G__6865, G__6866, G__6867, G__6868, G__6869) : cljs.core.apply.call(null, G__6848, G__6849, G__6850, G__6851, G__6852, G__6853, G__6854, G__6855, G__6856, G__6857, G__6858, G__6859, G__6860, G__6861, G__6862, G__6863, G__6864, G__6865, G__6866, 
  G__6867, G__6868, G__6869);
};
cljs.core.Var.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "val", "val", 1769233139, null), new cljs.core.Symbol(null, "sym", "sym", 195671222, null), new cljs.core.Symbol(null, "_meta", "_meta", -1716892533, null)], null);
};
cljs.core.Var.cljs$lang$type = true;
cljs.core.Var.cljs$lang$ctorStr = "cljs.core/Var";
cljs.core.Var.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/Var");
};
cljs.core.__GT_Var = function cljs$core$__GT_Var(val, sym, _meta) {
  return new cljs.core.Var(val, sym, _meta);
};
cljs.core.var_QMARK_ = function cljs$core$var_QMARK_(v) {
  return v instanceof cljs.core.Var;
};
cljs.core.iterable_QMARK_ = function cljs$core$iterable_QMARK_(x) {
  var G__6872 = x;
  if (G__6872) {
    var bit__4983__auto__ = null;
    if (cljs.core.truth_(function() {
      var or__4309__auto__ = bit__4983__auto__;
      if (cljs.core.truth_(or__4309__auto__)) {
        return or__4309__auto__;
      } else {
        return G__6872.cljs$core$IIterable$;
      }
    }())) {
      return true;
    } else {
      if (!G__6872.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IIterable, G__6872);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IIterable, G__6872);
  }
};
cljs.core.clone = function cljs$core$clone(value) {
  return cljs.core._clone(value);
};
cljs.core.cloneable_QMARK_ = function cljs$core$cloneable_QMARK_(value) {
  var G__6874 = value;
  if (G__6874) {
    var bit__4983__auto__ = G__6874.cljs$lang$protocol_mask$partition1$ & 8192;
    if (bit__4983__auto__ || G__6874.cljs$core$ICloneable$) {
      return true;
    } else {
      if (!G__6874.cljs$lang$protocol_mask$partition1$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ICloneable, G__6874);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ICloneable, G__6874);
  }
};
cljs.core.seq = function cljs$core$seq(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__6876 = coll;
      if (G__6876) {
        var bit__4976__auto__ = G__6876.cljs$lang$protocol_mask$partition0$ & 8388608;
        if (bit__4976__auto__ || G__6876.cljs$core$ISeqable$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$ISeqable$_seq$arity$1(null);
    } else {
      if (cljs.core.array_QMARK_(coll)) {
        if (coll.length === 0) {
          return null;
        } else {
          return new cljs.core.IndexedSeq(coll, 0);
        }
      } else {
        if (typeof coll === "string") {
          if (coll.length === 0) {
            return null;
          } else {
            return new cljs.core.IndexedSeq(coll, 0);
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.ISeqable, coll)) {
            return cljs.core._seq(coll);
          } else {
            throw new Error([cljs.core.str(coll), cljs.core.str(" is not ISeqable")].join(""));
          }
        }
      }
    }
  }
};
cljs.core.first = function cljs$core$first(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__6878 = coll;
      if (G__6878) {
        var bit__4976__auto__ = G__6878.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4976__auto__ || G__6878.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$ISeq$_first$arity$1(null);
    } else {
      var s = cljs.core.seq(coll);
      if (s == null) {
        return null;
      } else {
        return cljs.core._first(s);
      }
    }
  }
};
cljs.core.rest = function cljs$core$rest(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__6880 = coll;
      if (G__6880) {
        var bit__4976__auto__ = G__6880.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4976__auto__ || G__6880.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$ISeq$_rest$arity$1(null);
    } else {
      var s = cljs.core.seq(coll);
      if (s) {
        return cljs.core._rest(s);
      } else {
        return cljs.core.List.EMPTY;
      }
    }
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.next = function cljs$core$next(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__6882 = coll;
      if (G__6882) {
        var bit__4976__auto__ = G__6882.cljs$lang$protocol_mask$partition0$ & 128;
        if (bit__4976__auto__ || G__6882.cljs$core$INext$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$INext$_next$arity$1(null);
    } else {
      return cljs.core.seq(cljs.core.rest(coll));
    }
  }
};
cljs.core._EQ_ = function cljs$core$_EQ_() {
  var G__6887 = arguments.length;
  switch(G__6887) {
    case 1:
      return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5360__auto__);
  }
};
cljs.core._EQ_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  if (x == null) {
    return y == null;
  } else {
    return x === y || cljs.core._equiv(x, y);
  }
};
cljs.core._EQ_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
      if (cljs.core.next(more)) {
        var G__6889 = y;
        var G__6890 = cljs.core.first(more);
        var G__6891 = cljs.core.next(more);
        x = G__6889;
        y = G__6890;
        more = G__6891;
        continue;
      } else {
        return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(y, cljs.core.first(more));
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._EQ_.cljs$lang$applyTo = function(seq6883) {
  var G__6884 = cljs.core.first(seq6883);
  var seq6883__$1 = cljs.core.next(seq6883);
  var G__6885 = cljs.core.first(seq6883__$1);
  var seq6883__$2 = cljs.core.next(seq6883__$1);
  return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$variadic(G__6884, G__6885, seq6883__$2);
};
cljs.core._EQ_.cljs$lang$maxFixedArity = 2;
cljs.core.ES6Iterator = function(s) {
  this.s = s;
};
cljs.core.ES6Iterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var x = cljs.core.first(self__.s);
    self__.s = cljs.core.next(self__.s);
    return {"value":x, "done":false};
  } else {
    return {"value":null, "done":true};
  }
};
cljs.core.ES6Iterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "s", "s", -948495851, null)], null);
};
cljs.core.ES6Iterator.cljs$lang$type = true;
cljs.core.ES6Iterator.cljs$lang$ctorStr = "cljs.core/ES6Iterator";
cljs.core.ES6Iterator.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/ES6Iterator");
};
cljs.core.__GT_ES6Iterator = function cljs$core$__GT_ES6Iterator(s) {
  return new cljs.core.ES6Iterator(s);
};
cljs.core.es6_iterator = function cljs$core$es6_iterator(coll) {
  return new cljs.core.ES6Iterator(cljs.core.seq(coll));
};
cljs.core.ES6IteratorSeq = function(value, iter, _rest) {
  this.value = value;
  this.iter = iter;
  this._rest = _rest;
  this.cljs$lang$protocol_mask$partition0$ = 8388672;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.value;
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__._rest == null) {
    self__._rest = function() {
      var G__6892 = self__.iter;
      return cljs.core.es6_iterator_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.es6_iterator_seq.cljs$core$IFn$_invoke$arity$1(G__6892) : cljs.core.es6_iterator_seq.call(null, G__6892);
    }();
  } else {
  }
  return self__._rest;
};
cljs.core.ES6IteratorSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "value", "value", 1946509744, null), new cljs.core.Symbol(null, "iter", "iter", -1346195486, null), new cljs.core.Symbol(null, "_rest", "_rest", -2100466189, null)], null);
};
cljs.core.ES6IteratorSeq.cljs$lang$type = true;
cljs.core.ES6IteratorSeq.cljs$lang$ctorStr = "cljs.core/ES6IteratorSeq";
cljs.core.ES6IteratorSeq.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/ES6IteratorSeq");
};
cljs.core.__GT_ES6IteratorSeq = function cljs$core$__GT_ES6IteratorSeq(value, iter, _rest) {
  return new cljs.core.ES6IteratorSeq(value, iter, _rest);
};
cljs.core.es6_iterator_seq = function cljs$core$es6_iterator_seq(iter) {
  var v = iter.next();
  if (cljs.core.truth_(v.done)) {
    return cljs.core.List.EMPTY;
  } else {
    return new cljs.core.ES6IteratorSeq(v.value, iter, null);
  }
};
cljs.core.mix_collection_hash = function cljs$core$mix_collection_hash(hash_basis, count) {
  var h1 = cljs.core.m3_seed;
  var k1 = cljs.core.m3_mix_K1(hash_basis);
  var h1__$1 = cljs.core.m3_mix_H1(h1, k1);
  return cljs.core.m3_fmix(h1__$1, count);
};
cljs.core.hash_ordered_coll = function cljs$core$hash_ordered_coll(coll) {
  var n = 0;
  var hash_code = 1;
  var coll__$1 = cljs.core.seq(coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__6893 = n + 1;
      var G__6894 = cljs.core.imul(31, hash_code) + cljs.core.hash(cljs.core.first(coll__$1)) | 0;
      var G__6895 = cljs.core.next(coll__$1);
      n = G__6893;
      hash_code = G__6894;
      coll__$1 = G__6895;
      continue;
    } else {
      return cljs.core.mix_collection_hash(hash_code, n);
    }
    break;
  }
};
cljs.core.empty_ordered_hash = cljs.core.mix_collection_hash(1, 0);
cljs.core.hash_unordered_coll = function cljs$core$hash_unordered_coll(coll) {
  var n = 0;
  var hash_code = 0;
  var coll__$1 = cljs.core.seq(coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__6896 = n + 1;
      var G__6897 = hash_code + cljs.core.hash(cljs.core.first(coll__$1)) | 0;
      var G__6898 = cljs.core.next(coll__$1);
      n = G__6896;
      hash_code = G__6897;
      coll__$1 = G__6898;
      continue;
    } else {
      return cljs.core.mix_collection_hash(hash_code, n);
    }
    break;
  }
};
cljs.core.empty_unordered_hash = cljs.core.mix_collection_hash(0, 0);
cljs.core.ICounted["null"] = true;
cljs.core._count["null"] = function(_) {
  return 0;
};
Date.prototype.cljs$core$IEquiv$ = true;
Date.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var o__$1 = this;
  return other instanceof Date && o__$1.valueOf() === other.valueOf();
};
Date.prototype.cljs$core$IComparable$ = true;
Date.prototype.cljs$core$IComparable$_compare$arity$2 = function(this$, other) {
  var this$__$1 = this;
  if (other instanceof Date) {
    var G__6899 = this$__$1.valueOf();
    var G__6900 = other.valueOf();
    return goog.array.defaultCompare(G__6899, G__6900);
  } else {
    throw new Error([cljs.core.str("Cannot compare "), cljs.core.str(this$__$1), cljs.core.str(" to "), cljs.core.str(other)].join(""));
  }
};
cljs.core.IEquiv["number"] = true;
cljs.core._equiv["number"] = function(x, o) {
  return x === o;
};
cljs.core.Fn["function"] = true;
cljs.core.IMeta["function"] = true;
cljs.core._meta["function"] = function(_) {
  return null;
};
cljs.core.IHash["_"] = true;
cljs.core._hash["_"] = function(o) {
  var G__6901 = o;
  return goog.getUid(G__6901);
};
cljs.core.inc = function cljs$core$inc(x) {
  return x + 1;
};
cljs.core.Reduced = function(val) {
  this.val = val;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.Reduced.prototype.cljs$core$IDeref$_deref$arity$1 = function(o) {
  var self__ = this;
  var o__$1 = this;
  return self__.val;
};
cljs.core.Reduced.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "val", "val", 1769233139, null)], null);
};
cljs.core.Reduced.cljs$lang$type = true;
cljs.core.Reduced.cljs$lang$ctorStr = "cljs.core/Reduced";
cljs.core.Reduced.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/Reduced");
};
cljs.core.__GT_Reduced = function cljs$core$__GT_Reduced(val) {
  return new cljs.core.Reduced(val);
};
cljs.core.reduced = function cljs$core$reduced(x) {
  return new cljs.core.Reduced(x);
};
cljs.core.reduced_QMARK_ = function cljs$core$reduced_QMARK_(r) {
  return r instanceof cljs.core.Reduced;
};
cljs.core.ensure_reduced = function cljs$core$ensure_reduced(x) {
  if (cljs.core.reduced_QMARK_(x)) {
    return x;
  } else {
    return cljs.core.reduced(x);
  }
};
cljs.core.unreduced = function cljs$core$unreduced(x) {
  if (cljs.core.reduced_QMARK_(x)) {
    var G__6903 = x;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__6903) : cljs.core.deref.call(null, G__6903);
  } else {
    return x;
  }
};
cljs.core.deref = function cljs$core$deref(o) {
  return cljs.core._deref(o);
};
cljs.core.ci_reduce = function cljs$core$ci_reduce() {
  var G__6905 = arguments.length;
  switch(G__6905) {
    case 2:
      return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2 = function(cicoll, f) {
  var cnt = cljs.core._count(cicoll);
  if (cnt === 0) {
    return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
  } else {
    var val = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, 0);
    var n = 1;
    while (true) {
      if (n < cnt) {
        var nval = function() {
          var G__6906 = val;
          var G__6907 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, n);
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__6906, G__6907) : f.call(null, G__6906, G__6907);
        }();
        if (cljs.core.reduced_QMARK_(nval)) {
          return cljs.core.deref(nval);
        } else {
          var G__6913 = nval;
          var G__6914 = n + 1;
          val = G__6913;
          n = G__6914;
          continue;
        }
      } else {
        return val;
      }
      break;
    }
  }
};
cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3 = function(cicoll, f, val) {
  var cnt = cljs.core._count(cicoll);
  var val__$1 = val;
  var n = 0;
  while (true) {
    if (n < cnt) {
      var nval = function() {
        var G__6908 = val__$1;
        var G__6909 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, n);
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__6908, G__6909) : f.call(null, G__6908, G__6909);
      }();
      if (cljs.core.reduced_QMARK_(nval)) {
        return cljs.core.deref(nval);
      } else {
        var G__6915 = nval;
        var G__6916 = n + 1;
        val__$1 = G__6915;
        n = G__6916;
        continue;
      }
    } else {
      return val__$1;
    }
    break;
  }
};
cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$4 = function(cicoll, f, val, idx) {
  var cnt = cljs.core._count(cicoll);
  var val__$1 = val;
  var n = idx;
  while (true) {
    if (n < cnt) {
      var nval = function() {
        var G__6910 = val__$1;
        var G__6911 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, n);
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__6910, G__6911) : f.call(null, G__6910, G__6911);
      }();
      if (cljs.core.reduced_QMARK_(nval)) {
        return cljs.core.deref(nval);
      } else {
        var G__6917 = nval;
        var G__6918 = n + 1;
        val__$1 = G__6917;
        n = G__6918;
        continue;
      }
    } else {
      return val__$1;
    }
    break;
  }
};
cljs.core.ci_reduce.cljs$lang$maxFixedArity = 4;
cljs.core.array_reduce = function cljs$core$array_reduce() {
  var G__6920 = arguments.length;
  switch(G__6920) {
    case 2:
      return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2 = function(arr, f) {
  var cnt = arr.length;
  if (arr.length === 0) {
    return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
  } else {
    var val = arr[0];
    var n = 1;
    while (true) {
      if (n < cnt) {
        var nval = function() {
          var G__6921 = val;
          var G__6922 = arr[n];
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__6921, G__6922) : f.call(null, G__6921, G__6922);
        }();
        if (cljs.core.reduced_QMARK_(nval)) {
          return cljs.core.deref(nval);
        } else {
          var G__6928 = nval;
          var G__6929 = n + 1;
          val = G__6928;
          n = G__6929;
          continue;
        }
      } else {
        return val;
      }
      break;
    }
  }
};
cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3 = function(arr, f, val) {
  var cnt = arr.length;
  var val__$1 = val;
  var n = 0;
  while (true) {
    if (n < cnt) {
      var nval = function() {
        var G__6923 = val__$1;
        var G__6924 = arr[n];
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__6923, G__6924) : f.call(null, G__6923, G__6924);
      }();
      if (cljs.core.reduced_QMARK_(nval)) {
        return cljs.core.deref(nval);
      } else {
        var G__6930 = nval;
        var G__6931 = n + 1;
        val__$1 = G__6930;
        n = G__6931;
        continue;
      }
    } else {
      return val__$1;
    }
    break;
  }
};
cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4 = function(arr, f, val, idx) {
  var cnt = arr.length;
  var val__$1 = val;
  var n = idx;
  while (true) {
    if (n < cnt) {
      var nval = function() {
        var G__6925 = val__$1;
        var G__6926 = arr[n];
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__6925, G__6926) : f.call(null, G__6925, G__6926);
      }();
      if (cljs.core.reduced_QMARK_(nval)) {
        return cljs.core.deref(nval);
      } else {
        var G__6932 = nval;
        var G__6933 = n + 1;
        val__$1 = G__6932;
        n = G__6933;
        continue;
      }
    } else {
      return val__$1;
    }
    break;
  }
};
cljs.core.array_reduce.cljs$lang$maxFixedArity = 4;
cljs.core.counted_QMARK_ = function cljs$core$counted_QMARK_(x) {
  var G__6935 = x;
  if (G__6935) {
    var bit__4983__auto__ = G__6935.cljs$lang$protocol_mask$partition0$ & 2;
    if (bit__4983__auto__ || G__6935.cljs$core$ICounted$) {
      return true;
    } else {
      if (!G__6935.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ICounted, G__6935);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ICounted, G__6935);
  }
};
cljs.core.indexed_QMARK_ = function cljs$core$indexed_QMARK_(x) {
  var G__6937 = x;
  if (G__6937) {
    var bit__4983__auto__ = G__6937.cljs$lang$protocol_mask$partition0$ & 16;
    if (bit__4983__auto__ || G__6937.cljs$core$IIndexed$) {
      return true;
    } else {
      if (!G__6937.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, G__6937);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, G__6937);
  }
};
cljs.core.IndexedSeqIterator = function(arr, i) {
  this.arr = arr;
  this.i = i;
};
cljs.core.IndexedSeqIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.arr.length;
};
cljs.core.IndexedSeqIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.arr[self__.i];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.IndexedSeqIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), new cljs.core.Symbol(null, "i", "i", 253690212, null)], null);
};
cljs.core.IndexedSeqIterator.cljs$lang$type = true;
cljs.core.IndexedSeqIterator.cljs$lang$ctorStr = "cljs.core/IndexedSeqIterator";
cljs.core.IndexedSeqIterator.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/IndexedSeqIterator");
};
cljs.core.__GT_IndexedSeqIterator = function cljs$core$__GT_IndexedSeqIterator(arr, i) {
  return new cljs.core.IndexedSeqIterator(arr, i);
};
cljs.core.IndexedSeq = function(arr, i) {
  this.arr = arr;
  this.i = i;
  this.cljs$lang$protocol_mask$partition0$ = 166199550;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.IndexedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.IndexedSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return not_found;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIterable$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.IndexedSeqIterator(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.IndexedSeq(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$INext$_next$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  var x__4621__auto__ = 0;
  var y__4622__auto__ = self__.arr.length - self__.i;
  return x__4621__auto__ > y__4622__auto__ ? x__4621__auto__ : y__4622__auto__;
};
cljs.core.IndexedSeq.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var c = cljs.core._count(coll__$1);
  if (c > 0) {
    return new cljs.core.RSeq(coll__$1, c - 1, null);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  var G__6938 = coll__$1;
  var G__6939 = other;
  return cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2 ? cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2(G__6938, G__6939) : cljs.core.equiv_sequential.call(null, G__6938, G__6939);
};
cljs.core.IndexedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, self__.arr[self__.i], self__.i + 1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, start, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr[self__.i];
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.i < self__.arr.length) {
    return this$__$1;
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  var G__6940 = o;
  var G__6941 = coll__$1;
  return cljs.core.cons.cljs$core$IFn$_invoke$arity$2 ? cljs.core.cons.cljs$core$IFn$_invoke$arity$2(G__6940, G__6941) : cljs.core.cons.call(null, G__6940, G__6941);
};
cljs.core.IndexedSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), new cljs.core.Symbol(null, "i", "i", 253690212, null)], null);
};
cljs.core.IndexedSeq.cljs$lang$type = true;
cljs.core.IndexedSeq.cljs$lang$ctorStr = "cljs.core/IndexedSeq";
cljs.core.IndexedSeq.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/IndexedSeq");
};
cljs.core.__GT_IndexedSeq = function cljs$core$__GT_IndexedSeq(arr, i) {
  return new cljs.core.IndexedSeq(arr, i);
};
cljs.core.IndexedSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5285__auto__ = this;
  return cljs.core.es6_iterator(this__5285__auto__);
};
cljs.core.prim_seq = function cljs$core$prim_seq() {
  var G__6943 = arguments.length;
  switch(G__6943) {
    case 1:
      return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$1 = function(prim) {
  return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(prim, 0);
};
cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2 = function(prim, i) {
  if (i < prim.length) {
    return new cljs.core.IndexedSeq(prim, i);
  } else {
    return null;
  }
};
cljs.core.prim_seq.cljs$lang$maxFixedArity = 2;
cljs.core.array_seq = function cljs$core$array_seq() {
  var G__6946 = arguments.length;
  switch(G__6946) {
    case 1:
      return cljs.core.array_seq.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.array_seq.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.array_seq.cljs$core$IFn$_invoke$arity$1 = function(array) {
  return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(array, 0);
};
cljs.core.array_seq.cljs$core$IFn$_invoke$arity$2 = function(array, i) {
  return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(array, i);
};
cljs.core.array_seq.cljs$lang$maxFixedArity = 2;
cljs.core.RSeq = function(ci, i, meta) {
  this.ci = ci;
  this.i = i;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.RSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.RSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.RSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.RSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, self__.meta);
};
cljs.core.RSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return null;
  }
};
cljs.core.RSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.i + 1;
};
cljs.core.RSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  var G__6948 = coll__$1;
  var G__6949 = other;
  return cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2 ? cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2(G__6948, G__6949) : cljs.core.equiv_sequential.call(null, G__6948, G__6949);
};
cljs.core.RSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var G__6950 = cljs.core.List.EMPTY;
  var G__6951 = self__.meta;
  return cljs.core.with_meta.cljs$core$IFn$_invoke$arity$2 ? cljs.core.with_meta.cljs$core$IFn$_invoke$arity$2(G__6950, G__6951) : cljs.core.with_meta.call(null, G__6950, G__6951);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(col, f) {
  var self__ = this;
  var col__$1 = this;
  var G__6952 = f;
  var G__6953 = col__$1;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2 ? cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(G__6952, G__6953) : cljs.core.seq_reduce.call(null, G__6952, G__6953);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(col, f, start) {
  var self__ = this;
  var col__$1 = this;
  var G__6954 = f;
  var G__6955 = start;
  var G__6956 = col__$1;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(G__6954, G__6955, G__6956) : cljs.core.seq_reduce.call(null, G__6954, G__6955, G__6956);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.ci, self__.i);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.RSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.RSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, new_meta);
};
cljs.core.RSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  var G__6957 = o;
  var G__6958 = coll__$1;
  return cljs.core.cons.cljs$core$IFn$_invoke$arity$2 ? cljs.core.cons.cljs$core$IFn$_invoke$arity$2(G__6957, G__6958) : cljs.core.cons.call(null, G__6957, G__6958);
};
cljs.core.RSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "ci", "ci", 2049808339, null), new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.Symbol(null, "meta", "meta", -1154898805, null)], null);
};
cljs.core.RSeq.cljs$lang$type = true;
cljs.core.RSeq.cljs$lang$ctorStr = "cljs.core/RSeq";
cljs.core.RSeq.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/RSeq");
};
cljs.core.__GT_RSeq = function cljs$core$__GT_RSeq(ci, i, meta) {
  return new cljs.core.RSeq(ci, i, meta);
};
cljs.core.RSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5285__auto__ = this;
  return cljs.core.es6_iterator(this__5285__auto__);
};
cljs.core.second = function cljs$core$second(coll) {
  return cljs.core.first(cljs.core.next(coll));
};
cljs.core.ffirst = function cljs$core$ffirst(coll) {
  return cljs.core.first(cljs.core.first(coll));
};
cljs.core.nfirst = function cljs$core$nfirst(coll) {
  return cljs.core.next(cljs.core.first(coll));
};
cljs.core.fnext = function cljs$core$fnext(coll) {
  return cljs.core.first(cljs.core.next(coll));
};
cljs.core.nnext = function cljs$core$nnext(coll) {
  return cljs.core.next(cljs.core.next(coll));
};
cljs.core.last = function cljs$core$last(s) {
  while (true) {
    var sn = cljs.core.next(s);
    if (!(sn == null)) {
      var G__6959 = sn;
      s = G__6959;
      continue;
    } else {
      return cljs.core.first(s);
    }
    break;
  }
};
cljs.core.IEquiv["_"] = true;
cljs.core._equiv["_"] = function(x, o) {
  return x === o;
};
cljs.core.conj = function cljs$core$conj() {
  var G__6964 = arguments.length;
  switch(G__6964) {
    case 0:
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5360__auto__);
  }
};
cljs.core.conj.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.conj.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return coll;
};
cljs.core.conj.cljs$core$IFn$_invoke$arity$2 = function(coll, x) {
  if (!(coll == null)) {
    return cljs.core._conj(coll, x);
  } else {
    return cljs.core._conj(cljs.core.List.EMPTY, x);
  }
};
cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic = function(coll, x, xs) {
  while (true) {
    if (cljs.core.truth_(xs)) {
      var G__6966 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(coll, x);
      var G__6967 = cljs.core.first(xs);
      var G__6968 = cljs.core.next(xs);
      coll = G__6966;
      x = G__6967;
      xs = G__6968;
      continue;
    } else {
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(coll, x);
    }
    break;
  }
};
cljs.core.conj.cljs$lang$applyTo = function(seq6960) {
  var G__6961 = cljs.core.first(seq6960);
  var seq6960__$1 = cljs.core.next(seq6960);
  var G__6962 = cljs.core.first(seq6960__$1);
  var seq6960__$2 = cljs.core.next(seq6960__$1);
  return cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(G__6961, G__6962, seq6960__$2);
};
cljs.core.conj.cljs$lang$maxFixedArity = 2;
cljs.core.empty = function cljs$core$empty(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._empty(coll);
  }
};
cljs.core.accumulating_seq_count = function cljs$core$accumulating_seq_count(coll) {
  var s = cljs.core.seq(coll);
  var acc = 0;
  while (true) {
    if (cljs.core.counted_QMARK_(s)) {
      return acc + cljs.core._count(s);
    } else {
      var G__6969 = cljs.core.next(s);
      var G__6970 = acc + 1;
      s = G__6969;
      acc = G__6970;
      continue;
    }
    break;
  }
};
cljs.core.count = function cljs$core$count(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__6972 = coll;
      if (G__6972) {
        var bit__4976__auto__ = G__6972.cljs$lang$protocol_mask$partition0$ & 2;
        if (bit__4976__auto__ || G__6972.cljs$core$ICounted$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return coll.cljs$core$ICounted$_count$arity$1(null);
    } else {
      if (cljs.core.array_QMARK_(coll)) {
        return coll.length;
      } else {
        if (typeof coll === "string") {
          return coll.length;
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.ICounted, coll)) {
            return cljs.core._count(coll);
          } else {
            return cljs.core.accumulating_seq_count(coll);
          }
        }
      }
    }
  } else {
    return 0;
  }
};
cljs.core.linear_traversal_nth = function cljs$core$linear_traversal_nth() {
  var G__6974 = arguments.length;
  switch(G__6974) {
    case 2:
      return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$2 = function(coll, n) {
  while (true) {
    if (coll == null) {
      throw new Error("Index out of bounds");
    } else {
      if (n === 0) {
        if (cljs.core.seq(coll)) {
          return cljs.core.first(coll);
        } else {
          throw new Error("Index out of bounds");
        }
      } else {
        if (cljs.core.indexed_QMARK_(coll)) {
          return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll, n);
        } else {
          if (cljs.core.seq(coll)) {
            var G__6976 = cljs.core.next(coll);
            var G__6977 = n - 1;
            coll = G__6976;
            n = G__6977;
            continue;
          } else {
            throw new Error("Index out of bounds");
          }
        }
      }
    }
    break;
  }
};
cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$3 = function(coll, n, not_found) {
  while (true) {
    if (coll == null) {
      return not_found;
    } else {
      if (n === 0) {
        if (cljs.core.seq(coll)) {
          return cljs.core.first(coll);
        } else {
          return not_found;
        }
      } else {
        if (cljs.core.indexed_QMARK_(coll)) {
          return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll, n, not_found);
        } else {
          if (cljs.core.seq(coll)) {
            var G__6978 = cljs.core.next(coll);
            var G__6979 = n - 1;
            var G__6980 = not_found;
            coll = G__6978;
            n = G__6979;
            not_found = G__6980;
            continue;
          } else {
            return not_found;
          }
        }
      }
    }
    break;
  }
};
cljs.core.linear_traversal_nth.cljs$lang$maxFixedArity = 3;
cljs.core.nth = function cljs$core$nth() {
  var G__6982 = arguments.length;
  switch(G__6982) {
    case 2:
      return cljs.core.nth.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.nth.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.nth.cljs$core$IFn$_invoke$arity$2 = function(coll, n) {
  if (!(typeof n === "number")) {
    throw new Error("index argument to nth must be a number");
  } else {
    if (coll == null) {
      return coll;
    } else {
      if (function() {
        var G__6983 = coll;
        if (G__6983) {
          var bit__4976__auto__ = G__6983.cljs$lang$protocol_mask$partition0$ & 16;
          if (bit__4976__auto__ || G__6983.cljs$core$IIndexed$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return coll.cljs$core$IIndexed$_nth$arity$2(null, n);
      } else {
        if (cljs.core.array_QMARK_(coll)) {
          if (n < coll.length) {
            return coll[n];
          } else {
            return null;
          }
        } else {
          if (typeof coll === "string") {
            if (n < coll.length) {
              return coll[n];
            } else {
              return null;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, coll)) {
              return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll, n);
            } else {
              if (function() {
                var G__6984 = coll;
                if (G__6984) {
                  var bit__4983__auto__ = G__6984.cljs$lang$protocol_mask$partition0$ & 64;
                  if (bit__4983__auto__ || G__6984.cljs$core$ISeq$) {
                    return true;
                  } else {
                    if (!G__6984.cljs$lang$protocol_mask$partition0$) {
                      return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__6984);
                    } else {
                      return false;
                    }
                  }
                } else {
                  return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__6984);
                }
              }()) {
                return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$2(coll, n);
              } else {
                throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str(cljs.core.type(coll)))].join(""));
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.nth.cljs$core$IFn$_invoke$arity$3 = function(coll, n, not_found) {
  if (!(typeof n === "number")) {
    throw new Error("index argument to nth must be a number.");
  } else {
    if (coll == null) {
      return not_found;
    } else {
      if (function() {
        var G__6985 = coll;
        if (G__6985) {
          var bit__4976__auto__ = G__6985.cljs$lang$protocol_mask$partition0$ & 16;
          if (bit__4976__auto__ || G__6985.cljs$core$IIndexed$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return coll.cljs$core$IIndexed$_nth$arity$3(null, n, not_found);
      } else {
        if (cljs.core.array_QMARK_(coll)) {
          if (n < coll.length) {
            return coll[n];
          } else {
            return not_found;
          }
        } else {
          if (typeof coll === "string") {
            if (n < coll.length) {
              return coll[n];
            } else {
              return not_found;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, coll)) {
              return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll, n);
            } else {
              if (function() {
                var G__6986 = coll;
                if (G__6986) {
                  var bit__4983__auto__ = G__6986.cljs$lang$protocol_mask$partition0$ & 64;
                  if (bit__4983__auto__ || G__6986.cljs$core$ISeq$) {
                    return true;
                  } else {
                    if (!G__6986.cljs$lang$protocol_mask$partition0$) {
                      return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__6986);
                    } else {
                      return false;
                    }
                  }
                } else {
                  return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__6986);
                }
              }()) {
                return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$3(coll, n, not_found);
              } else {
                throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str(cljs.core.type(coll)))].join(""));
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.nth.cljs$lang$maxFixedArity = 3;
cljs.core.nthrest = function cljs$core$nthrest(coll, n) {
  var n__$1 = n;
  var xs = coll;
  while (true) {
    if (n__$1 > 0 && cljs.core.seq(xs)) {
      var G__6988 = n__$1 - 1;
      var G__6989 = cljs.core.rest(xs);
      n__$1 = G__6988;
      xs = G__6989;
      continue;
    } else {
      return xs;
    }
    break;
  }
};
cljs.core.get = function cljs$core$get() {
  var G__6991 = arguments.length;
  switch(G__6991) {
    case 2:
      return cljs.core.get.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.get.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.get.cljs$core$IFn$_invoke$arity$2 = function(o, k) {
  if (o == null) {
    return null;
  } else {
    if (function() {
      var G__6992 = o;
      if (G__6992) {
        var bit__4976__auto__ = G__6992.cljs$lang$protocol_mask$partition0$ & 256;
        if (bit__4976__auto__ || G__6992.cljs$core$ILookup$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$2(null, k);
    } else {
      if (cljs.core.array_QMARK_(o)) {
        if (k < o.length) {
          return o[k | 0];
        } else {
          return null;
        }
      } else {
        if (typeof o === "string") {
          if (k < o.length) {
            return o[k | 0];
          } else {
            return null;
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, o)) {
            return cljs.core._lookup.cljs$core$IFn$_invoke$arity$2(o, k);
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.core.get.cljs$core$IFn$_invoke$arity$3 = function(o, k, not_found) {
  if (!(o == null)) {
    if (function() {
      var G__6993 = o;
      if (G__6993) {
        var bit__4976__auto__ = G__6993.cljs$lang$protocol_mask$partition0$ & 256;
        if (bit__4976__auto__ || G__6993.cljs$core$ILookup$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
    } else {
      if (cljs.core.array_QMARK_(o)) {
        if (k < o.length) {
          return o[k];
        } else {
          return not_found;
        }
      } else {
        if (typeof o === "string") {
          if (k < o.length) {
            return o[k];
          } else {
            return not_found;
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, o)) {
            return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(o, k, not_found);
          } else {
            return not_found;
          }
        }
      }
    }
  } else {
    return not_found;
  }
};
cljs.core.get.cljs$lang$maxFixedArity = 3;
cljs.core.assoc = function cljs$core$assoc() {
  var G__7000 = arguments.length;
  switch(G__7000) {
    case 3:
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 3), 0);
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5360__auto__);
  }
};
cljs.core.assoc.cljs$core$IFn$_invoke$arity$3 = function(coll, k, v) {
  if (!(coll == null)) {
    return cljs.core._assoc(coll, k, v);
  } else {
    return cljs.core.PersistentHashMap.fromArrays([k], [v]);
  }
};
cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic = function(coll, k, v, kvs) {
  while (true) {
    var ret = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(coll, k, v);
    if (cljs.core.truth_(kvs)) {
      var G__7002 = ret;
      var G__7003 = cljs.core.first(kvs);
      var G__7004 = cljs.core.second(kvs);
      var G__7005 = cljs.core.nnext(kvs);
      coll = G__7002;
      k = G__7003;
      v = G__7004;
      kvs = G__7005;
      continue;
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.assoc.cljs$lang$applyTo = function(seq6995) {
  var G__6996 = cljs.core.first(seq6995);
  var seq6995__$1 = cljs.core.next(seq6995);
  var G__6997 = cljs.core.first(seq6995__$1);
  var seq6995__$2 = cljs.core.next(seq6995__$1);
  var G__6998 = cljs.core.first(seq6995__$2);
  var seq6995__$3 = cljs.core.next(seq6995__$2);
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(G__6996, G__6997, G__6998, seq6995__$3);
};
cljs.core.assoc.cljs$lang$maxFixedArity = 3;
cljs.core.dissoc = function cljs$core$dissoc() {
  var G__7010 = arguments.length;
  switch(G__7010) {
    case 1:
      return cljs.core.dissoc.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5360__auto__);
  }
};
cljs.core.dissoc.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return coll;
};
cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2 = function(coll, k) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._dissoc(coll, k);
  }
};
cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic = function(coll, k, ks) {
  while (true) {
    if (coll == null) {
      return null;
    } else {
      var ret = cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(coll, k);
      if (cljs.core.truth_(ks)) {
        var G__7012 = ret;
        var G__7013 = cljs.core.first(ks);
        var G__7014 = cljs.core.next(ks);
        coll = G__7012;
        k = G__7013;
        ks = G__7014;
        continue;
      } else {
        return ret;
      }
    }
    break;
  }
};
cljs.core.dissoc.cljs$lang$applyTo = function(seq7006) {
  var G__7007 = cljs.core.first(seq7006);
  var seq7006__$1 = cljs.core.next(seq7006);
  var G__7008 = cljs.core.first(seq7006__$1);
  var seq7006__$2 = cljs.core.next(seq7006__$1);
  return cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic(G__7007, G__7008, seq7006__$2);
};
cljs.core.dissoc.cljs$lang$maxFixedArity = 2;
cljs.core.fn_QMARK_ = function cljs$core$fn_QMARK_(f) {
  var or__4309__auto__ = function() {
    var G__7019 = f;
    return goog.isFunction(G__7019);
  }();
  if (cljs.core.truth_(or__4309__auto__)) {
    return or__4309__auto__;
  } else {
    var G__7020 = f;
    if (G__7020) {
      var bit__4983__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__4309__auto____$1 = bit__4983__auto__;
        if (cljs.core.truth_(or__4309__auto____$1)) {
          return or__4309__auto____$1;
        } else {
          return G__7020.cljs$core$Fn$;
        }
      }())) {
        return true;
      } else {
        if (!G__7020.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.Fn, G__7020);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.Fn, G__7020);
    }
  }
};
cljs.core.MetaFn = function(afn, meta) {
  this.afn = afn;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 393217;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.MetaFn.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.MetaFn.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.MetaFn(self__.afn, new_meta);
};
cljs.core.MetaFn.prototype.cljs$core$Fn$ = true;
cljs.core.MetaFn.prototype.call = function() {
  var G__7486 = null;
  var G__7486__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$0 ? self__.afn.cljs$core$IFn$_invoke$arity$0() : self__.afn.call(null);
  };
  var G__7486__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__7022 = a;
    return self__.afn.cljs$core$IFn$_invoke$arity$1 ? self__.afn.cljs$core$IFn$_invoke$arity$1(G__7022) : self__.afn.call(null, G__7022);
  };
  var G__7486__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__7023 = a;
    var G__7024 = b;
    return self__.afn.cljs$core$IFn$_invoke$arity$2 ? self__.afn.cljs$core$IFn$_invoke$arity$2(G__7023, G__7024) : self__.afn.call(null, G__7023, G__7024);
  };
  var G__7486__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__7025 = a;
    var G__7026 = b;
    var G__7027 = c;
    return self__.afn.cljs$core$IFn$_invoke$arity$3 ? self__.afn.cljs$core$IFn$_invoke$arity$3(G__7025, G__7026, G__7027) : self__.afn.call(null, G__7025, G__7026, G__7027);
  };
  var G__7486__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__7028 = a;
    var G__7029 = b;
    var G__7030 = c;
    var G__7031 = d;
    return self__.afn.cljs$core$IFn$_invoke$arity$4 ? self__.afn.cljs$core$IFn$_invoke$arity$4(G__7028, G__7029, G__7030, G__7031) : self__.afn.call(null, G__7028, G__7029, G__7030, G__7031);
  };
  var G__7486__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__7032 = a;
    var G__7033 = b;
    var G__7034 = c;
    var G__7035 = d;
    var G__7036 = e;
    return self__.afn.cljs$core$IFn$_invoke$arity$5 ? self__.afn.cljs$core$IFn$_invoke$arity$5(G__7032, G__7033, G__7034, G__7035, G__7036) : self__.afn.call(null, G__7032, G__7033, G__7034, G__7035, G__7036);
  };
  var G__7486__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__7037 = a;
    var G__7038 = b;
    var G__7039 = c;
    var G__7040 = d;
    var G__7041 = e;
    var G__7042 = f;
    return self__.afn.cljs$core$IFn$_invoke$arity$6 ? self__.afn.cljs$core$IFn$_invoke$arity$6(G__7037, G__7038, G__7039, G__7040, G__7041, G__7042) : self__.afn.call(null, G__7037, G__7038, G__7039, G__7040, G__7041, G__7042);
  };
  var G__7486__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__7043 = a;
    var G__7044 = b;
    var G__7045 = c;
    var G__7046 = d;
    var G__7047 = e;
    var G__7048 = f;
    var G__7049 = g;
    return self__.afn.cljs$core$IFn$_invoke$arity$7 ? self__.afn.cljs$core$IFn$_invoke$arity$7(G__7043, G__7044, G__7045, G__7046, G__7047, G__7048, G__7049) : self__.afn.call(null, G__7043, G__7044, G__7045, G__7046, G__7047, G__7048, G__7049);
  };
  var G__7486__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__7050 = a;
    var G__7051 = b;
    var G__7052 = c;
    var G__7053 = d;
    var G__7054 = e;
    var G__7055 = f;
    var G__7056 = g;
    var G__7057 = h;
    return self__.afn.cljs$core$IFn$_invoke$arity$8 ? self__.afn.cljs$core$IFn$_invoke$arity$8(G__7050, G__7051, G__7052, G__7053, G__7054, G__7055, G__7056, G__7057) : self__.afn.call(null, G__7050, G__7051, G__7052, G__7053, G__7054, G__7055, G__7056, G__7057);
  };
  var G__7486__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__7058 = a;
    var G__7059 = b;
    var G__7060 = c;
    var G__7061 = d;
    var G__7062 = e;
    var G__7063 = f;
    var G__7064 = g;
    var G__7065 = h;
    var G__7066 = i;
    return self__.afn.cljs$core$IFn$_invoke$arity$9 ? self__.afn.cljs$core$IFn$_invoke$arity$9(G__7058, G__7059, G__7060, G__7061, G__7062, G__7063, G__7064, G__7065, G__7066) : self__.afn.call(null, G__7058, G__7059, G__7060, G__7061, G__7062, G__7063, G__7064, G__7065, G__7066);
  };
  var G__7486__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__7067 = a;
    var G__7068 = b;
    var G__7069 = c;
    var G__7070 = d;
    var G__7071 = e;
    var G__7072 = f;
    var G__7073 = g;
    var G__7074 = h;
    var G__7075 = i;
    var G__7076 = j;
    return self__.afn.cljs$core$IFn$_invoke$arity$10 ? self__.afn.cljs$core$IFn$_invoke$arity$10(G__7067, G__7068, G__7069, G__7070, G__7071, G__7072, G__7073, G__7074, G__7075, G__7076) : self__.afn.call(null, G__7067, G__7068, G__7069, G__7070, G__7071, G__7072, G__7073, G__7074, G__7075, G__7076);
  };
  var G__7486__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__7077 = a;
    var G__7078 = b;
    var G__7079 = c;
    var G__7080 = d;
    var G__7081 = e;
    var G__7082 = f;
    var G__7083 = g;
    var G__7084 = h;
    var G__7085 = i;
    var G__7086 = j;
    var G__7087 = k;
    return self__.afn.cljs$core$IFn$_invoke$arity$11 ? self__.afn.cljs$core$IFn$_invoke$arity$11(G__7077, G__7078, G__7079, G__7080, G__7081, G__7082, G__7083, G__7084, G__7085, G__7086, G__7087) : self__.afn.call(null, G__7077, G__7078, G__7079, G__7080, G__7081, G__7082, G__7083, G__7084, G__7085, G__7086, G__7087);
  };
  var G__7486__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__7088 = a;
    var G__7089 = b;
    var G__7090 = c;
    var G__7091 = d;
    var G__7092 = e;
    var G__7093 = f;
    var G__7094 = g;
    var G__7095 = h;
    var G__7096 = i;
    var G__7097 = j;
    var G__7098 = k;
    var G__7099 = l;
    return self__.afn.cljs$core$IFn$_invoke$arity$12 ? self__.afn.cljs$core$IFn$_invoke$arity$12(G__7088, G__7089, G__7090, G__7091, G__7092, G__7093, G__7094, G__7095, G__7096, G__7097, G__7098, G__7099) : self__.afn.call(null, G__7088, G__7089, G__7090, G__7091, G__7092, G__7093, G__7094, G__7095, G__7096, G__7097, G__7098, G__7099);
  };
  var G__7486__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__7100 = a;
    var G__7101 = b;
    var G__7102 = c;
    var G__7103 = d;
    var G__7104 = e;
    var G__7105 = f;
    var G__7106 = g;
    var G__7107 = h;
    var G__7108 = i;
    var G__7109 = j;
    var G__7110 = k;
    var G__7111 = l;
    var G__7112 = m;
    return self__.afn.cljs$core$IFn$_invoke$arity$13 ? self__.afn.cljs$core$IFn$_invoke$arity$13(G__7100, G__7101, G__7102, G__7103, G__7104, G__7105, G__7106, G__7107, G__7108, G__7109, G__7110, G__7111, G__7112) : self__.afn.call(null, G__7100, G__7101, G__7102, G__7103, G__7104, G__7105, G__7106, G__7107, G__7108, G__7109, G__7110, G__7111, G__7112);
  };
  var G__7486__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__7113 = a;
    var G__7114 = b;
    var G__7115 = c;
    var G__7116 = d;
    var G__7117 = e;
    var G__7118 = f;
    var G__7119 = g;
    var G__7120 = h;
    var G__7121 = i;
    var G__7122 = j;
    var G__7123 = k;
    var G__7124 = l;
    var G__7125 = m;
    var G__7126 = n;
    return self__.afn.cljs$core$IFn$_invoke$arity$14 ? self__.afn.cljs$core$IFn$_invoke$arity$14(G__7113, G__7114, G__7115, G__7116, G__7117, G__7118, G__7119, G__7120, G__7121, G__7122, G__7123, G__7124, G__7125, G__7126) : self__.afn.call(null, G__7113, G__7114, G__7115, G__7116, G__7117, G__7118, G__7119, G__7120, G__7121, G__7122, G__7123, G__7124, G__7125, G__7126);
  };
  var G__7486__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__7127 = a;
    var G__7128 = b;
    var G__7129 = c;
    var G__7130 = d;
    var G__7131 = e;
    var G__7132 = f;
    var G__7133 = g;
    var G__7134 = h;
    var G__7135 = i;
    var G__7136 = j;
    var G__7137 = k;
    var G__7138 = l;
    var G__7139 = m;
    var G__7140 = n;
    var G__7141 = o;
    return self__.afn.cljs$core$IFn$_invoke$arity$15 ? self__.afn.cljs$core$IFn$_invoke$arity$15(G__7127, G__7128, G__7129, G__7130, G__7131, G__7132, G__7133, G__7134, G__7135, G__7136, G__7137, G__7138, G__7139, G__7140, G__7141) : self__.afn.call(null, G__7127, G__7128, G__7129, G__7130, G__7131, G__7132, G__7133, G__7134, G__7135, G__7136, G__7137, G__7138, G__7139, G__7140, G__7141);
  };
  var G__7486__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__7142 = a;
    var G__7143 = b;
    var G__7144 = c;
    var G__7145 = d;
    var G__7146 = e;
    var G__7147 = f;
    var G__7148 = g;
    var G__7149 = h;
    var G__7150 = i;
    var G__7151 = j;
    var G__7152 = k;
    var G__7153 = l;
    var G__7154 = m;
    var G__7155 = n;
    var G__7156 = o;
    var G__7157 = p;
    return self__.afn.cljs$core$IFn$_invoke$arity$16 ? self__.afn.cljs$core$IFn$_invoke$arity$16(G__7142, G__7143, G__7144, G__7145, G__7146, G__7147, G__7148, G__7149, G__7150, G__7151, G__7152, G__7153, G__7154, G__7155, G__7156, G__7157) : self__.afn.call(null, G__7142, G__7143, G__7144, G__7145, G__7146, G__7147, G__7148, G__7149, G__7150, G__7151, G__7152, G__7153, G__7154, G__7155, G__7156, G__7157);
  };
  var G__7486__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__7158 = a;
    var G__7159 = b;
    var G__7160 = c;
    var G__7161 = d;
    var G__7162 = e;
    var G__7163 = f;
    var G__7164 = g;
    var G__7165 = h;
    var G__7166 = i;
    var G__7167 = j;
    var G__7168 = k;
    var G__7169 = l;
    var G__7170 = m;
    var G__7171 = n;
    var G__7172 = o;
    var G__7173 = p;
    var G__7174 = q;
    return self__.afn.cljs$core$IFn$_invoke$arity$17 ? self__.afn.cljs$core$IFn$_invoke$arity$17(G__7158, G__7159, G__7160, G__7161, G__7162, G__7163, G__7164, G__7165, G__7166, G__7167, G__7168, G__7169, G__7170, G__7171, G__7172, G__7173, G__7174) : self__.afn.call(null, G__7158, G__7159, G__7160, G__7161, G__7162, G__7163, G__7164, G__7165, G__7166, G__7167, G__7168, G__7169, G__7170, G__7171, G__7172, G__7173, G__7174);
  };
  var G__7486__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__7175 = a;
    var G__7176 = b;
    var G__7177 = c;
    var G__7178 = d;
    var G__7179 = e;
    var G__7180 = f;
    var G__7181 = g;
    var G__7182 = h;
    var G__7183 = i;
    var G__7184 = j;
    var G__7185 = k;
    var G__7186 = l;
    var G__7187 = m;
    var G__7188 = n;
    var G__7189 = o;
    var G__7190 = p;
    var G__7191 = q;
    var G__7192 = r;
    return self__.afn.cljs$core$IFn$_invoke$arity$18 ? self__.afn.cljs$core$IFn$_invoke$arity$18(G__7175, G__7176, G__7177, G__7178, G__7179, G__7180, G__7181, G__7182, G__7183, G__7184, G__7185, G__7186, G__7187, G__7188, G__7189, G__7190, G__7191, G__7192) : self__.afn.call(null, G__7175, G__7176, G__7177, G__7178, G__7179, G__7180, G__7181, G__7182, G__7183, G__7184, G__7185, G__7186, G__7187, G__7188, G__7189, G__7190, G__7191, G__7192);
  };
  var G__7486__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__7193 = a;
    var G__7194 = b;
    var G__7195 = c;
    var G__7196 = d;
    var G__7197 = e;
    var G__7198 = f;
    var G__7199 = g;
    var G__7200 = h;
    var G__7201 = i;
    var G__7202 = j;
    var G__7203 = k;
    var G__7204 = l;
    var G__7205 = m;
    var G__7206 = n;
    var G__7207 = o;
    var G__7208 = p;
    var G__7209 = q;
    var G__7210 = r;
    var G__7211 = s;
    return self__.afn.cljs$core$IFn$_invoke$arity$19 ? self__.afn.cljs$core$IFn$_invoke$arity$19(G__7193, G__7194, G__7195, G__7196, G__7197, G__7198, G__7199, G__7200, G__7201, G__7202, G__7203, G__7204, G__7205, G__7206, G__7207, G__7208, G__7209, G__7210, G__7211) : self__.afn.call(null, G__7193, G__7194, G__7195, G__7196, G__7197, G__7198, G__7199, G__7200, G__7201, G__7202, G__7203, G__7204, G__7205, G__7206, G__7207, G__7208, G__7209, G__7210, G__7211);
  };
  var G__7486__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__7212 = a;
    var G__7213 = b;
    var G__7214 = c;
    var G__7215 = d;
    var G__7216 = e;
    var G__7217 = f;
    var G__7218 = g;
    var G__7219 = h;
    var G__7220 = i;
    var G__7221 = j;
    var G__7222 = k;
    var G__7223 = l;
    var G__7224 = m;
    var G__7225 = n;
    var G__7226 = o;
    var G__7227 = p;
    var G__7228 = q;
    var G__7229 = r;
    var G__7230 = s;
    var G__7231 = t;
    return self__.afn.cljs$core$IFn$_invoke$arity$20 ? self__.afn.cljs$core$IFn$_invoke$arity$20(G__7212, G__7213, G__7214, G__7215, G__7216, G__7217, G__7218, G__7219, G__7220, G__7221, G__7222, G__7223, G__7224, G__7225, G__7226, G__7227, G__7228, G__7229, G__7230, G__7231) : self__.afn.call(null, G__7212, G__7213, G__7214, G__7215, G__7216, G__7217, G__7218, G__7219, G__7220, G__7221, G__7222, G__7223, G__7224, G__7225, G__7226, G__7227, G__7228, G__7229, G__7230, G__7231);
  };
  var G__7486__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__7232 = self__.afn;
    var G__7233 = a;
    var G__7234 = b;
    var G__7235 = c;
    var G__7236 = d;
    var G__7237 = e;
    var G__7238 = f;
    var G__7239 = g;
    var G__7240 = h;
    var G__7241 = i;
    var G__7242 = j;
    var G__7243 = k;
    var G__7244 = l;
    var G__7245 = m;
    var G__7246 = n;
    var G__7247 = o;
    var G__7248 = p;
    var G__7249 = q;
    var G__7250 = r;
    var G__7251 = s;
    var G__7252 = t;
    var G__7253 = rest;
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(G__7232, G__7233, G__7234, G__7235, G__7236, G__7237, G__7238, G__7239, G__7240, G__7241, G__7242, G__7243, G__7244, G__7245, G__7246, G__7247, G__7248, G__7249, G__7250, G__7251, G__7252, G__7253) : cljs.core.apply.call(null, G__7232, G__7233, G__7234, G__7235, G__7236, G__7237, G__7238, G__7239, G__7240, G__7241, G__7242, G__7243, G__7244, G__7245, G__7246, G__7247, G__7248, G__7249, G__7250, 
    G__7251, G__7252, G__7253);
  };
  G__7486 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__7486__1.call(this, self__);
      case 2:
        return G__7486__2.call(this, self__, a);
      case 3:
        return G__7486__3.call(this, self__, a, b);
      case 4:
        return G__7486__4.call(this, self__, a, b, c);
      case 5:
        return G__7486__5.call(this, self__, a, b, c, d);
      case 6:
        return G__7486__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__7486__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__7486__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__7486__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__7486__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__7486__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__7486__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__7486__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__7486__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__7486__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__7486__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__7486__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__7486__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__7486__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__7486__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__7486__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__7486__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__7486.cljs$core$IFn$_invoke$arity$1 = G__7486__1;
  G__7486.cljs$core$IFn$_invoke$arity$2 = G__7486__2;
  G__7486.cljs$core$IFn$_invoke$arity$3 = G__7486__3;
  G__7486.cljs$core$IFn$_invoke$arity$4 = G__7486__4;
  G__7486.cljs$core$IFn$_invoke$arity$5 = G__7486__5;
  G__7486.cljs$core$IFn$_invoke$arity$6 = G__7486__6;
  G__7486.cljs$core$IFn$_invoke$arity$7 = G__7486__7;
  G__7486.cljs$core$IFn$_invoke$arity$8 = G__7486__8;
  G__7486.cljs$core$IFn$_invoke$arity$9 = G__7486__9;
  G__7486.cljs$core$IFn$_invoke$arity$10 = G__7486__10;
  G__7486.cljs$core$IFn$_invoke$arity$11 = G__7486__11;
  G__7486.cljs$core$IFn$_invoke$arity$12 = G__7486__12;
  G__7486.cljs$core$IFn$_invoke$arity$13 = G__7486__13;
  G__7486.cljs$core$IFn$_invoke$arity$14 = G__7486__14;
  G__7486.cljs$core$IFn$_invoke$arity$15 = G__7486__15;
  G__7486.cljs$core$IFn$_invoke$arity$16 = G__7486__16;
  G__7486.cljs$core$IFn$_invoke$arity$17 = G__7486__17;
  G__7486.cljs$core$IFn$_invoke$arity$18 = G__7486__18;
  G__7486.cljs$core$IFn$_invoke$arity$19 = G__7486__19;
  G__7486.cljs$core$IFn$_invoke$arity$20 = G__7486__20;
  G__7486.cljs$core$IFn$_invoke$arity$21 = G__7486__21;
  G__7486.cljs$core$IFn$_invoke$arity$22 = G__7486__22;
  return G__7486;
}();
cljs.core.MetaFn.prototype.apply = function(self__, args7021) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args7021)));
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$0 ? self__.afn.cljs$core$IFn$_invoke$arity$0() : self__.afn.call(null);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var _ = this;
  var G__7254 = a;
  return self__.afn.cljs$core$IFn$_invoke$arity$1 ? self__.afn.cljs$core$IFn$_invoke$arity$1(G__7254) : self__.afn.call(null, G__7254);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var _ = this;
  var G__7255 = a;
  var G__7256 = b;
  return self__.afn.cljs$core$IFn$_invoke$arity$2 ? self__.afn.cljs$core$IFn$_invoke$arity$2(G__7255, G__7256) : self__.afn.call(null, G__7255, G__7256);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var _ = this;
  var G__7257 = a;
  var G__7258 = b;
  var G__7259 = c;
  return self__.afn.cljs$core$IFn$_invoke$arity$3 ? self__.afn.cljs$core$IFn$_invoke$arity$3(G__7257, G__7258, G__7259) : self__.afn.call(null, G__7257, G__7258, G__7259);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var _ = this;
  var G__7260 = a;
  var G__7261 = b;
  var G__7262 = c;
  var G__7263 = d;
  return self__.afn.cljs$core$IFn$_invoke$arity$4 ? self__.afn.cljs$core$IFn$_invoke$arity$4(G__7260, G__7261, G__7262, G__7263) : self__.afn.call(null, G__7260, G__7261, G__7262, G__7263);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var _ = this;
  var G__7264 = a;
  var G__7265 = b;
  var G__7266 = c;
  var G__7267 = d;
  var G__7268 = e;
  return self__.afn.cljs$core$IFn$_invoke$arity$5 ? self__.afn.cljs$core$IFn$_invoke$arity$5(G__7264, G__7265, G__7266, G__7267, G__7268) : self__.afn.call(null, G__7264, G__7265, G__7266, G__7267, G__7268);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var _ = this;
  var G__7269 = a;
  var G__7270 = b;
  var G__7271 = c;
  var G__7272 = d;
  var G__7273 = e;
  var G__7274 = f;
  return self__.afn.cljs$core$IFn$_invoke$arity$6 ? self__.afn.cljs$core$IFn$_invoke$arity$6(G__7269, G__7270, G__7271, G__7272, G__7273, G__7274) : self__.afn.call(null, G__7269, G__7270, G__7271, G__7272, G__7273, G__7274);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var _ = this;
  var G__7275 = a;
  var G__7276 = b;
  var G__7277 = c;
  var G__7278 = d;
  var G__7279 = e;
  var G__7280 = f;
  var G__7281 = g;
  return self__.afn.cljs$core$IFn$_invoke$arity$7 ? self__.afn.cljs$core$IFn$_invoke$arity$7(G__7275, G__7276, G__7277, G__7278, G__7279, G__7280, G__7281) : self__.afn.call(null, G__7275, G__7276, G__7277, G__7278, G__7279, G__7280, G__7281);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var _ = this;
  var G__7282 = a;
  var G__7283 = b;
  var G__7284 = c;
  var G__7285 = d;
  var G__7286 = e;
  var G__7287 = f;
  var G__7288 = g;
  var G__7289 = h;
  return self__.afn.cljs$core$IFn$_invoke$arity$8 ? self__.afn.cljs$core$IFn$_invoke$arity$8(G__7282, G__7283, G__7284, G__7285, G__7286, G__7287, G__7288, G__7289) : self__.afn.call(null, G__7282, G__7283, G__7284, G__7285, G__7286, G__7287, G__7288, G__7289);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var _ = this;
  var G__7290 = a;
  var G__7291 = b;
  var G__7292 = c;
  var G__7293 = d;
  var G__7294 = e;
  var G__7295 = f;
  var G__7296 = g;
  var G__7297 = h;
  var G__7298 = i;
  return self__.afn.cljs$core$IFn$_invoke$arity$9 ? self__.afn.cljs$core$IFn$_invoke$arity$9(G__7290, G__7291, G__7292, G__7293, G__7294, G__7295, G__7296, G__7297, G__7298) : self__.afn.call(null, G__7290, G__7291, G__7292, G__7293, G__7294, G__7295, G__7296, G__7297, G__7298);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var _ = this;
  var G__7299 = a;
  var G__7300 = b;
  var G__7301 = c;
  var G__7302 = d;
  var G__7303 = e;
  var G__7304 = f;
  var G__7305 = g;
  var G__7306 = h;
  var G__7307 = i;
  var G__7308 = j;
  return self__.afn.cljs$core$IFn$_invoke$arity$10 ? self__.afn.cljs$core$IFn$_invoke$arity$10(G__7299, G__7300, G__7301, G__7302, G__7303, G__7304, G__7305, G__7306, G__7307, G__7308) : self__.afn.call(null, G__7299, G__7300, G__7301, G__7302, G__7303, G__7304, G__7305, G__7306, G__7307, G__7308);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var _ = this;
  var G__7309 = a;
  var G__7310 = b;
  var G__7311 = c;
  var G__7312 = d;
  var G__7313 = e;
  var G__7314 = f;
  var G__7315 = g;
  var G__7316 = h;
  var G__7317 = i;
  var G__7318 = j;
  var G__7319 = k;
  return self__.afn.cljs$core$IFn$_invoke$arity$11 ? self__.afn.cljs$core$IFn$_invoke$arity$11(G__7309, G__7310, G__7311, G__7312, G__7313, G__7314, G__7315, G__7316, G__7317, G__7318, G__7319) : self__.afn.call(null, G__7309, G__7310, G__7311, G__7312, G__7313, G__7314, G__7315, G__7316, G__7317, G__7318, G__7319);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var _ = this;
  var G__7320 = a;
  var G__7321 = b;
  var G__7322 = c;
  var G__7323 = d;
  var G__7324 = e;
  var G__7325 = f;
  var G__7326 = g;
  var G__7327 = h;
  var G__7328 = i;
  var G__7329 = j;
  var G__7330 = k;
  var G__7331 = l;
  return self__.afn.cljs$core$IFn$_invoke$arity$12 ? self__.afn.cljs$core$IFn$_invoke$arity$12(G__7320, G__7321, G__7322, G__7323, G__7324, G__7325, G__7326, G__7327, G__7328, G__7329, G__7330, G__7331) : self__.afn.call(null, G__7320, G__7321, G__7322, G__7323, G__7324, G__7325, G__7326, G__7327, G__7328, G__7329, G__7330, G__7331);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var _ = this;
  var G__7332 = a;
  var G__7333 = b;
  var G__7334 = c;
  var G__7335 = d;
  var G__7336 = e;
  var G__7337 = f;
  var G__7338 = g;
  var G__7339 = h;
  var G__7340 = i;
  var G__7341 = j;
  var G__7342 = k;
  var G__7343 = l;
  var G__7344 = m;
  return self__.afn.cljs$core$IFn$_invoke$arity$13 ? self__.afn.cljs$core$IFn$_invoke$arity$13(G__7332, G__7333, G__7334, G__7335, G__7336, G__7337, G__7338, G__7339, G__7340, G__7341, G__7342, G__7343, G__7344) : self__.afn.call(null, G__7332, G__7333, G__7334, G__7335, G__7336, G__7337, G__7338, G__7339, G__7340, G__7341, G__7342, G__7343, G__7344);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var _ = this;
  var G__7345 = a;
  var G__7346 = b;
  var G__7347 = c;
  var G__7348 = d;
  var G__7349 = e;
  var G__7350 = f;
  var G__7351 = g;
  var G__7352 = h;
  var G__7353 = i;
  var G__7354 = j;
  var G__7355 = k;
  var G__7356 = l;
  var G__7357 = m;
  var G__7358 = n;
  return self__.afn.cljs$core$IFn$_invoke$arity$14 ? self__.afn.cljs$core$IFn$_invoke$arity$14(G__7345, G__7346, G__7347, G__7348, G__7349, G__7350, G__7351, G__7352, G__7353, G__7354, G__7355, G__7356, G__7357, G__7358) : self__.afn.call(null, G__7345, G__7346, G__7347, G__7348, G__7349, G__7350, G__7351, G__7352, G__7353, G__7354, G__7355, G__7356, G__7357, G__7358);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var _ = this;
  var G__7359 = a;
  var G__7360 = b;
  var G__7361 = c;
  var G__7362 = d;
  var G__7363 = e;
  var G__7364 = f;
  var G__7365 = g;
  var G__7366 = h;
  var G__7367 = i;
  var G__7368 = j;
  var G__7369 = k;
  var G__7370 = l;
  var G__7371 = m;
  var G__7372 = n;
  var G__7373 = o;
  return self__.afn.cljs$core$IFn$_invoke$arity$15 ? self__.afn.cljs$core$IFn$_invoke$arity$15(G__7359, G__7360, G__7361, G__7362, G__7363, G__7364, G__7365, G__7366, G__7367, G__7368, G__7369, G__7370, G__7371, G__7372, G__7373) : self__.afn.call(null, G__7359, G__7360, G__7361, G__7362, G__7363, G__7364, G__7365, G__7366, G__7367, G__7368, G__7369, G__7370, G__7371, G__7372, G__7373);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var _ = this;
  var G__7374 = a;
  var G__7375 = b;
  var G__7376 = c;
  var G__7377 = d;
  var G__7378 = e;
  var G__7379 = f;
  var G__7380 = g;
  var G__7381 = h;
  var G__7382 = i;
  var G__7383 = j;
  var G__7384 = k;
  var G__7385 = l;
  var G__7386 = m;
  var G__7387 = n;
  var G__7388 = o;
  var G__7389 = p;
  return self__.afn.cljs$core$IFn$_invoke$arity$16 ? self__.afn.cljs$core$IFn$_invoke$arity$16(G__7374, G__7375, G__7376, G__7377, G__7378, G__7379, G__7380, G__7381, G__7382, G__7383, G__7384, G__7385, G__7386, G__7387, G__7388, G__7389) : self__.afn.call(null, G__7374, G__7375, G__7376, G__7377, G__7378, G__7379, G__7380, G__7381, G__7382, G__7383, G__7384, G__7385, G__7386, G__7387, G__7388, G__7389);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var _ = this;
  var G__7390 = a;
  var G__7391 = b;
  var G__7392 = c;
  var G__7393 = d;
  var G__7394 = e;
  var G__7395 = f;
  var G__7396 = g;
  var G__7397 = h;
  var G__7398 = i;
  var G__7399 = j;
  var G__7400 = k;
  var G__7401 = l;
  var G__7402 = m;
  var G__7403 = n;
  var G__7404 = o;
  var G__7405 = p;
  var G__7406 = q;
  return self__.afn.cljs$core$IFn$_invoke$arity$17 ? self__.afn.cljs$core$IFn$_invoke$arity$17(G__7390, G__7391, G__7392, G__7393, G__7394, G__7395, G__7396, G__7397, G__7398, G__7399, G__7400, G__7401, G__7402, G__7403, G__7404, G__7405, G__7406) : self__.afn.call(null, G__7390, G__7391, G__7392, G__7393, G__7394, G__7395, G__7396, G__7397, G__7398, G__7399, G__7400, G__7401, G__7402, G__7403, G__7404, G__7405, G__7406);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var _ = this;
  var G__7407 = a;
  var G__7408 = b;
  var G__7409 = c;
  var G__7410 = d;
  var G__7411 = e;
  var G__7412 = f;
  var G__7413 = g;
  var G__7414 = h;
  var G__7415 = i;
  var G__7416 = j;
  var G__7417 = k;
  var G__7418 = l;
  var G__7419 = m;
  var G__7420 = n;
  var G__7421 = o;
  var G__7422 = p;
  var G__7423 = q;
  var G__7424 = r;
  return self__.afn.cljs$core$IFn$_invoke$arity$18 ? self__.afn.cljs$core$IFn$_invoke$arity$18(G__7407, G__7408, G__7409, G__7410, G__7411, G__7412, G__7413, G__7414, G__7415, G__7416, G__7417, G__7418, G__7419, G__7420, G__7421, G__7422, G__7423, G__7424) : self__.afn.call(null, G__7407, G__7408, G__7409, G__7410, G__7411, G__7412, G__7413, G__7414, G__7415, G__7416, G__7417, G__7418, G__7419, G__7420, G__7421, G__7422, G__7423, G__7424);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var _ = this;
  var G__7425 = a;
  var G__7426 = b;
  var G__7427 = c;
  var G__7428 = d;
  var G__7429 = e;
  var G__7430 = f;
  var G__7431 = g;
  var G__7432 = h;
  var G__7433 = i;
  var G__7434 = j;
  var G__7435 = k;
  var G__7436 = l;
  var G__7437 = m;
  var G__7438 = n;
  var G__7439 = o;
  var G__7440 = p;
  var G__7441 = q;
  var G__7442 = r;
  var G__7443 = s;
  return self__.afn.cljs$core$IFn$_invoke$arity$19 ? self__.afn.cljs$core$IFn$_invoke$arity$19(G__7425, G__7426, G__7427, G__7428, G__7429, G__7430, G__7431, G__7432, G__7433, G__7434, G__7435, G__7436, G__7437, G__7438, G__7439, G__7440, G__7441, G__7442, G__7443) : self__.afn.call(null, G__7425, G__7426, G__7427, G__7428, G__7429, G__7430, G__7431, G__7432, G__7433, G__7434, G__7435, G__7436, G__7437, G__7438, G__7439, G__7440, G__7441, G__7442, G__7443);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var _ = this;
  var G__7444 = a;
  var G__7445 = b;
  var G__7446 = c;
  var G__7447 = d;
  var G__7448 = e;
  var G__7449 = f;
  var G__7450 = g;
  var G__7451 = h;
  var G__7452 = i;
  var G__7453 = j;
  var G__7454 = k;
  var G__7455 = l;
  var G__7456 = m;
  var G__7457 = n;
  var G__7458 = o;
  var G__7459 = p;
  var G__7460 = q;
  var G__7461 = r;
  var G__7462 = s;
  var G__7463 = t;
  return self__.afn.cljs$core$IFn$_invoke$arity$20 ? self__.afn.cljs$core$IFn$_invoke$arity$20(G__7444, G__7445, G__7446, G__7447, G__7448, G__7449, G__7450, G__7451, G__7452, G__7453, G__7454, G__7455, G__7456, G__7457, G__7458, G__7459, G__7460, G__7461, G__7462, G__7463) : self__.afn.call(null, G__7444, G__7445, G__7446, G__7447, G__7448, G__7449, G__7450, G__7451, G__7452, G__7453, G__7454, G__7455, G__7456, G__7457, G__7458, G__7459, G__7460, G__7461, G__7462, G__7463);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var _ = this;
  var G__7464 = self__.afn;
  var G__7465 = a;
  var G__7466 = b;
  var G__7467 = c;
  var G__7468 = d;
  var G__7469 = e;
  var G__7470 = f;
  var G__7471 = g;
  var G__7472 = h;
  var G__7473 = i;
  var G__7474 = j;
  var G__7475 = k;
  var G__7476 = l;
  var G__7477 = m;
  var G__7478 = n;
  var G__7479 = o;
  var G__7480 = p;
  var G__7481 = q;
  var G__7482 = r;
  var G__7483 = s;
  var G__7484 = t;
  var G__7485 = rest;
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(G__7464, G__7465, G__7466, G__7467, G__7468, G__7469, G__7470, G__7471, G__7472, G__7473, G__7474, G__7475, G__7476, G__7477, G__7478, G__7479, G__7480, G__7481, G__7482, G__7483, G__7484, G__7485) : cljs.core.apply.call(null, G__7464, G__7465, G__7466, G__7467, G__7468, G__7469, G__7470, G__7471, G__7472, G__7473, G__7474, G__7475, G__7476, G__7477, G__7478, G__7479, G__7480, G__7481, G__7482, 
  G__7483, G__7484, G__7485);
};
cljs.core.MetaFn.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "afn", "afn", 216963467, null), new cljs.core.Symbol(null, "meta", "meta", -1154898805, null)], null);
};
cljs.core.MetaFn.cljs$lang$type = true;
cljs.core.MetaFn.cljs$lang$ctorStr = "cljs.core/MetaFn";
cljs.core.MetaFn.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/MetaFn");
};
cljs.core.__GT_MetaFn = function cljs$core$__GT_MetaFn(afn, meta) {
  return new cljs.core.MetaFn(afn, meta);
};
cljs.core.with_meta = function cljs$core$with_meta(o, meta) {
  if (cljs.core.fn_QMARK_(o) && !function() {
    var G__7490 = o;
    if (G__7490) {
      var bit__4983__auto__ = G__7490.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__4983__auto__ || G__7490.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__7490.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IWithMeta, G__7490);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.IWithMeta, G__7490);
    }
  }()) {
    return new cljs.core.MetaFn(o, meta);
  } else {
    if (o == null) {
      return null;
    } else {
      return cljs.core._with_meta(o, meta);
    }
  }
};
cljs.core.meta = function cljs$core$meta(o) {
  if (function() {
    var and__4297__auto__ = !(o == null);
    if (and__4297__auto__) {
      var G__7494 = o;
      if (G__7494) {
        var bit__4983__auto__ = G__7494.cljs$lang$protocol_mask$partition0$ & 131072;
        if (bit__4983__auto__ || G__7494.cljs$core$IMeta$) {
          return true;
        } else {
          if (!G__7494.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_(cljs.core.IMeta, G__7494);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IMeta, G__7494);
      }
    } else {
      return and__4297__auto__;
    }
  }()) {
    return cljs.core._meta(o);
  } else {
    return null;
  }
};
cljs.core.peek = function cljs$core$peek(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._peek(coll);
  }
};
cljs.core.pop = function cljs$core$pop(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._pop(coll);
  }
};
cljs.core.disj = function cljs$core$disj() {
  var G__7499 = arguments.length;
  switch(G__7499) {
    case 1:
      return cljs.core.disj.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.disj.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.disj.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5360__auto__);
  }
};
cljs.core.disj.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return coll;
};
cljs.core.disj.cljs$core$IFn$_invoke$arity$2 = function(coll, k) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._disjoin(coll, k);
  }
};
cljs.core.disj.cljs$core$IFn$_invoke$arity$variadic = function(coll, k, ks) {
  while (true) {
    if (coll == null) {
      return null;
    } else {
      var ret = cljs.core.disj.cljs$core$IFn$_invoke$arity$2(coll, k);
      if (cljs.core.truth_(ks)) {
        var G__7501 = ret;
        var G__7502 = cljs.core.first(ks);
        var G__7503 = cljs.core.next(ks);
        coll = G__7501;
        k = G__7502;
        ks = G__7503;
        continue;
      } else {
        return ret;
      }
    }
    break;
  }
};
cljs.core.disj.cljs$lang$applyTo = function(seq7495) {
  var G__7496 = cljs.core.first(seq7495);
  var seq7495__$1 = cljs.core.next(seq7495);
  var G__7497 = cljs.core.first(seq7495__$1);
  var seq7495__$2 = cljs.core.next(seq7495__$1);
  return cljs.core.disj.cljs$core$IFn$_invoke$arity$variadic(G__7496, G__7497, seq7495__$2);
};
cljs.core.disj.cljs$lang$maxFixedArity = 2;
cljs.core.empty_QMARK_ = function cljs$core$empty_QMARK_(coll) {
  return coll == null || cljs.core.not(cljs.core.seq(coll));
};
cljs.core.coll_QMARK_ = function cljs$core$coll_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__7505 = x;
    if (G__7505) {
      var bit__4983__auto__ = G__7505.cljs$lang$protocol_mask$partition0$ & 8;
      if (bit__4983__auto__ || G__7505.cljs$core$ICollection$) {
        return true;
      } else {
        if (!G__7505.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.ICollection, G__7505);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.ICollection, G__7505);
    }
  }
};
cljs.core.set_QMARK_ = function cljs$core$set_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__7507 = x;
    if (G__7507) {
      var bit__4983__auto__ = G__7507.cljs$lang$protocol_mask$partition0$ & 4096;
      if (bit__4983__auto__ || G__7507.cljs$core$ISet$) {
        return true;
      } else {
        if (!G__7507.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.ISet, G__7507);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.ISet, G__7507);
    }
  }
};
cljs.core.associative_QMARK_ = function cljs$core$associative_QMARK_(x) {
  var G__7509 = x;
  if (G__7509) {
    var bit__4983__auto__ = G__7509.cljs$lang$protocol_mask$partition0$ & 512;
    if (bit__4983__auto__ || G__7509.cljs$core$IAssociative$) {
      return true;
    } else {
      if (!G__7509.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IAssociative, G__7509);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IAssociative, G__7509);
  }
};
cljs.core.sequential_QMARK_ = function cljs$core$sequential_QMARK_(x) {
  var G__7511 = x;
  if (G__7511) {
    var bit__4983__auto__ = G__7511.cljs$lang$protocol_mask$partition0$ & 16777216;
    if (bit__4983__auto__ || G__7511.cljs$core$ISequential$) {
      return true;
    } else {
      if (!G__7511.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ISequential, G__7511);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ISequential, G__7511);
  }
};
cljs.core.sorted_QMARK_ = function cljs$core$sorted_QMARK_(x) {
  var G__7513 = x;
  if (G__7513) {
    var bit__4983__auto__ = G__7513.cljs$lang$protocol_mask$partition0$ & 268435456;
    if (bit__4983__auto__ || G__7513.cljs$core$ISorted$) {
      return true;
    } else {
      if (!G__7513.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ISorted, G__7513);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ISorted, G__7513);
  }
};
cljs.core.reduceable_QMARK_ = function cljs$core$reduceable_QMARK_(x) {
  var G__7515 = x;
  if (G__7515) {
    var bit__4983__auto__ = G__7515.cljs$lang$protocol_mask$partition0$ & 524288;
    if (bit__4983__auto__ || G__7515.cljs$core$IReduce$) {
      return true;
    } else {
      if (!G__7515.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, G__7515);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, G__7515);
  }
};
cljs.core.map_QMARK_ = function cljs$core$map_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__7517 = x;
    if (G__7517) {
      var bit__4983__auto__ = G__7517.cljs$lang$protocol_mask$partition0$ & 1024;
      if (bit__4983__auto__ || G__7517.cljs$core$IMap$) {
        return true;
      } else {
        if (!G__7517.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IMap, G__7517);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.IMap, G__7517);
    }
  }
};
cljs.core.record_QMARK_ = function cljs$core$record_QMARK_(x) {
  var G__7519 = x;
  if (G__7519) {
    var bit__4983__auto__ = G__7519.cljs$lang$protocol_mask$partition0$ & 67108864;
    if (bit__4983__auto__ || G__7519.cljs$core$IRecord$) {
      return true;
    } else {
      if (!G__7519.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IRecord, G__7519);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IRecord, G__7519);
  }
};
cljs.core.vector_QMARK_ = function cljs$core$vector_QMARK_(x) {
  var G__7521 = x;
  if (G__7521) {
    var bit__4983__auto__ = G__7521.cljs$lang$protocol_mask$partition0$ & 16384;
    if (bit__4983__auto__ || G__7521.cljs$core$IVector$) {
      return true;
    } else {
      if (!G__7521.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IVector, G__7521);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IVector, G__7521);
  }
};
cljs.core.chunked_seq_QMARK_ = function cljs$core$chunked_seq_QMARK_(x) {
  var G__7523 = x;
  if (G__7523) {
    var bit__4976__auto__ = G__7523.cljs$lang$protocol_mask$partition1$ & 512;
    if (bit__4976__auto__ || G__7523.cljs$core$IChunkedSeq$) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
};
cljs.core.js_obj = function cljs$core$js_obj() {
  var G__7526 = arguments.length;
  switch(G__7526) {
    case 0:
      return cljs.core.js_obj.cljs$core$IFn$_invoke$arity$0();
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0);
      return cljs.core.js_obj.cljs$core$IFn$_invoke$arity$variadic(argseq__5360__auto__);
  }
};
cljs.core.js_obj.cljs$core$IFn$_invoke$arity$0 = function() {
  var obj7528 = {};
  return obj7528;
};
cljs.core.js_obj.cljs$core$IFn$_invoke$arity$variadic = function(keyvals) {
  var G__7529 = goog.object.create;
  var G__7530 = keyvals;
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$2 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$2(G__7529, G__7530) : cljs.core.apply.call(null, G__7529, G__7530);
};
cljs.core.js_obj.cljs$lang$applyTo = function(seq7524) {
  return cljs.core.js_obj.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq7524));
};
cljs.core.js_obj.cljs$lang$maxFixedArity = 0;
cljs.core.js_keys = function cljs$core$js_keys(obj) {
  var keys = [];
  var G__7534_7536 = obj;
  var G__7535_7537 = function(G__7534_7536, keys) {
    return function(val, key, obj__$1) {
      return keys.push(key);
    };
  }(G__7534_7536, keys);
  goog.object.forEach(G__7534_7536, G__7535_7537);
  return keys;
};
cljs.core.js_delete = function cljs$core$js_delete(obj, key) {
  return delete obj[key];
};
cljs.core.array_copy = function cljs$core$array_copy(from, i, to, j, len) {
  var i__$1 = i;
  var j__$1 = j;
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__7538 = i__$1 + 1;
      var G__7539 = j__$1 + 1;
      var G__7540 = len__$1 - 1;
      i__$1 = G__7538;
      j__$1 = G__7539;
      len__$1 = G__7540;
      continue;
    }
    break;
  }
};
cljs.core.array_copy_downward = function cljs$core$array_copy_downward(from, i, to, j, len) {
  var i__$1 = i + (len - 1);
  var j__$1 = j + (len - 1);
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__7541 = i__$1 - 1;
      var G__7542 = j__$1 - 1;
      var G__7543 = len__$1 - 1;
      i__$1 = G__7541;
      j__$1 = G__7542;
      len__$1 = G__7543;
      continue;
    }
    break;
  }
};
cljs.core.lookup_sentinel = function() {
  var obj7545 = {};
  return obj7545;
}();
cljs.core.false_QMARK_ = function cljs$core$false_QMARK_(x) {
  return x === false;
};
cljs.core.true_QMARK_ = function cljs$core$true_QMARK_(x) {
  return x === true;
};
cljs.core.undefined_QMARK_ = function cljs$core$undefined_QMARK_(x) {
  return void 0 === x;
};
cljs.core.seq_QMARK_ = function cljs$core$seq_QMARK_(s) {
  if (s == null) {
    return false;
  } else {
    var G__7547 = s;
    if (G__7547) {
      var bit__4983__auto__ = G__7547.cljs$lang$protocol_mask$partition0$ & 64;
      if (bit__4983__auto__ || G__7547.cljs$core$ISeq$) {
        return true;
      } else {
        if (!G__7547.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__7547);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, G__7547);
    }
  }
};
cljs.core.seqable_QMARK_ = function cljs$core$seqable_QMARK_(s) {
  var G__7549 = s;
  if (G__7549) {
    var bit__4983__auto__ = G__7549.cljs$lang$protocol_mask$partition0$ & 8388608;
    if (bit__4983__auto__ || G__7549.cljs$core$ISeqable$) {
      return true;
    } else {
      if (!G__7549.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ISeqable, G__7549);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ISeqable, G__7549);
  }
};
cljs.core.boolean$ = function cljs$core$boolean(x) {
  if (cljs.core.truth_(x)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ifn_QMARK_ = function cljs$core$ifn_QMARK_(f) {
  var or__4309__auto__ = cljs.core.fn_QMARK_(f);
  if (or__4309__auto__) {
    return or__4309__auto__;
  } else {
    var G__7553 = f;
    if (G__7553) {
      var bit__4983__auto__ = G__7553.cljs$lang$protocol_mask$partition0$ & 1;
      if (bit__4983__auto__ || G__7553.cljs$core$IFn$) {
        return true;
      } else {
        if (!G__7553.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IFn, G__7553);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.IFn, G__7553);
    }
  }
};
cljs.core.integer_QMARK_ = function cljs$core$integer_QMARK_(n) {
  return typeof n === "number" && cljs.core.not(function() {
    var G__7566 = n;
    return isNaN(G__7566);
  }()) && !(n === Infinity) && function() {
    var G__7567 = n;
    return parseFloat(G__7567);
  }() === function() {
    var G__7568 = n;
    var G__7569 = 10;
    return parseInt(G__7568, G__7569);
  }();
};
cljs.core.contains_QMARK_ = function cljs$core$contains_QMARK_(coll, v) {
  if (cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return false;
  } else {
    return true;
  }
};
cljs.core.find = function cljs$core$find(coll, k) {
  if (!(coll == null) && cljs.core.associative_QMARK_(coll) && cljs.core.contains_QMARK_(coll, k)) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, k)], null);
  } else {
    return null;
  }
};
cljs.core.distinct_QMARK_ = function cljs$core$distinct_QMARK_() {
  var G__7574 = arguments.length;
  switch(G__7574) {
    case 1:
      return cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5360__auto__);
  }
};
cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return !cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y);
};
cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  if (!cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
    var s = cljs.core.PersistentHashSet.fromArray([x, y], true);
    var xs = more;
    while (true) {
      var x__$1 = cljs.core.first(xs);
      var etc = cljs.core.next(xs);
      if (cljs.core.truth_(xs)) {
        if (cljs.core.contains_QMARK_(s, x__$1)) {
          return false;
        } else {
          var G__7576 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(s, x__$1);
          var G__7577 = etc;
          s = G__7576;
          xs = G__7577;
          continue;
        }
      } else {
        return true;
      }
      break;
    }
  } else {
    return false;
  }
};
cljs.core.distinct_QMARK_.cljs$lang$applyTo = function(seq7570) {
  var G__7571 = cljs.core.first(seq7570);
  var seq7570__$1 = cljs.core.next(seq7570);
  var G__7572 = cljs.core.first(seq7570__$1);
  var seq7570__$2 = cljs.core.next(seq7570__$1);
  return cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic(G__7571, G__7572, seq7570__$2);
};
cljs.core.distinct_QMARK_.cljs$lang$maxFixedArity = 2;
cljs.core.compare = function cljs$core$compare(x, y) {
  if (x === y) {
    return 0;
  } else {
    if (x == null) {
      return -1;
    } else {
      if (y == null) {
        return 1;
      } else {
        if (typeof x === "number") {
          if (typeof y === "number") {
            var G__7583 = x;
            var G__7584 = y;
            return goog.array.defaultCompare(G__7583, G__7584);
          } else {
            throw new Error([cljs.core.str("Cannot compare "), cljs.core.str(x), cljs.core.str(" to "), cljs.core.str(y)].join(""));
          }
        } else {
          if (function() {
            var G__7585 = x;
            if (G__7585) {
              var bit__4983__auto__ = G__7585.cljs$lang$protocol_mask$partition1$ & 2048;
              if (bit__4983__auto__ || G__7585.cljs$core$IComparable$) {
                return true;
              } else {
                if (!G__7585.cljs$lang$protocol_mask$partition1$) {
                  return cljs.core.native_satisfies_QMARK_(cljs.core.IComparable, G__7585);
                } else {
                  return false;
                }
              }
            } else {
              return cljs.core.native_satisfies_QMARK_(cljs.core.IComparable, G__7585);
            }
          }()) {
            return cljs.core._compare(x, y);
          } else {
            if ((typeof x === "string" || cljs.core.array_QMARK_(x) || x === true || x === false) && cljs.core.type(x) === cljs.core.type(y)) {
              var G__7586 = x;
              var G__7587 = y;
              return goog.array.defaultCompare(G__7586, G__7587);
            } else {
              throw new Error([cljs.core.str("Cannot compare "), cljs.core.str(x), cljs.core.str(" to "), cljs.core.str(y)].join(""));
            }
          }
        }
      }
    }
  }
};
cljs.core.compare_indexed = function cljs$core$compare_indexed() {
  var G__7589 = arguments.length;
  switch(G__7589) {
    case 2:
      return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 4:
      return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2 = function(xs, ys) {
  var xl = cljs.core.count(xs);
  var yl = cljs.core.count(ys);
  if (xl < yl) {
    return -1;
  } else {
    if (xl > yl) {
      return 1;
    } else {
      if (xl === 0) {
        return 0;
      } else {
        return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$4(xs, ys, xl, 0);
      }
    }
  }
};
cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$4 = function(xs, ys, len, n) {
  while (true) {
    var d = cljs.core.compare(cljs.core.nth.cljs$core$IFn$_invoke$arity$2(xs, n), cljs.core.nth.cljs$core$IFn$_invoke$arity$2(ys, n));
    if (d === 0 && n + 1 < len) {
      var G__7591 = xs;
      var G__7592 = ys;
      var G__7593 = len;
      var G__7594 = n + 1;
      xs = G__7591;
      ys = G__7592;
      len = G__7593;
      n = G__7594;
      continue;
    } else {
      return d;
    }
    break;
  }
};
cljs.core.compare_indexed.cljs$lang$maxFixedArity = 4;
cljs.core.fn__GT_comparator = function cljs$core$fn__GT_comparator(f) {
  if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(f, cljs.core.compare)) {
    return cljs.core.compare;
  } else {
    return function(x, y) {
      var r = function() {
        var G__7599 = x;
        var G__7600 = y;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__7599, G__7600) : f.call(null, G__7599, G__7600);
      }();
      if (typeof r === "number") {
        return r;
      } else {
        if (cljs.core.truth_(r)) {
          return -1;
        } else {
          if (cljs.core.truth_(function() {
            var G__7601 = y;
            var G__7602 = x;
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__7601, G__7602) : f.call(null, G__7601, G__7602);
          }())) {
            return 1;
          } else {
            return 0;
          }
        }
      }
    };
  }
};
cljs.core.sort = function cljs$core$sort() {
  var G__7604 = arguments.length;
  switch(G__7604) {
    case 1:
      return cljs.core.sort.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.sort.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.sort.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return cljs.core.sort.cljs$core$IFn$_invoke$arity$2(cljs.core.compare, coll);
};
cljs.core.sort.cljs$core$IFn$_invoke$arity$2 = function(comp, coll) {
  if (cljs.core.seq(coll)) {
    var a = function() {
      var G__7605 = coll;
      return cljs.core.to_array.cljs$core$IFn$_invoke$arity$1 ? cljs.core.to_array.cljs$core$IFn$_invoke$arity$1(G__7605) : cljs.core.to_array.call(null, G__7605);
    }();
    var G__7606_7609 = a;
    var G__7607_7610 = cljs.core.fn__GT_comparator(comp);
    goog.array.stableSort(G__7606_7609, G__7607_7610);
    return cljs.core.seq(a);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.sort.cljs$lang$maxFixedArity = 2;
cljs.core.sort_by = function cljs$core$sort_by() {
  var G__7612 = arguments.length;
  switch(G__7612) {
    case 2:
      return cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.sort_by.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2 = function(keyfn, coll) {
  return cljs.core.sort_by.cljs$core$IFn$_invoke$arity$3(keyfn, cljs.core.compare, coll);
};
cljs.core.sort_by.cljs$core$IFn$_invoke$arity$3 = function(keyfn, comp, coll) {
  return cljs.core.sort.cljs$core$IFn$_invoke$arity$2(function(x, y) {
    return cljs.core.fn__GT_comparator(comp).call(null, function() {
      var G__7613 = x;
      return keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(G__7613) : keyfn.call(null, G__7613);
    }(), function() {
      var G__7614 = y;
      return keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(G__7614) : keyfn.call(null, G__7614);
    }());
  }, coll);
};
cljs.core.sort_by.cljs$lang$maxFixedArity = 3;
cljs.core.seq_reduce = function cljs$core$seq_reduce() {
  var G__7617 = arguments.length;
  switch(G__7617) {
    case 2:
      return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  var temp__4420__auto__ = cljs.core.seq(coll);
  if (temp__4420__auto__) {
    var s = temp__4420__auto__;
    var G__7618 = f;
    var G__7619 = cljs.core.first(s);
    var G__7620 = cljs.core.next(s);
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(G__7618, G__7619, G__7620) : cljs.core.reduce.call(null, G__7618, G__7619, G__7620);
  } else {
    return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
  }
};
cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3 = function(f, val, coll) {
  var val__$1 = val;
  var coll__$1 = cljs.core.seq(coll);
  while (true) {
    if (coll__$1) {
      var nval = function() {
        var G__7621 = val__$1;
        var G__7622 = cljs.core.first(coll__$1);
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__7621, G__7622) : f.call(null, G__7621, G__7622);
      }();
      if (cljs.core.reduced_QMARK_(nval)) {
        return cljs.core.deref(nval);
      } else {
        var G__7624 = nval;
        var G__7625 = cljs.core.next(coll__$1);
        val__$1 = G__7624;
        coll__$1 = G__7625;
        continue;
      }
    } else {
      return val__$1;
    }
    break;
  }
};
cljs.core.seq_reduce.cljs$lang$maxFixedArity = 3;
cljs.core.shuffle = function cljs$core$shuffle(coll) {
  var a = function() {
    var G__7629 = coll;
    return cljs.core.to_array.cljs$core$IFn$_invoke$arity$1 ? cljs.core.to_array.cljs$core$IFn$_invoke$arity$1(G__7629) : cljs.core.to_array.call(null, G__7629);
  }();
  var G__7630_7632 = a;
  goog.array.shuffle(G__7630_7632);
  var G__7631 = a;
  return cljs.core.vec.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vec.cljs$core$IFn$_invoke$arity$1(G__7631) : cljs.core.vec.call(null, G__7631);
};
cljs.core.reduce = function cljs$core$reduce() {
  var G__7634 = arguments.length;
  switch(G__7634) {
    case 2:
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.reduce.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  if (function() {
    var G__7635 = coll;
    if (G__7635) {
      var bit__4976__auto__ = G__7635.cljs$lang$protocol_mask$partition0$ & 524288;
      if (bit__4976__auto__ || G__7635.cljs$core$IReduce$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return coll.cljs$core$IReduce$_reduce$arity$2(null, f);
  } else {
    if (cljs.core.array_QMARK_(coll)) {
      return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2(coll, f);
    } else {
      if (typeof coll === "string") {
        return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2(coll, f);
      } else {
        if (cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, coll)) {
          return cljs.core._reduce.cljs$core$IFn$_invoke$arity$2(coll, f);
        } else {
          return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll);
        }
      }
    }
  }
};
cljs.core.reduce.cljs$core$IFn$_invoke$arity$3 = function(f, val, coll) {
  if (function() {
    var G__7636 = coll;
    if (G__7636) {
      var bit__4976__auto__ = G__7636.cljs$lang$protocol_mask$partition0$ & 524288;
      if (bit__4976__auto__ || G__7636.cljs$core$IReduce$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return coll.cljs$core$IReduce$_reduce$arity$3(null, f, val);
  } else {
    if (cljs.core.array_QMARK_(coll)) {
      return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3(coll, f, val);
    } else {
      if (typeof coll === "string") {
        return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3(coll, f, val);
      } else {
        if (cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, coll)) {
          return cljs.core._reduce.cljs$core$IFn$_invoke$arity$3(coll, f, val);
        } else {
          return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, val, coll);
        }
      }
    }
  }
};
cljs.core.reduce.cljs$lang$maxFixedArity = 3;
cljs.core.reduce_kv = function cljs$core$reduce_kv(f, init, coll) {
  if (!(coll == null)) {
    return cljs.core._kv_reduce(coll, f, init);
  } else {
    return init;
  }
};
cljs.core.identity = function cljs$core$identity(x) {
  return x;
};
cljs.core.completing = function cljs$core$completing() {
  var G__7639 = arguments.length;
  switch(G__7639) {
    case 1:
      return cljs.core.completing.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.completing.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.completing.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return cljs.core.completing.cljs$core$IFn$_invoke$arity$2(f, cljs.core.identity);
};
cljs.core.completing.cljs$core$IFn$_invoke$arity$2 = function(f, cf) {
  return function() {
    var G__7644 = null;
    var G__7644__0 = function() {
      return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    };
    var G__7644__1 = function(x) {
      var G__7640 = x;
      return cf.cljs$core$IFn$_invoke$arity$1 ? cf.cljs$core$IFn$_invoke$arity$1(G__7640) : cf.call(null, G__7640);
    };
    var G__7644__2 = function(x, y) {
      var G__7641 = x;
      var G__7642 = y;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__7641, G__7642) : f.call(null, G__7641, G__7642);
    };
    G__7644 = function(x, y) {
      switch(arguments.length) {
        case 0:
          return G__7644__0.call(this);
        case 1:
          return G__7644__1.call(this, x);
        case 2:
          return G__7644__2.call(this, x, y);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__7644.cljs$core$IFn$_invoke$arity$0 = G__7644__0;
    G__7644.cljs$core$IFn$_invoke$arity$1 = G__7644__1;
    G__7644.cljs$core$IFn$_invoke$arity$2 = G__7644__2;
    return G__7644;
  }();
};
cljs.core.completing.cljs$lang$maxFixedArity = 2;
cljs.core.transduce = function cljs$core$transduce() {
  var G__7646 = arguments.length;
  switch(G__7646) {
    case 3:
      return cljs.core.transduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.transduce.cljs$core$IFn$_invoke$arity$3 = function(xform, f, coll) {
  return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(xform, f, function() {
    return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
  }(), coll);
};
cljs.core.transduce.cljs$core$IFn$_invoke$arity$4 = function(xform, f, init, coll) {
  var f__$1 = function() {
    var G__7647 = f;
    return xform.cljs$core$IFn$_invoke$arity$1 ? xform.cljs$core$IFn$_invoke$arity$1(G__7647) : xform.call(null, G__7647);
  }();
  var ret = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(f__$1, init, coll);
  var G__7648 = ret;
  return f__$1.cljs$core$IFn$_invoke$arity$1 ? f__$1.cljs$core$IFn$_invoke$arity$1(G__7648) : f__$1.call(null, G__7648);
};
cljs.core.transduce.cljs$lang$maxFixedArity = 4;
cljs.core._PLUS_ = function cljs$core$_PLUS_() {
  var G__7654 = arguments.length;
  switch(G__7654) {
    case 0:
      return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5360__auto__);
  }
};
cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$0 = function() {
  return 0;
};
cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x + y;
};
cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._PLUS_, x + y, more);
};
cljs.core._PLUS_.cljs$lang$applyTo = function(seq7650) {
  var G__7651 = cljs.core.first(seq7650);
  var seq7650__$1 = cljs.core.next(seq7650);
  var G__7652 = cljs.core.first(seq7650__$1);
  var seq7650__$2 = cljs.core.next(seq7650__$1);
  return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$variadic(G__7651, G__7652, seq7650__$2);
};
cljs.core._PLUS_.cljs$lang$maxFixedArity = 2;
cljs.core._ = function cljs$core$_() {
  var G__7660 = arguments.length;
  switch(G__7660) {
    case 1:
      return cljs.core._.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core._.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5360__auto__);
  }
};
cljs.core._.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return -x;
};
cljs.core._.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x - y;
};
cljs.core._.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._, x - y, more);
};
cljs.core._.cljs$lang$applyTo = function(seq7656) {
  var G__7657 = cljs.core.first(seq7656);
  var seq7656__$1 = cljs.core.next(seq7656);
  var G__7658 = cljs.core.first(seq7656__$1);
  var seq7656__$2 = cljs.core.next(seq7656__$1);
  return cljs.core._.cljs$core$IFn$_invoke$arity$variadic(G__7657, G__7658, seq7656__$2);
};
cljs.core._.cljs$lang$maxFixedArity = 2;
cljs.core._STAR_ = function cljs$core$_STAR_() {
  var G__7666 = arguments.length;
  switch(G__7666) {
    case 0:
      return cljs.core._STAR_.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core._STAR_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._STAR_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core._STAR_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5360__auto__);
  }
};
cljs.core._STAR_.cljs$core$IFn$_invoke$arity$0 = function() {
  return 1;
};
cljs.core._STAR_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core._STAR_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x * y;
};
cljs.core._STAR_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._STAR_, x * y, more);
};
cljs.core._STAR_.cljs$lang$applyTo = function(seq7662) {
  var G__7663 = cljs.core.first(seq7662);
  var seq7662__$1 = cljs.core.next(seq7662);
  var G__7664 = cljs.core.first(seq7662__$1);
  var seq7662__$2 = cljs.core.next(seq7662__$1);
  return cljs.core._STAR_.cljs$core$IFn$_invoke$arity$variadic(G__7663, G__7664, seq7662__$2);
};
cljs.core._STAR_.cljs$lang$maxFixedArity = 2;
cljs.core._SLASH_ = function cljs$core$_SLASH_() {
  var G__7672 = arguments.length;
  switch(G__7672) {
    case 1:
      return cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5360__auto__);
  }
};
cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return 1 / x;
};
cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x / y;
};
cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._SLASH_, x / y, more);
};
cljs.core._SLASH_.cljs$lang$applyTo = function(seq7668) {
  var G__7669 = cljs.core.first(seq7668);
  var seq7668__$1 = cljs.core.next(seq7668);
  var G__7670 = cljs.core.first(seq7668__$1);
  var seq7668__$2 = cljs.core.next(seq7668__$1);
  return cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$variadic(G__7669, G__7670, seq7668__$2);
};
cljs.core._SLASH_.cljs$lang$maxFixedArity = 2;
cljs.core._LT_ = function cljs$core$_LT_() {
  var G__7678 = arguments.length;
  switch(G__7678) {
    case 1:
      return cljs.core._LT_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._LT_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core._LT_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5360__auto__);
  }
};
cljs.core._LT_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._LT_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x < y;
};
cljs.core._LT_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (x < y) {
      if (cljs.core.next(more)) {
        var G__7680 = y;
        var G__7681 = cljs.core.first(more);
        var G__7682 = cljs.core.next(more);
        x = G__7680;
        y = G__7681;
        more = G__7682;
        continue;
      } else {
        return y < cljs.core.first(more);
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._LT_.cljs$lang$applyTo = function(seq7674) {
  var G__7675 = cljs.core.first(seq7674);
  var seq7674__$1 = cljs.core.next(seq7674);
  var G__7676 = cljs.core.first(seq7674__$1);
  var seq7674__$2 = cljs.core.next(seq7674__$1);
  return cljs.core._LT_.cljs$core$IFn$_invoke$arity$variadic(G__7675, G__7676, seq7674__$2);
};
cljs.core._LT_.cljs$lang$maxFixedArity = 2;
cljs.core._LT__EQ_ = function cljs$core$_LT__EQ_() {
  var G__7687 = arguments.length;
  switch(G__7687) {
    case 1:
      return cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5360__auto__);
  }
};
cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x <= y;
};
cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (x <= y) {
      if (cljs.core.next(more)) {
        var G__7689 = y;
        var G__7690 = cljs.core.first(more);
        var G__7691 = cljs.core.next(more);
        x = G__7689;
        y = G__7690;
        more = G__7691;
        continue;
      } else {
        return y <= cljs.core.first(more);
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._LT__EQ_.cljs$lang$applyTo = function(seq7683) {
  var G__7684 = cljs.core.first(seq7683);
  var seq7683__$1 = cljs.core.next(seq7683);
  var G__7685 = cljs.core.first(seq7683__$1);
  var seq7683__$2 = cljs.core.next(seq7683__$1);
  return cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$variadic(G__7684, G__7685, seq7683__$2);
};
cljs.core._LT__EQ_.cljs$lang$maxFixedArity = 2;
cljs.core._GT_ = function cljs$core$_GT_() {
  var G__7696 = arguments.length;
  switch(G__7696) {
    case 1:
      return cljs.core._GT_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._GT_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core._GT_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5360__auto__);
  }
};
cljs.core._GT_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._GT_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x > y;
};
cljs.core._GT_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (x > y) {
      if (cljs.core.next(more)) {
        var G__7698 = y;
        var G__7699 = cljs.core.first(more);
        var G__7700 = cljs.core.next(more);
        x = G__7698;
        y = G__7699;
        more = G__7700;
        continue;
      } else {
        return y > cljs.core.first(more);
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._GT_.cljs$lang$applyTo = function(seq7692) {
  var G__7693 = cljs.core.first(seq7692);
  var seq7692__$1 = cljs.core.next(seq7692);
  var G__7694 = cljs.core.first(seq7692__$1);
  var seq7692__$2 = cljs.core.next(seq7692__$1);
  return cljs.core._GT_.cljs$core$IFn$_invoke$arity$variadic(G__7693, G__7694, seq7692__$2);
};
cljs.core._GT_.cljs$lang$maxFixedArity = 2;
cljs.core._GT__EQ_ = function cljs$core$_GT__EQ_() {
  var G__7705 = arguments.length;
  switch(G__7705) {
    case 1:
      return cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5360__auto__);
  }
};
cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x >= y;
};
cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (x >= y) {
      if (cljs.core.next(more)) {
        var G__7707 = y;
        var G__7708 = cljs.core.first(more);
        var G__7709 = cljs.core.next(more);
        x = G__7707;
        y = G__7708;
        more = G__7709;
        continue;
      } else {
        return y >= cljs.core.first(more);
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._GT__EQ_.cljs$lang$applyTo = function(seq7701) {
  var G__7702 = cljs.core.first(seq7701);
  var seq7701__$1 = cljs.core.next(seq7701);
  var G__7703 = cljs.core.first(seq7701__$1);
  var seq7701__$2 = cljs.core.next(seq7701__$1);
  return cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$variadic(G__7702, G__7703, seq7701__$2);
};
cljs.core._GT__EQ_.cljs$lang$maxFixedArity = 2;
cljs.core.dec = function cljs$core$dec(x) {
  return x - 1;
};
cljs.core.max = function cljs$core$max() {
  var G__7714 = arguments.length;
  switch(G__7714) {
    case 1:
      return cljs.core.max.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.max.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.max.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5360__auto__);
  }
};
cljs.core.max.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.max.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  var x__4621__auto__ = x;
  var y__4622__auto__ = y;
  return x__4621__auto__ > y__4622__auto__ ? x__4621__auto__ : y__4622__auto__;
};
cljs.core.max.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.max, function() {
    var x__4621__auto__ = x;
    var y__4622__auto__ = y;
    return x__4621__auto__ > y__4622__auto__ ? x__4621__auto__ : y__4622__auto__;
  }(), more);
};
cljs.core.max.cljs$lang$applyTo = function(seq7710) {
  var G__7711 = cljs.core.first(seq7710);
  var seq7710__$1 = cljs.core.next(seq7710);
  var G__7712 = cljs.core.first(seq7710__$1);
  var seq7710__$2 = cljs.core.next(seq7710__$1);
  return cljs.core.max.cljs$core$IFn$_invoke$arity$variadic(G__7711, G__7712, seq7710__$2);
};
cljs.core.max.cljs$lang$maxFixedArity = 2;
cljs.core.min = function cljs$core$min() {
  var G__7720 = arguments.length;
  switch(G__7720) {
    case 1:
      return cljs.core.min.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.min.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.min.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5360__auto__);
  }
};
cljs.core.min.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.min.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  var x__4628__auto__ = x;
  var y__4629__auto__ = y;
  return x__4628__auto__ < y__4629__auto__ ? x__4628__auto__ : y__4629__auto__;
};
cljs.core.min.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.min, function() {
    var x__4628__auto__ = x;
    var y__4629__auto__ = y;
    return x__4628__auto__ < y__4629__auto__ ? x__4628__auto__ : y__4629__auto__;
  }(), more);
};
cljs.core.min.cljs$lang$applyTo = function(seq7716) {
  var G__7717 = cljs.core.first(seq7716);
  var seq7716__$1 = cljs.core.next(seq7716);
  var G__7718 = cljs.core.first(seq7716__$1);
  var seq7716__$2 = cljs.core.next(seq7716__$1);
  return cljs.core.min.cljs$core$IFn$_invoke$arity$variadic(G__7717, G__7718, seq7716__$2);
};
cljs.core.min.cljs$lang$maxFixedArity = 2;
cljs.core.byte$ = function cljs$core$byte(x) {
  return x;
};
cljs.core.char$ = function cljs$core$char(x) {
  if (typeof x === "number") {
    return String.fromCharCode(x);
  } else {
    if (typeof x === "string" && x.length === 1) {
      return x;
    } else {
      throw new Error("Argument to char must be a character or number");
    }
  }
};
cljs.core.short$ = function cljs$core$short(x) {
  return x;
};
cljs.core.float$ = function cljs$core$float(x) {
  return x;
};
cljs.core.double$ = function cljs$core$double(x) {
  return x;
};
cljs.core.unchecked_byte = function cljs$core$unchecked_byte(x) {
  return x;
};
cljs.core.unchecked_char = function cljs$core$unchecked_char(x) {
  return x;
};
cljs.core.unchecked_short = function cljs$core$unchecked_short(x) {
  return x;
};
cljs.core.unchecked_float = function cljs$core$unchecked_float(x) {
  return x;
};
cljs.core.unchecked_double = function cljs$core$unchecked_double(x) {
  return x;
};
cljs.core.unchecked_add = function cljs$core$unchecked_add() {
  var G__7726 = arguments.length;
  switch(G__7726) {
    case 0:
      return cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5360__auto__);
  }
};
cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$0 = function() {
  return 0;
};
cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x + y;
};
cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_add, x + y, more);
};
cljs.core.unchecked_add.cljs$lang$applyTo = function(seq7722) {
  var G__7723 = cljs.core.first(seq7722);
  var seq7722__$1 = cljs.core.next(seq7722);
  var G__7724 = cljs.core.first(seq7722__$1);
  var seq7722__$2 = cljs.core.next(seq7722__$1);
  return cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$variadic(G__7723, G__7724, seq7722__$2);
};
cljs.core.unchecked_add.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_add_int = function cljs$core$unchecked_add_int() {
  var G__7732 = arguments.length;
  switch(G__7732) {
    case 0:
      return cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5360__auto__);
  }
};
cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$0 = function() {
  return 0;
};
cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x + y;
};
cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_add_int, x + y, more);
};
cljs.core.unchecked_add_int.cljs$lang$applyTo = function(seq7728) {
  var G__7729 = cljs.core.first(seq7728);
  var seq7728__$1 = cljs.core.next(seq7728);
  var G__7730 = cljs.core.first(seq7728__$1);
  var seq7728__$2 = cljs.core.next(seq7728__$1);
  return cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic(G__7729, G__7730, seq7728__$2);
};
cljs.core.unchecked_add_int.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_dec = function cljs$core$unchecked_dec(x) {
  return x - 1;
};
cljs.core.unchecked_dec_int = function cljs$core$unchecked_dec_int(x) {
  return x - 1;
};
cljs.core.unchecked_divide_int = function cljs$core$unchecked_divide_int() {
  var G__7738 = arguments.length;
  switch(G__7738) {
    case 1:
      return cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5360__auto__);
  }
};
cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return 1 / x;
};
cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x / y;
};
cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_divide_int, x / y, more);
};
cljs.core.unchecked_divide_int.cljs$lang$applyTo = function(seq7734) {
  var G__7735 = cljs.core.first(seq7734);
  var seq7734__$1 = cljs.core.next(seq7734);
  var G__7736 = cljs.core.first(seq7734__$1);
  var seq7734__$2 = cljs.core.next(seq7734__$1);
  return cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic(G__7735, G__7736, seq7734__$2);
};
cljs.core.unchecked_divide_int.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_inc = function cljs$core$unchecked_inc(x) {
  return x + 1;
};
cljs.core.unchecked_inc_int = function cljs$core$unchecked_inc_int(x) {
  return x + 1;
};
cljs.core.unchecked_multiply = function cljs$core$unchecked_multiply() {
  var G__7744 = arguments.length;
  switch(G__7744) {
    case 0:
      return cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5360__auto__);
  }
};
cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$0 = function() {
  return 1;
};
cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x * y;
};
cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_multiply, x * y, more);
};
cljs.core.unchecked_multiply.cljs$lang$applyTo = function(seq7740) {
  var G__7741 = cljs.core.first(seq7740);
  var seq7740__$1 = cljs.core.next(seq7740);
  var G__7742 = cljs.core.first(seq7740__$1);
  var seq7740__$2 = cljs.core.next(seq7740__$1);
  return cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic(G__7741, G__7742, seq7740__$2);
};
cljs.core.unchecked_multiply.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_multiply_int = function cljs$core$unchecked_multiply_int() {
  var G__7750 = arguments.length;
  switch(G__7750) {
    case 0:
      return cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5360__auto__);
  }
};
cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$0 = function() {
  return 1;
};
cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x * y;
};
cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_multiply_int, x * y, more);
};
cljs.core.unchecked_multiply_int.cljs$lang$applyTo = function(seq7746) {
  var G__7747 = cljs.core.first(seq7746);
  var seq7746__$1 = cljs.core.next(seq7746);
  var G__7748 = cljs.core.first(seq7746__$1);
  var seq7746__$2 = cljs.core.next(seq7746__$1);
  return cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic(G__7747, G__7748, seq7746__$2);
};
cljs.core.unchecked_multiply_int.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_negate = function cljs$core$unchecked_negate(x) {
  return -x;
};
cljs.core.unchecked_negate_int = function cljs$core$unchecked_negate_int(x) {
  return -x;
};
cljs.core.unchecked_remainder_int = function cljs$core$unchecked_remainder_int(x, n) {
  var G__7754 = x;
  var G__7755 = n;
  return cljs.core.mod.cljs$core$IFn$_invoke$arity$2 ? cljs.core.mod.cljs$core$IFn$_invoke$arity$2(G__7754, G__7755) : cljs.core.mod.call(null, G__7754, G__7755);
};
cljs.core.unchecked_subtract = function cljs$core$unchecked_subtract() {
  var G__7760 = arguments.length;
  switch(G__7760) {
    case 1:
      return cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5360__auto__);
  }
};
cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return -x;
};
cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x - y;
};
cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_subtract, x - y, more);
};
cljs.core.unchecked_subtract.cljs$lang$applyTo = function(seq7756) {
  var G__7757 = cljs.core.first(seq7756);
  var seq7756__$1 = cljs.core.next(seq7756);
  var G__7758 = cljs.core.first(seq7756__$1);
  var seq7756__$2 = cljs.core.next(seq7756__$1);
  return cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$variadic(G__7757, G__7758, seq7756__$2);
};
cljs.core.unchecked_subtract.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_subtract_int = function cljs$core$unchecked_subtract_int() {
  var G__7766 = arguments.length;
  switch(G__7766) {
    case 1:
      return cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5360__auto__);
  }
};
cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return -x;
};
cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x - y;
};
cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_subtract_int, x - y, more);
};
cljs.core.unchecked_subtract_int.cljs$lang$applyTo = function(seq7762) {
  var G__7763 = cljs.core.first(seq7762);
  var seq7762__$1 = cljs.core.next(seq7762);
  var G__7764 = cljs.core.first(seq7762__$1);
  var seq7762__$2 = cljs.core.next(seq7762__$1);
  return cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$variadic(G__7763, G__7764, seq7762__$2);
};
cljs.core.unchecked_subtract_int.cljs$lang$maxFixedArity = 2;
cljs.core.fix = function cljs$core$fix(q) {
  if (q >= 0) {
    var G__7770 = q;
    return Math.floor(G__7770);
  } else {
    var G__7771 = q;
    return Math.ceil(G__7771);
  }
};
cljs.core.int$ = function cljs$core$int(x) {
  return x | 0;
};
cljs.core.unchecked_int = function cljs$core$unchecked_int(x) {
  return cljs.core.fix(x);
};
cljs.core.long$ = function cljs$core$long(x) {
  return cljs.core.fix(x);
};
cljs.core.unchecked_long = function cljs$core$unchecked_long(x) {
  return cljs.core.fix(x);
};
cljs.core.booleans = function cljs$core$booleans(x) {
  return x;
};
cljs.core.bytes = function cljs$core$bytes(x) {
  return x;
};
cljs.core.chars = function cljs$core$chars(x) {
  return x;
};
cljs.core.shorts = function cljs$core$shorts(x) {
  return x;
};
cljs.core.ints = function cljs$core$ints(x) {
  return x;
};
cljs.core.floats = function cljs$core$floats(x) {
  return x;
};
cljs.core.doubles = function cljs$core$doubles(x) {
  return x;
};
cljs.core.longs = function cljs$core$longs(x) {
  return x;
};
cljs.core.js_mod = function cljs$core$js_mod(n, d) {
  return n % d;
};
cljs.core.mod = function cljs$core$mod(n, d) {
  return (n % d + d) % d;
};
cljs.core.quot = function cljs$core$quot(n, d) {
  var rem = n % d;
  return cljs.core.fix((n - rem) / d);
};
cljs.core.rem = function cljs$core$rem(n, d) {
  var q = cljs.core.quot(n, d);
  return n - d * q;
};
cljs.core.bit_xor = function cljs$core$bit_xor() {
  var G__7776 = arguments.length;
  switch(G__7776) {
    case 2:
      return cljs.core.bit_xor.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.bit_xor.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5360__auto__);
  }
};
cljs.core.bit_xor.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x ^ y;
};
cljs.core.bit_xor.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.bit_xor, x ^ y, more);
};
cljs.core.bit_xor.cljs$lang$applyTo = function(seq7772) {
  var G__7773 = cljs.core.first(seq7772);
  var seq7772__$1 = cljs.core.next(seq7772);
  var G__7774 = cljs.core.first(seq7772__$1);
  var seq7772__$2 = cljs.core.next(seq7772__$1);
  return cljs.core.bit_xor.cljs$core$IFn$_invoke$arity$variadic(G__7773, G__7774, seq7772__$2);
};
cljs.core.bit_xor.cljs$lang$maxFixedArity = 2;
cljs.core.bit_and = function cljs$core$bit_and() {
  var G__7782 = arguments.length;
  switch(G__7782) {
    case 2:
      return cljs.core.bit_and.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.bit_and.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5360__auto__);
  }
};
cljs.core.bit_and.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x & y;
};
cljs.core.bit_and.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.bit_and, x & y, more);
};
cljs.core.bit_and.cljs$lang$applyTo = function(seq7778) {
  var G__7779 = cljs.core.first(seq7778);
  var seq7778__$1 = cljs.core.next(seq7778);
  var G__7780 = cljs.core.first(seq7778__$1);
  var seq7778__$2 = cljs.core.next(seq7778__$1);
  return cljs.core.bit_and.cljs$core$IFn$_invoke$arity$variadic(G__7779, G__7780, seq7778__$2);
};
cljs.core.bit_and.cljs$lang$maxFixedArity = 2;
cljs.core.bit_or = function cljs$core$bit_or() {
  var G__7788 = arguments.length;
  switch(G__7788) {
    case 2:
      return cljs.core.bit_or.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.bit_or.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5360__auto__);
  }
};
cljs.core.bit_or.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x | y;
};
cljs.core.bit_or.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.bit_or, x | y, more);
};
cljs.core.bit_or.cljs$lang$applyTo = function(seq7784) {
  var G__7785 = cljs.core.first(seq7784);
  var seq7784__$1 = cljs.core.next(seq7784);
  var G__7786 = cljs.core.first(seq7784__$1);
  var seq7784__$2 = cljs.core.next(seq7784__$1);
  return cljs.core.bit_or.cljs$core$IFn$_invoke$arity$variadic(G__7785, G__7786, seq7784__$2);
};
cljs.core.bit_or.cljs$lang$maxFixedArity = 2;
cljs.core.bit_and_not = function cljs$core$bit_and_not() {
  var G__7794 = arguments.length;
  switch(G__7794) {
    case 2:
      return cljs.core.bit_and_not.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.bit_and_not.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5360__auto__);
  }
};
cljs.core.bit_and_not.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x & ~y;
};
cljs.core.bit_and_not.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.bit_and_not, x & ~y, more);
};
cljs.core.bit_and_not.cljs$lang$applyTo = function(seq7790) {
  var G__7791 = cljs.core.first(seq7790);
  var seq7790__$1 = cljs.core.next(seq7790);
  var G__7792 = cljs.core.first(seq7790__$1);
  var seq7790__$2 = cljs.core.next(seq7790__$1);
  return cljs.core.bit_and_not.cljs$core$IFn$_invoke$arity$variadic(G__7791, G__7792, seq7790__$2);
};
cljs.core.bit_and_not.cljs$lang$maxFixedArity = 2;
cljs.core.bit_clear = function cljs$core$bit_clear(x, n) {
  return x & ~(1 << n);
};
cljs.core.bit_flip = function cljs$core$bit_flip(x, n) {
  return x ^ 1 << n;
};
cljs.core.bit_not = function cljs$core$bit_not(x) {
  return ~x;
};
cljs.core.bit_set = function cljs$core$bit_set(x, n) {
  return x | 1 << n;
};
cljs.core.bit_test = function cljs$core$bit_test(x, n) {
  return (x & 1 << n) != 0;
};
cljs.core.bit_shift_left = function cljs$core$bit_shift_left(x, n) {
  return x << n;
};
cljs.core.bit_shift_right = function cljs$core$bit_shift_right(x, n) {
  return x >> n;
};
cljs.core.bit_shift_right_zero_fill = function cljs$core$bit_shift_right_zero_fill(x, n) {
  return x >>> n;
};
cljs.core.unsigned_bit_shift_right = function cljs$core$unsigned_bit_shift_right(x, n) {
  return x >>> n;
};
cljs.core.bit_count = function cljs$core$bit_count(v) {
  var v__$1 = v - (v >> 1 & 1431655765);
  var v__$2 = (v__$1 & 858993459) + (v__$1 >> 2 & 858993459);
  return (v__$2 + (v__$2 >> 4) & 252645135) * 16843009 >> 24;
};
cljs.core._EQ__EQ_ = function cljs$core$_EQ__EQ_() {
  var G__7800 = arguments.length;
  switch(G__7800) {
    case 1:
      return cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5360__auto__);
  }
};
cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return cljs.core._equiv(x, y);
};
cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (x === y) {
      if (cljs.core.next(more)) {
        var G__7802 = y;
        var G__7803 = cljs.core.first(more);
        var G__7804 = cljs.core.next(more);
        x = G__7802;
        y = G__7803;
        more = G__7804;
        continue;
      } else {
        return y === cljs.core.first(more);
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._EQ__EQ_.cljs$lang$applyTo = function(seq7796) {
  var G__7797 = cljs.core.first(seq7796);
  var seq7796__$1 = cljs.core.next(seq7796);
  var G__7798 = cljs.core.first(seq7796__$1);
  var seq7796__$2 = cljs.core.next(seq7796__$1);
  return cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic(G__7797, G__7798, seq7796__$2);
};
cljs.core._EQ__EQ_.cljs$lang$maxFixedArity = 2;
cljs.core.pos_QMARK_ = function cljs$core$pos_QMARK_(n) {
  return n > 0;
};
cljs.core.zero_QMARK_ = function cljs$core$zero_QMARK_(n) {
  return n === 0;
};
cljs.core.neg_QMARK_ = function cljs$core$neg_QMARK_(x) {
  return x < 0;
};
cljs.core.nthnext = function cljs$core$nthnext(coll, n) {
  var n__$1 = n;
  var xs = cljs.core.seq(coll);
  while (true) {
    if (xs && n__$1 > 0) {
      var G__7805 = n__$1 - 1;
      var G__7806 = cljs.core.next(xs);
      n__$1 = G__7805;
      xs = G__7806;
      continue;
    } else {
      return xs;
    }
    break;
  }
};
cljs.core.str = function cljs$core$str() {
  var G__7810 = arguments.length;
  switch(G__7810) {
    case 0:
      return cljs.core.str.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0);
      return cljs.core.str.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5360__auto__);
  }
};
cljs.core.str.cljs$core$IFn$_invoke$arity$0 = function() {
  return "";
};
cljs.core.str.cljs$core$IFn$_invoke$arity$1 = function(x) {
  if (x == null) {
    return "";
  } else {
    var G__7811 = x;
    return goog.string.buildString(G__7811);
  }
};
cljs.core.str.cljs$core$IFn$_invoke$arity$variadic = function(x, ys) {
  var sb = new goog.string.StringBuffer([cljs.core.str(x)].join(""));
  var more = ys;
  while (true) {
    if (cljs.core.truth_(more)) {
      var G__7813 = sb.append([cljs.core.str(cljs.core.first(more))].join(""));
      var G__7814 = cljs.core.next(more);
      sb = G__7813;
      more = G__7814;
      continue;
    } else {
      return sb.toString();
    }
    break;
  }
};
cljs.core.str.cljs$lang$applyTo = function(seq7807) {
  var G__7808 = cljs.core.first(seq7807);
  var seq7807__$1 = cljs.core.next(seq7807);
  return cljs.core.str.cljs$core$IFn$_invoke$arity$variadic(G__7808, seq7807__$1);
};
cljs.core.str.cljs$lang$maxFixedArity = 1;
cljs.core.subs = function cljs$core$subs() {
  var G__7816 = arguments.length;
  switch(G__7816) {
    case 2:
      return cljs.core.subs.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.subs.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.subs.cljs$core$IFn$_invoke$arity$2 = function(s, start) {
  return s.substring(start);
};
cljs.core.subs.cljs$core$IFn$_invoke$arity$3 = function(s, start, end) {
  return s.substring(start, end);
};
cljs.core.subs.cljs$lang$maxFixedArity = 3;
cljs.core.equiv_sequential = function cljs$core$equiv_sequential(x, y) {
  return cljs.core.boolean$(cljs.core.sequential_QMARK_(y) ? cljs.core.counted_QMARK_(x) && cljs.core.counted_QMARK_(y) && !(cljs.core.count(x) === cljs.core.count(y)) ? false : function() {
    var xs = cljs.core.seq(x);
    var ys = cljs.core.seq(y);
    while (true) {
      if (xs == null) {
        return ys == null;
      } else {
        if (ys == null) {
          return false;
        } else {
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.first(xs), cljs.core.first(ys))) {
            var G__7818 = cljs.core.next(xs);
            var G__7819 = cljs.core.next(ys);
            xs = G__7818;
            ys = G__7819;
            continue;
          } else {
            return false;
          }
        }
      }
      break;
    }
  }() : null);
};
cljs.core.hash_coll = function cljs$core$hash_coll(coll) {
  if (cljs.core.seq(coll)) {
    var res = cljs.core.hash(cljs.core.first(coll));
    var s = cljs.core.next(coll);
    while (true) {
      if (s == null) {
        return res;
      } else {
        var G__7820 = cljs.core.hash_combine(res, cljs.core.hash(cljs.core.first(s)));
        var G__7821 = cljs.core.next(s);
        res = G__7820;
        s = G__7821;
        continue;
      }
      break;
    }
  } else {
    return 0;
  }
};
cljs.core.hash_imap = function cljs$core$hash_imap(m) {
  var h = 0;
  var s = cljs.core.seq(m);
  while (true) {
    if (s) {
      var e = cljs.core.first(s);
      var G__7826 = (h + (cljs.core.hash(function() {
        var G__7824 = e;
        return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__7824) : cljs.core.key.call(null, G__7824);
      }()) ^ cljs.core.hash(function() {
        var G__7825 = e;
        return cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(G__7825) : cljs.core.val.call(null, G__7825);
      }()))) % 4503599627370496;
      var G__7827 = cljs.core.next(s);
      h = G__7826;
      s = G__7827;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.hash_iset = function cljs$core$hash_iset(s) {
  var h = 0;
  var s__$1 = cljs.core.seq(s);
  while (true) {
    if (s__$1) {
      var e = cljs.core.first(s__$1);
      var G__7828 = (h + cljs.core.hash(e)) % 4503599627370496;
      var G__7829 = cljs.core.next(s__$1);
      h = G__7828;
      s__$1 = G__7829;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.extend_object_BANG_ = function cljs$core$extend_object_BANG_(obj, fn_map) {
  var seq__7840_7850 = cljs.core.seq(fn_map);
  var chunk__7841_7851 = null;
  var count__7842_7852 = 0;
  var i__7843_7853 = 0;
  while (true) {
    if (i__7843_7853 < count__7842_7852) {
      var vec__7844_7854 = chunk__7841_7851.cljs$core$IIndexed$_nth$arity$2(null, i__7843_7853);
      var key_name_7855 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__7844_7854, 0, null);
      var f_7856 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__7844_7854, 1, null);
      var str_name_7857 = function() {
        var G__7845 = key_name_7855;
        return cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(G__7845) : cljs.core.name.call(null, G__7845);
      }();
      obj[str_name_7857] = f_7856;
      var G__7858 = seq__7840_7850;
      var G__7859 = chunk__7841_7851;
      var G__7860 = count__7842_7852;
      var G__7861 = i__7843_7853 + 1;
      seq__7840_7850 = G__7858;
      chunk__7841_7851 = G__7859;
      count__7842_7852 = G__7860;
      i__7843_7853 = G__7861;
      continue;
    } else {
      var temp__4422__auto___7862 = cljs.core.seq(seq__7840_7850);
      if (temp__4422__auto___7862) {
        var seq__7840_7863__$1 = temp__4422__auto___7862;
        if (cljs.core.chunked_seq_QMARK_(seq__7840_7863__$1)) {
          var c__5094__auto___7864 = function() {
            var G__7846 = seq__7840_7863__$1;
            return cljs.core.chunk_first.cljs$core$IFn$_invoke$arity$1 ? cljs.core.chunk_first.cljs$core$IFn$_invoke$arity$1(G__7846) : cljs.core.chunk_first.call(null, G__7846);
          }();
          var G__7865 = function() {
            var G__7847 = seq__7840_7863__$1;
            return cljs.core.chunk_rest.cljs$core$IFn$_invoke$arity$1 ? cljs.core.chunk_rest.cljs$core$IFn$_invoke$arity$1(G__7847) : cljs.core.chunk_rest.call(null, G__7847);
          }();
          var G__7866 = c__5094__auto___7864;
          var G__7867 = cljs.core.count(c__5094__auto___7864);
          var G__7868 = 0;
          seq__7840_7850 = G__7865;
          chunk__7841_7851 = G__7866;
          count__7842_7852 = G__7867;
          i__7843_7853 = G__7868;
          continue;
        } else {
          var vec__7848_7869 = cljs.core.first(seq__7840_7863__$1);
          var key_name_7870 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__7848_7869, 0, null);
          var f_7871 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__7848_7869, 1, null);
          var str_name_7872 = function() {
            var G__7849 = key_name_7870;
            return cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(G__7849) : cljs.core.name.call(null, G__7849);
          }();
          obj[str_name_7872] = f_7871;
          var G__7873 = cljs.core.next(seq__7840_7863__$1);
          var G__7874 = null;
          var G__7875 = 0;
          var G__7876 = 0;
          seq__7840_7850 = G__7873;
          chunk__7841_7851 = G__7874;
          count__7842_7852 = G__7875;
          i__7843_7853 = G__7876;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return obj;
};
cljs.core.List = function(meta, first, rest, count, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.count = count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65937646;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.List.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.List.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.List.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.List.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.List(self__.meta, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return null;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.List.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._rest(coll__$1);
};
cljs.core.List.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4725__auto__ = self__.__hash;
  if (!(h__4725__auto__ == null)) {
    return h__4725__auto__;
  } else {
    var h__4725__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4725__auto____$1;
    return h__4725__auto____$1;
  }
};
cljs.core.List.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.List.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.List.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.List.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(meta__$1, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, coll__$1, self__.count + 1, null);
};
cljs.core.List.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "first", "first", 996428481, null), new cljs.core.Symbol(null, "rest", "rest", 398835108, null), new cljs.core.Symbol(null, "count", "count", -514511684, null), new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null)], null);
};
cljs.core.List.cljs$lang$type = true;
cljs.core.List.cljs$lang$ctorStr = "cljs.core/List";
cljs.core.List.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/List");
};
cljs.core.__GT_List = function cljs$core$__GT_List(meta, first, rest, count, __hash) {
  return new cljs.core.List(meta, first, rest, count, __hash);
};
cljs.core.List.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5285__auto__ = this;
  return cljs.core.es6_iterator(this__5285__auto__);
};
cljs.core.EmptyList = function(meta) {
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 65937614;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.EmptyList.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.EmptyList.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.EmptyList.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.EmptyList.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.EmptyList(self__.meta);
};
cljs.core.EmptyList.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  throw new Error("Can't pop empty list");
};
cljs.core.EmptyList.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.empty_ordered_hash;
};
cljs.core.EmptyList.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.EmptyList.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.EmptyList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.EmptyList(meta__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, null, 1, null);
};
cljs.core.EmptyList.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null)], null);
};
cljs.core.EmptyList.cljs$lang$type = true;
cljs.core.EmptyList.cljs$lang$ctorStr = "cljs.core/EmptyList";
cljs.core.EmptyList.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/EmptyList");
};
cljs.core.__GT_EmptyList = function cljs$core$__GT_EmptyList(meta) {
  return new cljs.core.EmptyList(meta);
};
cljs.core.List.EMPTY = new cljs.core.EmptyList(null);
cljs.core.EmptyList.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5285__auto__ = this;
  return cljs.core.es6_iterator(this__5285__auto__);
};
cljs.core.reversible_QMARK_ = function cljs$core$reversible_QMARK_(coll) {
  var G__7878 = coll;
  if (G__7878) {
    var bit__4983__auto__ = G__7878.cljs$lang$protocol_mask$partition0$ & 134217728;
    if (bit__4983__auto__ || G__7878.cljs$core$IReversible$) {
      return true;
    } else {
      if (!G__7878.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IReversible, G__7878);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IReversible, G__7878);
  }
};
cljs.core.rseq = function cljs$core$rseq(coll) {
  return cljs.core._rseq(coll);
};
cljs.core.reverse = function cljs$core$reverse(coll) {
  if (cljs.core.reversible_QMARK_(coll)) {
    return cljs.core.rseq(coll);
  } else {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj, cljs.core.List.EMPTY, coll);
  }
};
cljs.core.list = function cljs$core$list() {
  var argseq__5349__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.list.cljs$core$IFn$_invoke$arity$variadic(argseq__5349__auto__);
};
cljs.core.list.cljs$core$IFn$_invoke$arity$variadic = function(xs) {
  var arr = xs instanceof cljs.core.IndexedSeq && xs.i === 0 ? xs.arr : function() {
    var arr = [];
    var xs__$1 = xs;
    while (true) {
      if (!(xs__$1 == null)) {
        arr.push(xs__$1.cljs$core$ISeq$_first$arity$1(null));
        var G__7880 = xs__$1.cljs$core$INext$_next$arity$1(null);
        xs__$1 = G__7880;
        continue;
      } else {
        return arr;
      }
      break;
    }
  }();
  var i = arr.length;
  var r = cljs.core.List.EMPTY;
  while (true) {
    if (i > 0) {
      var G__7881 = i - 1;
      var G__7882 = r.cljs$core$ICollection$_conj$arity$2(null, arr[i - 1]);
      i = G__7881;
      r = G__7882;
      continue;
    } else {
      return r;
    }
    break;
  }
};
cljs.core.list.cljs$lang$maxFixedArity = 0;
cljs.core.list.cljs$lang$applyTo = function(seq7879) {
  return cljs.core.list.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq7879));
};
cljs.core.Cons = function(meta, first, rest, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65929452;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Cons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.Cons.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Cons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Cons.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Cons(self__.meta, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core.seq(self__.rest);
  }
};
cljs.core.Cons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4725__auto__ = self__.__hash;
  if (!(h__4725__auto__ == null)) {
    return h__4725__auto__;
  } else {
    var h__4725__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4725__auto____$1;
    return h__4725__auto____$1;
  }
};
cljs.core.Cons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.Cons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.Cons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.Cons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.Cons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(meta__$1, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(null, o, coll__$1, self__.__hash);
};
cljs.core.Cons.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "first", "first", 996428481, null), new cljs.core.Symbol(null, "rest", "rest", 398835108, null), new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null)], null);
};
cljs.core.Cons.cljs$lang$type = true;
cljs.core.Cons.cljs$lang$ctorStr = "cljs.core/Cons";
cljs.core.Cons.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/Cons");
};
cljs.core.__GT_Cons = function cljs$core$__GT_Cons(meta, first, rest, __hash) {
  return new cljs.core.Cons(meta, first, rest, __hash);
};
cljs.core.Cons.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5285__auto__ = this;
  return cljs.core.es6_iterator(this__5285__auto__);
};
cljs.core.cons = function cljs$core$cons(x, coll) {
  if (function() {
    var or__4309__auto__ = coll == null;
    if (or__4309__auto__) {
      return or__4309__auto__;
    } else {
      var G__7886 = coll;
      if (G__7886) {
        var bit__4976__auto__ = G__7886.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4976__auto__ || G__7886.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }
  }()) {
    return new cljs.core.Cons(null, x, coll, null);
  } else {
    return new cljs.core.Cons(null, x, cljs.core.seq(coll), null);
  }
};
cljs.core.list_QMARK_ = function cljs$core$list_QMARK_(x) {
  var G__7888 = x;
  if (G__7888) {
    var bit__4983__auto__ = G__7888.cljs$lang$protocol_mask$partition0$ & 33554432;
    if (bit__4983__auto__ || G__7888.cljs$core$IList$) {
      return true;
    } else {
      if (!G__7888.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IList, G__7888);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IList, G__7888);
  }
};
cljs.core.hash_keyword = function cljs$core$hash_keyword(k) {
  return cljs.core.hash_symbol(k) + 2654435769 | 0;
};
cljs.core.compare_keywords = function cljs$core$compare_keywords(a, b) {
  if (a.fqn === b.fqn) {
    return 0;
  } else {
    if (cljs.core.truth_(function() {
      var and__4297__auto__ = cljs.core.not(a.ns);
      if (and__4297__auto__) {
        return b.ns;
      } else {
        return and__4297__auto__;
      }
    }())) {
      return -1;
    } else {
      if (cljs.core.truth_(a.ns)) {
        if (cljs.core.not(b.ns)) {
          return 1;
        } else {
          var nsc = function() {
            var G__7895 = a.ns;
            var G__7896 = b.ns;
            return goog.array.defaultCompare(G__7895, G__7896);
          }();
          if (0 === nsc) {
            var G__7897 = a.name;
            var G__7898 = b.name;
            return goog.array.defaultCompare(G__7897, G__7898);
          } else {
            return nsc;
          }
        }
      } else {
        var G__7899 = a.name;
        var G__7900 = b.name;
        return goog.array.defaultCompare(G__7899, G__7900);
      }
    }
  }
};
cljs.core.Keyword = function(ns, name, fqn, _hash) {
  this.ns = ns;
  this.name = name;
  this.fqn = fqn;
  this._hash = _hash;
  this.cljs$lang$protocol_mask$partition0$ = 2153775105;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Keyword.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return [cljs.core.str(":"), cljs.core.str(self__.fqn)].join("");
};
cljs.core.Keyword.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Keyword.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Keyword) {
    return self__.fqn === other.fqn;
  } else {
    return false;
  }
};
cljs.core.Keyword.prototype.call = function() {
  var G__7902 = null;
  var G__7902__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, kw);
  };
  var G__7902__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, kw, not_found);
  };
  G__7902 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__7902__2.call(this, self__, coll);
      case 3:
        return G__7902__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__7902.cljs$core$IFn$_invoke$arity$2 = G__7902__2;
  G__7902.cljs$core$IFn$_invoke$arity$3 = G__7902__3;
  return G__7902;
}();
cljs.core.Keyword.prototype.apply = function(self__, args7901) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args7901)));
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, kw);
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, kw, not_found);
};
cljs.core.Keyword.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var h__4725__auto__ = self__._hash;
  if (!(h__4725__auto__ == null)) {
    return h__4725__auto__;
  } else {
    var h__4725__auto____$1 = cljs.core.hash_keyword(this$__$1);
    self__._hash = h__4725__auto____$1;
    return h__4725__auto____$1;
  }
};
cljs.core.Keyword.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Keyword.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Keyword.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write(writer, [cljs.core.str(":"), cljs.core.str(self__.fqn)].join(""));
};
cljs.core.Keyword.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "ns", "ns", 2082130287, null), new cljs.core.Symbol(null, "name", "name", -810760592, null), new cljs.core.Symbol(null, "fqn", "fqn", -1749334463, null), new cljs.core.Symbol(null, "_hash", "_hash", -2130838312, null)], null);
};
cljs.core.Keyword.cljs$lang$type = true;
cljs.core.Keyword.cljs$lang$ctorStr = "cljs.core/Keyword";
cljs.core.Keyword.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/Keyword");
};
cljs.core.__GT_Keyword = function cljs$core$__GT_Keyword(ns, name, fqn, _hash) {
  return new cljs.core.Keyword(ns, name, fqn, _hash);
};
cljs.core.keyword_QMARK_ = function cljs$core$keyword_QMARK_(x) {
  return x instanceof cljs.core.Keyword;
};
cljs.core.keyword_identical_QMARK_ = function cljs$core$keyword_identical_QMARK_(x, y) {
  if (x === y) {
    return true;
  } else {
    if (x instanceof cljs.core.Keyword && y instanceof cljs.core.Keyword) {
      return x.fqn === y.fqn;
    } else {
      return false;
    }
  }
};
cljs.core.namespace = function cljs$core$namespace(x) {
  if (function() {
    var G__7904 = x;
    if (G__7904) {
      var bit__4976__auto__ = G__7904.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__4976__auto__ || G__7904.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return x.cljs$core$INamed$_namespace$arity$1(null);
  } else {
    throw new Error([cljs.core.str("Doesn't support namespace: "), cljs.core.str(x)].join(""));
  }
};
cljs.core.keyword = function cljs$core$keyword() {
  var G__7906 = arguments.length;
  switch(G__7906) {
    case 1:
      return cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.keyword.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.keyword.cljs$core$IFn$_invoke$arity$1 = function(name) {
  if (name instanceof cljs.core.Keyword) {
    return name;
  } else {
    if (name instanceof cljs.core.Symbol) {
      return new cljs.core.Keyword(cljs.core.namespace(name), function() {
        var G__7907 = name;
        return cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(G__7907) : cljs.core.name.call(null, G__7907);
      }(), name.str, null);
    } else {
      if (typeof name === "string") {
        var parts = name.split("/");
        if (parts.length === 2) {
          return new cljs.core.Keyword(parts[0], parts[1], name, null);
        } else {
          return new cljs.core.Keyword(null, parts[0], name, null);
        }
      } else {
        return null;
      }
    }
  }
};
cljs.core.keyword.cljs$core$IFn$_invoke$arity$2 = function(ns, name) {
  return new cljs.core.Keyword(ns, name, [cljs.core.str(cljs.core.truth_(ns) ? [cljs.core.str(ns), cljs.core.str("/")].join("") : null), cljs.core.str(name)].join(""), null);
};
cljs.core.keyword.cljs$lang$maxFixedArity = 2;
cljs.core.LazySeq = function(meta, fn, s, __hash) {
  this.meta = meta;
  this.fn = fn;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.LazySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.LazySeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.LazySeq.prototype.sval = function() {
  var self__ = this;
  var coll = this;
  if (self__.fn == null) {
    return self__.s;
  } else {
    self__.s = function() {
      return self__.fn.cljs$core$IFn$_invoke$arity$0 ? self__.fn.cljs$core$IFn$_invoke$arity$0() : self__.fn.call(null);
    }();
    self__.fn = null;
    return self__.s;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.LazySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq(coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.next(self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4725__auto__ = self__.__hash;
  if (!(h__4725__auto__ == null)) {
    return h__4725__auto__;
  } else {
    var h__4725__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4725__auto____$1;
    return h__4725__auto____$1;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.LazySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq(coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.first(self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq(coll__$1);
  if (!(self__.s == null)) {
    return cljs.core.rest(self__.s);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  coll__$1.sval();
  if (self__.s == null) {
    return null;
  } else {
    var ls = self__.s;
    while (true) {
      if (ls instanceof cljs.core.LazySeq) {
        var G__7909 = ls.sval();
        ls = G__7909;
        continue;
      } else {
        self__.s = ls;
        return cljs.core.seq(self__.s);
      }
      break;
    }
  }
};
cljs.core.LazySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.LazySeq(meta__$1, self__.fn, self__.s, self__.__hash);
};
cljs.core.LazySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.LazySeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "fn", "fn", 465265323, null), new cljs.core.Symbol(null, "s", "s", -948495851, null), new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null)], null);
};
cljs.core.LazySeq.cljs$lang$type = true;
cljs.core.LazySeq.cljs$lang$ctorStr = "cljs.core/LazySeq";
cljs.core.LazySeq.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/LazySeq");
};
cljs.core.__GT_LazySeq = function cljs$core$__GT_LazySeq(meta, fn, s, __hash) {
  return new cljs.core.LazySeq(meta, fn, s, __hash);
};
cljs.core.LazySeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5285__auto__ = this;
  return cljs.core.es6_iterator(this__5285__auto__);
};
cljs.core.ChunkBuffer = function(buf, end) {
  this.buf = buf;
  this.end = end;
  this.cljs$lang$protocol_mask$partition0$ = 2;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.ChunkBuffer.prototype.add = function(o) {
  var self__ = this;
  var _ = this;
  self__.buf[self__.end] = o;
  return self__.end = self__.end + 1;
};
cljs.core.ChunkBuffer.prototype.chunk = function(o) {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.ArrayChunk(self__.buf, 0, self__.end);
  self__.buf = null;
  return ret;
};
cljs.core.ChunkBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end;
};
cljs.core.ChunkBuffer.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "buf", "buf", 1426618187, null), new cljs.core.Symbol(null, "end", "end", 1372345569, null)], null);
};
cljs.core.ChunkBuffer.cljs$lang$type = true;
cljs.core.ChunkBuffer.cljs$lang$ctorStr = "cljs.core/ChunkBuffer";
cljs.core.ChunkBuffer.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/ChunkBuffer");
};
cljs.core.__GT_ChunkBuffer = function cljs$core$__GT_ChunkBuffer(buf, end) {
  return new cljs.core.ChunkBuffer(buf, end);
};
cljs.core.chunk_buffer = function cljs$core$chunk_buffer(capacity) {
  return new cljs.core.ChunkBuffer(new Array(capacity), 0);
};
cljs.core.ArrayChunk = function(arr, off, end) {
  this.arr = arr;
  this.off = off;
  this.end = end;
  this.cljs$lang$protocol_mask$partition0$ = 524306;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.ArrayChunk.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end - self__.off;
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, i) {
  var self__ = this;
  var coll__$1 = this;
  return self__.arr[self__.off + i];
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, i, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (i >= 0 && i < self__.end - self__.off) {
    return self__.arr[self__.off + i];
  } else {
    return not_found;
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$ = true;
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$_drop_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off === self__.end) {
    throw new Error("-drop-first of empty chunk");
  } else {
    return new cljs.core.ArrayChunk(self__.arr, self__.off + 1, self__.end);
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, self__.arr[self__.off], self__.off + 1);
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, start, self__.off);
};
cljs.core.ArrayChunk.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), new cljs.core.Symbol(null, "off", "off", -2047994980, null), new cljs.core.Symbol(null, "end", "end", 1372345569, null)], null);
};
cljs.core.ArrayChunk.cljs$lang$type = true;
cljs.core.ArrayChunk.cljs$lang$ctorStr = "cljs.core/ArrayChunk";
cljs.core.ArrayChunk.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/ArrayChunk");
};
cljs.core.__GT_ArrayChunk = function cljs$core$__GT_ArrayChunk(arr, off, end) {
  return new cljs.core.ArrayChunk(arr, off, end);
};
cljs.core.array_chunk = function cljs$core$array_chunk() {
  var G__7911 = arguments.length;
  switch(G__7911) {
    case 1:
      return cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$1 = function(arr) {
  return new cljs.core.ArrayChunk(arr, 0, arr.length);
};
cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$2 = function(arr, off) {
  return new cljs.core.ArrayChunk(arr, off, arr.length);
};
cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$3 = function(arr, off, end) {
  return new cljs.core.ArrayChunk(arr, off, end);
};
cljs.core.array_chunk.cljs$lang$maxFixedArity = 3;
cljs.core.ChunkedCons = function(chunk, more, meta, __hash) {
  this.chunk = chunk;
  this.more = more;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31850732;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedCons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ChunkedCons.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedCons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count(self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first(self__.chunk), self__.more, self__.meta, null);
  } else {
    var more__$1 = cljs.core._seq(self__.more);
    if (more__$1 == null) {
      return null;
    } else {
      return more__$1;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4725__auto__ = self__.__hash;
  if (!(h__4725__auto__ == null)) {
    return h__4725__auto__;
  } else {
    var h__4725__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4725__auto____$1;
    return h__4725__auto____$1;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.chunk, 0);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count(self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first(self__.chunk), self__.more, self__.meta, null);
  } else {
    if (self__.more == null) {
      return cljs.core.List.EMPTY;
    } else {
      return self__.more;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.chunk;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.more;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ChunkedCons(self__.chunk, self__.more, m, self__.__hash);
};
cljs.core.ChunkedCons.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons(o, this$__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return null;
  } else {
    return self__.more;
  }
};
cljs.core.ChunkedCons.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "chunk", "chunk", 449371907, null), new cljs.core.Symbol(null, "more", "more", -418290273, null), new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null)], null);
};
cljs.core.ChunkedCons.cljs$lang$type = true;
cljs.core.ChunkedCons.cljs$lang$ctorStr = "cljs.core/ChunkedCons";
cljs.core.ChunkedCons.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/ChunkedCons");
};
cljs.core.__GT_ChunkedCons = function cljs$core$__GT_ChunkedCons(chunk, more, meta, __hash) {
  return new cljs.core.ChunkedCons(chunk, more, meta, __hash);
};
cljs.core.ChunkedCons.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5285__auto__ = this;
  return cljs.core.es6_iterator(this__5285__auto__);
};
cljs.core.chunk_cons = function cljs$core$chunk_cons(chunk, rest) {
  if (cljs.core._count(chunk) === 0) {
    return rest;
  } else {
    return new cljs.core.ChunkedCons(chunk, rest, null, null);
  }
};
cljs.core.chunk_append = function cljs$core$chunk_append(b, x) {
  return b.add(x);
};
cljs.core.chunk = function cljs$core$chunk(b) {
  return b.chunk();
};
cljs.core.chunk_first = function cljs$core$chunk_first(s) {
  return cljs.core._chunked_first(s);
};
cljs.core.chunk_rest = function cljs$core$chunk_rest(s) {
  return cljs.core._chunked_rest(s);
};
cljs.core.chunk_next = function cljs$core$chunk_next(s) {
  if (function() {
    var G__7914 = s;
    if (G__7914) {
      var bit__4976__auto__ = G__7914.cljs$lang$protocol_mask$partition1$ & 1024;
      if (bit__4976__auto__ || G__7914.cljs$core$IChunkedNext$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._chunked_next(s);
  } else {
    return cljs.core.seq(cljs.core._chunked_rest(s));
  }
};
cljs.core.to_array = function cljs$core$to_array(s) {
  var ary = [];
  var s__$1 = s;
  while (true) {
    if (cljs.core.seq(s__$1)) {
      ary.push(cljs.core.first(s__$1));
      var G__7915 = cljs.core.next(s__$1);
      s__$1 = G__7915;
      continue;
    } else {
      return ary;
    }
    break;
  }
};
cljs.core.to_array_2d = function cljs$core$to_array_2d(coll) {
  var ret = new Array(cljs.core.count(coll));
  var i_7916 = 0;
  var xs_7917 = cljs.core.seq(coll);
  while (true) {
    if (xs_7917) {
      ret[i_7916] = cljs.core.to_array(cljs.core.first(xs_7917));
      var G__7918 = i_7916 + 1;
      var G__7919 = cljs.core.next(xs_7917);
      i_7916 = G__7918;
      xs_7917 = G__7919;
      continue;
    } else {
    }
    break;
  }
  return ret;
};
cljs.core.int_array = function cljs$core$int_array() {
  var G__7921 = arguments.length;
  switch(G__7921) {
    case 1:
      return cljs.core.int_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.int_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.int_array.cljs$core$IFn$_invoke$arity$1 = function(size_or_seq) {
  if (typeof size_or_seq === "number") {
    return cljs.core.int_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
  } else {
    return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
  }
};
cljs.core.int_array.cljs$core$IFn$_invoke$arity$2 = function(size, init_val_or_seq) {
  var a = new Array(size);
  if (cljs.core.seq_QMARK_(init_val_or_seq)) {
    var s = cljs.core.seq(init_val_or_seq);
    var i = 0;
    var s__$1 = s;
    while (true) {
      if (s__$1 && i < size) {
        a[i] = cljs.core.first(s__$1);
        var G__7923 = i + 1;
        var G__7924 = cljs.core.next(s__$1);
        i = G__7923;
        s__$1 = G__7924;
        continue;
      } else {
        return a;
      }
      break;
    }
  } else {
    var n__5194__auto___7925 = size;
    var i_7926 = 0;
    while (true) {
      if (i_7926 < n__5194__auto___7925) {
        a[i_7926] = init_val_or_seq;
        var G__7927 = i_7926 + 1;
        i_7926 = G__7927;
        continue;
      } else {
      }
      break;
    }
    return a;
  }
};
cljs.core.int_array.cljs$lang$maxFixedArity = 2;
cljs.core.long_array = function cljs$core$long_array() {
  var G__7929 = arguments.length;
  switch(G__7929) {
    case 1:
      return cljs.core.long_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.long_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.long_array.cljs$core$IFn$_invoke$arity$1 = function(size_or_seq) {
  if (typeof size_or_seq === "number") {
    return cljs.core.long_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
  } else {
    return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
  }
};
cljs.core.long_array.cljs$core$IFn$_invoke$arity$2 = function(size, init_val_or_seq) {
  var a = new Array(size);
  if (cljs.core.seq_QMARK_(init_val_or_seq)) {
    var s = cljs.core.seq(init_val_or_seq);
    var i = 0;
    var s__$1 = s;
    while (true) {
      if (s__$1 && i < size) {
        a[i] = cljs.core.first(s__$1);
        var G__7931 = i + 1;
        var G__7932 = cljs.core.next(s__$1);
        i = G__7931;
        s__$1 = G__7932;
        continue;
      } else {
        return a;
      }
      break;
    }
  } else {
    var n__5194__auto___7933 = size;
    var i_7934 = 0;
    while (true) {
      if (i_7934 < n__5194__auto___7933) {
        a[i_7934] = init_val_or_seq;
        var G__7935 = i_7934 + 1;
        i_7934 = G__7935;
        continue;
      } else {
      }
      break;
    }
    return a;
  }
};
cljs.core.long_array.cljs$lang$maxFixedArity = 2;
cljs.core.double_array = function cljs$core$double_array() {
  var G__7937 = arguments.length;
  switch(G__7937) {
    case 1:
      return cljs.core.double_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.double_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.double_array.cljs$core$IFn$_invoke$arity$1 = function(size_or_seq) {
  if (typeof size_or_seq === "number") {
    return cljs.core.double_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
  } else {
    return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
  }
};
cljs.core.double_array.cljs$core$IFn$_invoke$arity$2 = function(size, init_val_or_seq) {
  var a = new Array(size);
  if (cljs.core.seq_QMARK_(init_val_or_seq)) {
    var s = cljs.core.seq(init_val_or_seq);
    var i = 0;
    var s__$1 = s;
    while (true) {
      if (s__$1 && i < size) {
        a[i] = cljs.core.first(s__$1);
        var G__7939 = i + 1;
        var G__7940 = cljs.core.next(s__$1);
        i = G__7939;
        s__$1 = G__7940;
        continue;
      } else {
        return a;
      }
      break;
    }
  } else {
    var n__5194__auto___7941 = size;
    var i_7942 = 0;
    while (true) {
      if (i_7942 < n__5194__auto___7941) {
        a[i_7942] = init_val_or_seq;
        var G__7943 = i_7942 + 1;
        i_7942 = G__7943;
        continue;
      } else {
      }
      break;
    }
    return a;
  }
};
cljs.core.double_array.cljs$lang$maxFixedArity = 2;
cljs.core.object_array = function cljs$core$object_array() {
  var G__7945 = arguments.length;
  switch(G__7945) {
    case 1:
      return cljs.core.object_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.object_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.object_array.cljs$core$IFn$_invoke$arity$1 = function(size_or_seq) {
  if (typeof size_or_seq === "number") {
    return cljs.core.object_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
  } else {
    return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
  }
};
cljs.core.object_array.cljs$core$IFn$_invoke$arity$2 = function(size, init_val_or_seq) {
  var a = new Array(size);
  if (cljs.core.seq_QMARK_(init_val_or_seq)) {
    var s = cljs.core.seq(init_val_or_seq);
    var i = 0;
    var s__$1 = s;
    while (true) {
      if (s__$1 && i < size) {
        a[i] = cljs.core.first(s__$1);
        var G__7947 = i + 1;
        var G__7948 = cljs.core.next(s__$1);
        i = G__7947;
        s__$1 = G__7948;
        continue;
      } else {
        return a;
      }
      break;
    }
  } else {
    var n__5194__auto___7949 = size;
    var i_7950 = 0;
    while (true) {
      if (i_7950 < n__5194__auto___7949) {
        a[i_7950] = init_val_or_seq;
        var G__7951 = i_7950 + 1;
        i_7950 = G__7951;
        continue;
      } else {
      }
      break;
    }
    return a;
  }
};
cljs.core.object_array.cljs$lang$maxFixedArity = 2;
cljs.core.bounded_count = function cljs$core$bounded_count(s, n) {
  if (cljs.core.counted_QMARK_(s)) {
    return cljs.core.count(s);
  } else {
    var s__$1 = s;
    var i = n;
    var sum = 0;
    while (true) {
      if (i > 0 && cljs.core.seq(s__$1)) {
        var G__7952 = cljs.core.next(s__$1);
        var G__7953 = i - 1;
        var G__7954 = sum + 1;
        s__$1 = G__7952;
        i = G__7953;
        sum = G__7954;
        continue;
      } else {
        return sum;
      }
      break;
    }
  }
};
cljs.core.spread = function cljs$core$spread(arglist) {
  if (arglist == null) {
    return null;
  } else {
    if (cljs.core.next(arglist) == null) {
      return cljs.core.seq(cljs.core.first(arglist));
    } else {
      return cljs.core.cons(cljs.core.first(arglist), cljs$core$spread(cljs.core.next(arglist)));
    }
  }
};
cljs.core.concat = function cljs$core$concat() {
  var G__7960 = arguments.length;
  switch(G__7960) {
    case 0:
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5360__auto__);
  }
};
cljs.core.concat.cljs$core$IFn$_invoke$arity$0 = function() {
  return new cljs.core.LazySeq(null, function() {
    return null;
  }, null, null);
};
cljs.core.concat.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return new cljs.core.LazySeq(null, function() {
    return x;
  }, null, null);
};
cljs.core.concat.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return new cljs.core.LazySeq(null, function() {
    var s = cljs.core.seq(x);
    if (s) {
      if (cljs.core.chunked_seq_QMARK_(s)) {
        return cljs.core.chunk_cons(cljs.core.chunk_first(s), cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.chunk_rest(s), y));
      } else {
        return cljs.core.cons(cljs.core.first(s), cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.rest(s), y));
      }
    } else {
      return y;
    }
  }, null, null);
};
cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic = function(x, y, zs) {
  var cat = function cljs$core$cat(xys, zs__$1) {
    return new cljs.core.LazySeq(null, function() {
      var xys__$1 = cljs.core.seq(xys);
      if (xys__$1) {
        if (cljs.core.chunked_seq_QMARK_(xys__$1)) {
          return cljs.core.chunk_cons(cljs.core.chunk_first(xys__$1), cljs$core$cat(cljs.core.chunk_rest(xys__$1), zs__$1));
        } else {
          return cljs.core.cons(cljs.core.first(xys__$1), cljs$core$cat(cljs.core.rest(xys__$1), zs__$1));
        }
      } else {
        if (cljs.core.truth_(zs__$1)) {
          return cljs$core$cat(cljs.core.first(zs__$1), cljs.core.next(zs__$1));
        } else {
          return null;
        }
      }
    }, null, null);
  };
  return cat(cljs.core.concat.cljs$core$IFn$_invoke$arity$2(x, y), zs);
};
cljs.core.concat.cljs$lang$applyTo = function(seq7956) {
  var G__7957 = cljs.core.first(seq7956);
  var seq7956__$1 = cljs.core.next(seq7956);
  var G__7958 = cljs.core.first(seq7956__$1);
  var seq7956__$2 = cljs.core.next(seq7956__$1);
  return cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(G__7957, G__7958, seq7956__$2);
};
cljs.core.concat.cljs$lang$maxFixedArity = 2;
cljs.core.list_STAR_ = function cljs$core$list_STAR_() {
  var G__7974 = arguments.length;
  switch(G__7974) {
    case 1:
      return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 4), 0);
      return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__5360__auto__);
  }
};
cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$1 = function(args) {
  return cljs.core.seq(args);
};
cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$2 = function(a, args) {
  return cljs.core.cons(a, args);
};
cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$3 = function(a, b, args) {
  return cljs.core.cons(a, cljs.core.cons(b, args));
};
cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, args) {
  return cljs.core.cons(a, cljs.core.cons(b, cljs.core.cons(c, args)));
};
cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$variadic = function(a, b, c, d, more) {
  return cljs.core.cons(a, cljs.core.cons(b, cljs.core.cons(c, cljs.core.cons(d, cljs.core.spread(more)))));
};
cljs.core.list_STAR_.cljs$lang$applyTo = function(seq7968) {
  var G__7969 = cljs.core.first(seq7968);
  var seq7968__$1 = cljs.core.next(seq7968);
  var G__7970 = cljs.core.first(seq7968__$1);
  var seq7968__$2 = cljs.core.next(seq7968__$1);
  var G__7971 = cljs.core.first(seq7968__$2);
  var seq7968__$3 = cljs.core.next(seq7968__$2);
  var G__7972 = cljs.core.first(seq7968__$3);
  var seq7968__$4 = cljs.core.next(seq7968__$3);
  return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$variadic(G__7969, G__7970, G__7971, G__7972, seq7968__$4);
};
cljs.core.list_STAR_.cljs$lang$maxFixedArity = 4;
cljs.core.transient$ = function cljs$core$transient(coll) {
  return cljs.core._as_transient(coll);
};
cljs.core.persistent_BANG_ = function cljs$core$persistent_BANG_(tcoll) {
  return cljs.core._persistent_BANG_(tcoll);
};
cljs.core.conj_BANG_ = function cljs$core$conj_BANG_() {
  var G__7980 = arguments.length;
  switch(G__7980) {
    case 0:
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5360__auto__);
  }
};
cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.transient$(cljs.core.PersistentVector.EMPTY);
};
cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return coll;
};
cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2 = function(tcoll, val) {
  return cljs.core._conj_BANG_(tcoll, val);
};
cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(tcoll, val, vals) {
  while (true) {
    var ntcoll = cljs.core._conj_BANG_(tcoll, val);
    if (cljs.core.truth_(vals)) {
      var G__7982 = ntcoll;
      var G__7983 = cljs.core.first(vals);
      var G__7984 = cljs.core.next(vals);
      tcoll = G__7982;
      val = G__7983;
      vals = G__7984;
      continue;
    } else {
      return ntcoll;
    }
    break;
  }
};
cljs.core.conj_BANG_.cljs$lang$applyTo = function(seq7976) {
  var G__7977 = cljs.core.first(seq7976);
  var seq7976__$1 = cljs.core.next(seq7976);
  var G__7978 = cljs.core.first(seq7976__$1);
  var seq7976__$2 = cljs.core.next(seq7976__$1);
  return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__7977, G__7978, seq7976__$2);
};
cljs.core.conj_BANG_.cljs$lang$maxFixedArity = 2;
cljs.core.assoc_BANG_ = function cljs$core$assoc_BANG_() {
  var G__7990 = arguments.length;
  switch(G__7990) {
    case 3:
      return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 3), 0);
      return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5360__auto__);
  }
};
cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3 = function(tcoll, key, val) {
  return cljs.core._assoc_BANG_(tcoll, key, val);
};
cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(tcoll, key, val, kvs) {
  while (true) {
    var ntcoll = cljs.core._assoc_BANG_(tcoll, key, val);
    if (cljs.core.truth_(kvs)) {
      var G__7992 = ntcoll;
      var G__7993 = cljs.core.first(kvs);
      var G__7994 = cljs.core.second(kvs);
      var G__7995 = cljs.core.nnext(kvs);
      tcoll = G__7992;
      key = G__7993;
      val = G__7994;
      kvs = G__7995;
      continue;
    } else {
      return ntcoll;
    }
    break;
  }
};
cljs.core.assoc_BANG_.cljs$lang$applyTo = function(seq7985) {
  var G__7986 = cljs.core.first(seq7985);
  var seq7985__$1 = cljs.core.next(seq7985);
  var G__7987 = cljs.core.first(seq7985__$1);
  var seq7985__$2 = cljs.core.next(seq7985__$1);
  var G__7988 = cljs.core.first(seq7985__$2);
  var seq7985__$3 = cljs.core.next(seq7985__$2);
  return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__7986, G__7987, G__7988, seq7985__$3);
};
cljs.core.assoc_BANG_.cljs$lang$maxFixedArity = 3;
cljs.core.dissoc_BANG_ = function cljs$core$dissoc_BANG_() {
  var G__8000 = arguments.length;
  switch(G__8000) {
    case 2:
      return cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5360__auto__);
  }
};
cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$2 = function(tcoll, key) {
  return cljs.core._dissoc_BANG_(tcoll, key);
};
cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(tcoll, key, ks) {
  while (true) {
    var ntcoll = cljs.core._dissoc_BANG_(tcoll, key);
    if (cljs.core.truth_(ks)) {
      var G__8002 = ntcoll;
      var G__8003 = cljs.core.first(ks);
      var G__8004 = cljs.core.next(ks);
      tcoll = G__8002;
      key = G__8003;
      ks = G__8004;
      continue;
    } else {
      return ntcoll;
    }
    break;
  }
};
cljs.core.dissoc_BANG_.cljs$lang$applyTo = function(seq7996) {
  var G__7997 = cljs.core.first(seq7996);
  var seq7996__$1 = cljs.core.next(seq7996);
  var G__7998 = cljs.core.first(seq7996__$1);
  var seq7996__$2 = cljs.core.next(seq7996__$1);
  return cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__7997, G__7998, seq7996__$2);
};
cljs.core.dissoc_BANG_.cljs$lang$maxFixedArity = 2;
cljs.core.pop_BANG_ = function cljs$core$pop_BANG_(tcoll) {
  return cljs.core._pop_BANG_(tcoll);
};
cljs.core.disj_BANG_ = function cljs$core$disj_BANG_() {
  var G__8009 = arguments.length;
  switch(G__8009) {
    case 2:
      return cljs.core.disj_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.disj_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5360__auto__);
  }
};
cljs.core.disj_BANG_.cljs$core$IFn$_invoke$arity$2 = function(tcoll, val) {
  return cljs.core._disjoin_BANG_(tcoll, val);
};
cljs.core.disj_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(tcoll, val, vals) {
  while (true) {
    var ntcoll = cljs.core._disjoin_BANG_(tcoll, val);
    if (cljs.core.truth_(vals)) {
      var G__8011 = ntcoll;
      var G__8012 = cljs.core.first(vals);
      var G__8013 = cljs.core.next(vals);
      tcoll = G__8011;
      val = G__8012;
      vals = G__8013;
      continue;
    } else {
      return ntcoll;
    }
    break;
  }
};
cljs.core.disj_BANG_.cljs$lang$applyTo = function(seq8005) {
  var G__8006 = cljs.core.first(seq8005);
  var seq8005__$1 = cljs.core.next(seq8005);
  var G__8007 = cljs.core.first(seq8005__$1);
  var seq8005__$2 = cljs.core.next(seq8005__$1);
  return cljs.core.disj_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__8006, G__8007, seq8005__$2);
};
cljs.core.disj_BANG_.cljs$lang$maxFixedArity = 2;
cljs.core.apply_to = function cljs$core$apply_to(f, argc, args) {
  var args__$1 = cljs.core.seq(args);
  if (argc === 0) {
    return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
  } else {
    var a5238 = cljs.core._first(args__$1);
    var args__$2 = cljs.core._rest(args__$1);
    if (argc === 1) {
      if (f.cljs$core$IFn$_invoke$arity$1) {
        return f.cljs$core$IFn$_invoke$arity$1(a5238);
      } else {
        var G__8224 = a5238;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__8224) : f.call(null, G__8224);
      }
    } else {
      var b5239 = cljs.core._first(args__$2);
      var args__$3 = cljs.core._rest(args__$2);
      if (argc === 2) {
        if (f.cljs$core$IFn$_invoke$arity$2) {
          return f.cljs$core$IFn$_invoke$arity$2(a5238, b5239);
        } else {
          var G__8225 = a5238;
          var G__8226 = b5239;
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8225, G__8226) : f.call(null, G__8225, G__8226);
        }
      } else {
        var c5240 = cljs.core._first(args__$3);
        var args__$4 = cljs.core._rest(args__$3);
        if (argc === 3) {
          if (f.cljs$core$IFn$_invoke$arity$3) {
            return f.cljs$core$IFn$_invoke$arity$3(a5238, b5239, c5240);
          } else {
            var G__8227 = a5238;
            var G__8228 = b5239;
            var G__8229 = c5240;
            return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__8227, G__8228, G__8229) : f.call(null, G__8227, G__8228, G__8229);
          }
        } else {
          var d5241 = cljs.core._first(args__$4);
          var args__$5 = cljs.core._rest(args__$4);
          if (argc === 4) {
            if (f.cljs$core$IFn$_invoke$arity$4) {
              return f.cljs$core$IFn$_invoke$arity$4(a5238, b5239, c5240, d5241);
            } else {
              var G__8230 = a5238;
              var G__8231 = b5239;
              var G__8232 = c5240;
              var G__8233 = d5241;
              return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__8230, G__8231, G__8232, G__8233) : f.call(null, G__8230, G__8231, G__8232, G__8233);
            }
          } else {
            var e5242 = cljs.core._first(args__$5);
            var args__$6 = cljs.core._rest(args__$5);
            if (argc === 5) {
              if (f.cljs$core$IFn$_invoke$arity$5) {
                return f.cljs$core$IFn$_invoke$arity$5(a5238, b5239, c5240, d5241, e5242);
              } else {
                var G__8234 = a5238;
                var G__8235 = b5239;
                var G__8236 = c5240;
                var G__8237 = d5241;
                var G__8238 = e5242;
                return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(G__8234, G__8235, G__8236, G__8237, G__8238) : f.call(null, G__8234, G__8235, G__8236, G__8237, G__8238);
              }
            } else {
              var f5243 = cljs.core._first(args__$6);
              var args__$7 = cljs.core._rest(args__$6);
              if (argc === 6) {
                if (f.cljs$core$IFn$_invoke$arity$6) {
                  return f.cljs$core$IFn$_invoke$arity$6(a5238, b5239, c5240, d5241, e5242, f5243);
                } else {
                  var G__8239 = a5238;
                  var G__8240 = b5239;
                  var G__8241 = c5240;
                  var G__8242 = d5241;
                  var G__8243 = e5242;
                  var G__8244 = f5243;
                  return f.cljs$core$IFn$_invoke$arity$6 ? f.cljs$core$IFn$_invoke$arity$6(G__8239, G__8240, G__8241, G__8242, G__8243, G__8244) : f.call(null, G__8239, G__8240, G__8241, G__8242, G__8243, G__8244);
                }
              } else {
                var g5244 = cljs.core._first(args__$7);
                var args__$8 = cljs.core._rest(args__$7);
                if (argc === 7) {
                  if (f.cljs$core$IFn$_invoke$arity$7) {
                    return f.cljs$core$IFn$_invoke$arity$7(a5238, b5239, c5240, d5241, e5242, f5243, g5244);
                  } else {
                    var G__8245 = a5238;
                    var G__8246 = b5239;
                    var G__8247 = c5240;
                    var G__8248 = d5241;
                    var G__8249 = e5242;
                    var G__8250 = f5243;
                    var G__8251 = g5244;
                    return f.cljs$core$IFn$_invoke$arity$7 ? f.cljs$core$IFn$_invoke$arity$7(G__8245, G__8246, G__8247, G__8248, G__8249, G__8250, G__8251) : f.call(null, G__8245, G__8246, G__8247, G__8248, G__8249, G__8250, G__8251);
                  }
                } else {
                  var h5245 = cljs.core._first(args__$8);
                  var args__$9 = cljs.core._rest(args__$8);
                  if (argc === 8) {
                    if (f.cljs$core$IFn$_invoke$arity$8) {
                      return f.cljs$core$IFn$_invoke$arity$8(a5238, b5239, c5240, d5241, e5242, f5243, g5244, h5245);
                    } else {
                      var G__8252 = a5238;
                      var G__8253 = b5239;
                      var G__8254 = c5240;
                      var G__8255 = d5241;
                      var G__8256 = e5242;
                      var G__8257 = f5243;
                      var G__8258 = g5244;
                      var G__8259 = h5245;
                      return f.cljs$core$IFn$_invoke$arity$8 ? f.cljs$core$IFn$_invoke$arity$8(G__8252, G__8253, G__8254, G__8255, G__8256, G__8257, G__8258, G__8259) : f.call(null, G__8252, G__8253, G__8254, G__8255, G__8256, G__8257, G__8258, G__8259);
                    }
                  } else {
                    var i5246 = cljs.core._first(args__$9);
                    var args__$10 = cljs.core._rest(args__$9);
                    if (argc === 9) {
                      if (f.cljs$core$IFn$_invoke$arity$9) {
                        return f.cljs$core$IFn$_invoke$arity$9(a5238, b5239, c5240, d5241, e5242, f5243, g5244, h5245, i5246);
                      } else {
                        var G__8260 = a5238;
                        var G__8261 = b5239;
                        var G__8262 = c5240;
                        var G__8263 = d5241;
                        var G__8264 = e5242;
                        var G__8265 = f5243;
                        var G__8266 = g5244;
                        var G__8267 = h5245;
                        var G__8268 = i5246;
                        return f.cljs$core$IFn$_invoke$arity$9 ? f.cljs$core$IFn$_invoke$arity$9(G__8260, G__8261, G__8262, G__8263, G__8264, G__8265, G__8266, G__8267, G__8268) : f.call(null, G__8260, G__8261, G__8262, G__8263, G__8264, G__8265, G__8266, G__8267, G__8268);
                      }
                    } else {
                      var j5247 = cljs.core._first(args__$10);
                      var args__$11 = cljs.core._rest(args__$10);
                      if (argc === 10) {
                        if (f.cljs$core$IFn$_invoke$arity$10) {
                          return f.cljs$core$IFn$_invoke$arity$10(a5238, b5239, c5240, d5241, e5242, f5243, g5244, h5245, i5246, j5247);
                        } else {
                          var G__8269 = a5238;
                          var G__8270 = b5239;
                          var G__8271 = c5240;
                          var G__8272 = d5241;
                          var G__8273 = e5242;
                          var G__8274 = f5243;
                          var G__8275 = g5244;
                          var G__8276 = h5245;
                          var G__8277 = i5246;
                          var G__8278 = j5247;
                          return f.cljs$core$IFn$_invoke$arity$10 ? f.cljs$core$IFn$_invoke$arity$10(G__8269, G__8270, G__8271, G__8272, G__8273, G__8274, G__8275, G__8276, G__8277, G__8278) : f.call(null, G__8269, G__8270, G__8271, G__8272, G__8273, G__8274, G__8275, G__8276, G__8277, G__8278);
                        }
                      } else {
                        var k5248 = cljs.core._first(args__$11);
                        var args__$12 = cljs.core._rest(args__$11);
                        if (argc === 11) {
                          if (f.cljs$core$IFn$_invoke$arity$11) {
                            return f.cljs$core$IFn$_invoke$arity$11(a5238, b5239, c5240, d5241, e5242, f5243, g5244, h5245, i5246, j5247, k5248);
                          } else {
                            var G__8279 = a5238;
                            var G__8280 = b5239;
                            var G__8281 = c5240;
                            var G__8282 = d5241;
                            var G__8283 = e5242;
                            var G__8284 = f5243;
                            var G__8285 = g5244;
                            var G__8286 = h5245;
                            var G__8287 = i5246;
                            var G__8288 = j5247;
                            var G__8289 = k5248;
                            return f.cljs$core$IFn$_invoke$arity$11 ? f.cljs$core$IFn$_invoke$arity$11(G__8279, G__8280, G__8281, G__8282, G__8283, G__8284, G__8285, G__8286, G__8287, G__8288, G__8289) : f.call(null, G__8279, G__8280, G__8281, G__8282, G__8283, G__8284, G__8285, G__8286, G__8287, G__8288, G__8289);
                          }
                        } else {
                          var l5249 = cljs.core._first(args__$12);
                          var args__$13 = cljs.core._rest(args__$12);
                          if (argc === 12) {
                            if (f.cljs$core$IFn$_invoke$arity$12) {
                              return f.cljs$core$IFn$_invoke$arity$12(a5238, b5239, c5240, d5241, e5242, f5243, g5244, h5245, i5246, j5247, k5248, l5249);
                            } else {
                              var G__8290 = a5238;
                              var G__8291 = b5239;
                              var G__8292 = c5240;
                              var G__8293 = d5241;
                              var G__8294 = e5242;
                              var G__8295 = f5243;
                              var G__8296 = g5244;
                              var G__8297 = h5245;
                              var G__8298 = i5246;
                              var G__8299 = j5247;
                              var G__8300 = k5248;
                              var G__8301 = l5249;
                              return f.cljs$core$IFn$_invoke$arity$12 ? f.cljs$core$IFn$_invoke$arity$12(G__8290, G__8291, G__8292, G__8293, G__8294, G__8295, G__8296, G__8297, G__8298, G__8299, G__8300, G__8301) : f.call(null, G__8290, G__8291, G__8292, G__8293, G__8294, G__8295, G__8296, G__8297, G__8298, G__8299, G__8300, G__8301);
                            }
                          } else {
                            var m5250 = cljs.core._first(args__$13);
                            var args__$14 = cljs.core._rest(args__$13);
                            if (argc === 13) {
                              if (f.cljs$core$IFn$_invoke$arity$13) {
                                return f.cljs$core$IFn$_invoke$arity$13(a5238, b5239, c5240, d5241, e5242, f5243, g5244, h5245, i5246, j5247, k5248, l5249, m5250);
                              } else {
                                var G__8302 = a5238;
                                var G__8303 = b5239;
                                var G__8304 = c5240;
                                var G__8305 = d5241;
                                var G__8306 = e5242;
                                var G__8307 = f5243;
                                var G__8308 = g5244;
                                var G__8309 = h5245;
                                var G__8310 = i5246;
                                var G__8311 = j5247;
                                var G__8312 = k5248;
                                var G__8313 = l5249;
                                var G__8314 = m5250;
                                return f.cljs$core$IFn$_invoke$arity$13 ? f.cljs$core$IFn$_invoke$arity$13(G__8302, G__8303, G__8304, G__8305, G__8306, G__8307, G__8308, G__8309, G__8310, G__8311, G__8312, G__8313, G__8314) : f.call(null, G__8302, G__8303, G__8304, G__8305, G__8306, G__8307, G__8308, G__8309, G__8310, G__8311, G__8312, G__8313, G__8314);
                              }
                            } else {
                              var n5251 = cljs.core._first(args__$14);
                              var args__$15 = cljs.core._rest(args__$14);
                              if (argc === 14) {
                                if (f.cljs$core$IFn$_invoke$arity$14) {
                                  return f.cljs$core$IFn$_invoke$arity$14(a5238, b5239, c5240, d5241, e5242, f5243, g5244, h5245, i5246, j5247, k5248, l5249, m5250, n5251);
                                } else {
                                  var G__8315 = a5238;
                                  var G__8316 = b5239;
                                  var G__8317 = c5240;
                                  var G__8318 = d5241;
                                  var G__8319 = e5242;
                                  var G__8320 = f5243;
                                  var G__8321 = g5244;
                                  var G__8322 = h5245;
                                  var G__8323 = i5246;
                                  var G__8324 = j5247;
                                  var G__8325 = k5248;
                                  var G__8326 = l5249;
                                  var G__8327 = m5250;
                                  var G__8328 = n5251;
                                  return f.cljs$core$IFn$_invoke$arity$14 ? f.cljs$core$IFn$_invoke$arity$14(G__8315, G__8316, G__8317, G__8318, G__8319, G__8320, G__8321, G__8322, G__8323, G__8324, G__8325, G__8326, G__8327, G__8328) : f.call(null, G__8315, G__8316, G__8317, G__8318, G__8319, G__8320, G__8321, G__8322, G__8323, G__8324, G__8325, G__8326, G__8327, G__8328);
                                }
                              } else {
                                var o5252 = cljs.core._first(args__$15);
                                var args__$16 = cljs.core._rest(args__$15);
                                if (argc === 15) {
                                  if (f.cljs$core$IFn$_invoke$arity$15) {
                                    return f.cljs$core$IFn$_invoke$arity$15(a5238, b5239, c5240, d5241, e5242, f5243, g5244, h5245, i5246, j5247, k5248, l5249, m5250, n5251, o5252);
                                  } else {
                                    var G__8329 = a5238;
                                    var G__8330 = b5239;
                                    var G__8331 = c5240;
                                    var G__8332 = d5241;
                                    var G__8333 = e5242;
                                    var G__8334 = f5243;
                                    var G__8335 = g5244;
                                    var G__8336 = h5245;
                                    var G__8337 = i5246;
                                    var G__8338 = j5247;
                                    var G__8339 = k5248;
                                    var G__8340 = l5249;
                                    var G__8341 = m5250;
                                    var G__8342 = n5251;
                                    var G__8343 = o5252;
                                    return f.cljs$core$IFn$_invoke$arity$15 ? f.cljs$core$IFn$_invoke$arity$15(G__8329, G__8330, G__8331, G__8332, G__8333, G__8334, G__8335, G__8336, G__8337, G__8338, G__8339, G__8340, G__8341, G__8342, G__8343) : f.call(null, G__8329, G__8330, G__8331, G__8332, G__8333, G__8334, G__8335, G__8336, G__8337, G__8338, G__8339, G__8340, G__8341, G__8342, G__8343);
                                  }
                                } else {
                                  var p5253 = cljs.core._first(args__$16);
                                  var args__$17 = cljs.core._rest(args__$16);
                                  if (argc === 16) {
                                    if (f.cljs$core$IFn$_invoke$arity$16) {
                                      return f.cljs$core$IFn$_invoke$arity$16(a5238, b5239, c5240, d5241, e5242, f5243, g5244, h5245, i5246, j5247, k5248, l5249, m5250, n5251, o5252, p5253);
                                    } else {
                                      var G__8344 = a5238;
                                      var G__8345 = b5239;
                                      var G__8346 = c5240;
                                      var G__8347 = d5241;
                                      var G__8348 = e5242;
                                      var G__8349 = f5243;
                                      var G__8350 = g5244;
                                      var G__8351 = h5245;
                                      var G__8352 = i5246;
                                      var G__8353 = j5247;
                                      var G__8354 = k5248;
                                      var G__8355 = l5249;
                                      var G__8356 = m5250;
                                      var G__8357 = n5251;
                                      var G__8358 = o5252;
                                      var G__8359 = p5253;
                                      return f.cljs$core$IFn$_invoke$arity$16 ? f.cljs$core$IFn$_invoke$arity$16(G__8344, G__8345, G__8346, G__8347, G__8348, G__8349, G__8350, G__8351, G__8352, G__8353, G__8354, G__8355, G__8356, G__8357, G__8358, G__8359) : f.call(null, G__8344, G__8345, G__8346, G__8347, G__8348, G__8349, G__8350, G__8351, G__8352, G__8353, G__8354, G__8355, G__8356, G__8357, G__8358, G__8359);
                                    }
                                  } else {
                                    var q5254 = cljs.core._first(args__$17);
                                    var args__$18 = cljs.core._rest(args__$17);
                                    if (argc === 17) {
                                      if (f.cljs$core$IFn$_invoke$arity$17) {
                                        return f.cljs$core$IFn$_invoke$arity$17(a5238, b5239, c5240, d5241, e5242, f5243, g5244, h5245, i5246, j5247, k5248, l5249, m5250, n5251, o5252, p5253, q5254);
                                      } else {
                                        var G__8360 = a5238;
                                        var G__8361 = b5239;
                                        var G__8362 = c5240;
                                        var G__8363 = d5241;
                                        var G__8364 = e5242;
                                        var G__8365 = f5243;
                                        var G__8366 = g5244;
                                        var G__8367 = h5245;
                                        var G__8368 = i5246;
                                        var G__8369 = j5247;
                                        var G__8370 = k5248;
                                        var G__8371 = l5249;
                                        var G__8372 = m5250;
                                        var G__8373 = n5251;
                                        var G__8374 = o5252;
                                        var G__8375 = p5253;
                                        var G__8376 = q5254;
                                        return f.cljs$core$IFn$_invoke$arity$17 ? f.cljs$core$IFn$_invoke$arity$17(G__8360, G__8361, G__8362, G__8363, G__8364, G__8365, G__8366, G__8367, G__8368, G__8369, G__8370, G__8371, G__8372, G__8373, G__8374, G__8375, G__8376) : f.call(null, G__8360, G__8361, G__8362, G__8363, G__8364, G__8365, G__8366, G__8367, G__8368, G__8369, G__8370, G__8371, G__8372, G__8373, G__8374, G__8375, G__8376);
                                      }
                                    } else {
                                      var r5255 = cljs.core._first(args__$18);
                                      var args__$19 = cljs.core._rest(args__$18);
                                      if (argc === 18) {
                                        if (f.cljs$core$IFn$_invoke$arity$18) {
                                          return f.cljs$core$IFn$_invoke$arity$18(a5238, b5239, c5240, d5241, e5242, f5243, g5244, h5245, i5246, j5247, k5248, l5249, m5250, n5251, o5252, p5253, q5254, r5255);
                                        } else {
                                          var G__8377 = a5238;
                                          var G__8378 = b5239;
                                          var G__8379 = c5240;
                                          var G__8380 = d5241;
                                          var G__8381 = e5242;
                                          var G__8382 = f5243;
                                          var G__8383 = g5244;
                                          var G__8384 = h5245;
                                          var G__8385 = i5246;
                                          var G__8386 = j5247;
                                          var G__8387 = k5248;
                                          var G__8388 = l5249;
                                          var G__8389 = m5250;
                                          var G__8390 = n5251;
                                          var G__8391 = o5252;
                                          var G__8392 = p5253;
                                          var G__8393 = q5254;
                                          var G__8394 = r5255;
                                          return f.cljs$core$IFn$_invoke$arity$18 ? f.cljs$core$IFn$_invoke$arity$18(G__8377, G__8378, G__8379, G__8380, G__8381, G__8382, G__8383, G__8384, G__8385, G__8386, G__8387, G__8388, G__8389, G__8390, G__8391, G__8392, G__8393, G__8394) : f.call(null, G__8377, G__8378, G__8379, G__8380, G__8381, G__8382, G__8383, G__8384, G__8385, G__8386, G__8387, G__8388, G__8389, G__8390, G__8391, G__8392, G__8393, G__8394);
                                        }
                                      } else {
                                        var s5256 = cljs.core._first(args__$19);
                                        var args__$20 = cljs.core._rest(args__$19);
                                        if (argc === 19) {
                                          if (f.cljs$core$IFn$_invoke$arity$19) {
                                            return f.cljs$core$IFn$_invoke$arity$19(a5238, b5239, c5240, d5241, e5242, f5243, g5244, h5245, i5246, j5247, k5248, l5249, m5250, n5251, o5252, p5253, q5254, r5255, s5256);
                                          } else {
                                            var G__8395 = a5238;
                                            var G__8396 = b5239;
                                            var G__8397 = c5240;
                                            var G__8398 = d5241;
                                            var G__8399 = e5242;
                                            var G__8400 = f5243;
                                            var G__8401 = g5244;
                                            var G__8402 = h5245;
                                            var G__8403 = i5246;
                                            var G__8404 = j5247;
                                            var G__8405 = k5248;
                                            var G__8406 = l5249;
                                            var G__8407 = m5250;
                                            var G__8408 = n5251;
                                            var G__8409 = o5252;
                                            var G__8410 = p5253;
                                            var G__8411 = q5254;
                                            var G__8412 = r5255;
                                            var G__8413 = s5256;
                                            return f.cljs$core$IFn$_invoke$arity$19 ? f.cljs$core$IFn$_invoke$arity$19(G__8395, G__8396, G__8397, G__8398, G__8399, G__8400, G__8401, G__8402, G__8403, G__8404, G__8405, G__8406, G__8407, G__8408, G__8409, G__8410, G__8411, G__8412, G__8413) : f.call(null, G__8395, G__8396, G__8397, G__8398, G__8399, G__8400, G__8401, G__8402, G__8403, G__8404, G__8405, G__8406, G__8407, G__8408, G__8409, G__8410, G__8411, G__8412, G__8413);
                                          }
                                        } else {
                                          var t5257 = cljs.core._first(args__$20);
                                          var args__$21 = cljs.core._rest(args__$20);
                                          if (argc === 20) {
                                            if (f.cljs$core$IFn$_invoke$arity$20) {
                                              return f.cljs$core$IFn$_invoke$arity$20(a5238, b5239, c5240, d5241, e5242, f5243, g5244, h5245, i5246, j5247, k5248, l5249, m5250, n5251, o5252, p5253, q5254, r5255, s5256, t5257);
                                            } else {
                                              var G__8414 = a5238;
                                              var G__8415 = b5239;
                                              var G__8416 = c5240;
                                              var G__8417 = d5241;
                                              var G__8418 = e5242;
                                              var G__8419 = f5243;
                                              var G__8420 = g5244;
                                              var G__8421 = h5245;
                                              var G__8422 = i5246;
                                              var G__8423 = j5247;
                                              var G__8424 = k5248;
                                              var G__8425 = l5249;
                                              var G__8426 = m5250;
                                              var G__8427 = n5251;
                                              var G__8428 = o5252;
                                              var G__8429 = p5253;
                                              var G__8430 = q5254;
                                              var G__8431 = r5255;
                                              var G__8432 = s5256;
                                              var G__8433 = t5257;
                                              return f.cljs$core$IFn$_invoke$arity$20 ? f.cljs$core$IFn$_invoke$arity$20(G__8414, G__8415, G__8416, G__8417, G__8418, G__8419, G__8420, G__8421, G__8422, G__8423, G__8424, G__8425, G__8426, G__8427, G__8428, G__8429, G__8430, G__8431, G__8432, G__8433) : f.call(null, G__8414, G__8415, G__8416, G__8417, G__8418, G__8419, G__8420, G__8421, G__8422, G__8423, G__8424, G__8425, G__8426, G__8427, G__8428, G__8429, G__8430, G__8431, G__8432, G__8433);
                                            }
                                          } else {
                                            throw new Error("Only up to 20 arguments supported on functions");
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.apply = function cljs$core$apply() {
  var G__8441 = arguments.length;
  switch(G__8441) {
    case 2:
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 5), 0);
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], argseq__5360__auto__);
  }
};
cljs.core.apply.cljs$core$IFn$_invoke$arity$2 = function(f, args) {
  var fixed_arity = f.cljs$lang$maxFixedArity;
  if (f.cljs$lang$applyTo) {
    var bc = cljs.core.bounded_count(args, fixed_arity + 1);
    if (bc <= fixed_arity) {
      return cljs.core.apply_to(f, bc, args);
    } else {
      return f.cljs$lang$applyTo(args);
    }
  } else {
    return f.apply(f, cljs.core.to_array(args));
  }
};
cljs.core.apply.cljs$core$IFn$_invoke$arity$3 = function(f, x, args) {
  var arglist = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$2(x, args);
  var fixed_arity = f.cljs$lang$maxFixedArity;
  if (f.cljs$lang$applyTo) {
    var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
    if (bc <= fixed_arity) {
      return cljs.core.apply_to(f, bc, arglist);
    } else {
      return f.cljs$lang$applyTo(arglist);
    }
  } else {
    return f.apply(f, cljs.core.to_array(arglist));
  }
};
cljs.core.apply.cljs$core$IFn$_invoke$arity$4 = function(f, x, y, args) {
  var arglist = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$3(x, y, args);
  var fixed_arity = f.cljs$lang$maxFixedArity;
  if (f.cljs$lang$applyTo) {
    var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
    if (bc <= fixed_arity) {
      return cljs.core.apply_to(f, bc, arglist);
    } else {
      return f.cljs$lang$applyTo(arglist);
    }
  } else {
    return f.apply(f, cljs.core.to_array(arglist));
  }
};
cljs.core.apply.cljs$core$IFn$_invoke$arity$5 = function(f, x, y, z, args) {
  var arglist = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(x, y, z, args);
  var fixed_arity = f.cljs$lang$maxFixedArity;
  if (f.cljs$lang$applyTo) {
    var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
    if (bc <= fixed_arity) {
      return cljs.core.apply_to(f, bc, arglist);
    } else {
      return f.cljs$lang$applyTo(arglist);
    }
  } else {
    return f.apply(f, cljs.core.to_array(arglist));
  }
};
cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic = function(f, a, b, c, d, args) {
  var arglist = cljs.core.cons(a, cljs.core.cons(b, cljs.core.cons(c, cljs.core.cons(d, cljs.core.spread(args)))));
  var fixed_arity = f.cljs$lang$maxFixedArity;
  if (f.cljs$lang$applyTo) {
    var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
    if (bc <= fixed_arity) {
      return cljs.core.apply_to(f, bc, arglist);
    } else {
      return f.cljs$lang$applyTo(arglist);
    }
  } else {
    return f.apply(f, cljs.core.to_array(arglist));
  }
};
cljs.core.apply.cljs$lang$applyTo = function(seq8434) {
  var G__8435 = cljs.core.first(seq8434);
  var seq8434__$1 = cljs.core.next(seq8434);
  var G__8436 = cljs.core.first(seq8434__$1);
  var seq8434__$2 = cljs.core.next(seq8434__$1);
  var G__8437 = cljs.core.first(seq8434__$2);
  var seq8434__$3 = cljs.core.next(seq8434__$2);
  var G__8438 = cljs.core.first(seq8434__$3);
  var seq8434__$4 = cljs.core.next(seq8434__$3);
  var G__8439 = cljs.core.first(seq8434__$4);
  var seq8434__$5 = cljs.core.next(seq8434__$4);
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(G__8435, G__8436, G__8437, G__8438, G__8439, seq8434__$5);
};
cljs.core.apply.cljs$lang$maxFixedArity = 5;
cljs.core.vary_meta = function cljs$core$vary_meta() {
  var G__8451 = arguments.length;
  switch(G__8451) {
    case 2:
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 6), 0);
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], argseq__5360__auto__);
  }
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$2 = function(obj, f) {
  return cljs.core.with_meta(obj, function() {
    var G__8452 = cljs.core.meta(obj);
    return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__8452) : f.call(null, G__8452);
  }());
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$3 = function(obj, f, a) {
  return cljs.core.with_meta(obj, function() {
    var G__8453 = cljs.core.meta(obj);
    var G__8454 = a;
    return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8453, G__8454) : f.call(null, G__8453, G__8454);
  }());
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$4 = function(obj, f, a, b) {
  return cljs.core.with_meta(obj, function() {
    var G__8455 = cljs.core.meta(obj);
    var G__8456 = a;
    var G__8457 = b;
    return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__8455, G__8456, G__8457) : f.call(null, G__8455, G__8456, G__8457);
  }());
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$5 = function(obj, f, a, b, c) {
  return cljs.core.with_meta(obj, function() {
    var G__8458 = cljs.core.meta(obj);
    var G__8459 = a;
    var G__8460 = b;
    var G__8461 = c;
    return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__8458, G__8459, G__8460, G__8461) : f.call(null, G__8458, G__8459, G__8460, G__8461);
  }());
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$6 = function(obj, f, a, b, c, d) {
  return cljs.core.with_meta(obj, function() {
    var G__8462 = cljs.core.meta(obj);
    var G__8463 = a;
    var G__8464 = b;
    var G__8465 = c;
    var G__8466 = d;
    return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(G__8462, G__8463, G__8464, G__8465, G__8466) : f.call(null, G__8462, G__8463, G__8464, G__8465, G__8466);
  }());
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$variadic = function(obj, f, a, b, c, d, args) {
  return cljs.core.with_meta(obj, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.meta(obj), a, b, c, cljs.core.array_seq([d, args], 0)));
};
cljs.core.vary_meta.cljs$lang$applyTo = function(seq8443) {
  var G__8444 = cljs.core.first(seq8443);
  var seq8443__$1 = cljs.core.next(seq8443);
  var G__8445 = cljs.core.first(seq8443__$1);
  var seq8443__$2 = cljs.core.next(seq8443__$1);
  var G__8446 = cljs.core.first(seq8443__$2);
  var seq8443__$3 = cljs.core.next(seq8443__$2);
  var G__8447 = cljs.core.first(seq8443__$3);
  var seq8443__$4 = cljs.core.next(seq8443__$3);
  var G__8448 = cljs.core.first(seq8443__$4);
  var seq8443__$5 = cljs.core.next(seq8443__$4);
  var G__8449 = cljs.core.first(seq8443__$5);
  var seq8443__$6 = cljs.core.next(seq8443__$5);
  return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$variadic(G__8444, G__8445, G__8446, G__8447, G__8448, G__8449, seq8443__$6);
};
cljs.core.vary_meta.cljs$lang$maxFixedArity = 6;
cljs.core.not_EQ_ = function cljs$core$not_EQ_() {
  var G__8472 = arguments.length;
  switch(G__8472) {
    case 1:
      return cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5360__auto__);
  }
};
cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return false;
};
cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return !cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y);
};
cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.not(cljs.core.apply.cljs$core$IFn$_invoke$arity$4(cljs.core._EQ_, x, y, more));
};
cljs.core.not_EQ_.cljs$lang$applyTo = function(seq8468) {
  var G__8469 = cljs.core.first(seq8468);
  var seq8468__$1 = cljs.core.next(seq8468);
  var G__8470 = cljs.core.first(seq8468__$1);
  var seq8468__$2 = cljs.core.next(seq8468__$1);
  return cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$variadic(G__8469, G__8470, seq8468__$2);
};
cljs.core.not_EQ_.cljs$lang$maxFixedArity = 2;
cljs.core.not_empty = function cljs$core$not_empty(coll) {
  if (cljs.core.seq(coll)) {
    return coll;
  } else {
    return null;
  }
};
cljs.core.nil_iter = function cljs$core$nil_iter() {
  if (typeof cljs.core.t8477 !== "undefined") {
  } else {
    cljs.core.t8477 = function(nil_iter, meta8478) {
      this.nil_iter = nil_iter;
      this.meta8478 = meta8478;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.t8477.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_8479, meta8478__$1) {
      var self__ = this;
      var _8479__$1 = this;
      return new cljs.core.t8477(self__.nil_iter, meta8478__$1);
    };
    cljs.core.t8477.prototype.cljs$core$IMeta$_meta$arity$1 = function(_8479) {
      var self__ = this;
      var _8479__$1 = this;
      return self__.meta8478;
    };
    cljs.core.t8477.prototype.hasNext = function() {
      var self__ = this;
      var _ = this;
      return false;
    };
    cljs.core.t8477.prototype.next = function() {
      var self__ = this;
      var _ = this;
      return new Error("No such element");
    };
    cljs.core.t8477.prototype.remove = function() {
      var self__ = this;
      var _ = this;
      return new Error("Unsupported operation");
    };
    cljs.core.t8477.getBasis = function() {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "nil-iter", "nil-iter", 1101030523, null), new cljs.core.Symbol(null, "meta8478", "meta8478", -154798405, null)], null);
    };
    cljs.core.t8477.cljs$lang$type = true;
    cljs.core.t8477.cljs$lang$ctorStr = "cljs.core/t8477";
    cljs.core.t8477.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
      return cljs.core._write(writer__4889__auto__, "cljs.core/t8477");
    };
    cljs.core.__GT_t8477 = function cljs$core$nil_iter_$___GT_t8477(nil_iter__$1, meta8478) {
      return new cljs.core.t8477(nil_iter__$1, meta8478);
    };
  }
  return new cljs.core.t8477(cljs$core$nil_iter, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.StringIter = function(s, i) {
  this.s = s;
  this.i = i;
};
cljs.core.StringIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.s.length;
};
cljs.core.StringIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.s.charAt(self__.i);
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.StringIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.StringIter.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "s", "s", -948495851, null), new cljs.core.Symbol(null, "i", "i", 253690212, null)], null);
};
cljs.core.StringIter.cljs$lang$type = true;
cljs.core.StringIter.cljs$lang$ctorStr = "cljs.core/StringIter";
cljs.core.StringIter.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/StringIter");
};
cljs.core.__GT_StringIter = function cljs$core$__GT_StringIter(s, i) {
  return new cljs.core.StringIter(s, i);
};
cljs.core.string_iter = function cljs$core$string_iter(x) {
  return new cljs.core.StringIter(x, 0);
};
cljs.core.ArrayIter = function(arr, i) {
  this.arr = arr;
  this.i = i;
};
cljs.core.ArrayIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.arr.length;
};
cljs.core.ArrayIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.arr[self__.i];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.ArrayIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.ArrayIter.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), new cljs.core.Symbol(null, "i", "i", 253690212, null)], null);
};
cljs.core.ArrayIter.cljs$lang$type = true;
cljs.core.ArrayIter.cljs$lang$ctorStr = "cljs.core/ArrayIter";
cljs.core.ArrayIter.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/ArrayIter");
};
cljs.core.__GT_ArrayIter = function cljs$core$__GT_ArrayIter(arr, i) {
  return new cljs.core.ArrayIter(arr, i);
};
cljs.core.array_iter = function cljs$core$array_iter(x) {
  return new cljs.core.ArrayIter(x, 0);
};
cljs.core.INIT = {};
cljs.core.START = {};
cljs.core.SeqIter = function(_seq, _next) {
  this._seq = _seq;
  this._next = _next;
};
cljs.core.SeqIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  if (self__._seq === cljs.core.INIT) {
    self__._seq = cljs.core.START;
    self__._next = cljs.core.seq(self__._next);
  } else {
    if (self__._seq === self__._next) {
      self__._next = cljs.core.next(self__._seq);
    } else {
    }
  }
  return !(self__._next == null);
};
cljs.core.SeqIter.prototype.next = function() {
  var self__ = this;
  var this$ = this;
  if (cljs.core.not(this$.hasNext())) {
    throw new Error("No such element");
  } else {
    self__._seq = self__._next;
    return cljs.core.first(self__._next);
  }
};
cljs.core.SeqIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.SeqIter.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "_seq", "_seq", -449557847, null), new cljs.core.Symbol(null, "_next", "_next", 101877036, null)], null);
};
cljs.core.SeqIter.cljs$lang$type = true;
cljs.core.SeqIter.cljs$lang$ctorStr = "cljs.core/SeqIter";
cljs.core.SeqIter.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/SeqIter");
};
cljs.core.__GT_SeqIter = function cljs$core$__GT_SeqIter(_seq, _next) {
  return new cljs.core.SeqIter(_seq, _next);
};
cljs.core.seq_iter = function cljs$core$seq_iter(coll) {
  return new cljs.core.SeqIter(cljs.core.INIT, coll);
};
cljs.core.iter = function cljs$core$iter(coll) {
  if (coll == null) {
    return cljs.core.nil_iter();
  } else {
    if (typeof coll === "string") {
      return cljs.core.string_iter(coll);
    } else {
      if (cljs.core.array_QMARK_(coll)) {
        return cljs.core.array_iter(coll);
      } else {
        if (cljs.core.truth_(cljs.core.iterable_QMARK_(coll))) {
          return cljs.core._iterator(coll);
        } else {
          if (cljs.core.seqable_QMARK_(coll)) {
            return cljs.core.seq_iter(coll);
          } else {
            throw new Error([cljs.core.str("Cannot create iterator from "), cljs.core.str(coll)].join(""));
          }
        }
      }
    }
  }
};
cljs.core.lazy_transformer = function cljs$core$lazy_transformer(stepper) {
  return new cljs.core.LazyTransformer(stepper, null, null, null);
};
cljs.core.Stepper = function(xform, iter) {
  this.xform = xform;
  this.iter = iter;
};
cljs.core.Stepper.prototype.step = function(lt) {
  var self__ = this;
  var this$ = this;
  while (true) {
    if (cljs.core.truth_(function() {
      var and__4297__auto__ = !(lt.stepper == null);
      if (and__4297__auto__) {
        return self__.iter.hasNext();
      } else {
        return and__4297__auto__;
      }
    }())) {
      if (cljs.core.reduced_QMARK_(function() {
        var G__8480 = lt;
        var G__8481 = self__.iter.next();
        return self__.xform.cljs$core$IFn$_invoke$arity$2 ? self__.xform.cljs$core$IFn$_invoke$arity$2(G__8480, G__8481) : self__.xform.call(null, G__8480, G__8481);
      }())) {
        if (lt.rest == null) {
        } else {
          lt.rest.stepper = null;
        }
      } else {
        continue;
      }
    } else {
    }
    break;
  }
  if (lt.stepper == null) {
    return null;
  } else {
    var G__8482 = lt;
    return self__.xform.cljs$core$IFn$_invoke$arity$1 ? self__.xform.cljs$core$IFn$_invoke$arity$1(G__8482) : self__.xform.call(null, G__8482);
  }
};
cljs.core.Stepper.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "xform", "xform", -85179481, null), new cljs.core.Symbol(null, "iter", "iter", -1346195486, null)], null);
};
cljs.core.Stepper.cljs$lang$type = true;
cljs.core.Stepper.cljs$lang$ctorStr = "cljs.core/Stepper";
cljs.core.Stepper.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/Stepper");
};
cljs.core.__GT_Stepper = function cljs$core$__GT_Stepper(xform, iter) {
  return new cljs.core.Stepper(xform, iter);
};
cljs.core.stepper = function cljs$core$stepper(xform, iter) {
  var stepfn = function() {
    var cljs$core$stepper_$_stepfn = null;
    var cljs$core$stepper_$_stepfn__1 = function(result) {
      var lt = cljs.core.reduced_QMARK_(result) ? cljs.core.deref(result) : result;
      lt.stepper = null;
      return result;
    };
    var cljs$core$stepper_$_stepfn__2 = function(result, input) {
      var lt = result;
      lt.first = input;
      lt.rest = cljs.core.lazy_transformer(lt.stepper);
      lt.stepper = null;
      return lt.rest;
    };
    cljs$core$stepper_$_stepfn = function(result, input) {
      switch(arguments.length) {
        case 1:
          return cljs$core$stepper_$_stepfn__1.call(this, result);
        case 2:
          return cljs$core$stepper_$_stepfn__2.call(this, result, input);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$stepper_$_stepfn.cljs$core$IFn$_invoke$arity$1 = cljs$core$stepper_$_stepfn__1;
    cljs$core$stepper_$_stepfn.cljs$core$IFn$_invoke$arity$2 = cljs$core$stepper_$_stepfn__2;
    return cljs$core$stepper_$_stepfn;
  }();
  return new cljs.core.Stepper(function() {
    var G__8484 = stepfn;
    return xform.cljs$core$IFn$_invoke$arity$1 ? xform.cljs$core$IFn$_invoke$arity$1(G__8484) : xform.call(null, G__8484);
  }(), iter);
};
cljs.core.MultiStepper = function(xform, iters, nexts) {
  this.xform = xform;
  this.iters = iters;
  this.nexts = nexts;
};
cljs.core.MultiStepper.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  var iters__$1 = cljs.core.seq(self__.iters);
  while (true) {
    if (!(iters__$1 == null)) {
      var iter = cljs.core.first(iters__$1);
      if (cljs.core.not(iter.hasNext())) {
        return false;
      } else {
        var G__8486 = cljs.core.next(iters__$1);
        iters__$1 = G__8486;
        continue;
      }
    } else {
      return true;
    }
    break;
  }
};
cljs.core.MultiStepper.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var n__5194__auto___8487 = self__.iters.length;
  var i_8488 = 0;
  while (true) {
    if (i_8488 < n__5194__auto___8487) {
      self__.nexts[i_8488] = self__.iters[i_8488].next();
      var G__8489 = i_8488 + 1;
      i_8488 = G__8489;
      continue;
    } else {
    }
    break;
  }
  return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(self__.nexts, 0);
};
cljs.core.MultiStepper.prototype.step = function(lt) {
  var self__ = this;
  var this$ = this;
  while (true) {
    if (cljs.core.truth_(function() {
      var and__4297__auto__ = !(lt.stepper == null);
      if (and__4297__auto__) {
        return this$.hasNext();
      } else {
        return and__4297__auto__;
      }
    }())) {
      if (cljs.core.reduced_QMARK_(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(self__.xform, cljs.core.cons(lt, this$.next())))) {
        if (lt.rest == null) {
        } else {
          lt.rest.stepper = null;
        }
      } else {
        continue;
      }
    } else {
    }
    break;
  }
  if (lt.stepper == null) {
    return null;
  } else {
    var G__8485 = lt;
    return self__.xform.cljs$core$IFn$_invoke$arity$1 ? self__.xform.cljs$core$IFn$_invoke$arity$1(G__8485) : self__.xform.call(null, G__8485);
  }
};
cljs.core.MultiStepper.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "xform", "xform", -85179481, null), new cljs.core.Symbol(null, "iters", "iters", 719353031, null), new cljs.core.Symbol(null, "nexts", "nexts", -1683579407, null)], null);
};
cljs.core.MultiStepper.cljs$lang$type = true;
cljs.core.MultiStepper.cljs$lang$ctorStr = "cljs.core/MultiStepper";
cljs.core.MultiStepper.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/MultiStepper");
};
cljs.core.__GT_MultiStepper = function cljs$core$__GT_MultiStepper(xform, iters, nexts) {
  return new cljs.core.MultiStepper(xform, iters, nexts);
};
cljs.core.multi_stepper = function cljs$core$multi_stepper() {
  var G__8491 = arguments.length;
  switch(G__8491) {
    case 2:
      return cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$2 = function(xform, iters) {
  return cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$3(xform, iters, new Array(iters.length));
};
cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$3 = function(xform, iters, nexts) {
  var stepfn = function() {
    var cljs$core$stepfn = null;
    var cljs$core$stepfn__1 = function(result) {
      var lt = cljs.core.reduced_QMARK_(result) ? cljs.core.deref(result) : result;
      lt.stepper = null;
      return lt;
    };
    var cljs$core$stepfn__2 = function(result, input) {
      var lt = result;
      lt.first = input;
      lt.rest = cljs.core.lazy_transformer(lt.stepper);
      lt.stepper = null;
      return lt.rest;
    };
    cljs$core$stepfn = function(result, input) {
      switch(arguments.length) {
        case 1:
          return cljs$core$stepfn__1.call(this, result);
        case 2:
          return cljs$core$stepfn__2.call(this, result, input);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$stepfn.cljs$core$IFn$_invoke$arity$1 = cljs$core$stepfn__1;
    cljs$core$stepfn.cljs$core$IFn$_invoke$arity$2 = cljs$core$stepfn__2;
    return cljs$core$stepfn;
  }();
  return new cljs.core.MultiStepper(function() {
    var G__8492 = stepfn;
    return xform.cljs$core$IFn$_invoke$arity$1 ? xform.cljs$core$IFn$_invoke$arity$1(G__8492) : xform.call(null, G__8492);
  }(), iters, nexts);
};
cljs.core.multi_stepper.cljs$lang$maxFixedArity = 3;
cljs.core.LazyTransformer = function(stepper, first, rest, meta) {
  this.stepper = stepper;
  this.first = first;
  this.rest = rest;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 31719628;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.LazyTransformer.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this$, new_meta) {
  var self__ = this;
  var this$__$1 = this;
  return new cljs.core.LazyTransformer(self__.stepper, self__.first, self__.rest, new_meta);
};
cljs.core.LazyTransformer.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons(o, cljs.core._seq(this$__$1));
};
cljs.core.LazyTransformer.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.LazyTransformer.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var self__ = this;
  var this$__$1 = this;
  var s = cljs.core._seq(this$__$1);
  if (!(s == null)) {
    return cljs.core.equiv_sequential(this$__$1, other);
  } else {
    return cljs.core.sequential_QMARK_(other) && cljs.core.seq(other) == null;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.hash_ordered_coll(this$__$1);
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    self__.stepper.step(this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return this$__$1;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq(this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return self__.first;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq(this$__$1);
  }
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$INext$_next$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq(this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core._seq(self__.rest);
  }
};
cljs.core.LazyTransformer.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "stepper", "stepper", 1159163296, null), new cljs.core.Symbol(null, "first", "first", 996428481, null), new cljs.core.Symbol(null, "rest", "rest", 398835108, null), new cljs.core.Symbol(null, "meta", "meta", -1154898805, null)], null);
};
cljs.core.LazyTransformer.cljs$lang$type = true;
cljs.core.LazyTransformer.cljs$lang$ctorStr = "cljs.core/LazyTransformer";
cljs.core.LazyTransformer.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/LazyTransformer");
};
cljs.core.__GT_LazyTransformer = function cljs$core$__GT_LazyTransformer(stepper, first, rest, meta) {
  return new cljs.core.LazyTransformer(stepper, first, rest, meta);
};
cljs.core.LazyTransformer.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5285__auto__ = this;
  return cljs.core.es6_iterator(this__5285__auto__);
};
cljs.core.LazyTransformer.create = function(xform, coll) {
  return new cljs.core.LazyTransformer(cljs.core.stepper(xform, cljs.core.iter(coll)), null, null, null);
};
cljs.core.LazyTransformer.createMulti = function(xform, colls) {
  var iters = [];
  var seq__8494_8498 = cljs.core.seq(colls);
  var chunk__8495_8499 = null;
  var count__8496_8500 = 0;
  var i__8497_8501 = 0;
  while (true) {
    if (i__8497_8501 < count__8496_8500) {
      var coll_8502 = chunk__8495_8499.cljs$core$IIndexed$_nth$arity$2(null, i__8497_8501);
      iters.push(cljs.core.iter(coll_8502));
      var G__8503 = seq__8494_8498;
      var G__8504 = chunk__8495_8499;
      var G__8505 = count__8496_8500;
      var G__8506 = i__8497_8501 + 1;
      seq__8494_8498 = G__8503;
      chunk__8495_8499 = G__8504;
      count__8496_8500 = G__8505;
      i__8497_8501 = G__8506;
      continue;
    } else {
      var temp__4422__auto___8507 = cljs.core.seq(seq__8494_8498);
      if (temp__4422__auto___8507) {
        var seq__8494_8508__$1 = temp__4422__auto___8507;
        if (cljs.core.chunked_seq_QMARK_(seq__8494_8508__$1)) {
          var c__5094__auto___8509 = cljs.core.chunk_first(seq__8494_8508__$1);
          var G__8510 = cljs.core.chunk_rest(seq__8494_8508__$1);
          var G__8511 = c__5094__auto___8509;
          var G__8512 = cljs.core.count(c__5094__auto___8509);
          var G__8513 = 0;
          seq__8494_8498 = G__8510;
          chunk__8495_8499 = G__8511;
          count__8496_8500 = G__8512;
          i__8497_8501 = G__8513;
          continue;
        } else {
          var coll_8514 = cljs.core.first(seq__8494_8508__$1);
          iters.push(cljs.core.iter(coll_8514));
          var G__8515 = cljs.core.next(seq__8494_8508__$1);
          var G__8516 = null;
          var G__8517 = 0;
          var G__8518 = 0;
          seq__8494_8498 = G__8515;
          chunk__8495_8499 = G__8516;
          count__8496_8500 = G__8517;
          i__8497_8501 = G__8518;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return new cljs.core.LazyTransformer(cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$3(xform, iters, new Array(iters.length)), null, null, null);
};
cljs.core.sequence = function cljs$core$sequence() {
  var G__8523 = arguments.length;
  switch(G__8523) {
    case 1:
      return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.sequence.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.sequence.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5360__auto__);
  }
};
cljs.core.sequence.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  if (cljs.core.seq_QMARK_(coll)) {
    return coll;
  } else {
    var or__4309__auto__ = cljs.core.seq(coll);
    if (or__4309__auto__) {
      return or__4309__auto__;
    } else {
      return cljs.core.List.EMPTY;
    }
  }
};
cljs.core.sequence.cljs$core$IFn$_invoke$arity$2 = function(xform, coll) {
  return cljs.core.LazyTransformer.create(xform, coll);
};
cljs.core.sequence.cljs$core$IFn$_invoke$arity$variadic = function(xform, coll, colls) {
  return cljs.core.LazyTransformer.createMulti(xform, cljs.core.to_array(cljs.core.cons(coll, colls)));
};
cljs.core.sequence.cljs$lang$applyTo = function(seq8519) {
  var G__8520 = cljs.core.first(seq8519);
  var seq8519__$1 = cljs.core.next(seq8519);
  var G__8521 = cljs.core.first(seq8519__$1);
  var seq8519__$2 = cljs.core.next(seq8519__$1);
  return cljs.core.sequence.cljs$core$IFn$_invoke$arity$variadic(G__8520, G__8521, seq8519__$2);
};
cljs.core.sequence.cljs$lang$maxFixedArity = 2;
cljs.core.every_QMARK_ = function cljs$core$every_QMARK_(pred, coll) {
  while (true) {
    if (cljs.core.seq(coll) == null) {
      return true;
    } else {
      if (cljs.core.truth_(function() {
        var G__8526 = cljs.core.first(coll);
        return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__8526) : pred.call(null, G__8526);
      }())) {
        var G__8527 = pred;
        var G__8528 = cljs.core.next(coll);
        pred = G__8527;
        coll = G__8528;
        continue;
      } else {
        return false;
      }
    }
    break;
  }
};
cljs.core.not_every_QMARK_ = function cljs$core$not_every_QMARK_(pred, coll) {
  return !cljs.core.every_QMARK_(pred, coll);
};
cljs.core.some = function cljs$core$some(pred, coll) {
  while (true) {
    if (cljs.core.seq(coll)) {
      var or__4309__auto__ = function() {
        var G__8532 = cljs.core.first(coll);
        return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__8532) : pred.call(null, G__8532);
      }();
      if (cljs.core.truth_(or__4309__auto__)) {
        return or__4309__auto__;
      } else {
        var G__8533 = pred;
        var G__8534 = cljs.core.next(coll);
        pred = G__8533;
        coll = G__8534;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.not_any_QMARK_ = function cljs$core$not_any_QMARK_(pred, coll) {
  return cljs.core.not(cljs.core.some(pred, coll));
};
cljs.core.even_QMARK_ = function cljs$core$even_QMARK_(n) {
  if (cljs.core.integer_QMARK_(n)) {
    return (n & 1) === 0;
  } else {
    throw new Error([cljs.core.str("Argument must be an integer: "), cljs.core.str(n)].join(""));
  }
};
cljs.core.odd_QMARK_ = function cljs$core$odd_QMARK_(n) {
  return !cljs.core.even_QMARK_(n);
};
cljs.core.complement = function cljs$core$complement(f) {
  return function() {
    var G__8541 = null;
    var G__8541__0 = function() {
      return cljs.core.not(function() {
        return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
      }());
    };
    var G__8541__1 = function(x) {
      return cljs.core.not(function() {
        var G__8538 = x;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__8538) : f.call(null, G__8538);
      }());
    };
    var G__8541__2 = function(x, y) {
      return cljs.core.not(function() {
        var G__8539 = x;
        var G__8540 = y;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8539, G__8540) : f.call(null, G__8539, G__8540);
      }());
    };
    var G__8541__3 = function() {
      var G__8542__delegate = function(x, y, zs) {
        return cljs.core.not(cljs.core.apply.cljs$core$IFn$_invoke$arity$4(f, x, y, zs));
      };
      var G__8542 = function(x, y, var_args) {
        var zs = null;
        if (arguments.length > 2) {
          var G__8543__i = 0, G__8543__a = new Array(arguments.length - 2);
          while (G__8543__i < G__8543__a.length) {
            G__8543__a[G__8543__i] = arguments[G__8543__i + 2];
            ++G__8543__i;
          }
          zs = new cljs.core.IndexedSeq(G__8543__a, 0);
        }
        return G__8542__delegate.call(this, x, y, zs);
      };
      G__8542.cljs$lang$maxFixedArity = 2;
      G__8542.cljs$lang$applyTo = function(arglist__8544) {
        var x = cljs.core.first(arglist__8544);
        arglist__8544 = cljs.core.next(arglist__8544);
        var y = cljs.core.first(arglist__8544);
        var zs = cljs.core.rest(arglist__8544);
        return G__8542__delegate(x, y, zs);
      };
      G__8542.cljs$core$IFn$_invoke$arity$variadic = G__8542__delegate;
      return G__8542;
    }();
    G__8541 = function(x, y, var_args) {
      var zs = var_args;
      switch(arguments.length) {
        case 0:
          return G__8541__0.call(this);
        case 1:
          return G__8541__1.call(this, x);
        case 2:
          return G__8541__2.call(this, x, y);
        default:
          var G__8545 = null;
          if (arguments.length > 2) {
            var G__8546__i = 0, G__8546__a = new Array(arguments.length - 2);
            while (G__8546__i < G__8546__a.length) {
              G__8546__a[G__8546__i] = arguments[G__8546__i + 2];
              ++G__8546__i;
            }
            G__8545 = new cljs.core.IndexedSeq(G__8546__a, 0);
          }
          return G__8541__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__8545);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__8541.cljs$lang$maxFixedArity = 2;
    G__8541.cljs$lang$applyTo = G__8541__3.cljs$lang$applyTo;
    G__8541.cljs$core$IFn$_invoke$arity$0 = G__8541__0;
    G__8541.cljs$core$IFn$_invoke$arity$1 = G__8541__1;
    G__8541.cljs$core$IFn$_invoke$arity$2 = G__8541__2;
    G__8541.cljs$core$IFn$_invoke$arity$variadic = G__8541__3.cljs$core$IFn$_invoke$arity$variadic;
    return G__8541;
  }();
};
cljs.core.constantly = function cljs$core$constantly(x) {
  return function() {
    var G__8547__delegate = function(args) {
      return x;
    };
    var G__8547 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        var G__8548__i = 0, G__8548__a = new Array(arguments.length - 0);
        while (G__8548__i < G__8548__a.length) {
          G__8548__a[G__8548__i] = arguments[G__8548__i + 0];
          ++G__8548__i;
        }
        args = new cljs.core.IndexedSeq(G__8548__a, 0);
      }
      return G__8547__delegate.call(this, args);
    };
    G__8547.cljs$lang$maxFixedArity = 0;
    G__8547.cljs$lang$applyTo = function(arglist__8549) {
      var args = cljs.core.seq(arglist__8549);
      return G__8547__delegate(args);
    };
    G__8547.cljs$core$IFn$_invoke$arity$variadic = G__8547__delegate;
    return G__8547;
  }();
};
cljs.core.comp = function cljs$core$comp() {
  var G__8555 = arguments.length;
  switch(G__8555) {
    case 0:
      return cljs.core.comp.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.comp.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.comp.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.comp.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 3), 0);
      return cljs.core.comp.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5360__auto__);
  }
};
cljs.core.comp.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.identity;
};
cljs.core.comp.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return f;
};
cljs.core.comp.cljs$core$IFn$_invoke$arity$2 = function(f, g) {
  return function() {
    var G__8584 = null;
    var G__8584__0 = function() {
      var G__8556 = function() {
        return g.cljs$core$IFn$_invoke$arity$0 ? g.cljs$core$IFn$_invoke$arity$0() : g.call(null);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__8556) : f.call(null, G__8556);
    };
    var G__8584__1 = function(x) {
      var G__8557 = function() {
        var G__8558 = x;
        return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__8558) : g.call(null, G__8558);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__8557) : f.call(null, G__8557);
    };
    var G__8584__2 = function(x, y) {
      var G__8559 = function() {
        var G__8560 = x;
        var G__8561 = y;
        return g.cljs$core$IFn$_invoke$arity$2 ? g.cljs$core$IFn$_invoke$arity$2(G__8560, G__8561) : g.call(null, G__8560, G__8561);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__8559) : f.call(null, G__8559);
    };
    var G__8584__3 = function(x, y, z) {
      var G__8562 = function() {
        var G__8563 = x;
        var G__8564 = y;
        var G__8565 = z;
        return g.cljs$core$IFn$_invoke$arity$3 ? g.cljs$core$IFn$_invoke$arity$3(G__8563, G__8564, G__8565) : g.call(null, G__8563, G__8564, G__8565);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__8562) : f.call(null, G__8562);
    };
    var G__8584__4 = function() {
      var G__8585__delegate = function(x, y, z, args) {
        var G__8566 = cljs.core.apply.cljs$core$IFn$_invoke$arity$5(g, x, y, z, args);
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__8566) : f.call(null, G__8566);
      };
      var G__8585 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__8586__i = 0, G__8586__a = new Array(arguments.length - 3);
          while (G__8586__i < G__8586__a.length) {
            G__8586__a[G__8586__i] = arguments[G__8586__i + 3];
            ++G__8586__i;
          }
          args = new cljs.core.IndexedSeq(G__8586__a, 0);
        }
        return G__8585__delegate.call(this, x, y, z, args);
      };
      G__8585.cljs$lang$maxFixedArity = 3;
      G__8585.cljs$lang$applyTo = function(arglist__8587) {
        var x = cljs.core.first(arglist__8587);
        arglist__8587 = cljs.core.next(arglist__8587);
        var y = cljs.core.first(arglist__8587);
        arglist__8587 = cljs.core.next(arglist__8587);
        var z = cljs.core.first(arglist__8587);
        var args = cljs.core.rest(arglist__8587);
        return G__8585__delegate(x, y, z, args);
      };
      G__8585.cljs$core$IFn$_invoke$arity$variadic = G__8585__delegate;
      return G__8585;
    }();
    G__8584 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__8584__0.call(this);
        case 1:
          return G__8584__1.call(this, x);
        case 2:
          return G__8584__2.call(this, x, y);
        case 3:
          return G__8584__3.call(this, x, y, z);
        default:
          var G__8588 = null;
          if (arguments.length > 3) {
            var G__8589__i = 0, G__8589__a = new Array(arguments.length - 3);
            while (G__8589__i < G__8589__a.length) {
              G__8589__a[G__8589__i] = arguments[G__8589__i + 3];
              ++G__8589__i;
            }
            G__8588 = new cljs.core.IndexedSeq(G__8589__a, 0);
          }
          return G__8584__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__8588);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__8584.cljs$lang$maxFixedArity = 3;
    G__8584.cljs$lang$applyTo = G__8584__4.cljs$lang$applyTo;
    G__8584.cljs$core$IFn$_invoke$arity$0 = G__8584__0;
    G__8584.cljs$core$IFn$_invoke$arity$1 = G__8584__1;
    G__8584.cljs$core$IFn$_invoke$arity$2 = G__8584__2;
    G__8584.cljs$core$IFn$_invoke$arity$3 = G__8584__3;
    G__8584.cljs$core$IFn$_invoke$arity$variadic = G__8584__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__8584;
  }();
};
cljs.core.comp.cljs$core$IFn$_invoke$arity$3 = function(f, g, h) {
  return function() {
    var G__8590 = null;
    var G__8590__0 = function() {
      var G__8567 = function() {
        var G__8568 = function() {
          return h.cljs$core$IFn$_invoke$arity$0 ? h.cljs$core$IFn$_invoke$arity$0() : h.call(null);
        }();
        return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__8568) : g.call(null, G__8568);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__8567) : f.call(null, G__8567);
    };
    var G__8590__1 = function(x) {
      var G__8569 = function() {
        var G__8570 = function() {
          var G__8571 = x;
          return h.cljs$core$IFn$_invoke$arity$1 ? h.cljs$core$IFn$_invoke$arity$1(G__8571) : h.call(null, G__8571);
        }();
        return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__8570) : g.call(null, G__8570);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__8569) : f.call(null, G__8569);
    };
    var G__8590__2 = function(x, y) {
      var G__8572 = function() {
        var G__8573 = function() {
          var G__8574 = x;
          var G__8575 = y;
          return h.cljs$core$IFn$_invoke$arity$2 ? h.cljs$core$IFn$_invoke$arity$2(G__8574, G__8575) : h.call(null, G__8574, G__8575);
        }();
        return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__8573) : g.call(null, G__8573);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__8572) : f.call(null, G__8572);
    };
    var G__8590__3 = function(x, y, z) {
      var G__8576 = function() {
        var G__8577 = function() {
          var G__8578 = x;
          var G__8579 = y;
          var G__8580 = z;
          return h.cljs$core$IFn$_invoke$arity$3 ? h.cljs$core$IFn$_invoke$arity$3(G__8578, G__8579, G__8580) : h.call(null, G__8578, G__8579, G__8580);
        }();
        return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__8577) : g.call(null, G__8577);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__8576) : f.call(null, G__8576);
    };
    var G__8590__4 = function() {
      var G__8591__delegate = function(x, y, z, args) {
        var G__8581 = function() {
          var G__8582 = cljs.core.apply.cljs$core$IFn$_invoke$arity$5(h, x, y, z, args);
          return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__8582) : g.call(null, G__8582);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__8581) : f.call(null, G__8581);
      };
      var G__8591 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__8592__i = 0, G__8592__a = new Array(arguments.length - 3);
          while (G__8592__i < G__8592__a.length) {
            G__8592__a[G__8592__i] = arguments[G__8592__i + 3];
            ++G__8592__i;
          }
          args = new cljs.core.IndexedSeq(G__8592__a, 0);
        }
        return G__8591__delegate.call(this, x, y, z, args);
      };
      G__8591.cljs$lang$maxFixedArity = 3;
      G__8591.cljs$lang$applyTo = function(arglist__8593) {
        var x = cljs.core.first(arglist__8593);
        arglist__8593 = cljs.core.next(arglist__8593);
        var y = cljs.core.first(arglist__8593);
        arglist__8593 = cljs.core.next(arglist__8593);
        var z = cljs.core.first(arglist__8593);
        var args = cljs.core.rest(arglist__8593);
        return G__8591__delegate(x, y, z, args);
      };
      G__8591.cljs$core$IFn$_invoke$arity$variadic = G__8591__delegate;
      return G__8591;
    }();
    G__8590 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__8590__0.call(this);
        case 1:
          return G__8590__1.call(this, x);
        case 2:
          return G__8590__2.call(this, x, y);
        case 3:
          return G__8590__3.call(this, x, y, z);
        default:
          var G__8594 = null;
          if (arguments.length > 3) {
            var G__8595__i = 0, G__8595__a = new Array(arguments.length - 3);
            while (G__8595__i < G__8595__a.length) {
              G__8595__a[G__8595__i] = arguments[G__8595__i + 3];
              ++G__8595__i;
            }
            G__8594 = new cljs.core.IndexedSeq(G__8595__a, 0);
          }
          return G__8590__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__8594);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__8590.cljs$lang$maxFixedArity = 3;
    G__8590.cljs$lang$applyTo = G__8590__4.cljs$lang$applyTo;
    G__8590.cljs$core$IFn$_invoke$arity$0 = G__8590__0;
    G__8590.cljs$core$IFn$_invoke$arity$1 = G__8590__1;
    G__8590.cljs$core$IFn$_invoke$arity$2 = G__8590__2;
    G__8590.cljs$core$IFn$_invoke$arity$3 = G__8590__3;
    G__8590.cljs$core$IFn$_invoke$arity$variadic = G__8590__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__8590;
  }();
};
cljs.core.comp.cljs$core$IFn$_invoke$arity$variadic = function(f1, f2, f3, fs) {
  var fs__$1 = cljs.core.reverse(cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(f1, f2, f3, fs));
  return function(fs__$1) {
    return function() {
      var G__8596__delegate = function(args) {
        var ret = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.first(fs__$1), args);
        var fs__$2 = cljs.core.next(fs__$1);
        while (true) {
          if (fs__$2) {
            var G__8597 = cljs.core.first(fs__$2).call(null, ret);
            var G__8598 = cljs.core.next(fs__$2);
            ret = G__8597;
            fs__$2 = G__8598;
            continue;
          } else {
            return ret;
          }
          break;
        }
      };
      var G__8596 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          var G__8599__i = 0, G__8599__a = new Array(arguments.length - 0);
          while (G__8599__i < G__8599__a.length) {
            G__8599__a[G__8599__i] = arguments[G__8599__i + 0];
            ++G__8599__i;
          }
          args = new cljs.core.IndexedSeq(G__8599__a, 0);
        }
        return G__8596__delegate.call(this, args);
      };
      G__8596.cljs$lang$maxFixedArity = 0;
      G__8596.cljs$lang$applyTo = function(arglist__8600) {
        var args = cljs.core.seq(arglist__8600);
        return G__8596__delegate(args);
      };
      G__8596.cljs$core$IFn$_invoke$arity$variadic = G__8596__delegate;
      return G__8596;
    }();
  }(fs__$1);
};
cljs.core.comp.cljs$lang$applyTo = function(seq8550) {
  var G__8551 = cljs.core.first(seq8550);
  var seq8550__$1 = cljs.core.next(seq8550);
  var G__8552 = cljs.core.first(seq8550__$1);
  var seq8550__$2 = cljs.core.next(seq8550__$1);
  var G__8553 = cljs.core.first(seq8550__$2);
  var seq8550__$3 = cljs.core.next(seq8550__$2);
  return cljs.core.comp.cljs$core$IFn$_invoke$arity$variadic(G__8551, G__8552, G__8553, seq8550__$3);
};
cljs.core.comp.cljs$lang$maxFixedArity = 3;
cljs.core.partial = function cljs$core$partial() {
  var G__8607 = arguments.length;
  switch(G__8607) {
    case 1:
      return cljs.core.partial.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.partial.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.partial.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.partial.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 4), 0);
      return cljs.core.partial.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__5360__auto__);
  }
};
cljs.core.partial.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return f;
};
cljs.core.partial.cljs$core$IFn$_invoke$arity$2 = function(f, arg1) {
  return function() {
    var G__8651 = null;
    var G__8651__0 = function() {
      var G__8608 = arg1;
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__8608) : f.call(null, G__8608);
    };
    var G__8651__1 = function(x) {
      var G__8609 = arg1;
      var G__8610 = x;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8609, G__8610) : f.call(null, G__8609, G__8610);
    };
    var G__8651__2 = function(x, y) {
      var G__8611 = arg1;
      var G__8612 = x;
      var G__8613 = y;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__8611, G__8612, G__8613) : f.call(null, G__8611, G__8612, G__8613);
    };
    var G__8651__3 = function(x, y, z) {
      var G__8614 = arg1;
      var G__8615 = x;
      var G__8616 = y;
      var G__8617 = z;
      return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__8614, G__8615, G__8616, G__8617) : f.call(null, G__8614, G__8615, G__8616, G__8617);
    };
    var G__8651__4 = function() {
      var G__8652__delegate = function(x, y, z, args) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, arg1, x, y, z, cljs.core.array_seq([args], 0));
      };
      var G__8652 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__8653__i = 0, G__8653__a = new Array(arguments.length - 3);
          while (G__8653__i < G__8653__a.length) {
            G__8653__a[G__8653__i] = arguments[G__8653__i + 3];
            ++G__8653__i;
          }
          args = new cljs.core.IndexedSeq(G__8653__a, 0);
        }
        return G__8652__delegate.call(this, x, y, z, args);
      };
      G__8652.cljs$lang$maxFixedArity = 3;
      G__8652.cljs$lang$applyTo = function(arglist__8654) {
        var x = cljs.core.first(arglist__8654);
        arglist__8654 = cljs.core.next(arglist__8654);
        var y = cljs.core.first(arglist__8654);
        arglist__8654 = cljs.core.next(arglist__8654);
        var z = cljs.core.first(arglist__8654);
        var args = cljs.core.rest(arglist__8654);
        return G__8652__delegate(x, y, z, args);
      };
      G__8652.cljs$core$IFn$_invoke$arity$variadic = G__8652__delegate;
      return G__8652;
    }();
    G__8651 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__8651__0.call(this);
        case 1:
          return G__8651__1.call(this, x);
        case 2:
          return G__8651__2.call(this, x, y);
        case 3:
          return G__8651__3.call(this, x, y, z);
        default:
          var G__8655 = null;
          if (arguments.length > 3) {
            var G__8656__i = 0, G__8656__a = new Array(arguments.length - 3);
            while (G__8656__i < G__8656__a.length) {
              G__8656__a[G__8656__i] = arguments[G__8656__i + 3];
              ++G__8656__i;
            }
            G__8655 = new cljs.core.IndexedSeq(G__8656__a, 0);
          }
          return G__8651__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__8655);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__8651.cljs$lang$maxFixedArity = 3;
    G__8651.cljs$lang$applyTo = G__8651__4.cljs$lang$applyTo;
    G__8651.cljs$core$IFn$_invoke$arity$0 = G__8651__0;
    G__8651.cljs$core$IFn$_invoke$arity$1 = G__8651__1;
    G__8651.cljs$core$IFn$_invoke$arity$2 = G__8651__2;
    G__8651.cljs$core$IFn$_invoke$arity$3 = G__8651__3;
    G__8651.cljs$core$IFn$_invoke$arity$variadic = G__8651__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__8651;
  }();
};
cljs.core.partial.cljs$core$IFn$_invoke$arity$3 = function(f, arg1, arg2) {
  return function() {
    var G__8657 = null;
    var G__8657__0 = function() {
      var G__8618 = arg1;
      var G__8619 = arg2;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8618, G__8619) : f.call(null, G__8618, G__8619);
    };
    var G__8657__1 = function(x) {
      var G__8620 = arg1;
      var G__8621 = arg2;
      var G__8622 = x;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__8620, G__8621, G__8622) : f.call(null, G__8620, G__8621, G__8622);
    };
    var G__8657__2 = function(x, y) {
      var G__8623 = arg1;
      var G__8624 = arg2;
      var G__8625 = x;
      var G__8626 = y;
      return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__8623, G__8624, G__8625, G__8626) : f.call(null, G__8623, G__8624, G__8625, G__8626);
    };
    var G__8657__3 = function(x, y, z) {
      var G__8627 = arg1;
      var G__8628 = arg2;
      var G__8629 = x;
      var G__8630 = y;
      var G__8631 = z;
      return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(G__8627, G__8628, G__8629, G__8630, G__8631) : f.call(null, G__8627, G__8628, G__8629, G__8630, G__8631);
    };
    var G__8657__4 = function() {
      var G__8658__delegate = function(x, y, z, args) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, x, y, cljs.core.array_seq([z, args], 0));
      };
      var G__8658 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__8659__i = 0, G__8659__a = new Array(arguments.length - 3);
          while (G__8659__i < G__8659__a.length) {
            G__8659__a[G__8659__i] = arguments[G__8659__i + 3];
            ++G__8659__i;
          }
          args = new cljs.core.IndexedSeq(G__8659__a, 0);
        }
        return G__8658__delegate.call(this, x, y, z, args);
      };
      G__8658.cljs$lang$maxFixedArity = 3;
      G__8658.cljs$lang$applyTo = function(arglist__8660) {
        var x = cljs.core.first(arglist__8660);
        arglist__8660 = cljs.core.next(arglist__8660);
        var y = cljs.core.first(arglist__8660);
        arglist__8660 = cljs.core.next(arglist__8660);
        var z = cljs.core.first(arglist__8660);
        var args = cljs.core.rest(arglist__8660);
        return G__8658__delegate(x, y, z, args);
      };
      G__8658.cljs$core$IFn$_invoke$arity$variadic = G__8658__delegate;
      return G__8658;
    }();
    G__8657 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__8657__0.call(this);
        case 1:
          return G__8657__1.call(this, x);
        case 2:
          return G__8657__2.call(this, x, y);
        case 3:
          return G__8657__3.call(this, x, y, z);
        default:
          var G__8661 = null;
          if (arguments.length > 3) {
            var G__8662__i = 0, G__8662__a = new Array(arguments.length - 3);
            while (G__8662__i < G__8662__a.length) {
              G__8662__a[G__8662__i] = arguments[G__8662__i + 3];
              ++G__8662__i;
            }
            G__8661 = new cljs.core.IndexedSeq(G__8662__a, 0);
          }
          return G__8657__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__8661);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__8657.cljs$lang$maxFixedArity = 3;
    G__8657.cljs$lang$applyTo = G__8657__4.cljs$lang$applyTo;
    G__8657.cljs$core$IFn$_invoke$arity$0 = G__8657__0;
    G__8657.cljs$core$IFn$_invoke$arity$1 = G__8657__1;
    G__8657.cljs$core$IFn$_invoke$arity$2 = G__8657__2;
    G__8657.cljs$core$IFn$_invoke$arity$3 = G__8657__3;
    G__8657.cljs$core$IFn$_invoke$arity$variadic = G__8657__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__8657;
  }();
};
cljs.core.partial.cljs$core$IFn$_invoke$arity$4 = function(f, arg1, arg2, arg3) {
  return function() {
    var G__8663 = null;
    var G__8663__0 = function() {
      var G__8632 = arg1;
      var G__8633 = arg2;
      var G__8634 = arg3;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__8632, G__8633, G__8634) : f.call(null, G__8632, G__8633, G__8634);
    };
    var G__8663__1 = function(x) {
      var G__8635 = arg1;
      var G__8636 = arg2;
      var G__8637 = arg3;
      var G__8638 = x;
      return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__8635, G__8636, G__8637, G__8638) : f.call(null, G__8635, G__8636, G__8637, G__8638);
    };
    var G__8663__2 = function(x, y) {
      var G__8639 = arg1;
      var G__8640 = arg2;
      var G__8641 = arg3;
      var G__8642 = x;
      var G__8643 = y;
      return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(G__8639, G__8640, G__8641, G__8642, G__8643) : f.call(null, G__8639, G__8640, G__8641, G__8642, G__8643);
    };
    var G__8663__3 = function(x, y, z) {
      var G__8644 = arg1;
      var G__8645 = arg2;
      var G__8646 = arg3;
      var G__8647 = x;
      var G__8648 = y;
      var G__8649 = z;
      return f.cljs$core$IFn$_invoke$arity$6 ? f.cljs$core$IFn$_invoke$arity$6(G__8644, G__8645, G__8646, G__8647, G__8648, G__8649) : f.call(null, G__8644, G__8645, G__8646, G__8647, G__8648, G__8649);
    };
    var G__8663__4 = function() {
      var G__8664__delegate = function(x, y, z, args) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, arg3, x, cljs.core.array_seq([y, z, args], 0));
      };
      var G__8664 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__8665__i = 0, G__8665__a = new Array(arguments.length - 3);
          while (G__8665__i < G__8665__a.length) {
            G__8665__a[G__8665__i] = arguments[G__8665__i + 3];
            ++G__8665__i;
          }
          args = new cljs.core.IndexedSeq(G__8665__a, 0);
        }
        return G__8664__delegate.call(this, x, y, z, args);
      };
      G__8664.cljs$lang$maxFixedArity = 3;
      G__8664.cljs$lang$applyTo = function(arglist__8666) {
        var x = cljs.core.first(arglist__8666);
        arglist__8666 = cljs.core.next(arglist__8666);
        var y = cljs.core.first(arglist__8666);
        arglist__8666 = cljs.core.next(arglist__8666);
        var z = cljs.core.first(arglist__8666);
        var args = cljs.core.rest(arglist__8666);
        return G__8664__delegate(x, y, z, args);
      };
      G__8664.cljs$core$IFn$_invoke$arity$variadic = G__8664__delegate;
      return G__8664;
    }();
    G__8663 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__8663__0.call(this);
        case 1:
          return G__8663__1.call(this, x);
        case 2:
          return G__8663__2.call(this, x, y);
        case 3:
          return G__8663__3.call(this, x, y, z);
        default:
          var G__8667 = null;
          if (arguments.length > 3) {
            var G__8668__i = 0, G__8668__a = new Array(arguments.length - 3);
            while (G__8668__i < G__8668__a.length) {
              G__8668__a[G__8668__i] = arguments[G__8668__i + 3];
              ++G__8668__i;
            }
            G__8667 = new cljs.core.IndexedSeq(G__8668__a, 0);
          }
          return G__8663__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__8667);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__8663.cljs$lang$maxFixedArity = 3;
    G__8663.cljs$lang$applyTo = G__8663__4.cljs$lang$applyTo;
    G__8663.cljs$core$IFn$_invoke$arity$0 = G__8663__0;
    G__8663.cljs$core$IFn$_invoke$arity$1 = G__8663__1;
    G__8663.cljs$core$IFn$_invoke$arity$2 = G__8663__2;
    G__8663.cljs$core$IFn$_invoke$arity$3 = G__8663__3;
    G__8663.cljs$core$IFn$_invoke$arity$variadic = G__8663__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__8663;
  }();
};
cljs.core.partial.cljs$core$IFn$_invoke$arity$variadic = function(f, arg1, arg2, arg3, more) {
  return function() {
    var G__8669__delegate = function(args) {
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, arg1, arg2, arg3, cljs.core.concat.cljs$core$IFn$_invoke$arity$2(more, args));
    };
    var G__8669 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        var G__8670__i = 0, G__8670__a = new Array(arguments.length - 0);
        while (G__8670__i < G__8670__a.length) {
          G__8670__a[G__8670__i] = arguments[G__8670__i + 0];
          ++G__8670__i;
        }
        args = new cljs.core.IndexedSeq(G__8670__a, 0);
      }
      return G__8669__delegate.call(this, args);
    };
    G__8669.cljs$lang$maxFixedArity = 0;
    G__8669.cljs$lang$applyTo = function(arglist__8671) {
      var args = cljs.core.seq(arglist__8671);
      return G__8669__delegate(args);
    };
    G__8669.cljs$core$IFn$_invoke$arity$variadic = G__8669__delegate;
    return G__8669;
  }();
};
cljs.core.partial.cljs$lang$applyTo = function(seq8601) {
  var G__8602 = cljs.core.first(seq8601);
  var seq8601__$1 = cljs.core.next(seq8601);
  var G__8603 = cljs.core.first(seq8601__$1);
  var seq8601__$2 = cljs.core.next(seq8601__$1);
  var G__8604 = cljs.core.first(seq8601__$2);
  var seq8601__$3 = cljs.core.next(seq8601__$2);
  var G__8605 = cljs.core.first(seq8601__$3);
  var seq8601__$4 = cljs.core.next(seq8601__$3);
  return cljs.core.partial.cljs$core$IFn$_invoke$arity$variadic(G__8602, G__8603, G__8604, G__8605, seq8601__$4);
};
cljs.core.partial.cljs$lang$maxFixedArity = 4;
cljs.core.fnil = function cljs$core$fnil() {
  var G__8673 = arguments.length;
  switch(G__8673) {
    case 2:
      return cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.fnil.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.fnil.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.fnil.cljs$core$IFn$_invoke$arity$2 = function(f, x) {
  return function() {
    var G__8691 = null;
    var G__8691__1 = function(a) {
      var G__8674 = a == null ? x : a;
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__8674) : f.call(null, G__8674);
    };
    var G__8691__2 = function(a, b) {
      var G__8675 = a == null ? x : a;
      var G__8676 = b;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8675, G__8676) : f.call(null, G__8675, G__8676);
    };
    var G__8691__3 = function(a, b, c) {
      var G__8677 = a == null ? x : a;
      var G__8678 = b;
      var G__8679 = c;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__8677, G__8678, G__8679) : f.call(null, G__8677, G__8678, G__8679);
    };
    var G__8691__4 = function() {
      var G__8692__delegate = function(a, b, c, ds) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a == null ? x : a, b, c, ds);
      };
      var G__8692 = function(a, b, c, var_args) {
        var ds = null;
        if (arguments.length > 3) {
          var G__8693__i = 0, G__8693__a = new Array(arguments.length - 3);
          while (G__8693__i < G__8693__a.length) {
            G__8693__a[G__8693__i] = arguments[G__8693__i + 3];
            ++G__8693__i;
          }
          ds = new cljs.core.IndexedSeq(G__8693__a, 0);
        }
        return G__8692__delegate.call(this, a, b, c, ds);
      };
      G__8692.cljs$lang$maxFixedArity = 3;
      G__8692.cljs$lang$applyTo = function(arglist__8694) {
        var a = cljs.core.first(arglist__8694);
        arglist__8694 = cljs.core.next(arglist__8694);
        var b = cljs.core.first(arglist__8694);
        arglist__8694 = cljs.core.next(arglist__8694);
        var c = cljs.core.first(arglist__8694);
        var ds = cljs.core.rest(arglist__8694);
        return G__8692__delegate(a, b, c, ds);
      };
      G__8692.cljs$core$IFn$_invoke$arity$variadic = G__8692__delegate;
      return G__8692;
    }();
    G__8691 = function(a, b, c, var_args) {
      var ds = var_args;
      switch(arguments.length) {
        case 1:
          return G__8691__1.call(this, a);
        case 2:
          return G__8691__2.call(this, a, b);
        case 3:
          return G__8691__3.call(this, a, b, c);
        default:
          var G__8695 = null;
          if (arguments.length > 3) {
            var G__8696__i = 0, G__8696__a = new Array(arguments.length - 3);
            while (G__8696__i < G__8696__a.length) {
              G__8696__a[G__8696__i] = arguments[G__8696__i + 3];
              ++G__8696__i;
            }
            G__8695 = new cljs.core.IndexedSeq(G__8696__a, 0);
          }
          return G__8691__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, G__8695);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__8691.cljs$lang$maxFixedArity = 3;
    G__8691.cljs$lang$applyTo = G__8691__4.cljs$lang$applyTo;
    G__8691.cljs$core$IFn$_invoke$arity$1 = G__8691__1;
    G__8691.cljs$core$IFn$_invoke$arity$2 = G__8691__2;
    G__8691.cljs$core$IFn$_invoke$arity$3 = G__8691__3;
    G__8691.cljs$core$IFn$_invoke$arity$variadic = G__8691__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__8691;
  }();
};
cljs.core.fnil.cljs$core$IFn$_invoke$arity$3 = function(f, x, y) {
  return function() {
    var G__8697 = null;
    var G__8697__2 = function(a, b) {
      var G__8680 = a == null ? x : a;
      var G__8681 = b == null ? y : b;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8680, G__8681) : f.call(null, G__8680, G__8681);
    };
    var G__8697__3 = function(a, b, c) {
      var G__8682 = a == null ? x : a;
      var G__8683 = b == null ? y : b;
      var G__8684 = c;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__8682, G__8683, G__8684) : f.call(null, G__8682, G__8683, G__8684);
    };
    var G__8697__4 = function() {
      var G__8698__delegate = function(a, b, c, ds) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a == null ? x : a, b == null ? y : b, c, ds);
      };
      var G__8698 = function(a, b, c, var_args) {
        var ds = null;
        if (arguments.length > 3) {
          var G__8699__i = 0, G__8699__a = new Array(arguments.length - 3);
          while (G__8699__i < G__8699__a.length) {
            G__8699__a[G__8699__i] = arguments[G__8699__i + 3];
            ++G__8699__i;
          }
          ds = new cljs.core.IndexedSeq(G__8699__a, 0);
        }
        return G__8698__delegate.call(this, a, b, c, ds);
      };
      G__8698.cljs$lang$maxFixedArity = 3;
      G__8698.cljs$lang$applyTo = function(arglist__8700) {
        var a = cljs.core.first(arglist__8700);
        arglist__8700 = cljs.core.next(arglist__8700);
        var b = cljs.core.first(arglist__8700);
        arglist__8700 = cljs.core.next(arglist__8700);
        var c = cljs.core.first(arglist__8700);
        var ds = cljs.core.rest(arglist__8700);
        return G__8698__delegate(a, b, c, ds);
      };
      G__8698.cljs$core$IFn$_invoke$arity$variadic = G__8698__delegate;
      return G__8698;
    }();
    G__8697 = function(a, b, c, var_args) {
      var ds = var_args;
      switch(arguments.length) {
        case 2:
          return G__8697__2.call(this, a, b);
        case 3:
          return G__8697__3.call(this, a, b, c);
        default:
          var G__8701 = null;
          if (arguments.length > 3) {
            var G__8702__i = 0, G__8702__a = new Array(arguments.length - 3);
            while (G__8702__i < G__8702__a.length) {
              G__8702__a[G__8702__i] = arguments[G__8702__i + 3];
              ++G__8702__i;
            }
            G__8701 = new cljs.core.IndexedSeq(G__8702__a, 0);
          }
          return G__8697__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, G__8701);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__8697.cljs$lang$maxFixedArity = 3;
    G__8697.cljs$lang$applyTo = G__8697__4.cljs$lang$applyTo;
    G__8697.cljs$core$IFn$_invoke$arity$2 = G__8697__2;
    G__8697.cljs$core$IFn$_invoke$arity$3 = G__8697__3;
    G__8697.cljs$core$IFn$_invoke$arity$variadic = G__8697__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__8697;
  }();
};
cljs.core.fnil.cljs$core$IFn$_invoke$arity$4 = function(f, x, y, z) {
  return function() {
    var G__8703 = null;
    var G__8703__2 = function(a, b) {
      var G__8685 = a == null ? x : a;
      var G__8686 = b == null ? y : b;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8685, G__8686) : f.call(null, G__8685, G__8686);
    };
    var G__8703__3 = function(a, b, c) {
      var G__8687 = a == null ? x : a;
      var G__8688 = b == null ? y : b;
      var G__8689 = c == null ? z : c;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__8687, G__8688, G__8689) : f.call(null, G__8687, G__8688, G__8689);
    };
    var G__8703__4 = function() {
      var G__8704__delegate = function(a, b, c, ds) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a == null ? x : a, b == null ? y : b, c == null ? z : c, ds);
      };
      var G__8704 = function(a, b, c, var_args) {
        var ds = null;
        if (arguments.length > 3) {
          var G__8705__i = 0, G__8705__a = new Array(arguments.length - 3);
          while (G__8705__i < G__8705__a.length) {
            G__8705__a[G__8705__i] = arguments[G__8705__i + 3];
            ++G__8705__i;
          }
          ds = new cljs.core.IndexedSeq(G__8705__a, 0);
        }
        return G__8704__delegate.call(this, a, b, c, ds);
      };
      G__8704.cljs$lang$maxFixedArity = 3;
      G__8704.cljs$lang$applyTo = function(arglist__8706) {
        var a = cljs.core.first(arglist__8706);
        arglist__8706 = cljs.core.next(arglist__8706);
        var b = cljs.core.first(arglist__8706);
        arglist__8706 = cljs.core.next(arglist__8706);
        var c = cljs.core.first(arglist__8706);
        var ds = cljs.core.rest(arglist__8706);
        return G__8704__delegate(a, b, c, ds);
      };
      G__8704.cljs$core$IFn$_invoke$arity$variadic = G__8704__delegate;
      return G__8704;
    }();
    G__8703 = function(a, b, c, var_args) {
      var ds = var_args;
      switch(arguments.length) {
        case 2:
          return G__8703__2.call(this, a, b);
        case 3:
          return G__8703__3.call(this, a, b, c);
        default:
          var G__8707 = null;
          if (arguments.length > 3) {
            var G__8708__i = 0, G__8708__a = new Array(arguments.length - 3);
            while (G__8708__i < G__8708__a.length) {
              G__8708__a[G__8708__i] = arguments[G__8708__i + 3];
              ++G__8708__i;
            }
            G__8707 = new cljs.core.IndexedSeq(G__8708__a, 0);
          }
          return G__8703__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, G__8707);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__8703.cljs$lang$maxFixedArity = 3;
    G__8703.cljs$lang$applyTo = G__8703__4.cljs$lang$applyTo;
    G__8703.cljs$core$IFn$_invoke$arity$2 = G__8703__2;
    G__8703.cljs$core$IFn$_invoke$arity$3 = G__8703__3;
    G__8703.cljs$core$IFn$_invoke$arity$variadic = G__8703__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__8703;
  }();
};
cljs.core.fnil.cljs$lang$maxFixedArity = 4;
cljs.core.map_indexed = function cljs$core$map_indexed() {
  var G__8710 = arguments.length;
  switch(G__8710) {
    case 1:
      return cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function(rf) {
    var i = function() {
      var G__8711 = -1;
      return cljs.core.volatile_BANG_.cljs$core$IFn$_invoke$arity$1 ? cljs.core.volatile_BANG_.cljs$core$IFn$_invoke$arity$1(G__8711) : cljs.core.volatile_BANG_.call(null, G__8711);
    }();
    return function(i) {
      return function() {
        var G__8742 = null;
        var G__8742__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__8742__1 = function(result) {
          var G__8712 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__8712) : rf.call(null, G__8712);
        };
        var G__8742__2 = function(result, input) {
          var G__8713 = result;
          var G__8714 = function() {
            var G__8715 = cljs.core._vreset_BANG_(i, cljs.core._deref(i) + 1);
            var G__8716 = input;
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8715, G__8716) : f.call(null, G__8715, G__8716);
          }();
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__8713, G__8714) : rf.call(null, G__8713, G__8714);
        };
        G__8742 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__8742__0.call(this);
            case 1:
              return G__8742__1.call(this, result);
            case 2:
              return G__8742__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__8742.cljs$core$IFn$_invoke$arity$0 = G__8742__0;
        G__8742.cljs$core$IFn$_invoke$arity$1 = G__8742__1;
        G__8742.cljs$core$IFn$_invoke$arity$2 = G__8742__2;
        return G__8742;
      }();
    }(i);
  };
};
cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  var mapi = function cljs$core$mapi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4422__auto__ = cljs.core.seq(coll__$1);
      if (temp__4422__auto__) {
        var s = temp__4422__auto__;
        if (cljs.core.chunked_seq_QMARK_(s)) {
          var c = cljs.core.chunk_first(s);
          var size = cljs.core.count(c);
          var b = cljs.core.chunk_buffer(size);
          var n__5194__auto___8743 = size;
          var i_8744 = 0;
          while (true) {
            if (i_8744 < n__5194__auto___8743) {
              cljs.core.chunk_append(b, function() {
                var G__8737 = idx + i_8744;
                var G__8738 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_8744);
                return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8737, G__8738) : f.call(null, G__8737, G__8738);
              }());
              var G__8745 = i_8744 + 1;
              i_8744 = G__8745;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons(cljs.core.chunk(b), cljs$core$mapi(idx + size, cljs.core.chunk_rest(s)));
        } else {
          return cljs.core.cons(function() {
            var G__8739 = idx;
            var G__8740 = cljs.core.first(s);
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8739, G__8740) : f.call(null, G__8739, G__8740);
          }(), cljs$core$mapi(idx + 1, cljs.core.rest(s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return mapi(0, coll);
};
cljs.core.map_indexed.cljs$lang$maxFixedArity = 2;
cljs.core.keep = function cljs$core$keep() {
  var G__8747 = arguments.length;
  switch(G__8747) {
    case 1:
      return cljs.core.keep.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.keep.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.keep.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function(rf) {
    return function() {
      var G__8755 = null;
      var G__8755__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__8755__1 = function(result) {
        var G__8748 = result;
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__8748) : rf.call(null, G__8748);
      };
      var G__8755__2 = function(result, input) {
        var v = function() {
          var G__8749 = input;
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__8749) : f.call(null, G__8749);
        }();
        if (v == null) {
          return result;
        } else {
          var G__8750 = result;
          var G__8751 = v;
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__8750, G__8751) : rf.call(null, G__8750, G__8751);
        }
      };
      G__8755 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__8755__0.call(this);
          case 1:
            return G__8755__1.call(this, result);
          case 2:
            return G__8755__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__8755.cljs$core$IFn$_invoke$arity$0 = G__8755__0;
      G__8755.cljs$core$IFn$_invoke$arity$1 = G__8755__1;
      G__8755.cljs$core$IFn$_invoke$arity$2 = G__8755__2;
      return G__8755;
    }();
  };
};
cljs.core.keep.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4422__auto__ = cljs.core.seq(coll);
    if (temp__4422__auto__) {
      var s = temp__4422__auto__;
      if (cljs.core.chunked_seq_QMARK_(s)) {
        var c = cljs.core.chunk_first(s);
        var size = cljs.core.count(c);
        var b = cljs.core.chunk_buffer(size);
        var n__5194__auto___8756 = size;
        var i_8757 = 0;
        while (true) {
          if (i_8757 < n__5194__auto___8756) {
            var x_8758 = function() {
              var G__8752 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_8757);
              return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__8752) : f.call(null, G__8752);
            }();
            if (x_8758 == null) {
            } else {
              cljs.core.chunk_append(b, x_8758);
            }
            var G__8759 = i_8757 + 1;
            i_8757 = G__8759;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons(cljs.core.chunk(b), cljs.core.keep.cljs$core$IFn$_invoke$arity$2(f, cljs.core.chunk_rest(s)));
      } else {
        var x = function() {
          var G__8753 = cljs.core.first(s);
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__8753) : f.call(null, G__8753);
        }();
        if (x == null) {
          return cljs.core.keep.cljs$core$IFn$_invoke$arity$2(f, cljs.core.rest(s));
        } else {
          return cljs.core.cons(x, cljs.core.keep.cljs$core$IFn$_invoke$arity$2(f, cljs.core.rest(s)));
        }
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.keep.cljs$lang$maxFixedArity = 2;
cljs.core.Atom = function(state, meta, validator, watches) {
  this.state = state;
  this.meta = meta;
  this.validator = validator;
  this.watches = watches;
  this.cljs$lang$protocol_mask$partition1$ = 16386;
  this.cljs$lang$protocol_mask$partition0$ = 6455296;
};
cljs.core.Atom.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Atom.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return o__$1 === other;
};
cljs.core.Atom.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
cljs.core.Atom.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  var seq__8760 = cljs.core.seq(self__.watches);
  var chunk__8761 = null;
  var count__8762 = 0;
  var i__8763 = 0;
  while (true) {
    if (i__8763 < count__8762) {
      var vec__8764 = chunk__8761.cljs$core$IIndexed$_nth$arity$2(null, i__8763);
      var key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8764, 0, null);
      var f = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8764, 1, null);
      var G__8765_8775 = key;
      var G__8766_8776 = this$__$1;
      var G__8767_8777 = oldval;
      var G__8768_8778 = newval;
      f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__8765_8775, G__8766_8776, G__8767_8777, G__8768_8778) : f.call(null, G__8765_8775, G__8766_8776, G__8767_8777, G__8768_8778);
      var G__8779 = seq__8760;
      var G__8780 = chunk__8761;
      var G__8781 = count__8762;
      var G__8782 = i__8763 + 1;
      seq__8760 = G__8779;
      chunk__8761 = G__8780;
      count__8762 = G__8781;
      i__8763 = G__8782;
      continue;
    } else {
      var temp__4422__auto__ = cljs.core.seq(seq__8760);
      if (temp__4422__auto__) {
        var seq__8760__$1 = temp__4422__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__8760__$1)) {
          var c__5094__auto__ = cljs.core.chunk_first(seq__8760__$1);
          var G__8783 = cljs.core.chunk_rest(seq__8760__$1);
          var G__8784 = c__5094__auto__;
          var G__8785 = cljs.core.count(c__5094__auto__);
          var G__8786 = 0;
          seq__8760 = G__8783;
          chunk__8761 = G__8784;
          count__8762 = G__8785;
          i__8763 = G__8786;
          continue;
        } else {
          var vec__8769 = cljs.core.first(seq__8760__$1);
          var key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8769, 0, null);
          var f = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8769, 1, null);
          var G__8770_8787 = key;
          var G__8771_8788 = this$__$1;
          var G__8772_8789 = oldval;
          var G__8773_8790 = newval;
          f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__8770_8787, G__8771_8788, G__8772_8789, G__8773_8790) : f.call(null, G__8770_8787, G__8771_8788, G__8772_8789, G__8773_8790);
          var G__8791 = cljs.core.next(seq__8760__$1);
          var G__8792 = null;
          var G__8793 = 0;
          var G__8794 = 0;
          seq__8760 = G__8791;
          chunk__8761 = G__8792;
          count__8762 = G__8793;
          i__8763 = G__8794;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  this$__$1.watches = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.watches, key, f);
  return this$__$1;
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.watches = cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(self__.watches, key);
};
cljs.core.Atom.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var G__8774 = this$__$1;
  return goog.getUid(G__8774);
};
cljs.core.Atom.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "state", "state", -348086572, null), new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "validator", "validator", -325659154, null), new cljs.core.Symbol(null, "watches", "watches", 1367433992, null)], null);
};
cljs.core.Atom.cljs$lang$type = true;
cljs.core.Atom.cljs$lang$ctorStr = "cljs.core/Atom";
cljs.core.Atom.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/Atom");
};
cljs.core.__GT_Atom = function cljs$core$__GT_Atom(state, meta, validator, watches) {
  return new cljs.core.Atom(state, meta, validator, watches);
};
cljs.core.atom = function cljs$core$atom() {
  var G__8798 = arguments.length;
  switch(G__8798) {
    case 1:
      return cljs.core.atom.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0);
      return cljs.core.atom.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5360__auto__);
  }
};
cljs.core.atom.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return new cljs.core.Atom(x, null, null, null);
};
cljs.core.atom.cljs$core$IFn$_invoke$arity$variadic = function(x, p__8799) {
  var map__8800 = p__8799;
  var map__8800__$1 = cljs.core.seq_QMARK_(map__8800) ? cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map, map__8800) : map__8800;
  var meta = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__8800__$1, new cljs.core.Keyword(null, "meta", "meta", 1499536964));
  var validator = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__8800__$1, new cljs.core.Keyword(null, "validator", "validator", -1966190681));
  return new cljs.core.Atom(x, meta, validator, null);
};
cljs.core.atom.cljs$lang$applyTo = function(seq8795) {
  var G__8796 = cljs.core.first(seq8795);
  var seq8795__$1 = cljs.core.next(seq8795);
  return cljs.core.atom.cljs$core$IFn$_invoke$arity$variadic(G__8796, seq8795__$1);
};
cljs.core.atom.cljs$lang$maxFixedArity = 1;
cljs.core.reset_BANG_ = function cljs$core$reset_BANG_(a, new_value) {
  if (a instanceof cljs.core.Atom) {
    var validate = a.validator;
    if (validate == null) {
    } else {
      if (cljs.core.truth_(function() {
        var G__8804 = new_value;
        return validate.cljs$core$IFn$_invoke$arity$1 ? validate.cljs$core$IFn$_invoke$arity$1(G__8804) : validate.call(null, G__8804);
      }())) {
      } else {
        throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Validator rejected reference state"), cljs.core.str("\n"), cljs.core.str(function() {
          var G__8805 = cljs.core.list(new cljs.core.Symbol(null, "validate", "validate", 1439230700, null), new cljs.core.Symbol(null, "new-value", "new-value", -1567397401, null));
          return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$1 ? cljs.core.pr_str.cljs$core$IFn$_invoke$arity$1(G__8805) : cljs.core.pr_str.call(null, G__8805);
        }())].join(""));
      }
    }
    var old_value = a.state;
    a.state = new_value;
    if (a.watches == null) {
    } else {
      cljs.core._notify_watches(a, old_value, new_value);
    }
    return new_value;
  } else {
    return cljs.core._reset_BANG_(a, new_value);
  }
};
cljs.core.swap_BANG_ = function cljs$core$swap_BANG_() {
  var G__8812 = arguments.length;
  switch(G__8812) {
    case 2:
      return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 4), 0);
      return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__5360__auto__);
  }
};
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2 = function(a, f) {
  if (a instanceof cljs.core.Atom) {
    return cljs.core.reset_BANG_(a, function() {
      var G__8813 = a.state;
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__8813) : f.call(null, G__8813);
    }());
  } else {
    return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$2(a, f);
  }
};
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3 = function(a, f, x) {
  if (a instanceof cljs.core.Atom) {
    return cljs.core.reset_BANG_(a, function() {
      var G__8814 = a.state;
      var G__8815 = x;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8814, G__8815) : f.call(null, G__8814, G__8815);
    }());
  } else {
    return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$3(a, f, x);
  }
};
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4 = function(a, f, x, y) {
  if (a instanceof cljs.core.Atom) {
    return cljs.core.reset_BANG_(a, function() {
      var G__8816 = a.state;
      var G__8817 = x;
      var G__8818 = y;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__8816, G__8817, G__8818) : f.call(null, G__8816, G__8817, G__8818);
    }());
  } else {
    return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$4(a, f, x, y);
  }
};
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(a, f, x, y, more) {
  if (a instanceof cljs.core.Atom) {
    return cljs.core.reset_BANG_(a, cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a.state, x, y, more));
  } else {
    return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$5(a, f, x, y, more);
  }
};
cljs.core.swap_BANG_.cljs$lang$applyTo = function(seq8806) {
  var G__8807 = cljs.core.first(seq8806);
  var seq8806__$1 = cljs.core.next(seq8806);
  var G__8808 = cljs.core.first(seq8806__$1);
  var seq8806__$2 = cljs.core.next(seq8806__$1);
  var G__8809 = cljs.core.first(seq8806__$2);
  var seq8806__$3 = cljs.core.next(seq8806__$2);
  var G__8810 = cljs.core.first(seq8806__$3);
  var seq8806__$4 = cljs.core.next(seq8806__$3);
  return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__8807, G__8808, G__8809, G__8810, seq8806__$4);
};
cljs.core.swap_BANG_.cljs$lang$maxFixedArity = 4;
cljs.core.compare_and_set_BANG_ = function cljs$core$compare_and_set_BANG_(a, oldval, newval) {
  if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(a.cljs$core$IDeref$_deref$arity$1(null), oldval)) {
    cljs.core.reset_BANG_(a, newval);
    return true;
  } else {
    return false;
  }
};
cljs.core.set_validator_BANG_ = function cljs$core$set_validator_BANG_(iref, val) {
  return iref.validator = val;
};
cljs.core.get_validator = function cljs$core$get_validator(iref) {
  return iref.validator;
};
cljs.core.Volatile = function(state) {
  this.state = state;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.Volatile.prototype.cljs$core$IVolatile$ = true;
cljs.core.Volatile.prototype.cljs$core$IVolatile$_vreset_BANG_$arity$2 = function(_, new_state) {
  var self__ = this;
  var ___$1 = this;
  return self__.state = new_state;
};
cljs.core.Volatile.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
cljs.core.Volatile.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "state", "state", -348086572, null)], null);
};
cljs.core.Volatile.cljs$lang$type = true;
cljs.core.Volatile.cljs$lang$ctorStr = "cljs.core/Volatile";
cljs.core.Volatile.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/Volatile");
};
cljs.core.__GT_Volatile = function cljs$core$__GT_Volatile(state) {
  return new cljs.core.Volatile(state);
};
cljs.core.volatile_BANG_ = function cljs$core$volatile_BANG_(val) {
  return new cljs.core.Volatile(val);
};
cljs.core.volatile_QMARK_ = function cljs$core$volatile_QMARK_(x) {
  return x instanceof cljs.core.Volatile;
};
cljs.core.vreset_BANG_ = function cljs$core$vreset_BANG_(vol, newval) {
  return cljs.core._vreset_BANG_(vol, newval);
};
cljs.core.keep_indexed = function cljs$core$keep_indexed() {
  var G__8821 = arguments.length;
  switch(G__8821) {
    case 1:
      return cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function(rf) {
    var ia = cljs.core.volatile_BANG_(-1);
    return function(ia) {
      return function() {
        var G__8856 = null;
        var G__8856__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__8856__1 = function(result) {
          var G__8822 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__8822) : rf.call(null, G__8822);
        };
        var G__8856__2 = function(result, input) {
          var i = cljs.core._vreset_BANG_(ia, cljs.core._deref(ia) + 1);
          var v = function() {
            var G__8823 = i;
            var G__8824 = input;
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8823, G__8824) : f.call(null, G__8823, G__8824);
          }();
          if (v == null) {
            return result;
          } else {
            var G__8825 = result;
            var G__8826 = v;
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__8825, G__8826) : rf.call(null, G__8825, G__8826);
          }
        };
        G__8856 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__8856__0.call(this);
            case 1:
              return G__8856__1.call(this, result);
            case 2:
              return G__8856__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__8856.cljs$core$IFn$_invoke$arity$0 = G__8856__0;
        G__8856.cljs$core$IFn$_invoke$arity$1 = G__8856__1;
        G__8856.cljs$core$IFn$_invoke$arity$2 = G__8856__2;
        return G__8856;
      }();
    }(ia);
  };
};
cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  var keepi = function cljs$core$keepi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4422__auto__ = cljs.core.seq(coll__$1);
      if (temp__4422__auto__) {
        var s = temp__4422__auto__;
        if (cljs.core.chunked_seq_QMARK_(s)) {
          var c = cljs.core.chunk_first(s);
          var size = cljs.core.count(c);
          var b = cljs.core.chunk_buffer(size);
          var n__5194__auto___8857 = size;
          var i_8858 = 0;
          while (true) {
            if (i_8858 < n__5194__auto___8857) {
              var x_8859 = function() {
                var G__8851 = idx + i_8858;
                var G__8852 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_8858);
                return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8851, G__8852) : f.call(null, G__8851, G__8852);
              }();
              if (x_8859 == null) {
              } else {
                cljs.core.chunk_append(b, x_8859);
              }
              var G__8860 = i_8858 + 1;
              i_8858 = G__8860;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons(cljs.core.chunk(b), cljs$core$keepi(idx + size, cljs.core.chunk_rest(s)));
        } else {
          var x = function() {
            var G__8853 = idx;
            var G__8854 = cljs.core.first(s);
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8853, G__8854) : f.call(null, G__8853, G__8854);
          }();
          if (x == null) {
            return cljs$core$keepi(idx + 1, cljs.core.rest(s));
          } else {
            return cljs.core.cons(x, cljs$core$keepi(idx + 1, cljs.core.rest(s)));
          }
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return keepi(0, coll);
};
cljs.core.keep_indexed.cljs$lang$maxFixedArity = 2;
cljs.core.every_pred = function cljs$core$every_pred() {
  var G__8872 = arguments.length;
  switch(G__8872) {
    case 1:
      return cljs.core.every_pred.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.every_pred.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.every_pred.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 3), 0);
      return cljs.core.every_pred.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5360__auto__);
  }
};
cljs.core.every_pred.cljs$core$IFn$_invoke$arity$1 = function(p) {
  return function() {
    var cljs$core$ep1 = null;
    var cljs$core$ep1__0 = function() {
      return true;
    };
    var cljs$core$ep1__1 = function(x) {
      return cljs.core.boolean$(function() {
        var G__8888 = x;
        return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__8888) : p.call(null, G__8888);
      }());
    };
    var cljs$core$ep1__2 = function(x, y) {
      return cljs.core.boolean$(function() {
        var and__4297__auto__ = function() {
          var G__8890 = x;
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__8890) : p.call(null, G__8890);
        }();
        if (cljs.core.truth_(and__4297__auto__)) {
          var G__8891 = y;
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__8891) : p.call(null, G__8891);
        } else {
          return and__4297__auto__;
        }
      }());
    };
    var cljs$core$ep1__3 = function(x, y, z) {
      return cljs.core.boolean$(function() {
        var and__4297__auto__ = function() {
          var G__8893 = x;
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__8893) : p.call(null, G__8893);
        }();
        if (cljs.core.truth_(and__4297__auto__)) {
          var and__4297__auto____$1 = function() {
            var G__8895 = y;
            return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__8895) : p.call(null, G__8895);
          }();
          if (cljs.core.truth_(and__4297__auto____$1)) {
            var G__8896 = z;
            return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__8896) : p.call(null, G__8896);
          } else {
            return and__4297__auto____$1;
          }
        } else {
          return and__4297__auto__;
        }
      }());
    };
    var cljs$core$ep1__4 = function() {
      var G__9058__delegate = function(x, y, z, args) {
        return cljs.core.boolean$(function() {
          var and__4297__auto__ = cljs$core$ep1.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(and__4297__auto__)) {
            return cljs.core.every_QMARK_(p, args);
          } else {
            return and__4297__auto__;
          }
        }());
      };
      var G__9058 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__9059__i = 0, G__9059__a = new Array(arguments.length - 3);
          while (G__9059__i < G__9059__a.length) {
            G__9059__a[G__9059__i] = arguments[G__9059__i + 3];
            ++G__9059__i;
          }
          args = new cljs.core.IndexedSeq(G__9059__a, 0);
        }
        return G__9058__delegate.call(this, x, y, z, args);
      };
      G__9058.cljs$lang$maxFixedArity = 3;
      G__9058.cljs$lang$applyTo = function(arglist__9060) {
        var x = cljs.core.first(arglist__9060);
        arglist__9060 = cljs.core.next(arglist__9060);
        var y = cljs.core.first(arglist__9060);
        arglist__9060 = cljs.core.next(arglist__9060);
        var z = cljs.core.first(arglist__9060);
        var args = cljs.core.rest(arglist__9060);
        return G__9058__delegate(x, y, z, args);
      };
      G__9058.cljs$core$IFn$_invoke$arity$variadic = G__9058__delegate;
      return G__9058;
    }();
    cljs$core$ep1 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$ep1__0.call(this);
        case 1:
          return cljs$core$ep1__1.call(this, x);
        case 2:
          return cljs$core$ep1__2.call(this, x, y);
        case 3:
          return cljs$core$ep1__3.call(this, x, y, z);
        default:
          var G__9061 = null;
          if (arguments.length > 3) {
            var G__9062__i = 0, G__9062__a = new Array(arguments.length - 3);
            while (G__9062__i < G__9062__a.length) {
              G__9062__a[G__9062__i] = arguments[G__9062__i + 3];
              ++G__9062__i;
            }
            G__9061 = new cljs.core.IndexedSeq(G__9062__a, 0);
          }
          return cljs$core$ep1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__9061);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$ep1.cljs$lang$maxFixedArity = 3;
    cljs$core$ep1.cljs$lang$applyTo = cljs$core$ep1__4.cljs$lang$applyTo;
    cljs$core$ep1.cljs$core$IFn$_invoke$arity$0 = cljs$core$ep1__0;
    cljs$core$ep1.cljs$core$IFn$_invoke$arity$1 = cljs$core$ep1__1;
    cljs$core$ep1.cljs$core$IFn$_invoke$arity$2 = cljs$core$ep1__2;
    cljs$core$ep1.cljs$core$IFn$_invoke$arity$3 = cljs$core$ep1__3;
    cljs$core$ep1.cljs$core$IFn$_invoke$arity$variadic = cljs$core$ep1__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$ep1;
  }();
};
cljs.core.every_pred.cljs$core$IFn$_invoke$arity$2 = function(p1, p2) {
  return function() {
    var cljs$core$ep2 = null;
    var cljs$core$ep2__0 = function() {
      return true;
    };
    var cljs$core$ep2__1 = function(x) {
      return cljs.core.boolean$(function() {
        var and__4297__auto__ = function() {
          var G__8928 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__8928) : p1.call(null, G__8928);
        }();
        if (cljs.core.truth_(and__4297__auto__)) {
          var G__8929 = x;
          return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__8929) : p2.call(null, G__8929);
        } else {
          return and__4297__auto__;
        }
      }());
    };
    var cljs$core$ep2__2 = function(x, y) {
      return cljs.core.boolean$(function() {
        var and__4297__auto__ = function() {
          var G__8931 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__8931) : p1.call(null, G__8931);
        }();
        if (cljs.core.truth_(and__4297__auto__)) {
          var and__4297__auto____$1 = function() {
            var G__8933 = y;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__8933) : p1.call(null, G__8933);
          }();
          if (cljs.core.truth_(and__4297__auto____$1)) {
            var and__4297__auto____$2 = function() {
              var G__8935 = x;
              return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__8935) : p2.call(null, G__8935);
            }();
            if (cljs.core.truth_(and__4297__auto____$2)) {
              var G__8936 = y;
              return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__8936) : p2.call(null, G__8936);
            } else {
              return and__4297__auto____$2;
            }
          } else {
            return and__4297__auto____$1;
          }
        } else {
          return and__4297__auto__;
        }
      }());
    };
    var cljs$core$ep2__3 = function(x, y, z) {
      return cljs.core.boolean$(function() {
        var and__4297__auto__ = function() {
          var G__8938 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__8938) : p1.call(null, G__8938);
        }();
        if (cljs.core.truth_(and__4297__auto__)) {
          var and__4297__auto____$1 = function() {
            var G__8940 = y;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__8940) : p1.call(null, G__8940);
          }();
          if (cljs.core.truth_(and__4297__auto____$1)) {
            var and__4297__auto____$2 = function() {
              var G__8942 = z;
              return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__8942) : p1.call(null, G__8942);
            }();
            if (cljs.core.truth_(and__4297__auto____$2)) {
              var and__4297__auto____$3 = function() {
                var G__8944 = x;
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__8944) : p2.call(null, G__8944);
              }();
              if (cljs.core.truth_(and__4297__auto____$3)) {
                var and__4297__auto____$4 = function() {
                  var G__8946 = y;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__8946) : p2.call(null, G__8946);
                }();
                if (cljs.core.truth_(and__4297__auto____$4)) {
                  var G__8947 = z;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__8947) : p2.call(null, G__8947);
                } else {
                  return and__4297__auto____$4;
                }
              } else {
                return and__4297__auto____$3;
              }
            } else {
              return and__4297__auto____$2;
            }
          } else {
            return and__4297__auto____$1;
          }
        } else {
          return and__4297__auto__;
        }
      }());
    };
    var cljs$core$ep2__4 = function() {
      var G__9063__delegate = function(x, y, z, args) {
        return cljs.core.boolean$(function() {
          var and__4297__auto__ = cljs$core$ep2.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(and__4297__auto__)) {
            return cljs.core.every_QMARK_(function(and__4297__auto__) {
              return function(p1__8861_SHARP_) {
                var and__4297__auto____$1 = function() {
                  var G__8949 = p1__8861_SHARP_;
                  return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__8949) : p1.call(null, G__8949);
                }();
                if (cljs.core.truth_(and__4297__auto____$1)) {
                  var G__8950 = p1__8861_SHARP_;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__8950) : p2.call(null, G__8950);
                } else {
                  return and__4297__auto____$1;
                }
              };
            }(and__4297__auto__), args);
          } else {
            return and__4297__auto__;
          }
        }());
      };
      var G__9063 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__9064__i = 0, G__9064__a = new Array(arguments.length - 3);
          while (G__9064__i < G__9064__a.length) {
            G__9064__a[G__9064__i] = arguments[G__9064__i + 3];
            ++G__9064__i;
          }
          args = new cljs.core.IndexedSeq(G__9064__a, 0);
        }
        return G__9063__delegate.call(this, x, y, z, args);
      };
      G__9063.cljs$lang$maxFixedArity = 3;
      G__9063.cljs$lang$applyTo = function(arglist__9065) {
        var x = cljs.core.first(arglist__9065);
        arglist__9065 = cljs.core.next(arglist__9065);
        var y = cljs.core.first(arglist__9065);
        arglist__9065 = cljs.core.next(arglist__9065);
        var z = cljs.core.first(arglist__9065);
        var args = cljs.core.rest(arglist__9065);
        return G__9063__delegate(x, y, z, args);
      };
      G__9063.cljs$core$IFn$_invoke$arity$variadic = G__9063__delegate;
      return G__9063;
    }();
    cljs$core$ep2 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$ep2__0.call(this);
        case 1:
          return cljs$core$ep2__1.call(this, x);
        case 2:
          return cljs$core$ep2__2.call(this, x, y);
        case 3:
          return cljs$core$ep2__3.call(this, x, y, z);
        default:
          var G__9066 = null;
          if (arguments.length > 3) {
            var G__9067__i = 0, G__9067__a = new Array(arguments.length - 3);
            while (G__9067__i < G__9067__a.length) {
              G__9067__a[G__9067__i] = arguments[G__9067__i + 3];
              ++G__9067__i;
            }
            G__9066 = new cljs.core.IndexedSeq(G__9067__a, 0);
          }
          return cljs$core$ep2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__9066);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$ep2.cljs$lang$maxFixedArity = 3;
    cljs$core$ep2.cljs$lang$applyTo = cljs$core$ep2__4.cljs$lang$applyTo;
    cljs$core$ep2.cljs$core$IFn$_invoke$arity$0 = cljs$core$ep2__0;
    cljs$core$ep2.cljs$core$IFn$_invoke$arity$1 = cljs$core$ep2__1;
    cljs$core$ep2.cljs$core$IFn$_invoke$arity$2 = cljs$core$ep2__2;
    cljs$core$ep2.cljs$core$IFn$_invoke$arity$3 = cljs$core$ep2__3;
    cljs$core$ep2.cljs$core$IFn$_invoke$arity$variadic = cljs$core$ep2__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$ep2;
  }();
};
cljs.core.every_pred.cljs$core$IFn$_invoke$arity$3 = function(p1, p2, p3) {
  return function() {
    var cljs$core$ep3 = null;
    var cljs$core$ep3__0 = function() {
      return true;
    };
    var cljs$core$ep3__1 = function(x) {
      return cljs.core.boolean$(function() {
        var and__4297__auto__ = function() {
          var G__8996 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__8996) : p1.call(null, G__8996);
        }();
        if (cljs.core.truth_(and__4297__auto__)) {
          var and__4297__auto____$1 = function() {
            var G__8998 = x;
            return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__8998) : p2.call(null, G__8998);
          }();
          if (cljs.core.truth_(and__4297__auto____$1)) {
            var G__8999 = x;
            return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__8999) : p3.call(null, G__8999);
          } else {
            return and__4297__auto____$1;
          }
        } else {
          return and__4297__auto__;
        }
      }());
    };
    var cljs$core$ep3__2 = function(x, y) {
      return cljs.core.boolean$(function() {
        var and__4297__auto__ = function() {
          var G__9001 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__9001) : p1.call(null, G__9001);
        }();
        if (cljs.core.truth_(and__4297__auto__)) {
          var and__4297__auto____$1 = function() {
            var G__9003 = x;
            return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__9003) : p2.call(null, G__9003);
          }();
          if (cljs.core.truth_(and__4297__auto____$1)) {
            var and__4297__auto____$2 = function() {
              var G__9005 = x;
              return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__9005) : p3.call(null, G__9005);
            }();
            if (cljs.core.truth_(and__4297__auto____$2)) {
              var and__4297__auto____$3 = function() {
                var G__9007 = y;
                return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__9007) : p1.call(null, G__9007);
              }();
              if (cljs.core.truth_(and__4297__auto____$3)) {
                var and__4297__auto____$4 = function() {
                  var G__9009 = y;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__9009) : p2.call(null, G__9009);
                }();
                if (cljs.core.truth_(and__4297__auto____$4)) {
                  var G__9010 = y;
                  return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__9010) : p3.call(null, G__9010);
                } else {
                  return and__4297__auto____$4;
                }
              } else {
                return and__4297__auto____$3;
              }
            } else {
              return and__4297__auto____$2;
            }
          } else {
            return and__4297__auto____$1;
          }
        } else {
          return and__4297__auto__;
        }
      }());
    };
    var cljs$core$ep3__3 = function(x, y, z) {
      return cljs.core.boolean$(function() {
        var and__4297__auto__ = function() {
          var G__9012 = x;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__9012) : p1.call(null, G__9012);
        }();
        if (cljs.core.truth_(and__4297__auto__)) {
          var and__4297__auto____$1 = function() {
            var G__9014 = x;
            return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__9014) : p2.call(null, G__9014);
          }();
          if (cljs.core.truth_(and__4297__auto____$1)) {
            var and__4297__auto____$2 = function() {
              var G__9016 = x;
              return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__9016) : p3.call(null, G__9016);
            }();
            if (cljs.core.truth_(and__4297__auto____$2)) {
              var and__4297__auto____$3 = function() {
                var G__9018 = y;
                return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__9018) : p1.call(null, G__9018);
              }();
              if (cljs.core.truth_(and__4297__auto____$3)) {
                var and__4297__auto____$4 = function() {
                  var G__9020 = y;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__9020) : p2.call(null, G__9020);
                }();
                if (cljs.core.truth_(and__4297__auto____$4)) {
                  var and__4297__auto____$5 = function() {
                    var G__9022 = y;
                    return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__9022) : p3.call(null, G__9022);
                  }();
                  if (cljs.core.truth_(and__4297__auto____$5)) {
                    var and__4297__auto____$6 = function() {
                      var G__9024 = z;
                      return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__9024) : p1.call(null, G__9024);
                    }();
                    if (cljs.core.truth_(and__4297__auto____$6)) {
                      var and__4297__auto____$7 = function() {
                        var G__9026 = z;
                        return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__9026) : p2.call(null, G__9026);
                      }();
                      if (cljs.core.truth_(and__4297__auto____$7)) {
                        var G__9027 = z;
                        return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__9027) : p3.call(null, G__9027);
                      } else {
                        return and__4297__auto____$7;
                      }
                    } else {
                      return and__4297__auto____$6;
                    }
                  } else {
                    return and__4297__auto____$5;
                  }
                } else {
                  return and__4297__auto____$4;
                }
              } else {
                return and__4297__auto____$3;
              }
            } else {
              return and__4297__auto____$2;
            }
          } else {
            return and__4297__auto____$1;
          }
        } else {
          return and__4297__auto__;
        }
      }());
    };
    var cljs$core$ep3__4 = function() {
      var G__9068__delegate = function(x, y, z, args) {
        return cljs.core.boolean$(function() {
          var and__4297__auto__ = cljs$core$ep3.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(and__4297__auto__)) {
            return cljs.core.every_QMARK_(function(and__4297__auto__) {
              return function(p1__8862_SHARP_) {
                var and__4297__auto____$1 = function() {
                  var G__9029 = p1__8862_SHARP_;
                  return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__9029) : p1.call(null, G__9029);
                }();
                if (cljs.core.truth_(and__4297__auto____$1)) {
                  var and__4297__auto____$2 = function() {
                    var G__9031 = p1__8862_SHARP_;
                    return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__9031) : p2.call(null, G__9031);
                  }();
                  if (cljs.core.truth_(and__4297__auto____$2)) {
                    var G__9032 = p1__8862_SHARP_;
                    return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__9032) : p3.call(null, G__9032);
                  } else {
                    return and__4297__auto____$2;
                  }
                } else {
                  return and__4297__auto____$1;
                }
              };
            }(and__4297__auto__), args);
          } else {
            return and__4297__auto__;
          }
        }());
      };
      var G__9068 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__9069__i = 0, G__9069__a = new Array(arguments.length - 3);
          while (G__9069__i < G__9069__a.length) {
            G__9069__a[G__9069__i] = arguments[G__9069__i + 3];
            ++G__9069__i;
          }
          args = new cljs.core.IndexedSeq(G__9069__a, 0);
        }
        return G__9068__delegate.call(this, x, y, z, args);
      };
      G__9068.cljs$lang$maxFixedArity = 3;
      G__9068.cljs$lang$applyTo = function(arglist__9070) {
        var x = cljs.core.first(arglist__9070);
        arglist__9070 = cljs.core.next(arglist__9070);
        var y = cljs.core.first(arglist__9070);
        arglist__9070 = cljs.core.next(arglist__9070);
        var z = cljs.core.first(arglist__9070);
        var args = cljs.core.rest(arglist__9070);
        return G__9068__delegate(x, y, z, args);
      };
      G__9068.cljs$core$IFn$_invoke$arity$variadic = G__9068__delegate;
      return G__9068;
    }();
    cljs$core$ep3 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$ep3__0.call(this);
        case 1:
          return cljs$core$ep3__1.call(this, x);
        case 2:
          return cljs$core$ep3__2.call(this, x, y);
        case 3:
          return cljs$core$ep3__3.call(this, x, y, z);
        default:
          var G__9071 = null;
          if (arguments.length > 3) {
            var G__9072__i = 0, G__9072__a = new Array(arguments.length - 3);
            while (G__9072__i < G__9072__a.length) {
              G__9072__a[G__9072__i] = arguments[G__9072__i + 3];
              ++G__9072__i;
            }
            G__9071 = new cljs.core.IndexedSeq(G__9072__a, 0);
          }
          return cljs$core$ep3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__9071);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$ep3.cljs$lang$maxFixedArity = 3;
    cljs$core$ep3.cljs$lang$applyTo = cljs$core$ep3__4.cljs$lang$applyTo;
    cljs$core$ep3.cljs$core$IFn$_invoke$arity$0 = cljs$core$ep3__0;
    cljs$core$ep3.cljs$core$IFn$_invoke$arity$1 = cljs$core$ep3__1;
    cljs$core$ep3.cljs$core$IFn$_invoke$arity$2 = cljs$core$ep3__2;
    cljs$core$ep3.cljs$core$IFn$_invoke$arity$3 = cljs$core$ep3__3;
    cljs$core$ep3.cljs$core$IFn$_invoke$arity$variadic = cljs$core$ep3__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$ep3;
  }();
};
cljs.core.every_pred.cljs$core$IFn$_invoke$arity$variadic = function(p1, p2, p3, ps) {
  var ps__$1 = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(p1, p2, p3, ps);
  return function(ps__$1) {
    return function() {
      var cljs$core$epn = null;
      var cljs$core$epn__0 = function() {
        return true;
      };
      var cljs$core$epn__1 = function(x) {
        return cljs.core.every_QMARK_(function(ps__$1) {
          return function(p1__8863_SHARP_) {
            var G__9048 = x;
            return p1__8863_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__8863_SHARP_.cljs$core$IFn$_invoke$arity$1(G__9048) : p1__8863_SHARP_.call(null, G__9048);
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$epn__2 = function(x, y) {
        return cljs.core.every_QMARK_(function(ps__$1) {
          return function(p1__8864_SHARP_) {
            var and__4297__auto__ = function() {
              var G__9050 = x;
              return p1__8864_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__8864_SHARP_.cljs$core$IFn$_invoke$arity$1(G__9050) : p1__8864_SHARP_.call(null, G__9050);
            }();
            if (cljs.core.truth_(and__4297__auto__)) {
              var G__9051 = y;
              return p1__8864_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__8864_SHARP_.cljs$core$IFn$_invoke$arity$1(G__9051) : p1__8864_SHARP_.call(null, G__9051);
            } else {
              return and__4297__auto__;
            }
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$epn__3 = function(x, y, z) {
        return cljs.core.every_QMARK_(function(ps__$1) {
          return function(p1__8865_SHARP_) {
            var and__4297__auto__ = function() {
              var G__9053 = x;
              return p1__8865_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__8865_SHARP_.cljs$core$IFn$_invoke$arity$1(G__9053) : p1__8865_SHARP_.call(null, G__9053);
            }();
            if (cljs.core.truth_(and__4297__auto__)) {
              var and__4297__auto____$1 = function() {
                var G__9055 = y;
                return p1__8865_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__8865_SHARP_.cljs$core$IFn$_invoke$arity$1(G__9055) : p1__8865_SHARP_.call(null, G__9055);
              }();
              if (cljs.core.truth_(and__4297__auto____$1)) {
                var G__9056 = z;
                return p1__8865_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__8865_SHARP_.cljs$core$IFn$_invoke$arity$1(G__9056) : p1__8865_SHARP_.call(null, G__9056);
              } else {
                return and__4297__auto____$1;
              }
            } else {
              return and__4297__auto__;
            }
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$epn__4 = function() {
        var G__9073__delegate = function(x, y, z, args) {
          return cljs.core.boolean$(function() {
            var and__4297__auto__ = cljs$core$epn.cljs$core$IFn$_invoke$arity$3(x, y, z);
            if (cljs.core.truth_(and__4297__auto__)) {
              return cljs.core.every_QMARK_(function(and__4297__auto__, ps__$1) {
                return function(p1__8866_SHARP_) {
                  return cljs.core.every_QMARK_(p1__8866_SHARP_, args);
                };
              }(and__4297__auto__, ps__$1), ps__$1);
            } else {
              return and__4297__auto__;
            }
          }());
        };
        var G__9073 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__9074__i = 0, G__9074__a = new Array(arguments.length - 3);
            while (G__9074__i < G__9074__a.length) {
              G__9074__a[G__9074__i] = arguments[G__9074__i + 3];
              ++G__9074__i;
            }
            args = new cljs.core.IndexedSeq(G__9074__a, 0);
          }
          return G__9073__delegate.call(this, x, y, z, args);
        };
        G__9073.cljs$lang$maxFixedArity = 3;
        G__9073.cljs$lang$applyTo = function(arglist__9075) {
          var x = cljs.core.first(arglist__9075);
          arglist__9075 = cljs.core.next(arglist__9075);
          var y = cljs.core.first(arglist__9075);
          arglist__9075 = cljs.core.next(arglist__9075);
          var z = cljs.core.first(arglist__9075);
          var args = cljs.core.rest(arglist__9075);
          return G__9073__delegate(x, y, z, args);
        };
        G__9073.cljs$core$IFn$_invoke$arity$variadic = G__9073__delegate;
        return G__9073;
      }();
      cljs$core$epn = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return cljs$core$epn__0.call(this);
          case 1:
            return cljs$core$epn__1.call(this, x);
          case 2:
            return cljs$core$epn__2.call(this, x, y);
          case 3:
            return cljs$core$epn__3.call(this, x, y, z);
          default:
            var G__9076 = null;
            if (arguments.length > 3) {
              var G__9077__i = 0, G__9077__a = new Array(arguments.length - 3);
              while (G__9077__i < G__9077__a.length) {
                G__9077__a[G__9077__i] = arguments[G__9077__i + 3];
                ++G__9077__i;
              }
              G__9076 = new cljs.core.IndexedSeq(G__9077__a, 0);
            }
            return cljs$core$epn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__9076);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      cljs$core$epn.cljs$lang$maxFixedArity = 3;
      cljs$core$epn.cljs$lang$applyTo = cljs$core$epn__4.cljs$lang$applyTo;
      cljs$core$epn.cljs$core$IFn$_invoke$arity$0 = cljs$core$epn__0;
      cljs$core$epn.cljs$core$IFn$_invoke$arity$1 = cljs$core$epn__1;
      cljs$core$epn.cljs$core$IFn$_invoke$arity$2 = cljs$core$epn__2;
      cljs$core$epn.cljs$core$IFn$_invoke$arity$3 = cljs$core$epn__3;
      cljs$core$epn.cljs$core$IFn$_invoke$arity$variadic = cljs$core$epn__4.cljs$core$IFn$_invoke$arity$variadic;
      return cljs$core$epn;
    }();
  }(ps__$1);
};
cljs.core.every_pred.cljs$lang$applyTo = function(seq8867) {
  var G__8868 = cljs.core.first(seq8867);
  var seq8867__$1 = cljs.core.next(seq8867);
  var G__8869 = cljs.core.first(seq8867__$1);
  var seq8867__$2 = cljs.core.next(seq8867__$1);
  var G__8870 = cljs.core.first(seq8867__$2);
  var seq8867__$3 = cljs.core.next(seq8867__$2);
  return cljs.core.every_pred.cljs$core$IFn$_invoke$arity$variadic(G__8868, G__8869, G__8870, seq8867__$3);
};
cljs.core.every_pred.cljs$lang$maxFixedArity = 3;
cljs.core.some_fn = function cljs$core$some_fn() {
  var G__9089 = arguments.length;
  switch(G__9089) {
    case 1:
      return cljs.core.some_fn.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.some_fn.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.some_fn.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 3), 0);
      return cljs.core.some_fn.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5360__auto__);
  }
};
cljs.core.some_fn.cljs$core$IFn$_invoke$arity$1 = function(p) {
  return function() {
    var cljs$core$sp1 = null;
    var cljs$core$sp1__0 = function() {
      return null;
    };
    var cljs$core$sp1__1 = function(x) {
      var G__9105 = x;
      return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__9105) : p.call(null, G__9105);
    };
    var cljs$core$sp1__2 = function(x, y) {
      var or__4309__auto__ = function() {
        var G__9107 = x;
        return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__9107) : p.call(null, G__9107);
      }();
      if (cljs.core.truth_(or__4309__auto__)) {
        return or__4309__auto__;
      } else {
        var G__9108 = y;
        return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__9108) : p.call(null, G__9108);
      }
    };
    var cljs$core$sp1__3 = function(x, y, z) {
      var or__4309__auto__ = function() {
        var G__9110 = x;
        return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__9110) : p.call(null, G__9110);
      }();
      if (cljs.core.truth_(or__4309__auto__)) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = function() {
          var G__9112 = y;
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__9112) : p.call(null, G__9112);
        }();
        if (cljs.core.truth_(or__4309__auto____$1)) {
          return or__4309__auto____$1;
        } else {
          var G__9113 = z;
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(G__9113) : p.call(null, G__9113);
        }
      }
    };
    var cljs$core$sp1__4 = function() {
      var G__9275__delegate = function(x, y, z, args) {
        var or__4309__auto__ = cljs$core$sp1.cljs$core$IFn$_invoke$arity$3(x, y, z);
        if (cljs.core.truth_(or__4309__auto__)) {
          return or__4309__auto__;
        } else {
          return cljs.core.some(p, args);
        }
      };
      var G__9275 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__9276__i = 0, G__9276__a = new Array(arguments.length - 3);
          while (G__9276__i < G__9276__a.length) {
            G__9276__a[G__9276__i] = arguments[G__9276__i + 3];
            ++G__9276__i;
          }
          args = new cljs.core.IndexedSeq(G__9276__a, 0);
        }
        return G__9275__delegate.call(this, x, y, z, args);
      };
      G__9275.cljs$lang$maxFixedArity = 3;
      G__9275.cljs$lang$applyTo = function(arglist__9277) {
        var x = cljs.core.first(arglist__9277);
        arglist__9277 = cljs.core.next(arglist__9277);
        var y = cljs.core.first(arglist__9277);
        arglist__9277 = cljs.core.next(arglist__9277);
        var z = cljs.core.first(arglist__9277);
        var args = cljs.core.rest(arglist__9277);
        return G__9275__delegate(x, y, z, args);
      };
      G__9275.cljs$core$IFn$_invoke$arity$variadic = G__9275__delegate;
      return G__9275;
    }();
    cljs$core$sp1 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$sp1__0.call(this);
        case 1:
          return cljs$core$sp1__1.call(this, x);
        case 2:
          return cljs$core$sp1__2.call(this, x, y);
        case 3:
          return cljs$core$sp1__3.call(this, x, y, z);
        default:
          var G__9278 = null;
          if (arguments.length > 3) {
            var G__9279__i = 0, G__9279__a = new Array(arguments.length - 3);
            while (G__9279__i < G__9279__a.length) {
              G__9279__a[G__9279__i] = arguments[G__9279__i + 3];
              ++G__9279__i;
            }
            G__9278 = new cljs.core.IndexedSeq(G__9279__a, 0);
          }
          return cljs$core$sp1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__9278);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$sp1.cljs$lang$maxFixedArity = 3;
    cljs$core$sp1.cljs$lang$applyTo = cljs$core$sp1__4.cljs$lang$applyTo;
    cljs$core$sp1.cljs$core$IFn$_invoke$arity$0 = cljs$core$sp1__0;
    cljs$core$sp1.cljs$core$IFn$_invoke$arity$1 = cljs$core$sp1__1;
    cljs$core$sp1.cljs$core$IFn$_invoke$arity$2 = cljs$core$sp1__2;
    cljs$core$sp1.cljs$core$IFn$_invoke$arity$3 = cljs$core$sp1__3;
    cljs$core$sp1.cljs$core$IFn$_invoke$arity$variadic = cljs$core$sp1__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$sp1;
  }();
};
cljs.core.some_fn.cljs$core$IFn$_invoke$arity$2 = function(p1, p2) {
  return function() {
    var cljs$core$sp2 = null;
    var cljs$core$sp2__0 = function() {
      return null;
    };
    var cljs$core$sp2__1 = function(x) {
      var or__4309__auto__ = function() {
        var G__9145 = x;
        return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__9145) : p1.call(null, G__9145);
      }();
      if (cljs.core.truth_(or__4309__auto__)) {
        return or__4309__auto__;
      } else {
        var G__9146 = x;
        return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__9146) : p2.call(null, G__9146);
      }
    };
    var cljs$core$sp2__2 = function(x, y) {
      var or__4309__auto__ = function() {
        var G__9148 = x;
        return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__9148) : p1.call(null, G__9148);
      }();
      if (cljs.core.truth_(or__4309__auto__)) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = function() {
          var G__9150 = y;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__9150) : p1.call(null, G__9150);
        }();
        if (cljs.core.truth_(or__4309__auto____$1)) {
          return or__4309__auto____$1;
        } else {
          var or__4309__auto____$2 = function() {
            var G__9152 = x;
            return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__9152) : p2.call(null, G__9152);
          }();
          if (cljs.core.truth_(or__4309__auto____$2)) {
            return or__4309__auto____$2;
          } else {
            var G__9153 = y;
            return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__9153) : p2.call(null, G__9153);
          }
        }
      }
    };
    var cljs$core$sp2__3 = function(x, y, z) {
      var or__4309__auto__ = function() {
        var G__9155 = x;
        return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__9155) : p1.call(null, G__9155);
      }();
      if (cljs.core.truth_(or__4309__auto__)) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = function() {
          var G__9157 = y;
          return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__9157) : p1.call(null, G__9157);
        }();
        if (cljs.core.truth_(or__4309__auto____$1)) {
          return or__4309__auto____$1;
        } else {
          var or__4309__auto____$2 = function() {
            var G__9159 = z;
            return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__9159) : p1.call(null, G__9159);
          }();
          if (cljs.core.truth_(or__4309__auto____$2)) {
            return or__4309__auto____$2;
          } else {
            var or__4309__auto____$3 = function() {
              var G__9161 = x;
              return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__9161) : p2.call(null, G__9161);
            }();
            if (cljs.core.truth_(or__4309__auto____$3)) {
              return or__4309__auto____$3;
            } else {
              var or__4309__auto____$4 = function() {
                var G__9163 = y;
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__9163) : p2.call(null, G__9163);
              }();
              if (cljs.core.truth_(or__4309__auto____$4)) {
                return or__4309__auto____$4;
              } else {
                var G__9164 = z;
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__9164) : p2.call(null, G__9164);
              }
            }
          }
        }
      }
    };
    var cljs$core$sp2__4 = function() {
      var G__9280__delegate = function(x, y, z, args) {
        var or__4309__auto__ = cljs$core$sp2.cljs$core$IFn$_invoke$arity$3(x, y, z);
        if (cljs.core.truth_(or__4309__auto__)) {
          return or__4309__auto__;
        } else {
          return cljs.core.some(function(or__4309__auto__) {
            return function(p1__9078_SHARP_) {
              var or__4309__auto____$1 = function() {
                var G__9166 = p1__9078_SHARP_;
                return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__9166) : p1.call(null, G__9166);
              }();
              if (cljs.core.truth_(or__4309__auto____$1)) {
                return or__4309__auto____$1;
              } else {
                var G__9167 = p1__9078_SHARP_;
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__9167) : p2.call(null, G__9167);
              }
            };
          }(or__4309__auto__), args);
        }
      };
      var G__9280 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__9281__i = 0, G__9281__a = new Array(arguments.length - 3);
          while (G__9281__i < G__9281__a.length) {
            G__9281__a[G__9281__i] = arguments[G__9281__i + 3];
            ++G__9281__i;
          }
          args = new cljs.core.IndexedSeq(G__9281__a, 0);
        }
        return G__9280__delegate.call(this, x, y, z, args);
      };
      G__9280.cljs$lang$maxFixedArity = 3;
      G__9280.cljs$lang$applyTo = function(arglist__9282) {
        var x = cljs.core.first(arglist__9282);
        arglist__9282 = cljs.core.next(arglist__9282);
        var y = cljs.core.first(arglist__9282);
        arglist__9282 = cljs.core.next(arglist__9282);
        var z = cljs.core.first(arglist__9282);
        var args = cljs.core.rest(arglist__9282);
        return G__9280__delegate(x, y, z, args);
      };
      G__9280.cljs$core$IFn$_invoke$arity$variadic = G__9280__delegate;
      return G__9280;
    }();
    cljs$core$sp2 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$sp2__0.call(this);
        case 1:
          return cljs$core$sp2__1.call(this, x);
        case 2:
          return cljs$core$sp2__2.call(this, x, y);
        case 3:
          return cljs$core$sp2__3.call(this, x, y, z);
        default:
          var G__9283 = null;
          if (arguments.length > 3) {
            var G__9284__i = 0, G__9284__a = new Array(arguments.length - 3);
            while (G__9284__i < G__9284__a.length) {
              G__9284__a[G__9284__i] = arguments[G__9284__i + 3];
              ++G__9284__i;
            }
            G__9283 = new cljs.core.IndexedSeq(G__9284__a, 0);
          }
          return cljs$core$sp2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__9283);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$sp2.cljs$lang$maxFixedArity = 3;
    cljs$core$sp2.cljs$lang$applyTo = cljs$core$sp2__4.cljs$lang$applyTo;
    cljs$core$sp2.cljs$core$IFn$_invoke$arity$0 = cljs$core$sp2__0;
    cljs$core$sp2.cljs$core$IFn$_invoke$arity$1 = cljs$core$sp2__1;
    cljs$core$sp2.cljs$core$IFn$_invoke$arity$2 = cljs$core$sp2__2;
    cljs$core$sp2.cljs$core$IFn$_invoke$arity$3 = cljs$core$sp2__3;
    cljs$core$sp2.cljs$core$IFn$_invoke$arity$variadic = cljs$core$sp2__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$sp2;
  }();
};
cljs.core.some_fn.cljs$core$IFn$_invoke$arity$3 = function(p1, p2, p3) {
  return function() {
    var cljs$core$sp3 = null;
    var cljs$core$sp3__0 = function() {
      return null;
    };
    var cljs$core$sp3__1 = function(x) {
      var or__4309__auto__ = function() {
        var G__9213 = x;
        return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__9213) : p1.call(null, G__9213);
      }();
      if (cljs.core.truth_(or__4309__auto__)) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = function() {
          var G__9215 = x;
          return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__9215) : p2.call(null, G__9215);
        }();
        if (cljs.core.truth_(or__4309__auto____$1)) {
          return or__4309__auto____$1;
        } else {
          var G__9216 = x;
          return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__9216) : p3.call(null, G__9216);
        }
      }
    };
    var cljs$core$sp3__2 = function(x, y) {
      var or__4309__auto__ = function() {
        var G__9218 = x;
        return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__9218) : p1.call(null, G__9218);
      }();
      if (cljs.core.truth_(or__4309__auto__)) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = function() {
          var G__9220 = x;
          return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__9220) : p2.call(null, G__9220);
        }();
        if (cljs.core.truth_(or__4309__auto____$1)) {
          return or__4309__auto____$1;
        } else {
          var or__4309__auto____$2 = function() {
            var G__9222 = x;
            return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__9222) : p3.call(null, G__9222);
          }();
          if (cljs.core.truth_(or__4309__auto____$2)) {
            return or__4309__auto____$2;
          } else {
            var or__4309__auto____$3 = function() {
              var G__9224 = y;
              return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__9224) : p1.call(null, G__9224);
            }();
            if (cljs.core.truth_(or__4309__auto____$3)) {
              return or__4309__auto____$3;
            } else {
              var or__4309__auto____$4 = function() {
                var G__9226 = y;
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__9226) : p2.call(null, G__9226);
              }();
              if (cljs.core.truth_(or__4309__auto____$4)) {
                return or__4309__auto____$4;
              } else {
                var G__9227 = y;
                return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__9227) : p3.call(null, G__9227);
              }
            }
          }
        }
      }
    };
    var cljs$core$sp3__3 = function(x, y, z) {
      var or__4309__auto__ = function() {
        var G__9229 = x;
        return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__9229) : p1.call(null, G__9229);
      }();
      if (cljs.core.truth_(or__4309__auto__)) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = function() {
          var G__9231 = x;
          return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__9231) : p2.call(null, G__9231);
        }();
        if (cljs.core.truth_(or__4309__auto____$1)) {
          return or__4309__auto____$1;
        } else {
          var or__4309__auto____$2 = function() {
            var G__9233 = x;
            return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__9233) : p3.call(null, G__9233);
          }();
          if (cljs.core.truth_(or__4309__auto____$2)) {
            return or__4309__auto____$2;
          } else {
            var or__4309__auto____$3 = function() {
              var G__9235 = y;
              return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__9235) : p1.call(null, G__9235);
            }();
            if (cljs.core.truth_(or__4309__auto____$3)) {
              return or__4309__auto____$3;
            } else {
              var or__4309__auto____$4 = function() {
                var G__9237 = y;
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__9237) : p2.call(null, G__9237);
              }();
              if (cljs.core.truth_(or__4309__auto____$4)) {
                return or__4309__auto____$4;
              } else {
                var or__4309__auto____$5 = function() {
                  var G__9239 = y;
                  return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__9239) : p3.call(null, G__9239);
                }();
                if (cljs.core.truth_(or__4309__auto____$5)) {
                  return or__4309__auto____$5;
                } else {
                  var or__4309__auto____$6 = function() {
                    var G__9241 = z;
                    return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__9241) : p1.call(null, G__9241);
                  }();
                  if (cljs.core.truth_(or__4309__auto____$6)) {
                    return or__4309__auto____$6;
                  } else {
                    var or__4309__auto____$7 = function() {
                      var G__9243 = z;
                      return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__9243) : p2.call(null, G__9243);
                    }();
                    if (cljs.core.truth_(or__4309__auto____$7)) {
                      return or__4309__auto____$7;
                    } else {
                      var G__9244 = z;
                      return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__9244) : p3.call(null, G__9244);
                    }
                  }
                }
              }
            }
          }
        }
      }
    };
    var cljs$core$sp3__4 = function() {
      var G__9285__delegate = function(x, y, z, args) {
        var or__4309__auto__ = cljs$core$sp3.cljs$core$IFn$_invoke$arity$3(x, y, z);
        if (cljs.core.truth_(or__4309__auto__)) {
          return or__4309__auto__;
        } else {
          return cljs.core.some(function(or__4309__auto__) {
            return function(p1__9079_SHARP_) {
              var or__4309__auto____$1 = function() {
                var G__9246 = p1__9079_SHARP_;
                return p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(G__9246) : p1.call(null, G__9246);
              }();
              if (cljs.core.truth_(or__4309__auto____$1)) {
                return or__4309__auto____$1;
              } else {
                var or__4309__auto____$2 = function() {
                  var G__9248 = p1__9079_SHARP_;
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(G__9248) : p2.call(null, G__9248);
                }();
                if (cljs.core.truth_(or__4309__auto____$2)) {
                  return or__4309__auto____$2;
                } else {
                  var G__9249 = p1__9079_SHARP_;
                  return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(G__9249) : p3.call(null, G__9249);
                }
              }
            };
          }(or__4309__auto__), args);
        }
      };
      var G__9285 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__9286__i = 0, G__9286__a = new Array(arguments.length - 3);
          while (G__9286__i < G__9286__a.length) {
            G__9286__a[G__9286__i] = arguments[G__9286__i + 3];
            ++G__9286__i;
          }
          args = new cljs.core.IndexedSeq(G__9286__a, 0);
        }
        return G__9285__delegate.call(this, x, y, z, args);
      };
      G__9285.cljs$lang$maxFixedArity = 3;
      G__9285.cljs$lang$applyTo = function(arglist__9287) {
        var x = cljs.core.first(arglist__9287);
        arglist__9287 = cljs.core.next(arglist__9287);
        var y = cljs.core.first(arglist__9287);
        arglist__9287 = cljs.core.next(arglist__9287);
        var z = cljs.core.first(arglist__9287);
        var args = cljs.core.rest(arglist__9287);
        return G__9285__delegate(x, y, z, args);
      };
      G__9285.cljs$core$IFn$_invoke$arity$variadic = G__9285__delegate;
      return G__9285;
    }();
    cljs$core$sp3 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$sp3__0.call(this);
        case 1:
          return cljs$core$sp3__1.call(this, x);
        case 2:
          return cljs$core$sp3__2.call(this, x, y);
        case 3:
          return cljs$core$sp3__3.call(this, x, y, z);
        default:
          var G__9288 = null;
          if (arguments.length > 3) {
            var G__9289__i = 0, G__9289__a = new Array(arguments.length - 3);
            while (G__9289__i < G__9289__a.length) {
              G__9289__a[G__9289__i] = arguments[G__9289__i + 3];
              ++G__9289__i;
            }
            G__9288 = new cljs.core.IndexedSeq(G__9289__a, 0);
          }
          return cljs$core$sp3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__9288);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$sp3.cljs$lang$maxFixedArity = 3;
    cljs$core$sp3.cljs$lang$applyTo = cljs$core$sp3__4.cljs$lang$applyTo;
    cljs$core$sp3.cljs$core$IFn$_invoke$arity$0 = cljs$core$sp3__0;
    cljs$core$sp3.cljs$core$IFn$_invoke$arity$1 = cljs$core$sp3__1;
    cljs$core$sp3.cljs$core$IFn$_invoke$arity$2 = cljs$core$sp3__2;
    cljs$core$sp3.cljs$core$IFn$_invoke$arity$3 = cljs$core$sp3__3;
    cljs$core$sp3.cljs$core$IFn$_invoke$arity$variadic = cljs$core$sp3__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$sp3;
  }();
};
cljs.core.some_fn.cljs$core$IFn$_invoke$arity$variadic = function(p1, p2, p3, ps) {
  var ps__$1 = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(p1, p2, p3, ps);
  return function(ps__$1) {
    return function() {
      var cljs$core$spn = null;
      var cljs$core$spn__0 = function() {
        return null;
      };
      var cljs$core$spn__1 = function(x) {
        return cljs.core.some(function(ps__$1) {
          return function(p1__9080_SHARP_) {
            var G__9265 = x;
            return p1__9080_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__9080_SHARP_.cljs$core$IFn$_invoke$arity$1(G__9265) : p1__9080_SHARP_.call(null, G__9265);
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$spn__2 = function(x, y) {
        return cljs.core.some(function(ps__$1) {
          return function(p1__9081_SHARP_) {
            var or__4309__auto__ = function() {
              var G__9267 = x;
              return p1__9081_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__9081_SHARP_.cljs$core$IFn$_invoke$arity$1(G__9267) : p1__9081_SHARP_.call(null, G__9267);
            }();
            if (cljs.core.truth_(or__4309__auto__)) {
              return or__4309__auto__;
            } else {
              var G__9268 = y;
              return p1__9081_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__9081_SHARP_.cljs$core$IFn$_invoke$arity$1(G__9268) : p1__9081_SHARP_.call(null, G__9268);
            }
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$spn__3 = function(x, y, z) {
        return cljs.core.some(function(ps__$1) {
          return function(p1__9082_SHARP_) {
            var or__4309__auto__ = function() {
              var G__9270 = x;
              return p1__9082_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__9082_SHARP_.cljs$core$IFn$_invoke$arity$1(G__9270) : p1__9082_SHARP_.call(null, G__9270);
            }();
            if (cljs.core.truth_(or__4309__auto__)) {
              return or__4309__auto__;
            } else {
              var or__4309__auto____$1 = function() {
                var G__9272 = y;
                return p1__9082_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__9082_SHARP_.cljs$core$IFn$_invoke$arity$1(G__9272) : p1__9082_SHARP_.call(null, G__9272);
              }();
              if (cljs.core.truth_(or__4309__auto____$1)) {
                return or__4309__auto____$1;
              } else {
                var G__9273 = z;
                return p1__9082_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__9082_SHARP_.cljs$core$IFn$_invoke$arity$1(G__9273) : p1__9082_SHARP_.call(null, G__9273);
              }
            }
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$spn__4 = function() {
        var G__9290__delegate = function(x, y, z, args) {
          var or__4309__auto__ = cljs$core$spn.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(or__4309__auto__)) {
            return or__4309__auto__;
          } else {
            return cljs.core.some(function(or__4309__auto__, ps__$1) {
              return function(p1__9083_SHARP_) {
                return cljs.core.some(p1__9083_SHARP_, args);
              };
            }(or__4309__auto__, ps__$1), ps__$1);
          }
        };
        var G__9290 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__9291__i = 0, G__9291__a = new Array(arguments.length - 3);
            while (G__9291__i < G__9291__a.length) {
              G__9291__a[G__9291__i] = arguments[G__9291__i + 3];
              ++G__9291__i;
            }
            args = new cljs.core.IndexedSeq(G__9291__a, 0);
          }
          return G__9290__delegate.call(this, x, y, z, args);
        };
        G__9290.cljs$lang$maxFixedArity = 3;
        G__9290.cljs$lang$applyTo = function(arglist__9292) {
          var x = cljs.core.first(arglist__9292);
          arglist__9292 = cljs.core.next(arglist__9292);
          var y = cljs.core.first(arglist__9292);
          arglist__9292 = cljs.core.next(arglist__9292);
          var z = cljs.core.first(arglist__9292);
          var args = cljs.core.rest(arglist__9292);
          return G__9290__delegate(x, y, z, args);
        };
        G__9290.cljs$core$IFn$_invoke$arity$variadic = G__9290__delegate;
        return G__9290;
      }();
      cljs$core$spn = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return cljs$core$spn__0.call(this);
          case 1:
            return cljs$core$spn__1.call(this, x);
          case 2:
            return cljs$core$spn__2.call(this, x, y);
          case 3:
            return cljs$core$spn__3.call(this, x, y, z);
          default:
            var G__9293 = null;
            if (arguments.length > 3) {
              var G__9294__i = 0, G__9294__a = new Array(arguments.length - 3);
              while (G__9294__i < G__9294__a.length) {
                G__9294__a[G__9294__i] = arguments[G__9294__i + 3];
                ++G__9294__i;
              }
              G__9293 = new cljs.core.IndexedSeq(G__9294__a, 0);
            }
            return cljs$core$spn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__9293);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      cljs$core$spn.cljs$lang$maxFixedArity = 3;
      cljs$core$spn.cljs$lang$applyTo = cljs$core$spn__4.cljs$lang$applyTo;
      cljs$core$spn.cljs$core$IFn$_invoke$arity$0 = cljs$core$spn__0;
      cljs$core$spn.cljs$core$IFn$_invoke$arity$1 = cljs$core$spn__1;
      cljs$core$spn.cljs$core$IFn$_invoke$arity$2 = cljs$core$spn__2;
      cljs$core$spn.cljs$core$IFn$_invoke$arity$3 = cljs$core$spn__3;
      cljs$core$spn.cljs$core$IFn$_invoke$arity$variadic = cljs$core$spn__4.cljs$core$IFn$_invoke$arity$variadic;
      return cljs$core$spn;
    }();
  }(ps__$1);
};
cljs.core.some_fn.cljs$lang$applyTo = function(seq9084) {
  var G__9085 = cljs.core.first(seq9084);
  var seq9084__$1 = cljs.core.next(seq9084);
  var G__9086 = cljs.core.first(seq9084__$1);
  var seq9084__$2 = cljs.core.next(seq9084__$1);
  var G__9087 = cljs.core.first(seq9084__$2);
  var seq9084__$3 = cljs.core.next(seq9084__$2);
  return cljs.core.some_fn.cljs$core$IFn$_invoke$arity$variadic(G__9085, G__9086, G__9087, seq9084__$3);
};
cljs.core.some_fn.cljs$lang$maxFixedArity = 3;
cljs.core.map = function cljs$core$map() {
  var G__9302 = arguments.length;
  switch(G__9302) {
    case 1:
      return cljs.core.map.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.map.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.map.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.map.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 4), 0);
      return cljs.core.map.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__5360__auto__);
  }
};
cljs.core.map.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function(rf) {
    return function() {
      var G__9318 = null;
      var G__9318__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__9318__1 = function(result) {
        var G__9303 = result;
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__9303) : rf.call(null, G__9303);
      };
      var G__9318__2 = function(result, input) {
        var G__9304 = result;
        var G__9305 = function() {
          var G__9306 = input;
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__9306) : f.call(null, G__9306);
        }();
        return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__9304, G__9305) : rf.call(null, G__9304, G__9305);
      };
      var G__9318__3 = function() {
        var G__9319__delegate = function(result, input, inputs) {
          var G__9307 = result;
          var G__9308 = cljs.core.apply.cljs$core$IFn$_invoke$arity$3(f, input, inputs);
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__9307, G__9308) : rf.call(null, G__9307, G__9308);
        };
        var G__9319 = function(result, input, var_args) {
          var inputs = null;
          if (arguments.length > 2) {
            var G__9320__i = 0, G__9320__a = new Array(arguments.length - 2);
            while (G__9320__i < G__9320__a.length) {
              G__9320__a[G__9320__i] = arguments[G__9320__i + 2];
              ++G__9320__i;
            }
            inputs = new cljs.core.IndexedSeq(G__9320__a, 0);
          }
          return G__9319__delegate.call(this, result, input, inputs);
        };
        G__9319.cljs$lang$maxFixedArity = 2;
        G__9319.cljs$lang$applyTo = function(arglist__9321) {
          var result = cljs.core.first(arglist__9321);
          arglist__9321 = cljs.core.next(arglist__9321);
          var input = cljs.core.first(arglist__9321);
          var inputs = cljs.core.rest(arglist__9321);
          return G__9319__delegate(result, input, inputs);
        };
        G__9319.cljs$core$IFn$_invoke$arity$variadic = G__9319__delegate;
        return G__9319;
      }();
      G__9318 = function(result, input, var_args) {
        var inputs = var_args;
        switch(arguments.length) {
          case 0:
            return G__9318__0.call(this);
          case 1:
            return G__9318__1.call(this, result);
          case 2:
            return G__9318__2.call(this, result, input);
          default:
            var G__9322 = null;
            if (arguments.length > 2) {
              var G__9323__i = 0, G__9323__a = new Array(arguments.length - 2);
              while (G__9323__i < G__9323__a.length) {
                G__9323__a[G__9323__i] = arguments[G__9323__i + 2];
                ++G__9323__i;
              }
              G__9322 = new cljs.core.IndexedSeq(G__9323__a, 0);
            }
            return G__9318__3.cljs$core$IFn$_invoke$arity$variadic(result, input, G__9322);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__9318.cljs$lang$maxFixedArity = 2;
      G__9318.cljs$lang$applyTo = G__9318__3.cljs$lang$applyTo;
      G__9318.cljs$core$IFn$_invoke$arity$0 = G__9318__0;
      G__9318.cljs$core$IFn$_invoke$arity$1 = G__9318__1;
      G__9318.cljs$core$IFn$_invoke$arity$2 = G__9318__2;
      G__9318.cljs$core$IFn$_invoke$arity$variadic = G__9318__3.cljs$core$IFn$_invoke$arity$variadic;
      return G__9318;
    }();
  };
};
cljs.core.map.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4422__auto__ = cljs.core.seq(coll);
    if (temp__4422__auto__) {
      var s = temp__4422__auto__;
      if (cljs.core.chunked_seq_QMARK_(s)) {
        var c = cljs.core.chunk_first(s);
        var size = cljs.core.count(c);
        var b = cljs.core.chunk_buffer(size);
        var n__5194__auto___9324 = size;
        var i_9325 = 0;
        while (true) {
          if (i_9325 < n__5194__auto___9324) {
            cljs.core.chunk_append(b, function() {
              var G__9309 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_9325);
              return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__9309) : f.call(null, G__9309);
            }());
            var G__9326 = i_9325 + 1;
            i_9325 = G__9326;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons(cljs.core.chunk(b), cljs.core.map.cljs$core$IFn$_invoke$arity$2(f, cljs.core.chunk_rest(s)));
      } else {
        return cljs.core.cons(function() {
          var G__9310 = cljs.core.first(s);
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__9310) : f.call(null, G__9310);
        }(), cljs.core.map.cljs$core$IFn$_invoke$arity$2(f, cljs.core.rest(s)));
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.map.cljs$core$IFn$_invoke$arity$3 = function(f, c1, c2) {
  return new cljs.core.LazySeq(null, function() {
    var s1 = cljs.core.seq(c1);
    var s2 = cljs.core.seq(c2);
    if (s1 && s2) {
      return cljs.core.cons(function() {
        var G__9311 = cljs.core.first(s1);
        var G__9312 = cljs.core.first(s2);
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9311, G__9312) : f.call(null, G__9311, G__9312);
      }(), cljs.core.map.cljs$core$IFn$_invoke$arity$3(f, cljs.core.rest(s1), cljs.core.rest(s2)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.map.cljs$core$IFn$_invoke$arity$4 = function(f, c1, c2, c3) {
  return new cljs.core.LazySeq(null, function() {
    var s1 = cljs.core.seq(c1);
    var s2 = cljs.core.seq(c2);
    var s3 = cljs.core.seq(c3);
    if (s1 && s2 && s3) {
      return cljs.core.cons(function() {
        var G__9313 = cljs.core.first(s1);
        var G__9314 = cljs.core.first(s2);
        var G__9315 = cljs.core.first(s3);
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__9313, G__9314, G__9315) : f.call(null, G__9313, G__9314, G__9315);
      }(), cljs.core.map.cljs$core$IFn$_invoke$arity$4(f, cljs.core.rest(s1), cljs.core.rest(s2), cljs.core.rest(s3)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.map.cljs$core$IFn$_invoke$arity$variadic = function(f, c1, c2, c3, colls) {
  var step = function cljs$core$step(cs) {
    return new cljs.core.LazySeq(null, function() {
      var ss = cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.seq, cs);
      if (cljs.core.every_QMARK_(cljs.core.identity, ss)) {
        return cljs.core.cons(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.first, ss), cljs$core$step(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.rest, ss)));
      } else {
        return null;
      }
    }, null, null);
  };
  return cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(step) {
    return function(p1__9295_SHARP_) {
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f, p1__9295_SHARP_);
    };
  }(step), step(cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(colls, c3, cljs.core.array_seq([c2, c1], 0))));
};
cljs.core.map.cljs$lang$applyTo = function(seq9296) {
  var G__9297 = cljs.core.first(seq9296);
  var seq9296__$1 = cljs.core.next(seq9296);
  var G__9298 = cljs.core.first(seq9296__$1);
  var seq9296__$2 = cljs.core.next(seq9296__$1);
  var G__9299 = cljs.core.first(seq9296__$2);
  var seq9296__$3 = cljs.core.next(seq9296__$2);
  var G__9300 = cljs.core.first(seq9296__$3);
  var seq9296__$4 = cljs.core.next(seq9296__$3);
  return cljs.core.map.cljs$core$IFn$_invoke$arity$variadic(G__9297, G__9298, G__9299, G__9300, seq9296__$4);
};
cljs.core.map.cljs$lang$maxFixedArity = 4;
cljs.core.take = function cljs$core$take() {
  var G__9328 = arguments.length;
  switch(G__9328) {
    case 1:
      return cljs.core.take.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.take.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.take.cljs$core$IFn$_invoke$arity$1 = function(n) {
  return function(rf) {
    var na = cljs.core.volatile_BANG_(n);
    return function(na) {
      return function() {
        var G__9333 = null;
        var G__9333__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__9333__1 = function(result) {
          var G__9329 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__9329) : rf.call(null, G__9329);
        };
        var G__9333__2 = function(result, input) {
          var n__$1 = cljs.core.deref(na);
          var nn = cljs.core._vreset_BANG_(na, cljs.core._deref(na) - 1);
          var result__$1 = n__$1 > 0 ? function() {
            var G__9330 = result;
            var G__9331 = input;
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__9330, G__9331) : rf.call(null, G__9330, G__9331);
          }() : result;
          if (!(nn > 0)) {
            return cljs.core.ensure_reduced(result__$1);
          } else {
            return result__$1;
          }
        };
        G__9333 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__9333__0.call(this);
            case 1:
              return G__9333__1.call(this, result);
            case 2:
              return G__9333__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__9333.cljs$core$IFn$_invoke$arity$0 = G__9333__0;
        G__9333.cljs$core$IFn$_invoke$arity$1 = G__9333__1;
        G__9333.cljs$core$IFn$_invoke$arity$2 = G__9333__2;
        return G__9333;
      }();
    }(na);
  };
};
cljs.core.take.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  return new cljs.core.LazySeq(null, function() {
    if (n > 0) {
      var temp__4422__auto__ = cljs.core.seq(coll);
      if (temp__4422__auto__) {
        var s = temp__4422__auto__;
        return cljs.core.cons(cljs.core.first(s), cljs.core.take.cljs$core$IFn$_invoke$arity$2(n - 1, cljs.core.rest(s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.take.cljs$lang$maxFixedArity = 2;
cljs.core.drop = function cljs$core$drop() {
  var G__9335 = arguments.length;
  switch(G__9335) {
    case 1:
      return cljs.core.drop.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.drop.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.drop.cljs$core$IFn$_invoke$arity$1 = function(n) {
  return function(rf) {
    var na = cljs.core.volatile_BANG_(n);
    return function(na) {
      return function() {
        var G__9340 = null;
        var G__9340__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__9340__1 = function(result) {
          var G__9336 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__9336) : rf.call(null, G__9336);
        };
        var G__9340__2 = function(result, input) {
          var n__$1 = cljs.core.deref(na);
          cljs.core._vreset_BANG_(na, cljs.core._deref(na) - 1);
          if (n__$1 > 0) {
            return result;
          } else {
            var G__9337 = result;
            var G__9338 = input;
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__9337, G__9338) : rf.call(null, G__9337, G__9338);
          }
        };
        G__9340 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__9340__0.call(this);
            case 1:
              return G__9340__1.call(this, result);
            case 2:
              return G__9340__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__9340.cljs$core$IFn$_invoke$arity$0 = G__9340__0;
        G__9340.cljs$core$IFn$_invoke$arity$1 = G__9340__1;
        G__9340.cljs$core$IFn$_invoke$arity$2 = G__9340__2;
        return G__9340;
      }();
    }(na);
  };
};
cljs.core.drop.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  var step = function(n__$1, coll__$1) {
    while (true) {
      var s = cljs.core.seq(coll__$1);
      if (n__$1 > 0 && s) {
        var G__9341 = n__$1 - 1;
        var G__9342 = cljs.core.rest(s);
        n__$1 = G__9341;
        coll__$1 = G__9342;
        continue;
      } else {
        return s;
      }
      break;
    }
  };
  return new cljs.core.LazySeq(null, function(step) {
    return function() {
      return step(n, coll);
    };
  }(step), null, null);
};
cljs.core.drop.cljs$lang$maxFixedArity = 2;
cljs.core.drop_last = function cljs$core$drop_last() {
  var G__9344 = arguments.length;
  switch(G__9344) {
    case 1:
      return cljs.core.drop_last.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.drop_last.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.drop_last.cljs$core$IFn$_invoke$arity$1 = function(s) {
  return cljs.core.drop_last.cljs$core$IFn$_invoke$arity$2(1, s);
};
cljs.core.drop_last.cljs$core$IFn$_invoke$arity$2 = function(n, s) {
  return cljs.core.map.cljs$core$IFn$_invoke$arity$3(function(x, _) {
    return x;
  }, s, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, s));
};
cljs.core.drop_last.cljs$lang$maxFixedArity = 2;
cljs.core.take_last = function cljs$core$take_last(n, coll) {
  var s = cljs.core.seq(coll);
  var lead = cljs.core.seq(cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, coll));
  while (true) {
    if (lead) {
      var G__9346 = cljs.core.next(s);
      var G__9347 = cljs.core.next(lead);
      s = G__9346;
      lead = G__9347;
      continue;
    } else {
      return s;
    }
    break;
  }
};
cljs.core.drop_while = function cljs$core$drop_while() {
  var G__9349 = arguments.length;
  switch(G__9349) {
    case 1:
      return cljs.core.drop_while.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.drop_while.cljs$core$IFn$_invoke$arity$1 = function(pred) {
  return function(rf) {
    var da = cljs.core.volatile_BANG_(true);
    return function(da) {
      return function() {
        var G__9357 = null;
        var G__9357__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__9357__1 = function(result) {
          var G__9350 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__9350) : rf.call(null, G__9350);
        };
        var G__9357__2 = function(result, input) {
          var drop_QMARK_ = cljs.core.deref(da);
          if (cljs.core.truth_(function() {
            var and__4297__auto__ = drop_QMARK_;
            if (cljs.core.truth_(and__4297__auto__)) {
              var G__9351 = input;
              return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__9351) : pred.call(null, G__9351);
            } else {
              return and__4297__auto__;
            }
          }())) {
            return result;
          } else {
            cljs.core.vreset_BANG_(da, null);
            var G__9352 = result;
            var G__9353 = input;
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__9352, G__9353) : rf.call(null, G__9352, G__9353);
          }
        };
        G__9357 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__9357__0.call(this);
            case 1:
              return G__9357__1.call(this, result);
            case 2:
              return G__9357__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__9357.cljs$core$IFn$_invoke$arity$0 = G__9357__0;
        G__9357.cljs$core$IFn$_invoke$arity$1 = G__9357__1;
        G__9357.cljs$core$IFn$_invoke$arity$2 = G__9357__2;
        return G__9357;
      }();
    }(da);
  };
};
cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2 = function(pred, coll) {
  var step = function(pred__$1, coll__$1) {
    while (true) {
      var s = cljs.core.seq(coll__$1);
      if (cljs.core.truth_(function() {
        var and__4297__auto__ = s;
        if (and__4297__auto__) {
          var G__9355 = cljs.core.first(s);
          return pred__$1.cljs$core$IFn$_invoke$arity$1 ? pred__$1.cljs$core$IFn$_invoke$arity$1(G__9355) : pred__$1.call(null, G__9355);
        } else {
          return and__4297__auto__;
        }
      }())) {
        var G__9358 = pred__$1;
        var G__9359 = cljs.core.rest(s);
        pred__$1 = G__9358;
        coll__$1 = G__9359;
        continue;
      } else {
        return s;
      }
      break;
    }
  };
  return new cljs.core.LazySeq(null, function(step) {
    return function() {
      return step(pred, coll);
    };
  }(step), null, null);
};
cljs.core.drop_while.cljs$lang$maxFixedArity = 2;
cljs.core.cycle = function cljs$core$cycle(coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4422__auto__ = cljs.core.seq(coll);
    if (temp__4422__auto__) {
      var s = temp__4422__auto__;
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$2(s, cljs$core$cycle(s));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.split_at = function cljs$core$split_at(n, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, coll), cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, coll)], null);
};
cljs.core.repeat = function cljs$core$repeat() {
  var G__9362 = arguments.length;
  switch(G__9362) {
    case 1:
      return cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.repeat.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.repeat.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return new cljs.core.LazySeq(null, function() {
    return cljs.core.cons(x, cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(x));
  }, null, null);
};
cljs.core.repeat.cljs$core$IFn$_invoke$arity$2 = function(n, x) {
  return cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(x));
};
cljs.core.repeat.cljs$lang$maxFixedArity = 2;
cljs.core.replicate = function cljs$core$replicate(n, x) {
  return cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(x));
};
cljs.core.repeatedly = function cljs$core$repeatedly() {
  var G__9365 = arguments.length;
  switch(G__9365) {
    case 1:
      return cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return new cljs.core.LazySeq(null, function() {
    return cljs.core.cons(function() {
      return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    }(), cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$1(f));
  }, null, null);
};
cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$2 = function(n, f) {
  return cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$1(f));
};
cljs.core.repeatedly.cljs$lang$maxFixedArity = 2;
cljs.core.iterate = function cljs$core$iterate(f, x) {
  return cljs.core.cons(x, new cljs.core.LazySeq(null, function() {
    return cljs$core$iterate(f, function() {
      var G__9370 = x;
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__9370) : f.call(null, G__9370);
    }());
  }, null, null));
};
cljs.core.interleave = function cljs$core$interleave() {
  var G__9375 = arguments.length;
  switch(G__9375) {
    case 2:
      return cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0);
      return cljs.core.interleave.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5360__auto__);
  }
};
cljs.core.interleave.cljs$core$IFn$_invoke$arity$2 = function(c1, c2) {
  return new cljs.core.LazySeq(null, function() {
    var s1 = cljs.core.seq(c1);
    var s2 = cljs.core.seq(c2);
    if (s1 && s2) {
      return cljs.core.cons(cljs.core.first(s1), cljs.core.cons(cljs.core.first(s2), cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(cljs.core.rest(s1), cljs.core.rest(s2))));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.interleave.cljs$core$IFn$_invoke$arity$variadic = function(c1, c2, colls) {
  return new cljs.core.LazySeq(null, function() {
    var ss = cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.seq, cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(colls, c2, cljs.core.array_seq([c1], 0)));
    if (cljs.core.every_QMARK_(cljs.core.identity, ss)) {
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.first, ss), cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.interleave, cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.rest, ss)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.interleave.cljs$lang$applyTo = function(seq9371) {
  var G__9372 = cljs.core.first(seq9371);
  var seq9371__$1 = cljs.core.next(seq9371);
  var G__9373 = cljs.core.first(seq9371__$1);
  var seq9371__$2 = cljs.core.next(seq9371__$1);
  return cljs.core.interleave.cljs$core$IFn$_invoke$arity$variadic(G__9372, G__9373, seq9371__$2);
};
cljs.core.interleave.cljs$lang$maxFixedArity = 2;
cljs.core.interpose = function cljs$core$interpose() {
  var G__9378 = arguments.length;
  switch(G__9378) {
    case 1:
      return cljs.core.interpose.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.interpose.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.interpose.cljs$core$IFn$_invoke$arity$1 = function(sep) {
  return function(rf) {
    var started = cljs.core.volatile_BANG_(false);
    return function(started) {
      return function() {
        var G__9387 = null;
        var G__9387__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__9387__1 = function(result) {
          var G__9379 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__9379) : rf.call(null, G__9379);
        };
        var G__9387__2 = function(result, input) {
          if (cljs.core.truth_(cljs.core.deref(started))) {
            var sepr = function() {
              var G__9380 = result;
              var G__9381 = sep;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__9380, G__9381) : rf.call(null, G__9380, G__9381);
            }();
            if (cljs.core.reduced_QMARK_(sepr)) {
              return sepr;
            } else {
              var G__9382 = sepr;
              var G__9383 = input;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__9382, G__9383) : rf.call(null, G__9382, G__9383);
            }
          } else {
            cljs.core.vreset_BANG_(started, true);
            var G__9384 = result;
            var G__9385 = input;
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__9384, G__9385) : rf.call(null, G__9384, G__9385);
          }
        };
        G__9387 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__9387__0.call(this);
            case 1:
              return G__9387__1.call(this, result);
            case 2:
              return G__9387__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__9387.cljs$core$IFn$_invoke$arity$0 = G__9387__0;
        G__9387.cljs$core$IFn$_invoke$arity$1 = G__9387__1;
        G__9387.cljs$core$IFn$_invoke$arity$2 = G__9387__2;
        return G__9387;
      }();
    }(started);
  };
};
cljs.core.interpose.cljs$core$IFn$_invoke$arity$2 = function(sep, coll) {
  return cljs.core.drop.cljs$core$IFn$_invoke$arity$2(1, cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(sep), coll));
};
cljs.core.interpose.cljs$lang$maxFixedArity = 2;
cljs.core.flatten1 = function cljs$core$flatten1(colls) {
  var cat = function cljs$core$flatten1_$_cat(coll, colls__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4420__auto__ = cljs.core.seq(coll);
      if (temp__4420__auto__) {
        var coll__$1 = temp__4420__auto__;
        return cljs.core.cons(cljs.core.first(coll__$1), cljs$core$flatten1_$_cat(cljs.core.rest(coll__$1), colls__$1));
      } else {
        if (cljs.core.seq(colls__$1)) {
          return cljs$core$flatten1_$_cat(cljs.core.first(colls__$1), cljs.core.rest(colls__$1));
        } else {
          return null;
        }
      }
    }, null, null);
  };
  return cat(null, colls);
};
cljs.core.mapcat = function cljs$core$mapcat() {
  var G__9399 = arguments.length;
  switch(G__9399) {
    case 1:
      return cljs.core.mapcat.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0);
      return cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5360__auto__);
  }
};
cljs.core.mapcat.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return cljs.core.comp.cljs$core$IFn$_invoke$arity$2(cljs.core.map.cljs$core$IFn$_invoke$arity$1(f), cljs.core.cat);
};
cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic = function(f, colls) {
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.concat, cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.map, f, colls));
};
cljs.core.mapcat.cljs$lang$applyTo = function(seq9396) {
  var G__9397 = cljs.core.first(seq9396);
  var seq9396__$1 = cljs.core.next(seq9396);
  return cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(G__9397, seq9396__$1);
};
cljs.core.mapcat.cljs$lang$maxFixedArity = 1;
cljs.core.filter = function cljs$core$filter() {
  var G__9402 = arguments.length;
  switch(G__9402) {
    case 1:
      return cljs.core.filter.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.filter.cljs$core$IFn$_invoke$arity$1 = function(pred) {
  return function(rf) {
    return function() {
      var G__9410 = null;
      var G__9410__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__9410__1 = function(result) {
        var G__9403 = result;
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__9403) : rf.call(null, G__9403);
      };
      var G__9410__2 = function(result, input) {
        if (cljs.core.truth_(function() {
          var G__9404 = input;
          return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__9404) : pred.call(null, G__9404);
        }())) {
          var G__9405 = result;
          var G__9406 = input;
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__9405, G__9406) : rf.call(null, G__9405, G__9406);
        } else {
          return result;
        }
      };
      G__9410 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__9410__0.call(this);
          case 1:
            return G__9410__1.call(this, result);
          case 2:
            return G__9410__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__9410.cljs$core$IFn$_invoke$arity$0 = G__9410__0;
      G__9410.cljs$core$IFn$_invoke$arity$1 = G__9410__1;
      G__9410.cljs$core$IFn$_invoke$arity$2 = G__9410__2;
      return G__9410;
    }();
  };
};
cljs.core.filter.cljs$core$IFn$_invoke$arity$2 = function(pred, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4422__auto__ = cljs.core.seq(coll);
    if (temp__4422__auto__) {
      var s = temp__4422__auto__;
      if (cljs.core.chunked_seq_QMARK_(s)) {
        var c = cljs.core.chunk_first(s);
        var size = cljs.core.count(c);
        var b = cljs.core.chunk_buffer(size);
        var n__5194__auto___9411 = size;
        var i_9412 = 0;
        while (true) {
          if (i_9412 < n__5194__auto___9411) {
            if (cljs.core.truth_(function() {
              var G__9407 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_9412);
              return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__9407) : pred.call(null, G__9407);
            }())) {
              cljs.core.chunk_append(b, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_9412));
            } else {
            }
            var G__9413 = i_9412 + 1;
            i_9412 = G__9413;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons(cljs.core.chunk(b), cljs.core.filter.cljs$core$IFn$_invoke$arity$2(pred, cljs.core.chunk_rest(s)));
      } else {
        var f = cljs.core.first(s);
        var r = cljs.core.rest(s);
        if (cljs.core.truth_(function() {
          var G__9408 = f;
          return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__9408) : pred.call(null, G__9408);
        }())) {
          return cljs.core.cons(f, cljs.core.filter.cljs$core$IFn$_invoke$arity$2(pred, r));
        } else {
          return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(pred, r);
        }
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.filter.cljs$lang$maxFixedArity = 2;
cljs.core.remove = function cljs$core$remove() {
  var G__9415 = arguments.length;
  switch(G__9415) {
    case 1:
      return cljs.core.remove.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.remove.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.remove.cljs$core$IFn$_invoke$arity$1 = function(pred) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$1(cljs.core.complement(pred));
};
cljs.core.remove.cljs$core$IFn$_invoke$arity$2 = function(pred, coll) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(cljs.core.complement(pred), coll);
};
cljs.core.remove.cljs$lang$maxFixedArity = 2;
cljs.core.tree_seq = function cljs$core$tree_seq(branch_QMARK_, children, root) {
  var walk = function cljs$core$tree_seq_$_walk(node) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons(node, cljs.core.truth_(function() {
        var G__9423 = node;
        return branch_QMARK_.cljs$core$IFn$_invoke$arity$1 ? branch_QMARK_.cljs$core$IFn$_invoke$arity$1(G__9423) : branch_QMARK_.call(null, G__9423);
      }()) ? cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(cljs$core$tree_seq_$_walk, cljs.core.array_seq([function() {
        var G__9424 = node;
        return children.cljs$core$IFn$_invoke$arity$1 ? children.cljs$core$IFn$_invoke$arity$1(G__9424) : children.call(null, G__9424);
      }()], 0)) : null);
    }, null, null);
  };
  return walk(root);
};
cljs.core.flatten = function cljs$core$flatten(x) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(function(p1__9425_SHARP_) {
    return !cljs.core.sequential_QMARK_(p1__9425_SHARP_);
  }, cljs.core.rest(cljs.core.tree_seq(cljs.core.sequential_QMARK_, cljs.core.seq, x)));
};
cljs.core.into = function cljs$core$into() {
  var G__9427 = arguments.length;
  switch(G__9427) {
    case 2:
      return cljs.core.into.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.into.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.into.cljs$core$IFn$_invoke$arity$2 = function(to, from) {
  if (!(to == null)) {
    if (function() {
      var G__9428 = to;
      if (G__9428) {
        var bit__4976__auto__ = G__9428.cljs$lang$protocol_mask$partition1$ & 4;
        if (bit__4976__auto__ || G__9428.cljs$core$IEditableCollection$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core.with_meta(cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj_BANG_, cljs.core.transient$(to), from)), cljs.core.meta(to));
    } else {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, to, from);
    }
  } else {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj, cljs.core.List.EMPTY, from);
  }
};
cljs.core.into.cljs$core$IFn$_invoke$arity$3 = function(to, xform, from) {
  if (function() {
    var G__9429 = to;
    if (G__9429) {
      var bit__4976__auto__ = G__9429.cljs$lang$protocol_mask$partition1$ & 4;
      if (bit__4976__auto__ || G__9429.cljs$core$IEditableCollection$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core.with_meta(cljs.core.persistent_BANG_(cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(xform, cljs.core.conj_BANG_, cljs.core.transient$(to), from)), cljs.core.meta(to));
  } else {
    return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(xform, cljs.core.conj, to, from);
  }
};
cljs.core.into.cljs$lang$maxFixedArity = 3;
cljs.core.mapv = function cljs$core$mapv() {
  var G__9437 = arguments.length;
  switch(G__9437) {
    case 2:
      return cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.mapv.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.mapv.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 4), 0);
      return cljs.core.mapv.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__5360__auto__);
  }
};
cljs.core.mapv.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(v, o) {
    return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(v, function() {
      var G__9438 = o;
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__9438) : f.call(null, G__9438);
    }());
  }, cljs.core.transient$(cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.mapv.cljs$core$IFn$_invoke$arity$3 = function(f, c1, c2) {
  return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY, cljs.core.map.cljs$core$IFn$_invoke$arity$3(f, c1, c2));
};
cljs.core.mapv.cljs$core$IFn$_invoke$arity$4 = function(f, c1, c2, c3) {
  return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY, cljs.core.map.cljs$core$IFn$_invoke$arity$4(f, c1, c2, c3));
};
cljs.core.mapv.cljs$core$IFn$_invoke$arity$variadic = function(f, c1, c2, c3, colls) {
  return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(cljs.core.map, f, c1, c2, c3, cljs.core.array_seq([colls], 0)));
};
cljs.core.mapv.cljs$lang$applyTo = function(seq9431) {
  var G__9432 = cljs.core.first(seq9431);
  var seq9431__$1 = cljs.core.next(seq9431);
  var G__9433 = cljs.core.first(seq9431__$1);
  var seq9431__$2 = cljs.core.next(seq9431__$1);
  var G__9434 = cljs.core.first(seq9431__$2);
  var seq9431__$3 = cljs.core.next(seq9431__$2);
  var G__9435 = cljs.core.first(seq9431__$3);
  var seq9431__$4 = cljs.core.next(seq9431__$3);
  return cljs.core.mapv.cljs$core$IFn$_invoke$arity$variadic(G__9432, G__9433, G__9434, G__9435, seq9431__$4);
};
cljs.core.mapv.cljs$lang$maxFixedArity = 4;
cljs.core.filterv = function cljs$core$filterv(pred, coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(v, o) {
    if (cljs.core.truth_(function() {
      var G__9441 = o;
      return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__9441) : pred.call(null, G__9441);
    }())) {
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(v, o);
    } else {
      return v;
    }
  }, cljs.core.transient$(cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.partition = function cljs$core$partition() {
  var G__9443 = arguments.length;
  switch(G__9443) {
    case 2:
      return cljs.core.partition.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.partition.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.partition.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.partition.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  return cljs.core.partition.cljs$core$IFn$_invoke$arity$3(n, n, coll);
};
cljs.core.partition.cljs$core$IFn$_invoke$arity$3 = function(n, step, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4422__auto__ = cljs.core.seq(coll);
    if (temp__4422__auto__) {
      var s = temp__4422__auto__;
      var p = cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, s);
      if (n === cljs.core.count(p)) {
        return cljs.core.cons(p, cljs.core.partition.cljs$core$IFn$_invoke$arity$3(n, step, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(step, s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.partition.cljs$core$IFn$_invoke$arity$4 = function(n, step, pad, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4422__auto__ = cljs.core.seq(coll);
    if (temp__4422__auto__) {
      var s = temp__4422__auto__;
      var p = cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, s);
      if (n === cljs.core.count(p)) {
        return cljs.core.cons(p, cljs.core.partition.cljs$core$IFn$_invoke$arity$4(n, step, pad, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(step, s)));
      } else {
        return cljs.core._conj(cljs.core.List.EMPTY, cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.concat.cljs$core$IFn$_invoke$arity$2(p, pad)));
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.partition.cljs$lang$maxFixedArity = 4;
cljs.core.get_in = function cljs$core$get_in() {
  var G__9446 = arguments.length;
  switch(G__9446) {
    case 2:
      return cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.get_in.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.get_in.cljs$core$IFn$_invoke$arity$2 = function(m, ks) {
  return cljs.core.get_in.cljs$core$IFn$_invoke$arity$3(m, ks, null);
};
cljs.core.get_in.cljs$core$IFn$_invoke$arity$3 = function(m, ks, not_found) {
  var sentinel = cljs.core.lookup_sentinel;
  var m__$1 = m;
  var ks__$1 = cljs.core.seq(ks);
  while (true) {
    if (ks__$1) {
      if (!function() {
        var G__9447 = m__$1;
        if (G__9447) {
          var bit__4983__auto__ = G__9447.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__4983__auto__ || G__9447.cljs$core$ILookup$) {
            return true;
          } else {
            if (!G__9447.cljs$lang$protocol_mask$partition0$) {
              return cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, G__9447);
            } else {
              return false;
            }
          }
        } else {
          return cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, G__9447);
        }
      }()) {
        return not_found;
      } else {
        var m__$2 = cljs.core.get.cljs$core$IFn$_invoke$arity$3(m__$1, cljs.core.first(ks__$1), sentinel);
        if (sentinel === m__$2) {
          return not_found;
        } else {
          var G__9449 = sentinel;
          var G__9450 = m__$2;
          var G__9451 = cljs.core.next(ks__$1);
          sentinel = G__9449;
          m__$1 = G__9450;
          ks__$1 = G__9451;
          continue;
        }
      }
    } else {
      return m__$1;
    }
    break;
  }
};
cljs.core.get_in.cljs$lang$maxFixedArity = 3;
cljs.core.assoc_in = function cljs$core$assoc_in(m, p__9452, v) {
  var vec__9457 = p__9452;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9457, 0, null);
  var ks = cljs.core.nthnext(vec__9457, 1);
  if (cljs.core.truth_(ks)) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs$core$assoc_in(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, v));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, v);
  }
};
cljs.core.update_in = function cljs$core$update_in() {
  var G__9466 = arguments.length;
  switch(G__9466) {
    case 3:
      return cljs.core.update_in.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.update_in.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.update_in.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return cljs.core.update_in.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 6), 0);
      return cljs.core.update_in.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], argseq__5360__auto__);
  }
};
cljs.core.update_in.cljs$core$IFn$_invoke$arity$3 = function(m, p__9467, f) {
  var vec__9468 = p__9467;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9468, 0, null);
  var ks = cljs.core.nthnext(vec__9468, 1);
  if (cljs.core.truth_(ks)) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.update_in.cljs$core$IFn$_invoke$arity$3(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__9469 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__9469) : f.call(null, G__9469);
    }());
  }
};
cljs.core.update_in.cljs$core$IFn$_invoke$arity$4 = function(m, p__9470, f, a) {
  var vec__9471 = p__9470;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9471, 0, null);
  var ks = cljs.core.nthnext(vec__9471, 1);
  if (cljs.core.truth_(ks)) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.update_in.cljs$core$IFn$_invoke$arity$4(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__9472 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      var G__9473 = a;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9472, G__9473) : f.call(null, G__9472, G__9473);
    }());
  }
};
cljs.core.update_in.cljs$core$IFn$_invoke$arity$5 = function(m, p__9474, f, a, b) {
  var vec__9475 = p__9474;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9475, 0, null);
  var ks = cljs.core.nthnext(vec__9475, 1);
  if (cljs.core.truth_(ks)) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.update_in.cljs$core$IFn$_invoke$arity$5(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a, b));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__9476 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      var G__9477 = a;
      var G__9478 = b;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__9476, G__9477, G__9478) : f.call(null, G__9476, G__9477, G__9478);
    }());
  }
};
cljs.core.update_in.cljs$core$IFn$_invoke$arity$6 = function(m, p__9479, f, a, b, c) {
  var vec__9480 = p__9479;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9480, 0, null);
  var ks = cljs.core.nthnext(vec__9480, 1);
  if (cljs.core.truth_(ks)) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.update_in.cljs$core$IFn$_invoke$arity$6(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a, b, c));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__9481 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      var G__9482 = a;
      var G__9483 = b;
      var G__9484 = c;
      return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__9481, G__9482, G__9483, G__9484) : f.call(null, G__9481, G__9482, G__9483, G__9484);
    }());
  }
};
cljs.core.update_in.cljs$core$IFn$_invoke$arity$variadic = function(m, p__9485, f, a, b, c, args) {
  var vec__9486 = p__9485;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9486, 0, null);
  var ks = cljs.core.nthnext(vec__9486, 1);
  if (cljs.core.truth_(ks)) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(cljs.core.update_in, cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a, cljs.core.array_seq([b, c, args], 0)));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), a, b, c, cljs.core.array_seq([args], 0)));
  }
};
cljs.core.update_in.cljs$lang$applyTo = function(seq9458) {
  var G__9459 = cljs.core.first(seq9458);
  var seq9458__$1 = cljs.core.next(seq9458);
  var G__9460 = cljs.core.first(seq9458__$1);
  var seq9458__$2 = cljs.core.next(seq9458__$1);
  var G__9461 = cljs.core.first(seq9458__$2);
  var seq9458__$3 = cljs.core.next(seq9458__$2);
  var G__9462 = cljs.core.first(seq9458__$3);
  var seq9458__$4 = cljs.core.next(seq9458__$3);
  var G__9463 = cljs.core.first(seq9458__$4);
  var seq9458__$5 = cljs.core.next(seq9458__$4);
  var G__9464 = cljs.core.first(seq9458__$5);
  var seq9458__$6 = cljs.core.next(seq9458__$5);
  return cljs.core.update_in.cljs$core$IFn$_invoke$arity$variadic(G__9459, G__9460, G__9461, G__9462, G__9463, G__9464, seq9458__$6);
};
cljs.core.update_in.cljs$lang$maxFixedArity = 6;
cljs.core.update = function cljs$core$update() {
  var G__9496 = arguments.length;
  switch(G__9496) {
    case 3:
      return cljs.core.update.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.update.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.update.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return cljs.core.update.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 6), 0);
      return cljs.core.update.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], argseq__5360__auto__);
  }
};
cljs.core.update.cljs$core$IFn$_invoke$arity$3 = function(m, k, f) {
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
    var G__9497 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
    return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__9497) : f.call(null, G__9497);
  }());
};
cljs.core.update.cljs$core$IFn$_invoke$arity$4 = function(m, k, f, x) {
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
    var G__9498 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
    var G__9499 = x;
    return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9498, G__9499) : f.call(null, G__9498, G__9499);
  }());
};
cljs.core.update.cljs$core$IFn$_invoke$arity$5 = function(m, k, f, x, y) {
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
    var G__9500 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
    var G__9501 = x;
    var G__9502 = y;
    return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__9500, G__9501, G__9502) : f.call(null, G__9500, G__9501, G__9502);
  }());
};
cljs.core.update.cljs$core$IFn$_invoke$arity$6 = function(m, k, f, x, y, z) {
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
    var G__9503 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
    var G__9504 = x;
    var G__9505 = y;
    var G__9506 = z;
    return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__9503, G__9504, G__9505, G__9506) : f.call(null, G__9503, G__9504, G__9505, G__9506);
  }());
};
cljs.core.update.cljs$core$IFn$_invoke$arity$variadic = function(m, k, f, x, y, z, more) {
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), x, y, z, cljs.core.array_seq([more], 0)));
};
cljs.core.update.cljs$lang$applyTo = function(seq9488) {
  var G__9489 = cljs.core.first(seq9488);
  var seq9488__$1 = cljs.core.next(seq9488);
  var G__9490 = cljs.core.first(seq9488__$1);
  var seq9488__$2 = cljs.core.next(seq9488__$1);
  var G__9491 = cljs.core.first(seq9488__$2);
  var seq9488__$3 = cljs.core.next(seq9488__$2);
  var G__9492 = cljs.core.first(seq9488__$3);
  var seq9488__$4 = cljs.core.next(seq9488__$3);
  var G__9493 = cljs.core.first(seq9488__$4);
  var seq9488__$5 = cljs.core.next(seq9488__$4);
  var G__9494 = cljs.core.first(seq9488__$5);
  var seq9488__$6 = cljs.core.next(seq9488__$5);
  return cljs.core.update.cljs$core$IFn$_invoke$arity$variadic(G__9489, G__9490, G__9491, G__9492, G__9493, G__9494, seq9488__$6);
};
cljs.core.update.cljs$lang$maxFixedArity = 6;
cljs.core.VectorNode = function(edit, arr) {
  this.edit = edit;
  this.arr = arr;
};
cljs.core.VectorNode.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "edit", "edit", -1302639, null), new cljs.core.Symbol(null, "arr", "arr", 2115492975, null)], null);
};
cljs.core.VectorNode.cljs$lang$type = true;
cljs.core.VectorNode.cljs$lang$ctorStr = "cljs.core/VectorNode";
cljs.core.VectorNode.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/VectorNode");
};
cljs.core.__GT_VectorNode = function cljs$core$__GT_VectorNode(edit, arr) {
  return new cljs.core.VectorNode(edit, arr);
};
cljs.core.pv_fresh_node = function cljs$core$pv_fresh_node(edit) {
  return new cljs.core.VectorNode(edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
};
cljs.core.pv_aget = function cljs$core$pv_aget(node, idx) {
  return node.arr[idx];
};
cljs.core.pv_aset = function cljs$core$pv_aset(node, idx, val) {
  return node.arr[idx] = val;
};
cljs.core.pv_clone_node = function cljs$core$pv_clone_node(node) {
  return new cljs.core.VectorNode(node.edit, cljs.core.aclone(node.arr));
};
cljs.core.tail_off = function cljs$core$tail_off(pv) {
  var cnt = pv.cnt;
  if (cnt < 32) {
    return 0;
  } else {
    return cnt - 1 >>> 5 << 5;
  }
};
cljs.core.new_path = function cljs$core$new_path(edit, level, node) {
  var ll = level;
  var ret = node;
  while (true) {
    if (ll === 0) {
      return ret;
    } else {
      var embed = ret;
      var r = cljs.core.pv_fresh_node(edit);
      var _ = cljs.core.pv_aset(r, 0, embed);
      var G__9508 = ll - 5;
      var G__9509 = r;
      ll = G__9508;
      ret = G__9509;
      continue;
    }
    break;
  }
};
cljs.core.push_tail = function cljs$core$push_tail(pv, level, parent, tailnode) {
  var ret = cljs.core.pv_clone_node(parent);
  var subidx = pv.cnt - 1 >>> level & 31;
  if (5 === level) {
    cljs.core.pv_aset(ret, subidx, tailnode);
    return ret;
  } else {
    var child = cljs.core.pv_aget(parent, subidx);
    if (!(child == null)) {
      var node_to_insert = cljs$core$push_tail(pv, level - 5, child, tailnode);
      cljs.core.pv_aset(ret, subidx, node_to_insert);
      return ret;
    } else {
      var node_to_insert = cljs.core.new_path(null, level - 5, tailnode);
      cljs.core.pv_aset(ret, subidx, node_to_insert);
      return ret;
    }
  }
};
cljs.core.vector_index_out_of_bounds = function cljs$core$vector_index_out_of_bounds(i, cnt) {
  throw new Error([cljs.core.str("No item "), cljs.core.str(i), cljs.core.str(" in vector of length "), cljs.core.str(cnt)].join(""));
};
cljs.core.first_array_for_longvec = function cljs$core$first_array_for_longvec(pv) {
  var node = pv.root;
  var level = pv.shift;
  while (true) {
    if (level > 0) {
      var G__9514 = cljs.core.pv_aget(node, 0);
      var G__9515 = level - 5;
      node = G__9514;
      level = G__9515;
      continue;
    } else {
      return node.arr;
    }
    break;
  }
};
cljs.core.unchecked_array_for = function cljs$core$unchecked_array_for(pv, i) {
  if (i >= cljs.core.tail_off(pv)) {
    return pv.tail;
  } else {
    var node = pv.root;
    var level = pv.shift;
    while (true) {
      if (level > 0) {
        var G__9516 = cljs.core.pv_aget(node, i >>> level & 31);
        var G__9517 = level - 5;
        node = G__9516;
        level = G__9517;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.array_for = function cljs$core$array_for(pv, i) {
  if (0 <= i && i < pv.cnt) {
    return cljs.core.unchecked_array_for(pv, i);
  } else {
    return cljs.core.vector_index_out_of_bounds(i, pv.cnt);
  }
};
cljs.core.do_assoc = function cljs$core$do_assoc(pv, level, node, i, val) {
  var ret = cljs.core.pv_clone_node(node);
  if (level === 0) {
    cljs.core.pv_aset(ret, i & 31, val);
    return ret;
  } else {
    var subidx = i >>> level & 31;
    cljs.core.pv_aset(ret, subidx, cljs$core$do_assoc(pv, level - 5, cljs.core.pv_aget(node, subidx), i, val));
    return ret;
  }
};
cljs.core.pop_tail = function cljs$core$pop_tail(pv, level, node) {
  var subidx = pv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = cljs$core$pop_tail(pv, level - 5, cljs.core.pv_aget(node, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node(node);
      cljs.core.pv_aset(ret, subidx, new_child);
      return ret;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node(node);
      cljs.core.pv_aset(ret, subidx, null);
      return ret;
    }
  }
};
cljs.core.RangedIterator = function(i, base, arr, v, start, end) {
  this.i = i;
  this.base = base;
  this.arr = arr;
  this.v = v;
  this.start = start;
  this.end = end;
};
cljs.core.RangedIterator.prototype.hasNext = function() {
  var self__ = this;
  var this$ = this;
  return self__.i < self__.end;
};
cljs.core.RangedIterator.prototype.next = function() {
  var self__ = this;
  var this$ = this;
  if (self__.i - self__.base === 32) {
    self__.arr = cljs.core.unchecked_array_for(self__.v, self__.i);
    self__.base = self__.base + 32;
  } else {
  }
  var ret = self__.arr[self__.i & 31];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.RangedIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.Symbol(null, "base", "base", 1825810849, null), new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), new cljs.core.Symbol(null, "v", "v", 1661996586, null), new cljs.core.Symbol(null, "start", "start", 1285322546, null), new cljs.core.Symbol(null, "end", "end", 1372345569, null)], null);
};
cljs.core.RangedIterator.cljs$lang$type = true;
cljs.core.RangedIterator.cljs$lang$ctorStr = "cljs.core/RangedIterator";
cljs.core.RangedIterator.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/RangedIterator");
};
cljs.core.__GT_RangedIterator = function cljs$core$__GT_RangedIterator(i, base, arr, v, start, end) {
  return new cljs.core.RangedIterator(i, base, arr, v, start, end);
};
cljs.core.ranged_iterator = function cljs$core$ranged_iterator(v, start, end) {
  var i = start;
  return new cljs.core.RangedIterator(i, i - i % 32, start < cljs.core.count(v) ? cljs.core.unchecked_array_for(v, i) : null, v, start, end);
};
cljs.core.PersistentVector = function(meta, cnt, shift, root, tail, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 167668511;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentVector.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentVector.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.unchecked_array_for(v__$1, i);
      var len = arr.length;
      var init__$2 = function() {
        var j = 0;
        var init__$2 = init__$1;
        while (true) {
          if (j < len) {
            var init__$3 = function() {
              var G__9527 = init__$2;
              var G__9528 = j + i;
              var G__9529 = arr[j];
              return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__9527, G__9528, G__9529) : f.call(null, G__9527, G__9528, G__9529);
            }();
            if (cljs.core.reduced_QMARK_(init__$3)) {
              return init__$3;
            } else {
              var G__9540 = j + 1;
              var G__9541 = init__$3;
              j = G__9540;
              init__$2 = G__9541;
              continue;
            }
          } else {
            return init__$2;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__9530 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__9530) : cljs.core.deref.call(null, G__9530);
      } else {
        var G__9542 = i + len;
        var G__9543 = init__$2;
        i = G__9542;
        init__$1 = G__9543;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_for(coll__$1, n)[n & 31];
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core.unchecked_array_for(coll__$1, n)[n & 31];
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    if (cljs.core.tail_off(coll__$1) <= n) {
      var new_tail = cljs.core.aclone(self__.tail);
      new_tail[n & 31] = val;
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, new_tail, null);
    } else {
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, cljs.core.do_assoc(coll__$1, self__.shift, self__.root, n, val), self__.tail, null);
    }
  } else {
    if (n === self__.cnt) {
      return cljs.core._conj(coll__$1, val);
    } else {
      throw new Error([cljs.core.str("Index "), cljs.core.str(n), cljs.core.str(" out of bounds  [0,"), cljs.core.str(self__.cnt), cljs.core.str("]")].join(""));
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IIterable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IIterable$_iterator$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.ranged_iterator(this$__$1, 0, self__.cnt);
};
cljs.core.PersistentVector.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentVector.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_key$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, 0);
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_val$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, 1);
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, self__.cnt - 1);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    throw new Error("Can't pop empty vector");
  } else {
    if (1 === self__.cnt) {
      return cljs.core._with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
    } else {
      if (1 < self__.cnt - cljs.core.tail_off(coll__$1)) {
        return new cljs.core.PersistentVector(self__.meta, self__.cnt - 1, self__.shift, self__.root, self__.tail.slice(0, -1), null);
      } else {
        var new_tail = cljs.core.unchecked_array_for(coll__$1, self__.cnt - 2);
        var nr = cljs.core.pop_tail(coll__$1, self__.shift, self__.root);
        var new_root = nr == null ? cljs.core.PersistentVector.EMPTY_NODE : nr;
        var cnt_1 = self__.cnt - 1;
        if (5 < self__.shift && cljs.core.pv_aget(new_root, 1) == null) {
          return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift - 5, cljs.core.pv_aget(new_root, 0), new_tail, null);
        } else {
          return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift, new_root, new_tail, null);
        }
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return new cljs.core.RSeq(coll__$1, self__.cnt - 1, null);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4725__auto__ = self__.__hash;
  if (!(h__4725__auto__ == null)) {
    return h__4725__auto__;
  } else {
    var h__4725__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4725__auto____$1;
    return h__4725__auto____$1;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  if (other instanceof cljs.core.PersistentVector) {
    if (self__.cnt === cljs.core.count(other)) {
      var me_iter = cljs.core._iterator(coll__$1);
      var you_iter = cljs.core._iterator(other);
      while (true) {
        if (cljs.core.truth_(me_iter.hasNext())) {
          var x = me_iter.next();
          var y = you_iter.next();
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
            continue;
          } else {
            return false;
          }
        } else {
          return true;
        }
        break;
      }
    } else {
      return false;
    }
  } else {
    return cljs.core.equiv_sequential(coll__$1, other);
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientVector(self__.cnt, self__.shift, function() {
    var G__9531 = self__.root;
    return cljs.core.tv_editable_root.cljs$core$IFn$_invoke$arity$1 ? cljs.core.tv_editable_root.cljs$core$IFn$_invoke$arity$1(G__9531) : cljs.core.tv_editable_root.call(null, G__9531);
  }(), function() {
    var G__9532 = self__.tail;
    return cljs.core.tv_editable_tail.cljs$core$IFn$_invoke$arity$1 ? cljs.core.tv_editable_tail.cljs$core$IFn$_invoke$arity$1(G__9532) : cljs.core.tv_editable_tail.call(null, G__9532);
  }());
};
cljs.core.PersistentVector.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$2 = function(v, f) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(v__$1, f);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.unchecked_array_for(v__$1, i);
      var len = arr.length;
      var init__$2 = function() {
        var j = 0;
        var init__$2 = init__$1;
        while (true) {
          if (j < len) {
            var init__$3 = function() {
              var G__9533 = init__$2;
              var G__9534 = arr[j];
              return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9533, G__9534) : f.call(null, G__9533, G__9534);
            }();
            if (cljs.core.reduced_QMARK_(init__$3)) {
              return init__$3;
            } else {
              var G__9544 = j + 1;
              var G__9545 = init__$3;
              j = G__9544;
              init__$2 = G__9545;
              continue;
            }
          } else {
            return init__$2;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__9535 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__9535) : cljs.core.deref.call(null, G__9535);
      } else {
        var G__9546 = i + len;
        var G__9547 = init__$2;
        i = G__9546;
        init__$1 = G__9547;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._assoc_n(coll__$1, k, v);
  } else {
    throw new Error("Vector's key for assoc must be a number.");
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    return null;
  } else {
    if (self__.cnt <= 32) {
      return new cljs.core.IndexedSeq(self__.tail, 0);
    } else {
      var G__9536 = coll__$1;
      var G__9537 = cljs.core.first_array_for_longvec(coll__$1);
      var G__9538 = 0;
      var G__9539 = 0;
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__9536, G__9537, G__9538, G__9539) : cljs.core.chunked_seq.call(null, G__9536, G__9537, G__9538, G__9539);
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(meta__$1, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt - cljs.core.tail_off(coll__$1) < 32) {
    var len = self__.tail.length;
    var new_tail = new Array(len + 1);
    var n__5194__auto___9548 = len;
    var i_9549 = 0;
    while (true) {
      if (i_9549 < n__5194__auto___9548) {
        new_tail[i_9549] = self__.tail[i_9549];
        var G__9550 = i_9549 + 1;
        i_9549 = G__9550;
        continue;
      } else {
      }
      break;
    }
    new_tail[len] = o;
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, self__.shift, self__.root, new_tail, null);
  } else {
    var root_overflow_QMARK_ = self__.cnt >>> 5 > 1 << self__.shift;
    var new_shift = root_overflow_QMARK_ ? self__.shift + 5 : self__.shift;
    var new_root = root_overflow_QMARK_ ? function() {
      var n_r = cljs.core.pv_fresh_node(null);
      cljs.core.pv_aset(n_r, 0, self__.root);
      cljs.core.pv_aset(n_r, 1, cljs.core.new_path(null, self__.shift, new cljs.core.VectorNode(null, self__.tail)));
      return n_r;
    }() : cljs.core.push_tail(coll__$1, self__.shift, self__.root, new cljs.core.VectorNode(null, self__.tail));
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, new_shift, new_root, [o], null);
  }
};
cljs.core.PersistentVector.prototype.call = function() {
  var G__9551 = null;
  var G__9551__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__9551__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__9551 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9551__2.call(this, self__, k);
      case 3:
        return G__9551__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__9551.cljs$core$IFn$_invoke$arity$2 = G__9551__2;
  G__9551.cljs$core$IFn$_invoke$arity$3 = G__9551__3;
  return G__9551;
}();
cljs.core.PersistentVector.prototype.apply = function(self__, args9526) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args9526)));
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.PersistentVector.getBasis = function() {
  return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null), new cljs.core.Symbol(null, "shift", "shift", -1657295705, null), new cljs.core.Symbol(null, "root", "root", 1191874074, null), new cljs.core.Symbol(null, "tail", "tail", 494507963, null), new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null)], null);
};
cljs.core.PersistentVector.cljs$lang$type = true;
cljs.core.PersistentVector.cljs$lang$ctorStr = "cljs.core/PersistentVector";
cljs.core.PersistentVector.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/PersistentVector");
};
cljs.core.__GT_PersistentVector = function cljs$core$__GT_PersistentVector(meta, cnt, shift, root, tail, __hash) {
  return new cljs.core.PersistentVector(meta, cnt, shift, root, tail, __hash);
};
cljs.core.PersistentVector.EMPTY_NODE = new cljs.core.VectorNode(null, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
cljs.core.PersistentVector.EMPTY = new cljs.core.PersistentVector(null, 0, 5, cljs.core.PersistentVector.EMPTY_NODE, [], cljs.core.empty_ordered_hash);
cljs.core.PersistentVector.fromArray = function(xs, no_clone) {
  var l = xs.length;
  var xs__$1 = no_clone ? xs : cljs.core.aclone(xs);
  if (l < 32) {
    return new cljs.core.PersistentVector(null, l, 5, cljs.core.PersistentVector.EMPTY_NODE, xs__$1, null);
  } else {
    var node = xs__$1.slice(0, 32);
    var v = new cljs.core.PersistentVector(null, 32, 5, cljs.core.PersistentVector.EMPTY_NODE, node, null);
    var i = 32;
    var out = v.cljs$core$IEditableCollection$_as_transient$arity$1(null);
    while (true) {
      if (i < l) {
        var G__9552 = i + 1;
        var G__9553 = cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(out, xs__$1[i]);
        i = G__9552;
        out = G__9553;
        continue;
      } else {
        return cljs.core.persistent_BANG_(out);
      }
      break;
    }
  }
};
cljs.core.PersistentVector.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5285__auto__ = this;
  return cljs.core.es6_iterator(this__5285__auto__);
};
cljs.core.vec = function cljs$core$vec(coll) {
  if (cljs.core.array_QMARK_(coll)) {
    return cljs.core.PersistentVector.fromArray(coll, true);
  } else {
    return cljs.core._persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj_BANG_, cljs.core._as_transient(cljs.core.PersistentVector.EMPTY), coll));
  }
};
cljs.core.vector = function cljs$core$vector() {
  var argseq__5349__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.vector.cljs$core$IFn$_invoke$arity$variadic(argseq__5349__auto__);
};
cljs.core.vector.cljs$core$IFn$_invoke$arity$variadic = function(args) {
  if (args instanceof cljs.core.IndexedSeq && args.i === 0) {
    return cljs.core.PersistentVector.fromArray(args.arr, true);
  } else {
    return cljs.core.vec(args);
  }
};
cljs.core.vector.cljs$lang$maxFixedArity = 0;
cljs.core.vector.cljs$lang$applyTo = function(seq9554) {
  return cljs.core.vector.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq9554));
};
cljs.core.ChunkedSeq = function(vec, node, i, off, meta, __hash) {
  this.vec = vec;
  this.node = node;
  this.i = i;
  this.off = off;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375020;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ChunkedSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = function() {
      var G__9555 = self__.vec;
      var G__9556 = self__.node;
      var G__9557 = self__.i;
      var G__9558 = self__.off + 1;
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__9555, G__9556, G__9557, G__9558) : cljs.core.chunked_seq.call(null, G__9555, G__9556, G__9557, G__9558);
    }();
    if (s == null) {
      return null;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_next(coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4725__auto__ = self__.__hash;
  if (!(h__4725__auto__ == null)) {
    return h__4725__auto__;
  } else {
    var h__4725__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4725__auto____$1;
    return h__4725__auto____$1;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(function() {
    var G__9559 = self__.vec;
    var G__9560 = self__.i + self__.off;
    var G__9561 = cljs.core.count(self__.vec);
    return cljs.core.subvec.cljs$core$IFn$_invoke$arity$3 ? cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(G__9559, G__9560, G__9561) : cljs.core.subvec.call(null, G__9559, G__9560, G__9561);
  }(), f);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(function() {
    var G__9562 = self__.vec;
    var G__9563 = self__.i + self__.off;
    var G__9564 = cljs.core.count(self__.vec);
    return cljs.core.subvec.cljs$core$IFn$_invoke$arity$3 ? cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(G__9562, G__9563, G__9564) : cljs.core.subvec.call(null, G__9562, G__9563, G__9564);
  }(), f, start);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.node[self__.off];
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = function() {
      var G__9565 = self__.vec;
      var G__9566 = self__.node;
      var G__9567 = self__.i;
      var G__9568 = self__.off + 1;
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__9565, G__9566, G__9567, G__9568) : cljs.core.chunked_seq.call(null, G__9565, G__9566, G__9567, G__9568);
    }();
    if (s == null) {
      return cljs.core.List.EMPTY;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_rest(coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$2(self__.node, self__.off);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count(self__.vec)) {
    var G__9569 = self__.vec;
    var G__9570 = cljs.core.unchecked_array_for(self__.vec, end);
    var G__9571 = end;
    var G__9572 = 0;
    return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__9569, G__9570, G__9571, G__9572) : cljs.core.chunked_seq.call(null, G__9569, G__9570, G__9571, G__9572);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  var G__9573 = self__.vec;
  var G__9574 = self__.node;
  var G__9575 = self__.i;
  var G__9576 = self__.off;
  var G__9577 = m;
  return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5(G__9573, G__9574, G__9575, G__9576, G__9577) : cljs.core.chunked_seq.call(null, G__9573, G__9574, G__9575, G__9576, G__9577);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count(self__.vec)) {
    var G__9578 = self__.vec;
    var G__9579 = cljs.core.unchecked_array_for(self__.vec, end);
    var G__9580 = end;
    var G__9581 = 0;
    return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__9578, G__9579, G__9580, G__9581) : cljs.core.chunked_seq.call(null, G__9578, G__9579, G__9580, G__9581);
  } else {
    return null;
  }
};
cljs.core.ChunkedSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "vec", "vec", 982683596, null), new cljs.core.Symbol(null, "node", "node", -2073234571, null), new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.Symbol(null, "off", "off", -2047994980, null), new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null)], null);
};
cljs.core.ChunkedSeq.cljs$lang$type = true;
cljs.core.ChunkedSeq.cljs$lang$ctorStr = "cljs.core/ChunkedSeq";
cljs.core.ChunkedSeq.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/ChunkedSeq");
};
cljs.core.__GT_ChunkedSeq = function cljs$core$__GT_ChunkedSeq(vec, node, i, off, meta, __hash) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, meta, __hash);
};
cljs.core.ChunkedSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5285__auto__ = this;
  return cljs.core.es6_iterator(this__5285__auto__);
};
cljs.core.chunked_seq = function cljs$core$chunked_seq() {
  var G__9583 = arguments.length;
  switch(G__9583) {
    case 3:
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$3 = function(vec, i, off) {
  return new cljs.core.ChunkedSeq(vec, cljs.core.array_for(vec, i), i, off, null, null);
};
cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 = function(vec, node, i, off) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, null, null);
};
cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5 = function(vec, node, i, off, meta) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, meta, null);
};
cljs.core.chunked_seq.cljs$lang$maxFixedArity = 5;
cljs.core.Subvec = function(meta, v, start, end, __hash) {
  this.meta = meta;
  this.v = v;
  this.start = start;
  this.end = end;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 167666463;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Subvec.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.Subvec.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.Subvec.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var i = self__.start;
  var j = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.end) {
      var init__$2 = function() {
        var G__9586 = init__$1;
        var G__9587 = j;
        var G__9588 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, i);
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__9586, G__9587, G__9588) : f.call(null, G__9586, G__9587, G__9588);
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__9589 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__9589) : cljs.core.deref.call(null, G__9589);
      } else {
        var G__9611 = i + 1;
        var G__9612 = j + 1;
        var G__9613 = init__$2;
        i = G__9611;
        j = G__9612;
        init__$1 = G__9613;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return cljs.core.vector_index_out_of_bounds(n, self__.end - self__.start);
  } else {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, self__.start + n);
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return not_found;
  } else {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(self__.v, self__.start + n, not_found);
  }
};
cljs.core.Subvec.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  var v_pos = self__.start + n;
  var G__9590 = self__.meta;
  var G__9591 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.v, v_pos, val);
  var G__9592 = self__.start;
  var G__9593 = function() {
    var x__4621__auto__ = self__.end;
    var y__4622__auto__ = v_pos + 1;
    return x__4621__auto__ > y__4622__auto__ ? x__4621__auto__ : y__4622__auto__;
  }();
  var G__9594 = null;
  return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__9590, G__9591, G__9592, G__9593, G__9594) : cljs.core.build_subvec.call(null, G__9590, G__9591, G__9592, G__9593, G__9594);
};
cljs.core.Subvec.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Subvec.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Subvec(self__.meta, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.end - self__.start;
};
cljs.core.Subvec.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, self__.end - 1);
};
cljs.core.Subvec.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.start === self__.end) {
    throw new Error("Can't pop empty vector");
  } else {
    var G__9595 = self__.meta;
    var G__9596 = self__.v;
    var G__9597 = self__.start;
    var G__9598 = self__.end - 1;
    var G__9599 = null;
    return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__9595, G__9596, G__9597, G__9598, G__9599) : cljs.core.build_subvec.call(null, G__9595, G__9596, G__9597, G__9598, G__9599);
  }
};
cljs.core.Subvec.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.start === self__.end)) {
    return new cljs.core.RSeq(coll__$1, self__.end - self__.start - 1, null);
  } else {
    return null;
  }
};
cljs.core.Subvec.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4725__auto__ = self__.__hash;
  if (!(h__4725__auto__ == null)) {
    return h__4725__auto__;
  } else {
    var h__4725__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4725__auto____$1;
    return h__4725__auto____$1;
  }
};
cljs.core.Subvec.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.Subvec.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(coll__$1, f);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(coll__$1, f, start__$1);
};
cljs.core.Subvec.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, key, val) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n(coll__$1, key, val);
  } else {
    throw new Error("Subvec's key for assoc must be a number.");
  }
};
cljs.core.Subvec.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var subvec_seq = function(coll__$1) {
    return function cljs$core$subvec_seq(i) {
      if (i === self__.end) {
        return null;
      } else {
        return cljs.core.cons(cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, i), new cljs.core.LazySeq(null, function(coll__$1) {
          return function() {
            return cljs$core$subvec_seq(i + 1);
          };
        }(coll__$1), null, null));
      }
    };
  }(coll__$1);
  return subvec_seq(self__.start);
};
cljs.core.Subvec.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  var G__9601 = meta__$1;
  var G__9602 = self__.v;
  var G__9603 = self__.start;
  var G__9604 = self__.end;
  var G__9605 = self__.__hash;
  return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__9601, G__9602, G__9603, G__9604, G__9605) : cljs.core.build_subvec.call(null, G__9601, G__9602, G__9603, G__9604, G__9605);
};
cljs.core.Subvec.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  var G__9606 = self__.meta;
  var G__9607 = cljs.core._assoc_n(self__.v, self__.end, o);
  var G__9608 = self__.start;
  var G__9609 = self__.end + 1;
  var G__9610 = null;
  return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__9606, G__9607, G__9608, G__9609, G__9610) : cljs.core.build_subvec.call(null, G__9606, G__9607, G__9608, G__9609, G__9610);
};
cljs.core.Subvec.prototype.call = function() {
  var G__9614 = null;
  var G__9614__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__9614__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__9614 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9614__2.call(this, self__, k);
      case 3:
        return G__9614__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__9614.cljs$core$IFn$_invoke$arity$2 = G__9614__2;
  G__9614.cljs$core$IFn$_invoke$arity$3 = G__9614__3;
  return G__9614;
}();
cljs.core.Subvec.prototype.apply = function(self__, args9585) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args9585)));
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.Subvec.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "v", "v", 1661996586, null), new cljs.core.Symbol(null, "start", "start", 1285322546, null), new cljs.core.Symbol(null, "end", "end", 1372345569, null), new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null)], null);
};
cljs.core.Subvec.cljs$lang$type = true;
cljs.core.Subvec.cljs$lang$ctorStr = "cljs.core/Subvec";
cljs.core.Subvec.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/Subvec");
};
cljs.core.__GT_Subvec = function cljs$core$__GT_Subvec(meta, v, start, end, __hash) {
  return new cljs.core.Subvec(meta, v, start, end, __hash);
};
cljs.core.Subvec.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5285__auto__ = this;
  return cljs.core.es6_iterator(this__5285__auto__);
};
cljs.core.build_subvec = function cljs$core$build_subvec(meta, v, start, end, __hash) {
  while (true) {
    if (v instanceof cljs.core.Subvec) {
      var G__9615 = meta;
      var G__9616 = v.v;
      var G__9617 = v.start + start;
      var G__9618 = v.start + end;
      var G__9619 = __hash;
      meta = G__9615;
      v = G__9616;
      start = G__9617;
      end = G__9618;
      __hash = G__9619;
      continue;
    } else {
      var c = cljs.core.count(v);
      if (start < 0 || end < 0 || start > c || end > c) {
        throw new Error("Index out of bounds");
      } else {
      }
      return new cljs.core.Subvec(meta, v, start, end, __hash);
    }
    break;
  }
};
cljs.core.subvec = function cljs$core$subvec() {
  var G__9621 = arguments.length;
  switch(G__9621) {
    case 2:
      return cljs.core.subvec.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.subvec.cljs$core$IFn$_invoke$arity$2 = function(v, start) {
  return cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(v, start, cljs.core.count(v));
};
cljs.core.subvec.cljs$core$IFn$_invoke$arity$3 = function(v, start, end) {
  return cljs.core.build_subvec(null, v, start, end, null);
};
cljs.core.subvec.cljs$lang$maxFixedArity = 3;
cljs.core.tv_ensure_editable = function cljs$core$tv_ensure_editable(edit, node) {
  if (edit === node.edit) {
    return node;
  } else {
    return new cljs.core.VectorNode(edit, cljs.core.aclone(node.arr));
  }
};
cljs.core.tv_editable_root = function cljs$core$tv_editable_root(node) {
  return new cljs.core.VectorNode(function() {
    var obj9626 = {};
    return obj9626;
  }(), cljs.core.aclone(node.arr));
};
cljs.core.tv_editable_tail = function cljs$core$tv_editable_tail(tl) {
  var ret = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
  cljs.core.array_copy(tl, 0, ret, 0, tl.length);
  return ret;
};
cljs.core.tv_push_tail = function cljs$core$tv_push_tail(tv, level, parent, tail_node) {
  var ret = cljs.core.tv_ensure_editable(tv.root.edit, parent);
  var subidx = tv.cnt - 1 >>> level & 31;
  cljs.core.pv_aset(ret, subidx, level === 5 ? tail_node : function() {
    var child = cljs.core.pv_aget(ret, subidx);
    if (!(child == null)) {
      return cljs$core$tv_push_tail(tv, level - 5, child, tail_node);
    } else {
      return cljs.core.new_path(tv.root.edit, level - 5, tail_node);
    }
  }());
  return ret;
};
cljs.core.tv_pop_tail = function cljs$core$tv_pop_tail(tv, level, node) {
  var node__$1 = cljs.core.tv_ensure_editable(tv.root.edit, node);
  var subidx = tv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = cljs$core$tv_pop_tail(tv, level - 5, cljs.core.pv_aget(node__$1, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset(node__$1, subidx, new_child);
      return node__$1;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset(node__$1, subidx, null);
      return node__$1;
    }
  }
};
cljs.core.unchecked_editable_array_for = function cljs$core$unchecked_editable_array_for(tv, i) {
  if (i >= cljs.core.tail_off(tv)) {
    return tv.tail;
  } else {
    var root = tv.root;
    var node = root;
    var level = tv.shift;
    while (true) {
      if (level > 0) {
        var G__9634 = cljs.core.tv_ensure_editable(root.edit, cljs.core.pv_aget(node, i >>> level & 31));
        var G__9635 = level - 5;
        node = G__9634;
        level = G__9635;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.TransientVector = function(cnt, shift, root, tail) {
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.cljs$lang$protocol_mask$partition1$ = 88;
  this.cljs$lang$protocol_mask$partition0$ = 275;
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt - cljs.core.tail_off(tcoll__$1) < 32) {
      self__.tail[self__.cnt & 31] = o;
      self__.cnt = self__.cnt + 1;
      return tcoll__$1;
    } else {
      var tail_node = new cljs.core.VectorNode(self__.root.edit, self__.tail);
      var new_tail = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      new_tail[0] = o;
      self__.tail = new_tail;
      if (self__.cnt >>> 5 > 1 << self__.shift) {
        var new_root_array = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var new_shift = self__.shift + 5;
        new_root_array[0] = self__.root;
        new_root_array[1] = cljs.core.new_path(self__.root.edit, self__.shift, tail_node);
        self__.root = new cljs.core.VectorNode(self__.root.edit, new_root_array);
        self__.shift = new_shift;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      } else {
        var new_root = cljs.core.tv_push_tail(tcoll__$1, self__.shift, self__.root, tail_node);
        self__.root = new_root;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    self__.root.edit = null;
    var len = self__.cnt - cljs.core.tail_off(tcoll__$1);
    var trimmed_tail = new Array(len);
    cljs.core.array_copy(self__.tail, 0, trimmed_tail, 0, len);
    return new cljs.core.PersistentVector(null, self__.cnt, self__.shift, self__.root, trimmed_tail, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n_BANG_(tcoll__$1, key, val);
  } else {
    throw new Error("TransientVector's key for assoc! must be a number.");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3 = function(tcoll, n, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (0 <= n && n < self__.cnt) {
      if (cljs.core.tail_off(tcoll__$1) <= n) {
        self__.tail[n & 31] = val;
        return tcoll__$1;
      } else {
        var new_root = function(tcoll__$1) {
          return function cljs$core$go(level, node) {
            var node__$1 = cljs.core.tv_ensure_editable(self__.root.edit, node);
            if (level === 0) {
              cljs.core.pv_aset(node__$1, n & 31, val);
              return node__$1;
            } else {
              var subidx = n >>> level & 31;
              cljs.core.pv_aset(node__$1, subidx, cljs$core$go(level - 5, cljs.core.pv_aget(node__$1, subidx)));
              return node__$1;
            }
          };
        }(tcoll__$1).call(null, self__.shift, self__.root);
        self__.root = new_root;
        return tcoll__$1;
      }
    } else {
      if (n === self__.cnt) {
        return cljs.core._conj_BANG_(tcoll__$1, val);
      } else {
        throw new Error([cljs.core.str("Index "), cljs.core.str(n), cljs.core.str(" out of bounds for TransientVector of length"), cljs.core.str(self__.cnt)].join(""));
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_pop_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt === 0) {
      throw new Error("Can't pop empty vector");
    } else {
      if (1 === self__.cnt) {
        self__.cnt = 0;
        return tcoll__$1;
      } else {
        if ((self__.cnt - 1 & 31) > 0) {
          self__.cnt = self__.cnt - 1;
          return tcoll__$1;
        } else {
          var new_tail = cljs.core.unchecked_editable_array_for(tcoll__$1, self__.cnt - 2);
          var new_root = function() {
            var nr = cljs.core.tv_pop_tail(tcoll__$1, self__.shift, self__.root);
            if (!(nr == null)) {
              return nr;
            } else {
              return new cljs.core.VectorNode(self__.root.edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
            }
          }();
          if (5 < self__.shift && cljs.core.pv_aget(new_root, 1) == null) {
            var new_root__$1 = cljs.core.tv_ensure_editable(self__.root.edit, cljs.core.pv_aget(new_root, 0));
            self__.root = new_root__$1;
            self__.shift = self__.shift - 5;
            self__.cnt = self__.cnt - 1;
            self__.tail = new_tail;
            return tcoll__$1;
          } else {
            self__.root = new_root;
            self__.cnt = self__.cnt - 1;
            self__.tail = new_tail;
            return tcoll__$1;
          }
        }
      }
    }
  } else {
    throw new Error("pop! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return self__.cnt;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return cljs.core.array_for(coll__$1, n)[n & 31];
  } else {
    throw new Error("nth after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, n);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.call = function() {
  var G__9639 = null;
  var G__9639__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__9639__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__9639 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9639__2.call(this, self__, k);
      case 3:
        return G__9639__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__9639.cljs$core$IFn$_invoke$arity$2 = G__9639__2;
  G__9639.cljs$core$IFn$_invoke$arity$3 = G__9639__3;
  return G__9639;
}();
cljs.core.TransientVector.prototype.apply = function(self__, args9636) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args9636)));
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.TransientVector.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null), new cljs.core.Symbol(null, "shift", "shift", -1657295705, null), new cljs.core.Symbol(null, "root", "root", 1191874074, null), new cljs.core.Symbol(null, "tail", "tail", 494507963, null)], null);
};
cljs.core.TransientVector.cljs$lang$type = true;
cljs.core.TransientVector.cljs$lang$ctorStr = "cljs.core/TransientVector";
cljs.core.TransientVector.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/TransientVector");
};
cljs.core.__GT_TransientVector = function cljs$core$__GT_TransientVector(cnt, shift, root, tail) {
  return new cljs.core.TransientVector(cnt, shift, root, tail);
};
cljs.core.PersistentQueueSeq = function(meta, front, rear, __hash) {
  this.meta = meta;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31850572;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.PersistentQueueSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentQueueSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4725__auto__ = self__.__hash;
  if (!(h__4725__auto__ == null)) {
    return h__4725__auto__;
  } else {
    var h__4725__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4725__auto____$1;
    return h__4725__auto____$1;
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.front);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var temp__4420__auto__ = cljs.core.next(self__.front);
  if (temp__4420__auto__) {
    var f1 = temp__4420__auto__;
    return new cljs.core.PersistentQueueSeq(self__.meta, f1, self__.rear, null);
  } else {
    if (self__.rear == null) {
      return cljs.core._empty(coll__$1);
    } else {
      return new cljs.core.PersistentQueueSeq(self__.meta, self__.rear, null, null);
    }
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueueSeq(meta__$1, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.PersistentQueueSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "front", "front", 117022539, null), new cljs.core.Symbol(null, "rear", "rear", -900164830, null), new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null)], null);
};
cljs.core.PersistentQueueSeq.cljs$lang$type = true;
cljs.core.PersistentQueueSeq.cljs$lang$ctorStr = "cljs.core/PersistentQueueSeq";
cljs.core.PersistentQueueSeq.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/PersistentQueueSeq");
};
cljs.core.__GT_PersistentQueueSeq = function cljs$core$__GT_PersistentQueueSeq(meta, front, rear, __hash) {
  return new cljs.core.PersistentQueueSeq(meta, front, rear, __hash);
};
cljs.core.PersistentQueueSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5285__auto__ = this;
  return cljs.core.es6_iterator(this__5285__auto__);
};
cljs.core.PersistentQueue = function(meta, count, front, rear, __hash) {
  this.meta = meta;
  this.count = count;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31858766;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentQueue.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentQueue.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueue.prototype.cljs$core$ICloneable$_clone$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(self__.meta, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    var temp__4420__auto__ = cljs.core.next(self__.front);
    if (temp__4420__auto__) {
      var f1 = temp__4420__auto__;
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, f1, self__.rear, null);
    } else {
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, cljs.core.seq(self__.rear), cljs.core.PersistentVector.EMPTY, null);
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4725__auto__ = self__.__hash;
  if (!(h__4725__auto__ == null)) {
    return h__4725__auto__;
  } else {
    var h__4725__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4725__auto____$1;
    return h__4725__auto____$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentQueue.EMPTY, self__.meta);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.rest(cljs.core.seq(coll__$1));
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var rear__$1 = cljs.core.seq(self__.rear);
  if (cljs.core.truth_(function() {
    var or__4309__auto__ = self__.front;
    if (cljs.core.truth_(or__4309__auto__)) {
      return or__4309__auto__;
    } else {
      return rear__$1;
    }
  }())) {
    return new cljs.core.PersistentQueueSeq(null, self__.front, cljs.core.seq(rear__$1), null);
  } else {
    return null;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(meta__$1, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, self__.front, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(function() {
      var or__4309__auto__ = self__.rear;
      if (cljs.core.truth_(or__4309__auto__)) {
        return or__4309__auto__;
      } else {
        return cljs.core.PersistentVector.EMPTY;
      }
    }(), o), null);
  } else {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(self__.front, o), cljs.core.PersistentVector.EMPTY, null);
  }
};
cljs.core.PersistentQueue.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "count", "count", -514511684, null), new cljs.core.Symbol(null, "front", "front", 117022539, null), new cljs.core.Symbol(null, "rear", "rear", -900164830, null), new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null)], null);
};
cljs.core.PersistentQueue.cljs$lang$type = true;
cljs.core.PersistentQueue.cljs$lang$ctorStr = "cljs.core/PersistentQueue";
cljs.core.PersistentQueue.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/PersistentQueue");
};
cljs.core.__GT_PersistentQueue = function cljs$core$__GT_PersistentQueue(meta, count, front, rear, __hash) {
  return new cljs.core.PersistentQueue(meta, count, front, rear, __hash);
};
cljs.core.PersistentQueue.EMPTY = new cljs.core.PersistentQueue(null, 0, null, cljs.core.PersistentVector.EMPTY, cljs.core.empty_ordered_hash);
cljs.core.PersistentQueue.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5285__auto__ = this;
  return cljs.core.es6_iterator(this__5285__auto__);
};
cljs.core.NeverEquiv = function() {
  this.cljs$lang$protocol_mask$partition0$ = 2097152;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.NeverEquiv.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.NeverEquiv.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return false;
};
cljs.core.NeverEquiv.getBasis = function() {
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.NeverEquiv.cljs$lang$type = true;
cljs.core.NeverEquiv.cljs$lang$ctorStr = "cljs.core/NeverEquiv";
cljs.core.NeverEquiv.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/NeverEquiv");
};
cljs.core.__GT_NeverEquiv = function cljs$core$__GT_NeverEquiv() {
  return new cljs.core.NeverEquiv;
};
cljs.core.never_equiv = new cljs.core.NeverEquiv;
cljs.core.equiv_map = function cljs$core$equiv_map(x, y) {
  return cljs.core.boolean$(cljs.core.map_QMARK_(y) ? cljs.core.count(x) === cljs.core.count(y) ? cljs.core.every_QMARK_(cljs.core.identity, cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(xkv) {
    return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(y, cljs.core.first(xkv), cljs.core.never_equiv), cljs.core.second(xkv));
  }, x)) : null : null);
};
cljs.core.scan_array = function cljs$core$scan_array(incr, k, array) {
  var len = array.length;
  var i = 0;
  while (true) {
    if (i < len) {
      if (k === array[i]) {
        return i;
      } else {
        var G__9640 = i + incr;
        i = G__9640;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.obj_map_compare_keys = function cljs$core$obj_map_compare_keys(a, b) {
  var a__$1 = cljs.core.hash(a);
  var b__$1 = cljs.core.hash(b);
  if (a__$1 < b__$1) {
    return -1;
  } else {
    if (a__$1 > b__$1) {
      return 1;
    } else {
      return 0;
    }
  }
};
cljs.core.obj_map__GT_hash_map = function cljs$core$obj_map__GT_hash_map(m, k, v) {
  var ks = m.keys;
  var len = ks.length;
  var so = m.strobj;
  var mm = cljs.core.meta(m);
  var i = 0;
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var k__$1 = ks[i];
      var G__9641 = i + 1;
      var G__9642 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, k__$1, so[k__$1]);
      i = G__9641;
      out = G__9642;
      continue;
    } else {
      return cljs.core.with_meta(cljs.core.persistent_BANG_(cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, k, v)), mm);
    }
    break;
  }
};
cljs.core.obj_clone = function cljs$core$obj_clone(obj, ks) {
  var new_obj = function() {
    var obj9646 = {};
    return obj9646;
  }();
  var l = ks.length;
  var i_9647 = 0;
  while (true) {
    if (i_9647 < l) {
      var k_9648 = ks[i_9647];
      new_obj[k_9648] = obj[k_9648];
      var G__9649 = i_9647 + 1;
      i_9647 = G__9649;
      continue;
    } else {
    }
    break;
  }
  return new_obj;
};
cljs.core.ObjMap = function(meta, keys, strobj, update_count, __hash) {
  this.meta = meta;
  this.keys = keys;
  this.strobj = strobj;
  this.update_count = update_count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
  this.cljs$lang$protocol_mask$partition1$ = 4;
};
cljs.core.ObjMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ObjMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(function() {
    var and__4297__auto__ = function() {
      var G__9653 = k;
      return goog.isString(G__9653);
    }();
    if (cljs.core.truth_(and__4297__auto__)) {
      return !(cljs.core.scan_array(1, k, self__.keys) == null);
    } else {
      return and__4297__auto__;
    }
  }())) {
    return self__.strobj[k];
  } else {
    return not_found;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.keys.length;
  var keys__$1 = self__.keys.sort(cljs.core.obj_map_compare_keys);
  var init__$1 = init;
  while (true) {
    if (cljs.core.seq(keys__$1)) {
      var k = cljs.core.first(keys__$1);
      var init__$2 = function() {
        var G__9654 = init__$1;
        var G__9655 = k;
        var G__9656 = self__.strobj[k];
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__9654, G__9655, G__9656) : f.call(null, G__9654, G__9655, G__9656);
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__9657 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__9657) : cljs.core.deref.call(null, G__9657);
      } else {
        var G__9663 = cljs.core.rest(keys__$1);
        var G__9664 = init__$2;
        keys__$1 = G__9663;
        init__$1 = G__9664;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ObjMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.keys.length;
};
cljs.core.ObjMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4725__auto__ = self__.__hash;
  if (!(h__4725__auto__ == null)) {
    return h__4725__auto__;
  } else {
    var h__4725__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4725__auto____$1;
    return h__4725__auto____$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map(coll__$1, other);
};
cljs.core.ObjMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.transient$(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentHashMap.EMPTY, coll__$1));
};
cljs.core.ObjMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.ObjMap.EMPTY, self__.meta);
};
cljs.core.ObjMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(function() {
    var and__4297__auto__ = function() {
      var G__9659 = k;
      return goog.isString(G__9659);
    }();
    if (cljs.core.truth_(and__4297__auto__)) {
      return !(cljs.core.scan_array(1, k, self__.keys) == null);
    } else {
      return and__4297__auto__;
    }
  }())) {
    var new_keys = cljs.core.aclone(self__.keys);
    var new_strobj = cljs.core.obj_clone(self__.strobj, self__.keys);
    new_keys.splice(cljs.core.scan_array(1, k, new_keys), 1);
    delete new_strobj[k];
    return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
  } else {
    return coll__$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(function() {
    var G__9660 = k;
    return goog.isString(G__9660);
  }())) {
    if (self__.update_count > cljs.core.ObjMap.HASHMAP_THRESHOLD || self__.keys.length >= cljs.core.ObjMap.HASHMAP_THRESHOLD) {
      return cljs.core.obj_map__GT_hash_map(coll__$1, k, v);
    } else {
      if (!(cljs.core.scan_array(1, k, self__.keys) == null)) {
        var new_strobj = cljs.core.obj_clone(self__.strobj, self__.keys);
        new_strobj[k] = v;
        return new cljs.core.ObjMap(self__.meta, self__.keys, new_strobj, self__.update_count + 1, null);
      } else {
        var new_strobj = cljs.core.obj_clone(self__.strobj, self__.keys);
        var new_keys = cljs.core.aclone(self__.keys);
        new_strobj[k] = v;
        new_keys.push(k);
        return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
      }
    }
  } else {
    return cljs.core.obj_map__GT_hash_map(coll__$1, k, v);
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(function() {
    var and__4297__auto__ = function() {
      var G__9662 = k;
      return goog.isString(G__9662);
    }();
    if (cljs.core.truth_(and__4297__auto__)) {
      return !(cljs.core.scan_array(1, k, self__.keys) == null);
    } else {
      return and__4297__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.keys.length > 0) {
    return cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(coll__$1) {
      return function(p1__9650_SHARP_) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__9650_SHARP_, self__.strobj[p1__9650_SHARP_]], null);
      };
    }(coll__$1), self__.keys.sort(cljs.core.obj_map_compare_keys));
  } else {
    return null;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ObjMap(meta__$1, self__.keys, self__.strobj, self__.update_count, self__.__hash);
};
cljs.core.ObjMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.ObjMap.prototype.call = function() {
  var G__9665 = null;
  var G__9665__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__9665__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__9665 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9665__2.call(this, self__, k);
      case 3:
        return G__9665__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__9665.cljs$core$IFn$_invoke$arity$2 = G__9665__2;
  G__9665.cljs$core$IFn$_invoke$arity$3 = G__9665__3;
  return G__9665;
}();
cljs.core.ObjMap.prototype.apply = function(self__, args9651) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args9651)));
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.ObjMap.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "keys", "keys", -1586012071, null), new cljs.core.Symbol(null, "strobj", "strobj", 1088091283, null), new cljs.core.Symbol(null, "update-count", "update-count", -411982269, null), new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null)], null);
};
cljs.core.ObjMap.cljs$lang$type = true;
cljs.core.ObjMap.cljs$lang$ctorStr = "cljs.core/ObjMap";
cljs.core.ObjMap.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/ObjMap");
};
cljs.core.__GT_ObjMap = function cljs$core$__GT_ObjMap(meta, keys, strobj, update_count, __hash) {
  return new cljs.core.ObjMap(meta, keys, strobj, update_count, __hash);
};
cljs.core.ObjMap.EMPTY = new cljs.core.ObjMap(null, [], function() {
  var obj9667 = {};
  return obj9667;
}(), 0, cljs.core.empty_unordered_hash);
cljs.core.ObjMap.HASHMAP_THRESHOLD = 8;
cljs.core.ObjMap.fromObject = function(ks, obj) {
  return new cljs.core.ObjMap(null, ks, obj, 0, null);
};
cljs.core.ES6EntriesIterator = function(s) {
  this.s = s;
};
cljs.core.ES6EntriesIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var vec__9668 = cljs.core.first(self__.s);
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9668, 0, null);
    var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9668, 1, null);
    self__.s = cljs.core.next(self__.s);
    return {"value":[k, v], "done":false};
  } else {
    return {"value":null, "done":true};
  }
};
cljs.core.ES6EntriesIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "s", "s", -948495851, null)], null);
};
cljs.core.ES6EntriesIterator.cljs$lang$type = true;
cljs.core.ES6EntriesIterator.cljs$lang$ctorStr = "cljs.core/ES6EntriesIterator";
cljs.core.ES6EntriesIterator.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/ES6EntriesIterator");
};
cljs.core.__GT_ES6EntriesIterator = function cljs$core$__GT_ES6EntriesIterator(s) {
  return new cljs.core.ES6EntriesIterator(s);
};
cljs.core.es6_entries_iterator = function cljs$core$es6_entries_iterator(coll) {
  return new cljs.core.ES6EntriesIterator(cljs.core.seq(coll));
};
cljs.core.ES6SetEntriesIterator = function(s) {
  this.s = s;
};
cljs.core.ES6SetEntriesIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var x = cljs.core.first(self__.s);
    self__.s = cljs.core.next(self__.s);
    return {"value":[x, x], "done":false};
  } else {
    return {"value":null, "done":true};
  }
};
cljs.core.ES6SetEntriesIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "s", "s", -948495851, null)], null);
};
cljs.core.ES6SetEntriesIterator.cljs$lang$type = true;
cljs.core.ES6SetEntriesIterator.cljs$lang$ctorStr = "cljs.core/ES6SetEntriesIterator";
cljs.core.ES6SetEntriesIterator.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/ES6SetEntriesIterator");
};
cljs.core.__GT_ES6SetEntriesIterator = function cljs$core$__GT_ES6SetEntriesIterator(s) {
  return new cljs.core.ES6SetEntriesIterator(s);
};
cljs.core.es6_set_entries_iterator = function cljs$core$es6_set_entries_iterator(coll) {
  return new cljs.core.ES6SetEntriesIterator(cljs.core.seq(coll));
};
cljs.core.array_index_of_nil_QMARK_ = function cljs$core$array_index_of_nil_QMARK_(arr) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return -1;
    } else {
      if (arr[i] == null) {
        return i;
      } else {
        var G__9669 = i + 2;
        i = G__9669;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_index_of_keyword_QMARK_ = function cljs$core$array_index_of_keyword_QMARK_(arr, k) {
  var len = arr.length;
  var kstr = k.fqn;
  var i = 0;
  while (true) {
    if (len <= i) {
      return -1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Keyword && kstr === k_SINGLEQUOTE_.fqn;
      }()) {
        return i;
      } else {
        var G__9670 = i + 2;
        i = G__9670;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_index_of_symbol_QMARK_ = function cljs$core$array_index_of_symbol_QMARK_(arr, k) {
  var len = arr.length;
  var kstr = k.str;
  var i = 0;
  while (true) {
    if (len <= i) {
      return -1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Symbol && kstr === k_SINGLEQUOTE_.str;
      }()) {
        return i;
      } else {
        var G__9671 = i + 2;
        i = G__9671;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_index_of_identical_QMARK_ = function cljs$core$array_index_of_identical_QMARK_(arr, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return -1;
    } else {
      if (k === arr[i]) {
        return i;
      } else {
        var G__9672 = i + 2;
        i = G__9672;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_index_of_equiv_QMARK_ = function cljs$core$array_index_of_equiv_QMARK_(arr, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return -1;
    } else {
      if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(k, arr[i])) {
        return i;
      } else {
        var G__9673 = i + 2;
        i = G__9673;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_index_of = function cljs$core$array_index_of(arr, k) {
  if (k instanceof cljs.core.Keyword) {
    return cljs.core.array_index_of_keyword_QMARK_(arr, k);
  } else {
    if (cljs.core.truth_(function() {
      var or__4309__auto__ = function() {
        var G__9677 = k;
        return goog.isString(G__9677);
      }();
      if (cljs.core.truth_(or__4309__auto__)) {
        return or__4309__auto__;
      } else {
        return typeof k === "number";
      }
    }())) {
      return cljs.core.array_index_of_identical_QMARK_(arr, k);
    } else {
      if (k instanceof cljs.core.Symbol) {
        return cljs.core.array_index_of_symbol_QMARK_(arr, k);
      } else {
        if (k == null) {
          return cljs.core.array_index_of_nil_QMARK_(arr);
        } else {
          return cljs.core.array_index_of_equiv_QMARK_(arr, k);
        }
      }
    }
  }
};
cljs.core.array_map_index_of = function cljs$core$array_map_index_of(m, k) {
  return cljs.core.array_index_of(m.arr, k);
};
cljs.core.array_extend_kv = function cljs$core$array_extend_kv(arr, k, v) {
  var l = arr.length;
  var narr = new Array(l + 2);
  var i_9678 = 0;
  while (true) {
    if (i_9678 < l) {
      narr[i_9678] = arr[i_9678];
      var G__9679 = i_9678 + 1;
      i_9678 = G__9679;
      continue;
    } else {
    }
    break;
  }
  narr[l] = k;
  narr[l + 1] = v;
  return narr;
};
cljs.core.array_map_extend_kv = function cljs$core$array_map_extend_kv(m, k, v) {
  return cljs.core.array_extend_kv(m.arr, k, v);
};
cljs.core.PersistentArrayMapSeq = function(arr, i, _meta) {
  this.arr = arr;
  this.i = i;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.PersistentArrayMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentArrayMapSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return (self__.arr.length - self__.i) / 2;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__._meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i, new_meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.PersistentArrayMapSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.Symbol(null, "_meta", "_meta", -1716892533, null)], null);
};
cljs.core.PersistentArrayMapSeq.cljs$lang$type = true;
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapSeq";
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/PersistentArrayMapSeq");
};
cljs.core.__GT_PersistentArrayMapSeq = function cljs$core$__GT_PersistentArrayMapSeq(arr, i, _meta) {
  return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
};
cljs.core.PersistentArrayMapSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5285__auto__ = this;
  return cljs.core.es6_iterator(this__5285__auto__);
};
cljs.core.persistent_array_map_seq = function cljs$core$persistent_array_map_seq(arr, i, _meta) {
  if (i <= arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapIterator = function(arr, i, cnt) {
  this.arr = arr;
  this.i = i;
  this.cnt = cnt;
};
cljs.core.PersistentArrayMapIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.cnt;
};
cljs.core.PersistentArrayMapIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
  self__.i = self__.i + 2;
  return ret;
};
cljs.core.PersistentArrayMapIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null)], null);
};
cljs.core.PersistentArrayMapIterator.cljs$lang$type = true;
cljs.core.PersistentArrayMapIterator.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapIterator";
cljs.core.PersistentArrayMapIterator.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/PersistentArrayMapIterator");
};
cljs.core.__GT_PersistentArrayMapIterator = function cljs$core$__GT_PersistentArrayMapIterator(arr, i, cnt) {
  return new cljs.core.PersistentArrayMapIterator(arr, i, cnt);
};
cljs.core.PersistentArrayMap = function(meta, cnt, arr, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.arr = arr;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16647951;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentArrayMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentArrayMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentArrayMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__9681 = coll;
    return cljs.core.keys.cljs$core$IFn$_invoke$arity$1 ? cljs.core.keys.cljs$core$IFn$_invoke$arity$1(G__9681) : cljs.core.keys.call(null, G__9681);
  }());
};
cljs.core.PersistentArrayMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentArrayMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__9682 = coll;
    return cljs.core.vals.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vals.cljs$core$IFn$_invoke$arity$1(G__9682) : cljs.core.vals.call(null, G__9682);
  }());
};
cljs.core.PersistentArrayMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentArrayMap.prototype.get = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentArrayMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__9683 = cljs.core.seq(coll);
  var chunk__9684 = null;
  var count__9685 = 0;
  var i__9686 = 0;
  while (true) {
    if (i__9686 < count__9685) {
      var vec__9687 = chunk__9684.cljs$core$IIndexed$_nth$arity$2(null, i__9686);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9687, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9687, 1, null);
      var G__9688_9701 = v;
      var G__9689_9702 = k;
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9688_9701, G__9689_9702) : f.call(null, G__9688_9701, G__9689_9702);
      var G__9703 = seq__9683;
      var G__9704 = chunk__9684;
      var G__9705 = count__9685;
      var G__9706 = i__9686 + 1;
      seq__9683 = G__9703;
      chunk__9684 = G__9704;
      count__9685 = G__9705;
      i__9686 = G__9706;
      continue;
    } else {
      var temp__4422__auto__ = cljs.core.seq(seq__9683);
      if (temp__4422__auto__) {
        var seq__9683__$1 = temp__4422__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__9683__$1)) {
          var c__5094__auto__ = cljs.core.chunk_first(seq__9683__$1);
          var G__9707 = cljs.core.chunk_rest(seq__9683__$1);
          var G__9708 = c__5094__auto__;
          var G__9709 = cljs.core.count(c__5094__auto__);
          var G__9710 = 0;
          seq__9683 = G__9707;
          chunk__9684 = G__9708;
          count__9685 = G__9709;
          i__9686 = G__9710;
          continue;
        } else {
          var vec__9690 = cljs.core.first(seq__9683__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9690, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9690, 1, null);
          var G__9691_9711 = v;
          var G__9692_9712 = k;
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9691_9711, G__9692_9712) : f.call(null, G__9691_9711, G__9692_9712);
          var G__9713 = cljs.core.next(seq__9683__$1);
          var G__9714 = null;
          var G__9715 = 0;
          var G__9716 = 0;
          seq__9683 = G__9713;
          chunk__9684 = G__9714;
          count__9685 = G__9715;
          i__9686 = G__9716;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of(coll__$1, k);
  if (idx === -1) {
    return not_found;
  } else {
    return self__.arr[idx + 1];
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = function() {
        var G__9693 = init__$1;
        var G__9694 = self__.arr[i];
        var G__9695 = self__.arr[i + 1];
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__9693, G__9694, G__9695) : f.call(null, G__9693, G__9694, G__9695);
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__9696 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__9696) : cljs.core.deref.call(null, G__9696);
      } else {
        var G__9717 = i + 2;
        var G__9718 = init__$2;
        i = G__9717;
        init__$1 = G__9718;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IIterable$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IIterable$_iterator$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return new cljs.core.PersistentArrayMapIterator(self__.arr, 0, self__.cnt * 2);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4725__auto__ = self__.__hash;
  if (!(h__4725__auto__ == null)) {
    return h__4725__auto__;
  } else {
    var h__4725__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4725__auto____$1;
    return h__4725__auto____$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  if (function() {
    var G__9697 = other;
    if (G__9697) {
      var bit__4976__auto__ = G__9697.cljs$lang$protocol_mask$partition0$ & 1024;
      if (bit__4976__auto__ || G__9697.cljs$core$IMap$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    var alen = self__.arr.length;
    var other__$1 = other;
    if (self__.cnt === other__$1.cljs$core$ICounted$_count$arity$1(null)) {
      var i = 0;
      while (true) {
        if (i < alen) {
          var v = other__$1.cljs$core$ILookup$_lookup$arity$3(null, self__.arr[i], cljs.core.lookup_sentinel);
          if (!(v === cljs.core.lookup_sentinel)) {
            if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.arr[i + 1], v)) {
              var G__9719 = i + 2;
              i = G__9719;
              continue;
            } else {
              return false;
            }
          } else {
            return false;
          }
        } else {
          return true;
        }
        break;
      }
    } else {
      return false;
    }
  } else {
    return cljs.core.equiv_map(coll__$1, other);
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientArrayMap(function() {
    var obj9699 = {};
    return obj9699;
  }(), self__.arr.length, cljs.core.aclone(self__.arr));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta(cljs.core.PersistentArrayMap.EMPTY, self__.meta);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of(coll__$1, k);
  if (idx >= 0) {
    var len = self__.arr.length;
    var new_len = len - 2;
    if (new_len === 0) {
      return cljs.core._empty(coll__$1);
    } else {
      var new_arr = new Array(new_len);
      var s = 0;
      var d = 0;
      while (true) {
        if (s >= len) {
          return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt - 1, new_arr, null);
        } else {
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(k, self__.arr[s])) {
            var G__9720 = s + 2;
            var G__9721 = d;
            s = G__9720;
            d = G__9721;
            continue;
          } else {
            new_arr[d] = self__.arr[s];
            new_arr[d + 1] = self__.arr[s + 1];
            var G__9722 = s + 2;
            var G__9723 = d + 2;
            s = G__9722;
            d = G__9723;
            continue;
          }
        }
        break;
      }
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of(coll__$1, k);
  if (idx === -1) {
    if (self__.cnt < cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
      var arr__$1 = cljs.core.array_map_extend_kv(coll__$1, k, v);
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt + 1, arr__$1, null);
    } else {
      return cljs.core._with_meta(cljs.core._assoc(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentHashMap.EMPTY, coll__$1), k, v), self__.meta);
    }
  } else {
    if (v === self__.arr[idx + 1]) {
      return coll__$1;
    } else {
      var arr__$1 = function() {
        var G__9700 = cljs.core.aclone(self__.arr);
        G__9700[idx + 1] = v;
        return G__9700;
      }();
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, arr__$1, null);
    }
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return !(cljs.core.array_map_index_of(coll__$1, k) === -1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.persistent_array_map_seq(self__.arr, 0, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMap(meta__$1, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq(entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first(es);
        if (cljs.core.vector_QMARK_(e)) {
          var G__9724 = cljs.core._assoc(ret, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 1));
          var G__9725 = cljs.core.next(es);
          ret = G__9724;
          es = G__9725;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentArrayMap.prototype.call = function() {
  var G__9726 = null;
  var G__9726__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__9726__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__9726 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9726__2.call(this, self__, k);
      case 3:
        return G__9726__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__9726.cljs$core$IFn$_invoke$arity$2 = G__9726__2;
  G__9726.cljs$core$IFn$_invoke$arity$3 = G__9726__3;
  return G__9726;
}();
cljs.core.PersistentArrayMap.prototype.apply = function(self__, args9680) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args9680)));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentArrayMap.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null), new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null)], null);
};
cljs.core.PersistentArrayMap.cljs$lang$type = true;
cljs.core.PersistentArrayMap.cljs$lang$ctorStr = "cljs.core/PersistentArrayMap";
cljs.core.PersistentArrayMap.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/PersistentArrayMap");
};
cljs.core.__GT_PersistentArrayMap = function cljs$core$__GT_PersistentArrayMap(meta, cnt, arr, __hash) {
  return new cljs.core.PersistentArrayMap(meta, cnt, arr, __hash);
};
cljs.core.PersistentArrayMap.EMPTY = new cljs.core.PersistentArrayMap(null, 0, [], cljs.core.empty_unordered_hash);
cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD = 8;
cljs.core.PersistentArrayMap.fromArray = function(arr, no_clone, no_check) {
  var arr__$1 = no_clone ? arr : cljs.core.aclone(arr);
  var arr__$2 = no_check ? arr__$1 : function() {
    var ret = [];
    var i_9727 = 0;
    while (true) {
      if (i_9727 < arr__$1.length) {
        var k_9728 = arr__$1[i_9727];
        var v_9729 = arr__$1[i_9727 + 1];
        var idx_9730 = cljs.core.array_index_of(ret, k_9728);
        if (idx_9730 === -1) {
          ret.push(k_9728);
          ret.push(v_9729);
        } else {
        }
        var G__9731 = i_9727 + 2;
        i_9727 = G__9731;
        continue;
      } else {
      }
      break;
    }
    return ret;
  }();
  var arr__$3 = function() {
    var cnt = arr__$2.length / 2;
    return new cljs.core.PersistentArrayMap(null, cnt, arr__$2, null);
  }();
  return arr__$3;
};
cljs.core.PersistentArrayMap.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5285__auto__ = this;
  return cljs.core.es6_iterator(this__5285__auto__);
};
cljs.core.TransientArrayMap = function(editable_QMARK_, len, arr) {
  this.editable_QMARK_ = editable_QMARK_;
  this.len = len;
  this.arr = arr;
  this.cljs$lang$protocol_mask$partition0$ = 258;
  this.cljs$lang$protocol_mask$partition1$ = 56;
};
cljs.core.TransientArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    return cljs.core.quot(self__.len, 2);
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(tcoll__$1, k, null);
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of(tcoll__$1, k);
    if (idx === -1) {
      return not_found;
    } else {
      return self__.arr[idx + 1];
    }
  } else {
    throw new Error("lookup after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    if (function() {
      var G__9732 = o;
      if (G__9732) {
        var bit__4983__auto__ = G__9732.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__4983__auto__ || G__9732.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__9732.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, G__9732);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, G__9732);
      }
    }()) {
      return cljs.core._assoc_BANG_(tcoll__$1, function() {
        var G__9733 = o;
        return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__9733) : cljs.core.key.call(null, G__9733);
      }(), function() {
        var G__9734 = o;
        return cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(G__9734) : cljs.core.val.call(null, G__9734);
      }());
    } else {
      var es = cljs.core.seq(o);
      var tcoll__$2 = tcoll__$1;
      while (true) {
        var temp__4420__auto__ = cljs.core.first(es);
        if (cljs.core.truth_(temp__4420__auto__)) {
          var e = temp__4420__auto__;
          var G__9740 = cljs.core.next(es);
          var G__9741 = cljs.core._assoc_BANG_(tcoll__$2, function() {
            var G__9735 = e;
            return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__9735) : cljs.core.key.call(null, G__9735);
          }(), function() {
            var G__9736 = e;
            return cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(G__9736) : cljs.core.val.call(null, G__9736);
          }());
          es = G__9740;
          tcoll__$2 = G__9741;
          continue;
        } else {
          return tcoll__$2;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    self__.editable_QMARK_ = false;
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot(self__.len, 2), self__.arr, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of(tcoll__$1, key);
    if (idx === -1) {
      if (self__.len + 2 <= 2 * cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
        self__.len = self__.len + 2;
        self__.arr.push(key);
        self__.arr.push(val);
        return tcoll__$1;
      } else {
        return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(function() {
          var G__9737 = self__.len;
          var G__9738 = self__.arr;
          return cljs.core.array__GT_transient_hash_map.cljs$core$IFn$_invoke$arity$2 ? cljs.core.array__GT_transient_hash_map.cljs$core$IFn$_invoke$arity$2(G__9737, G__9738) : cljs.core.array__GT_transient_hash_map.call(null, G__9737, G__9738);
        }(), key, val);
      }
    } else {
      if (val === self__.arr[idx + 1]) {
        return tcoll__$1;
      } else {
        self__.arr[idx + 1] = val;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of(tcoll__$1, key);
    if (idx >= 0) {
      self__.arr[idx] = self__.arr[self__.len - 2];
      self__.arr[idx + 1] = self__.arr[self__.len - 1];
      var G__9739_9742 = self__.arr;
      G__9739_9742.pop();
      G__9739_9742.pop();
      self__.len = self__.len - 2;
    } else {
    }
    return tcoll__$1;
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "editable?", "editable?", -164945806, null), new cljs.core.Symbol(null, "len", "len", -1230778691, null), new cljs.core.Symbol(null, "arr", "arr", 2115492975, null)], null);
};
cljs.core.TransientArrayMap.cljs$lang$type = true;
cljs.core.TransientArrayMap.cljs$lang$ctorStr = "cljs.core/TransientArrayMap";
cljs.core.TransientArrayMap.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/TransientArrayMap");
};
cljs.core.__GT_TransientArrayMap = function cljs$core$__GT_TransientArrayMap(editable_QMARK_, len, arr) {
  return new cljs.core.TransientArrayMap(editable_QMARK_, len, arr);
};
cljs.core.array__GT_transient_hash_map = function cljs$core$array__GT_transient_hash_map(len, arr) {
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  var i = 0;
  while (true) {
    if (i < len) {
      var G__9743 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, arr[i], arr[i + 1]);
      var G__9744 = i + 2;
      out = G__9743;
      i = G__9744;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.Box = function(val) {
  this.val = val;
};
cljs.core.Box.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "val", "val", 1769233139, null)], null);
};
cljs.core.Box.cljs$lang$type = true;
cljs.core.Box.cljs$lang$ctorStr = "cljs.core/Box";
cljs.core.Box.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/Box");
};
cljs.core.__GT_Box = function cljs$core$__GT_Box(val) {
  return new cljs.core.Box(val);
};
cljs.core.key_test = function cljs$core$key_test(key, other) {
  if (key === other) {
    return true;
  } else {
    if (cljs.core.keyword_identical_QMARK_(key, other)) {
      return true;
    } else {
      return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(key, other);
    }
  }
};
cljs.core.mask = function cljs$core$mask(hash, shift) {
  return hash >>> shift & 31;
};
cljs.core.clone_and_set = function cljs$core$clone_and_set() {
  var G__9746 = arguments.length;
  switch(G__9746) {
    case 3:
      return cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 5:
      return cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3 = function(arr, i, a) {
  var G__9747 = cljs.core.aclone(arr);
  G__9747[i] = a;
  return G__9747;
};
cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$5 = function(arr, i, a, j, b) {
  var G__9748 = cljs.core.aclone(arr);
  G__9748[i] = a;
  G__9748[j] = b;
  return G__9748;
};
cljs.core.clone_and_set.cljs$lang$maxFixedArity = 5;
cljs.core.remove_pair = function cljs$core$remove_pair(arr, i) {
  var new_arr = new Array(arr.length - 2);
  cljs.core.array_copy(arr, 0, new_arr, 0, 2 * i);
  cljs.core.array_copy(arr, 2 * (i + 1), new_arr, 2 * i, new_arr.length - 2 * i);
  return new_arr;
};
cljs.core.bitmap_indexed_node_index = function cljs$core$bitmap_indexed_node_index(bitmap, bit) {
  return cljs.core.bit_count(bitmap & bit - 1);
};
cljs.core.bitpos = function cljs$core$bitpos(hash, shift) {
  return 1 << (hash >>> shift & 31);
};
cljs.core.edit_and_set = function cljs$core$edit_and_set() {
  var G__9751 = arguments.length;
  switch(G__9751) {
    case 4:
      return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 6:
      return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4 = function(inode, edit, i, a) {
  var editable = inode.ensure_editable(edit);
  editable.arr[i] = a;
  return editable;
};
cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6 = function(inode, edit, i, a, j, b) {
  var editable = inode.ensure_editable(edit);
  editable.arr[i] = a;
  editable.arr[j] = b;
  return editable;
};
cljs.core.edit_and_set.cljs$lang$maxFixedArity = 6;
cljs.core.inode_kv_reduce = function cljs$core$inode_kv_reduce(arr, f, init) {
  var len = arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = function() {
        var k = arr[i];
        if (!(k == null)) {
          var G__9757 = init__$1;
          var G__9758 = k;
          var G__9759 = arr[i + 1];
          return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__9757, G__9758, G__9759) : f.call(null, G__9757, G__9758, G__9759);
        } else {
          var node = arr[i + 1];
          if (!(node == null)) {
            return node.kv_reduce(f, init__$1);
          } else {
            return init__$1;
          }
        }
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        var G__9760 = init__$2;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__9760) : cljs.core.deref.call(null, G__9760);
      } else {
        var G__9761 = i + 2;
        var G__9762 = init__$2;
        i = G__9761;
        init__$1 = G__9762;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.BitmapIndexedNode = function(edit, bitmap, arr) {
  this.edit = edit;
  this.bitmap = bitmap;
  this.arr = arr;
};
cljs.core.BitmapIndexedNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var n = cljs.core.bit_count(self__.bitmap);
    var new_arr = new Array(n < 0 ? 4 : 2 * (n + 1));
    cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * n);
    return new cljs.core.BitmapIndexedNode(e, self__.bitmap, new_arr);
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, 2 * idx + 1, n);
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            return inode.edit_and_remove_pair(edit__$1, bit, idx);
          }
        }
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        removed_leaf_QMARK_[0] = true;
        return inode.edit_and_remove_pair(edit__$1, bit, idx);
      } else {
        return inode;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.edit_and_remove_pair = function(e, bit, i) {
  var self__ = this;
  var inode = this;
  if (self__.bitmap === bit) {
    return null;
  } else {
    var editable = inode.ensure_editable(e);
    var earr = editable.arr;
    var len = earr.length;
    editable.bitmap = bit ^ editable.bitmap;
    cljs.core.array_copy(earr, 2 * (i + 1), earr, 2 * i, len - 2 * (i + 1));
    earr[len - 2] = null;
    earr[len - 1] = null;
    return editable;
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  var G__9763 = self__.arr;
  return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1(G__9763) : cljs.core.create_inode_seq.call(null, G__9763);
};
cljs.core.BitmapIndexedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce(self__.arr, f, init);
};
cljs.core.BitmapIndexedNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_lookup(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        return val_or_node;
      } else {
        return not_found;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count(self__.bitmap);
    if (2 * n < self__.arr.length) {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      added_leaf_QMARK_.val = true;
      cljs.core.array_copy_downward(earr, 2 * idx, earr, 2 * (idx + 1), 2 * (n - idx));
      earr[2 * idx] = key;
      earr[2 * idx + 1] = val;
      editable.bitmap = editable.bitmap | bit;
      return editable;
    } else {
      if (n >= 16) {
        var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var jdx = hash >>> shift & 31;
        nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
        var i_9777 = 0;
        var j_9778 = 0;
        while (true) {
          if (i_9777 < 32) {
            if ((self__.bitmap >>> i_9777 & 1) === 0) {
              var G__9779 = i_9777 + 1;
              var G__9780 = j_9778;
              i_9777 = G__9779;
              j_9778 = G__9780;
              continue;
            } else {
              nodes[i_9777] = !(self__.arr[j_9778] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, cljs.core.hash(self__.arr[j_9778]), self__.arr[j_9778], self__.arr[j_9778 + 1], added_leaf_QMARK_) : self__.arr[j_9778 + 1];
              var G__9781 = i_9777 + 1;
              var G__9782 = j_9778 + 2;
              i_9777 = G__9781;
              j_9778 = G__9782;
              continue;
            }
          } else {
          }
          break;
        }
        return new cljs.core.ArrayNode(edit__$1, n + 1, nodes);
      } else {
        var new_arr = new Array(2 * (n + 4));
        cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * idx);
        new_arr[2 * idx] = key;
        new_arr[2 * idx + 1] = val;
        cljs.core.array_copy(self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
        added_leaf_QMARK_.val = true;
        var editable = inode.ensure_editable(edit__$1);
        editable.arr = new_arr;
        editable.bitmap = editable.bitmap | bit;
        return editable;
      }
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, 2 * idx + 1, n);
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, 2 * idx + 1, val);
        }
      } else {
        added_leaf_QMARK_.val = true;
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6(inode, edit__$1, 2 * idx, null, 2 * idx + 1, function() {
          var G__9764 = edit__$1;
          var G__9765 = shift + 5;
          var G__9766 = key_or_nil;
          var G__9767 = val_or_node;
          var G__9768 = hash;
          var G__9769 = key;
          var G__9770 = val;
          return cljs.core.create_node.cljs$core$IFn$_invoke$arity$7 ? cljs.core.create_node.cljs$core$IFn$_invoke$arity$7(G__9764, G__9765, G__9766, G__9767, G__9768, G__9769, G__9770) : cljs.core.create_node.call(null, G__9764, G__9765, G__9766, G__9767, G__9768, G__9769, G__9770);
        }());
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count(self__.bitmap);
    if (n >= 16) {
      var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      var jdx = hash >>> shift & 31;
      nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      var i_9783 = 0;
      var j_9784 = 0;
      while (true) {
        if (i_9783 < 32) {
          if ((self__.bitmap >>> i_9783 & 1) === 0) {
            var G__9785 = i_9783 + 1;
            var G__9786 = j_9784;
            i_9783 = G__9785;
            j_9784 = G__9786;
            continue;
          } else {
            nodes[i_9783] = !(self__.arr[j_9784] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, cljs.core.hash(self__.arr[j_9784]), self__.arr[j_9784], self__.arr[j_9784 + 1], added_leaf_QMARK_) : self__.arr[j_9784 + 1];
            var G__9787 = i_9783 + 1;
            var G__9788 = j_9784 + 2;
            i_9783 = G__9787;
            j_9784 = G__9788;
            continue;
          }
        } else {
        }
        break;
      }
      return new cljs.core.ArrayNode(null, n + 1, nodes);
    } else {
      var new_arr = new Array(2 * (n + 1));
      cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * idx);
      new_arr[2 * idx] = key;
      new_arr[2 * idx + 1] = val;
      cljs.core.array_copy(self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
      added_leaf_QMARK_.val = true;
      return new cljs.core.BitmapIndexedNode(null, self__.bitmap | bit, new_arr);
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, 2 * idx + 1, n));
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, 2 * idx + 1, val));
        }
      } else {
        added_leaf_QMARK_.val = true;
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$5(self__.arr, 2 * idx, null, 2 * idx + 1, function() {
          var G__9771 = shift + 5;
          var G__9772 = key_or_nil;
          var G__9773 = val_or_node;
          var G__9774 = hash;
          var G__9775 = key;
          var G__9776 = val;
          return cljs.core.create_node.cljs$core$IFn$_invoke$arity$6 ? cljs.core.create_node.cljs$core$IFn$_invoke$arity$6(G__9771, G__9772, G__9773, G__9774, G__9775, G__9776) : cljs.core.create_node.call(null, G__9771, G__9772, G__9773, G__9774, G__9775, G__9776);
        }()));
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_find(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [key_or_nil, val_or_node], null);
      } else {
        return not_found;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without(shift + 5, hash, key);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, 2 * idx + 1, n));
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair(self__.arr, idx));
          }
        }
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair(self__.arr, idx));
      } else {
        return inode;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "edit", "edit", -1302639, null), new cljs.core.Symbol(null, "bitmap", "bitmap", 501334601, null), new cljs.core.Symbol(null, "arr", "arr", 2115492975, null)], null);
};
cljs.core.BitmapIndexedNode.cljs$lang$type = true;
cljs.core.BitmapIndexedNode.cljs$lang$ctorStr = "cljs.core/BitmapIndexedNode";
cljs.core.BitmapIndexedNode.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/BitmapIndexedNode");
};
cljs.core.__GT_BitmapIndexedNode = function cljs$core$__GT_BitmapIndexedNode(edit, bitmap, arr) {
  return new cljs.core.BitmapIndexedNode(edit, bitmap, arr);
};
cljs.core.BitmapIndexedNode.EMPTY = new cljs.core.BitmapIndexedNode(null, 0, []);
cljs.core.pack_array_node = function cljs$core$pack_array_node(array_node, edit, idx) {
  var arr = array_node.arr;
  var len = arr.length;
  var new_arr = new Array(2 * (array_node.cnt - 1));
  var i = 0;
  var j = 1;
  var bitmap = 0;
  while (true) {
    if (i < len) {
      if (!(i === idx) && !(arr[i] == null)) {
        new_arr[j] = arr[i];
        var G__9789 = i + 1;
        var G__9790 = j + 2;
        var G__9791 = bitmap | 1 << i;
        i = G__9789;
        j = G__9790;
        bitmap = G__9791;
        continue;
      } else {
        var G__9792 = i + 1;
        var G__9793 = j;
        var G__9794 = bitmap;
        i = G__9792;
        j = G__9793;
        bitmap = G__9794;
        continue;
      }
    } else {
      return new cljs.core.BitmapIndexedNode(edit, bitmap, new_arr);
    }
    break;
  }
};
cljs.core.ArrayNode = function(edit, cnt, arr) {
  this.edit = edit;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.ArrayNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    return new cljs.core.ArrayNode(e, self__.cnt, cljs.core.aclone(self__.arr));
  }
};
cljs.core.ArrayNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return inode;
  } else {
    var n = node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node(inode, edit__$1, idx);
        } else {
          var editable = cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, n);
          editable.cnt = editable.cnt - 1;
          return editable;
        }
      } else {
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, n);
      }
    }
  }
};
cljs.core.ArrayNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  var G__9795 = self__.arr;
  return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1(G__9795) : cljs.core.create_array_node_seq.call(null, G__9795);
};
cljs.core.ArrayNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var node = self__.arr[i];
      if (!(node == null)) {
        var init__$2 = node.kv_reduce(f, init__$1);
        if (cljs.core.reduced_QMARK_(init__$2)) {
          var G__9796 = init__$2;
          return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__9796) : cljs.core.deref.call(null, G__9796);
        } else {
          var G__9797 = i + 1;
          var G__9798 = init__$2;
          i = G__9797;
          init__$1 = G__9798;
          continue;
        }
      } else {
        var G__9799 = i + 1;
        var G__9800 = init__$1;
        i = G__9799;
        init__$1 = G__9800;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ArrayNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_lookup(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    var editable = cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_));
    editable.cnt = editable.cnt + 1;
    return editable;
  } else {
    var n = node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, n);
    }
  }
};
cljs.core.ArrayNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return new cljs.core.ArrayNode(null, self__.cnt + 1, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_)));
  } else {
    var n = node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, n));
    }
  }
};
cljs.core.ArrayNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_find(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    var n = node.inode_without(shift + 5, hash, key);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node(inode, null, idx);
        } else {
          return new cljs.core.ArrayNode(null, self__.cnt - 1, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, n));
        }
      } else {
        return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, n));
      }
    }
  } else {
    return inode;
  }
};
cljs.core.ArrayNode.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "edit", "edit", -1302639, null), new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null), new cljs.core.Symbol(null, "arr", "arr", 2115492975, null)], null);
};
cljs.core.ArrayNode.cljs$lang$type = true;
cljs.core.ArrayNode.cljs$lang$ctorStr = "cljs.core/ArrayNode";
cljs.core.ArrayNode.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/ArrayNode");
};
cljs.core.__GT_ArrayNode = function cljs$core$__GT_ArrayNode(edit, cnt, arr) {
  return new cljs.core.ArrayNode(edit, cnt, arr);
};
cljs.core.hash_collision_node_find_index = function cljs$core$hash_collision_node_find_index(arr, cnt, key) {
  var lim = 2 * cnt;
  var i = 0;
  while (true) {
    if (i < lim) {
      if (cljs.core.key_test(key, arr[i])) {
        return i;
      } else {
        var G__9801 = i + 2;
        i = G__9801;
        continue;
      }
    } else {
      return -1;
    }
    break;
  }
};
cljs.core.HashCollisionNode = function(edit, collision_hash, cnt, arr) {
  this.edit = edit;
  this.collision_hash = collision_hash;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.HashCollisionNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var new_arr = new Array(2 * (self__.cnt + 1));
    cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * self__.cnt);
    return new cljs.core.HashCollisionNode(e, self__.collision_hash, self__.cnt, new_arr);
  }
};
cljs.core.HashCollisionNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    removed_leaf_QMARK_[0] = true;
    if (self__.cnt === 1) {
      return null;
    } else {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      earr[idx] = earr[2 * self__.cnt - 2];
      earr[idx + 1] = earr[2 * self__.cnt - 1];
      earr[2 * self__.cnt - 1] = null;
      earr[2 * self__.cnt - 2] = null;
      editable.cnt = editable.cnt - 1;
      return editable;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  var G__9802 = self__.arr;
  return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1(G__9802) : cljs.core.create_inode_seq.call(null, G__9802);
};
cljs.core.HashCollisionNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce(self__.arr, f, init);
};
cljs.core.HashCollisionNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test(key, self__.arr[idx])) {
      return self__.arr[idx + 1];
    } else {
      return not_found;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
    if (idx === -1) {
      if (self__.arr.length > 2 * self__.cnt) {
        var editable = cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6(inode, edit__$1, 2 * self__.cnt, key, 2 * self__.cnt + 1, val);
        added_leaf_QMARK_.val = true;
        editable.cnt = editable.cnt + 1;
        return editable;
      } else {
        var len = self__.arr.length;
        var new_arr = new Array(len + 2);
        cljs.core.array_copy(self__.arr, 0, new_arr, 0, len);
        new_arr[len] = key;
        new_arr[len + 1] = val;
        added_leaf_QMARK_.val = true;
        return inode.ensure_editable_array(edit__$1, self__.cnt + 1, new_arr);
      }
    } else {
      if (self__.arr[idx + 1] === val) {
        return inode;
      } else {
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx + 1, val);
      }
    }
  } else {
    return (new cljs.core.BitmapIndexedNode(edit__$1, 1 << (self__.collision_hash >>> shift & 31), [null, inode, null, null])).inode_assoc_BANG_(edit__$1, shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
    if (idx === -1) {
      var len = 2 * self__.cnt;
      var new_arr = new Array(len + 2);
      cljs.core.array_copy(self__.arr, 0, new_arr, 0, len);
      new_arr[len] = key;
      new_arr[len + 1] = val;
      added_leaf_QMARK_.val = true;
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt + 1, new_arr);
    } else {
      if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.arr[idx], val)) {
        return inode;
      } else {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx + 1, val));
      }
    }
  } else {
    return (new cljs.core.BitmapIndexedNode(null, 1 << (self__.collision_hash >>> shift & 31), [null, inode])).inode_assoc(shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable_array = function(e, count, array) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    self__.arr = array;
    self__.cnt = count;
    return inode;
  } else {
    return new cljs.core.HashCollisionNode(self__.edit, self__.collision_hash, count, array);
  }
};
cljs.core.HashCollisionNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test(key, self__.arr[idx])) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[idx], self__.arr[idx + 1]], null);
    } else {
      return not_found;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    if (self__.cnt === 1) {
      return null;
    } else {
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt - 1, cljs.core.remove_pair(self__.arr, cljs.core.quot(idx, 2)));
    }
  }
};
cljs.core.HashCollisionNode.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "edit", "edit", -1302639, null), new cljs.core.Symbol(null, "collision-hash", "collision-hash", -35831342, null), new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null), new cljs.core.Symbol(null, "arr", "arr", 2115492975, null)], null);
};
cljs.core.HashCollisionNode.cljs$lang$type = true;
cljs.core.HashCollisionNode.cljs$lang$ctorStr = "cljs.core/HashCollisionNode";
cljs.core.HashCollisionNode.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/HashCollisionNode");
};
cljs.core.__GT_HashCollisionNode = function cljs$core$__GT_HashCollisionNode(edit, collision_hash, cnt, arr) {
  return new cljs.core.HashCollisionNode(edit, collision_hash, cnt, arr);
};
cljs.core.create_node = function cljs$core$create_node() {
  var G__9804 = arguments.length;
  switch(G__9804) {
    case 6:
      return cljs.core.create_node.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    case 7:
      return cljs.core.create_node.cljs$core$IFn$_invoke$arity$7(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.create_node.cljs$core$IFn$_invoke$arity$6 = function(shift, key1, val1, key2hash, key2, val2) {
  var key1hash = cljs.core.hash(key1);
  if (key1hash === key2hash) {
    return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc(shift, key2hash, key2, val2, added_leaf_QMARK_);
  }
};
cljs.core.create_node.cljs$core$IFn$_invoke$arity$7 = function(edit, shift, key1, val1, key2hash, key2, val2) {
  var key1hash = cljs.core.hash(key1);
  if (key1hash === key2hash) {
    return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit, shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc_BANG_(edit, shift, key2hash, key2, val2, added_leaf_QMARK_);
  }
};
cljs.core.create_node.cljs$lang$maxFixedArity = 7;
cljs.core.NodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.NodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.NodeSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.NodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4725__auto__ = self__.__hash;
  if (!(h__4725__auto__ == null)) {
    return h__4725__auto__;
  } else {
    var h__4725__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4725__auto____$1;
    return h__4725__auto____$1;
  }
};
cljs.core.NodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.nodes[self__.i], self__.nodes[self__.i + 1]], null);
  } else {
    return cljs.core.first(self__.s);
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    var G__9806 = self__.nodes;
    var G__9807 = self__.i + 2;
    var G__9808 = null;
    return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(G__9806, G__9807, G__9808) : cljs.core.create_inode_seq.call(null, G__9806, G__9807, G__9808);
  } else {
    var G__9809 = self__.nodes;
    var G__9810 = self__.i;
    var G__9811 = cljs.core.next(self__.s);
    return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(G__9809, G__9810, G__9811) : cljs.core.create_inode_seq.call(null, G__9809, G__9810, G__9811);
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.NodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.NodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.NodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.NodeSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "nodes", "nodes", -459054278, null), new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.Symbol(null, "s", "s", -948495851, null), new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null)], null);
};
cljs.core.NodeSeq.cljs$lang$type = true;
cljs.core.NodeSeq.cljs$lang$ctorStr = "cljs.core/NodeSeq";
cljs.core.NodeSeq.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/NodeSeq");
};
cljs.core.__GT_NodeSeq = function cljs$core$__GT_NodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.NodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.NodeSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5285__auto__ = this;
  return cljs.core.es6_iterator(this__5285__auto__);
};
cljs.core.create_inode_seq = function cljs$core$create_inode_seq() {
  var G__9813 = arguments.length;
  switch(G__9813) {
    case 1:
      return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 3:
      return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1 = function(nodes) {
  return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(nodes, 0, null);
};
cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3 = function(nodes, i, s) {
  if (s == null) {
    var len = nodes.length;
    var j = i;
    while (true) {
      if (j < len) {
        if (!(nodes[j] == null)) {
          return new cljs.core.NodeSeq(null, nodes, j, null, null);
        } else {
          var temp__4420__auto__ = nodes[j + 1];
          if (cljs.core.truth_(temp__4420__auto__)) {
            var node = temp__4420__auto__;
            var temp__4420__auto____$1 = node.inode_seq();
            if (cljs.core.truth_(temp__4420__auto____$1)) {
              var node_seq = temp__4420__auto____$1;
              return new cljs.core.NodeSeq(null, nodes, j + 2, node_seq, null);
            } else {
              var G__9815 = j + 2;
              j = G__9815;
              continue;
            }
          } else {
            var G__9816 = j + 2;
            j = G__9816;
            continue;
          }
        }
      } else {
        return null;
      }
      break;
    }
  } else {
    return new cljs.core.NodeSeq(null, nodes, i, s, null);
  }
};
cljs.core.create_inode_seq.cljs$lang$maxFixedArity = 3;
cljs.core.ArrayNodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.ArrayNodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ArrayNodeSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4725__auto__ = self__.__hash;
  if (!(h__4725__auto__ == null)) {
    return h__4725__auto__;
  } else {
    var h__4725__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4725__auto____$1;
    return h__4725__auto____$1;
  }
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.s);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var G__9817 = null;
  var G__9818 = self__.nodes;
  var G__9819 = self__.i;
  var G__9820 = cljs.core.next(self__.s);
  return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4(G__9817, G__9818, G__9819, G__9820) : cljs.core.create_array_node_seq.call(null, G__9817, G__9818, G__9819, G__9820);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ArrayNodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.ArrayNodeSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "nodes", "nodes", -459054278, null), new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.Symbol(null, "s", "s", -948495851, null), new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null)], null);
};
cljs.core.ArrayNodeSeq.cljs$lang$type = true;
cljs.core.ArrayNodeSeq.cljs$lang$ctorStr = "cljs.core/ArrayNodeSeq";
cljs.core.ArrayNodeSeq.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/ArrayNodeSeq");
};
cljs.core.__GT_ArrayNodeSeq = function cljs$core$__GT_ArrayNodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.ArrayNodeSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5285__auto__ = this;
  return cljs.core.es6_iterator(this__5285__auto__);
};
cljs.core.create_array_node_seq = function cljs$core$create_array_node_seq() {
  var G__9822 = arguments.length;
  switch(G__9822) {
    case 1:
      return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 4:
      return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1 = function(nodes) {
  return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4(null, nodes, 0, null);
};
cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4 = function(meta, nodes, i, s) {
  if (s == null) {
    var len = nodes.length;
    var j = i;
    while (true) {
      if (j < len) {
        var temp__4420__auto__ = nodes[j];
        if (cljs.core.truth_(temp__4420__auto__)) {
          var nj = temp__4420__auto__;
          var temp__4420__auto____$1 = nj.inode_seq();
          if (cljs.core.truth_(temp__4420__auto____$1)) {
            var ns = temp__4420__auto____$1;
            return new cljs.core.ArrayNodeSeq(meta, nodes, j + 1, ns, null);
          } else {
            var G__9824 = j + 1;
            j = G__9824;
            continue;
          }
        } else {
          var G__9825 = j + 1;
          j = G__9825;
          continue;
        }
      } else {
        return null;
      }
      break;
    }
  } else {
    return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, null);
  }
};
cljs.core.create_array_node_seq.cljs$lang$maxFixedArity = 4;
cljs.core.PersistentHashMap = function(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.root = root;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentHashMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentHashMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentHashMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__9827 = coll;
    return cljs.core.keys.cljs$core$IFn$_invoke$arity$1 ? cljs.core.keys.cljs$core$IFn$_invoke$arity$1(G__9827) : cljs.core.keys.call(null, G__9827);
  }());
};
cljs.core.PersistentHashMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__9828 = coll;
    return cljs.core.vals.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vals.cljs$core$IFn$_invoke$arity$1(G__9828) : cljs.core.vals.call(null, G__9828);
  }());
};
cljs.core.PersistentHashMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentHashMap.prototype.get = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__9829 = cljs.core.seq(coll);
  var chunk__9830 = null;
  var count__9831 = 0;
  var i__9832 = 0;
  while (true) {
    if (i__9832 < count__9831) {
      var vec__9833 = chunk__9830.cljs$core$IIndexed$_nth$arity$2(null, i__9832);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9833, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9833, 1, null);
      var G__9834_9845 = v;
      var G__9835_9846 = k;
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9834_9845, G__9835_9846) : f.call(null, G__9834_9845, G__9835_9846);
      var G__9847 = seq__9829;
      var G__9848 = chunk__9830;
      var G__9849 = count__9831;
      var G__9850 = i__9832 + 1;
      seq__9829 = G__9847;
      chunk__9830 = G__9848;
      count__9831 = G__9849;
      i__9832 = G__9850;
      continue;
    } else {
      var temp__4422__auto__ = cljs.core.seq(seq__9829);
      if (temp__4422__auto__) {
        var seq__9829__$1 = temp__4422__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__9829__$1)) {
          var c__5094__auto__ = cljs.core.chunk_first(seq__9829__$1);
          var G__9851 = cljs.core.chunk_rest(seq__9829__$1);
          var G__9852 = c__5094__auto__;
          var G__9853 = cljs.core.count(c__5094__auto__);
          var G__9854 = 0;
          seq__9829 = G__9851;
          chunk__9830 = G__9852;
          count__9831 = G__9853;
          i__9832 = G__9854;
          continue;
        } else {
          var vec__9836 = cljs.core.first(seq__9829__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9836, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9836, 1, null);
          var G__9837_9855 = v;
          var G__9838_9856 = k;
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9837_9855, G__9838_9856) : f.call(null, G__9837_9855, G__9838_9856);
          var G__9857 = cljs.core.next(seq__9829__$1);
          var G__9858 = null;
          var G__9859 = 0;
          var G__9860 = 0;
          seq__9829 = G__9857;
          chunk__9830 = G__9858;
          count__9831 = G__9859;
          i__9832 = G__9860;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash(k), k, not_found);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var init__$1 = self__.has_nil_QMARK_ ? function() {
    var G__9839 = init;
    var G__9840 = null;
    var G__9841 = self__.nil_val;
    return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__9839, G__9840, G__9841) : f.call(null, G__9839, G__9840, G__9841);
  }() : init;
  if (cljs.core.reduced_QMARK_(init__$1)) {
    var G__9842 = init__$1;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__9842) : cljs.core.deref.call(null, G__9842);
  } else {
    if (!(self__.root == null)) {
      return self__.root.kv_reduce(f, init__$1);
    } else {
      return init__$1;
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashMap(self__.meta, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentHashMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4725__auto__ = self__.__hash;
  if (!(h__4725__auto__ == null)) {
    return h__4725__auto__;
  } else {
    var h__4725__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4725__auto____$1;
    return h__4725__auto____$1;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map(coll__$1, other);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashMap(function() {
    var obj9844 = {};
    return obj9844;
  }(), self__.root, self__.cnt, self__.has_nil_QMARK_, self__.nil_val);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta(cljs.core.PersistentHashMap.EMPTY, self__.meta);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, self__.root, false, null, null);
    } else {
      return coll__$1;
    }
  } else {
    if (self__.root == null) {
      return coll__$1;
    } else {
      var new_root = self__.root.inode_without(0, cljs.core.hash(k), k);
      if (new_root === self__.root) {
        return coll__$1;
      } else {
        return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_ && v === self__.nil_val) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, self__.has_nil_QMARK_ ? self__.cnt : self__.cnt + 1, self__.root, true, v, null);
    }
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    var new_root = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc(0, cljs.core.hash(k), k, v, added_leaf_QMARK_);
    if (new_root === self__.root) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, added_leaf_QMARK_.val ? self__.cnt + 1 : self__.cnt, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    return self__.has_nil_QMARK_;
  } else {
    if (self__.root == null) {
      return false;
    } else {
      return !(self__.root.inode_lookup(0, cljs.core.hash(k), k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var s = !(self__.root == null) ? self__.root.inode_seq() : null;
    if (self__.has_nil_QMARK_) {
      return cljs.core.cons(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, self__.nil_val], null), s);
    } else {
      return s;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashMap(meta__$1, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq(entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first(es);
        if (cljs.core.vector_QMARK_(e)) {
          var G__9861 = cljs.core._assoc(ret, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 1));
          var G__9862 = cljs.core.next(es);
          ret = G__9861;
          es = G__9862;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentHashMap.prototype.call = function() {
  var G__9863 = null;
  var G__9863__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__9863__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__9863 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9863__2.call(this, self__, k);
      case 3:
        return G__9863__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__9863.cljs$core$IFn$_invoke$arity$2 = G__9863__2;
  G__9863.cljs$core$IFn$_invoke$arity$3 = G__9863__3;
  return G__9863;
}();
cljs.core.PersistentHashMap.prototype.apply = function(self__, args9826) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args9826)));
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashMap.getBasis = function() {
  return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null), new cljs.core.Symbol(null, "root", "root", 1191874074, null), new cljs.core.Symbol(null, "has-nil?", "has-nil?", 825886722, null), new cljs.core.Symbol(null, "nil-val", "nil-val", -513933559, null), new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null)], null);
};
cljs.core.PersistentHashMap.cljs$lang$type = true;
cljs.core.PersistentHashMap.cljs$lang$ctorStr = "cljs.core/PersistentHashMap";
cljs.core.PersistentHashMap.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/PersistentHashMap");
};
cljs.core.__GT_PersistentHashMap = function cljs$core$__GT_PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  return new cljs.core.PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash);
};
cljs.core.PersistentHashMap.EMPTY = new cljs.core.PersistentHashMap(null, 0, null, false, null, cljs.core.empty_unordered_hash);
cljs.core.PersistentHashMap.fromArray = function(arr, no_clone) {
  var arr__$1 = no_clone ? arr : cljs.core.aclone(arr);
  var len = arr__$1.length;
  var i = 0;
  var ret = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var G__9864 = i + 2;
      var G__9865 = cljs.core._assoc_BANG_(ret, arr__$1[i], arr__$1[i + 1]);
      i = G__9864;
      ret = G__9865;
      continue;
    } else {
      return cljs.core._persistent_BANG_(ret);
    }
    break;
  }
};
cljs.core.PersistentHashMap.fromArrays = function(ks, vs) {
  var len = ks.length;
  var i = 0;
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var G__9866 = i + 1;
      var G__9867 = out.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(null, ks[i], vs[i]);
      i = G__9866;
      out = G__9867;
      continue;
    } else {
      return cljs.core.persistent_BANG_(out);
    }
    break;
  }
};
cljs.core.PersistentHashMap.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5285__auto__ = this;
  return cljs.core.es6_iterator(this__5285__auto__);
};
cljs.core.TransientHashMap = function(edit, root, count, has_nil_QMARK_, nil_val) {
  this.edit = edit;
  this.root = root;
  this.count = count;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.cljs$lang$protocol_mask$partition0$ = 258;
  this.cljs$lang$protocol_mask$partition1$ = 56;
};
cljs.core.TransientHashMap.prototype.conj_BANG_ = function(o) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (function() {
      var G__9868 = o;
      if (G__9868) {
        var bit__4983__auto__ = G__9868.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__4983__auto__ || G__9868.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__9868.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, G__9868);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, G__9868);
      }
    }()) {
      return tcoll.assoc_BANG_(function() {
        var G__9869 = o;
        return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__9869) : cljs.core.key.call(null, G__9869);
      }(), function() {
        var G__9870 = o;
        return cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(G__9870) : cljs.core.val.call(null, G__9870);
      }());
    } else {
      var es = cljs.core.seq(o);
      var tcoll__$1 = tcoll;
      while (true) {
        var temp__4420__auto__ = cljs.core.first(es);
        if (cljs.core.truth_(temp__4420__auto__)) {
          var e = temp__4420__auto__;
          var G__9873 = cljs.core.next(es);
          var G__9874 = tcoll__$1.assoc_BANG_(function() {
            var G__9871 = e;
            return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__9871) : cljs.core.key.call(null, G__9871);
          }(), function() {
            var G__9872 = e;
            return cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(G__9872) : cljs.core.val.call(null, G__9872);
          }());
          es = G__9873;
          tcoll__$1 = G__9874;
          continue;
        } else {
          return tcoll__$1;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent");
  }
};
cljs.core.TransientHashMap.prototype.assoc_BANG_ = function(k, v) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.nil_val === v) {
      } else {
        self__.nil_val = v;
      }
      if (self__.has_nil_QMARK_) {
      } else {
        self__.count = self__.count + 1;
        self__.has_nil_QMARK_ = true;
      }
      return tcoll;
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      var node = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc_BANG_(self__.edit, 0, cljs.core.hash(k), k, v, added_leaf_QMARK_);
      if (node === self__.root) {
      } else {
        self__.root = node;
      }
      if (added_leaf_QMARK_.val) {
        self__.count = self__.count + 1;
      } else {
      }
      return tcoll;
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.without_BANG_ = function(k) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.has_nil_QMARK_) {
        self__.has_nil_QMARK_ = false;
        self__.nil_val = null;
        self__.count = self__.count - 1;
        return tcoll;
      } else {
        return tcoll;
      }
    } else {
      if (self__.root == null) {
        return tcoll;
      } else {
        var removed_leaf_QMARK_ = new cljs.core.Box(false);
        var node = self__.root.inode_without_BANG_(self__.edit, 0, cljs.core.hash(k), k, removed_leaf_QMARK_);
        if (node === self__.root) {
        } else {
          self__.root = node;
        }
        if (cljs.core.truth_(removed_leaf_QMARK_[0])) {
          self__.count = self__.count - 1;
        } else {
        }
        return tcoll;
      }
    }
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.persistent_BANG_ = function() {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    self__.edit = null;
    return new cljs.core.PersistentHashMap(null, self__.count, self__.root, self__.has_nil_QMARK_, self__.nil_val, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.edit) {
    return self__.count;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return null;
    }
  } else {
    if (self__.root == null) {
      return null;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash(k), k);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash(k), k, not_found);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.conj_BANG_(val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.persistent_BANG_();
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.assoc_BANG_(key, val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.without_BANG_(key);
};
cljs.core.TransientHashMap.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "edit", "edit", -1302639, null), new cljs.core.Symbol(null, "root", "root", 1191874074, null), new cljs.core.Symbol(null, "count", "count", -514511684, null), new cljs.core.Symbol(null, "has-nil?", "has-nil?", 825886722, null), new cljs.core.Symbol(null, "nil-val", "nil-val", -513933559, null)], null);
};
cljs.core.TransientHashMap.cljs$lang$type = true;
cljs.core.TransientHashMap.cljs$lang$ctorStr = "cljs.core/TransientHashMap";
cljs.core.TransientHashMap.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/TransientHashMap");
};
cljs.core.__GT_TransientHashMap = function cljs$core$__GT_TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val) {
  return new cljs.core.TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val);
};
cljs.core.tree_map_seq_push = function cljs$core$tree_map_seq_push(node, stack, ascending_QMARK_) {
  var t = node;
  var stack__$1 = stack;
  while (true) {
    if (!(t == null)) {
      var G__9875 = ascending_QMARK_ ? t.left : t.right;
      var G__9876 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack__$1, t);
      t = G__9875;
      stack__$1 = G__9876;
      continue;
    } else {
      return stack__$1;
    }
    break;
  }
};
cljs.core.PersistentTreeMapSeq = function(meta, stack, ascending_QMARK_, cnt, __hash) {
  this.meta = meta;
  this.stack = stack;
  this.ascending_QMARK_ = ascending_QMARK_;
  this.cnt = cnt;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32374862;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.PersistentTreeMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentTreeMapSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt < 0) {
    return cljs.core.count(cljs.core.next(coll__$1)) + 1;
  } else {
    return self__.cnt;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4725__auto__ = self__.__hash;
  if (!(h__4725__auto__ == null)) {
    return h__4725__auto__;
  } else {
    var h__4725__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4725__auto____$1;
    return h__4725__auto____$1;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.peek(self__.stack);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var t = cljs.core.first(self__.stack);
  var next_stack = cljs.core.tree_map_seq_push(self__.ascending_QMARK_ ? t.right : t.left, cljs.core.next(self__.stack), self__.ascending_QMARK_);
  if (!(next_stack == null)) {
    return new cljs.core.PersistentTreeMapSeq(null, next_stack, self__.ascending_QMARK_, self__.cnt - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMapSeq(meta__$1, self__.stack, self__.ascending_QMARK_, self__.cnt, self__.__hash);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.PersistentTreeMapSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "stack", "stack", 847125597, null), new cljs.core.Symbol(null, "ascending?", "ascending?", -1938452653, null), new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null), new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null)], null);
};
cljs.core.PersistentTreeMapSeq.cljs$lang$type = true;
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentTreeMapSeq";
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/PersistentTreeMapSeq");
};
cljs.core.__GT_PersistentTreeMapSeq = function cljs$core$__GT_PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash) {
  return new cljs.core.PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash);
};
cljs.core.PersistentTreeMapSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5285__auto__ = this;
  return cljs.core.es6_iterator(this__5285__auto__);
};
cljs.core.create_tree_map_seq = function cljs$core$create_tree_map_seq(tree, ascending_QMARK_, cnt) {
  return new cljs.core.PersistentTreeMapSeq(null, cljs.core.tree_map_seq_push(tree, null, ascending_QMARK_), ascending_QMARK_, cnt, null);
};
cljs.core.balance_left = function cljs$core$balance_left(key, val, ins, right) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, ins.left.blacken(), new cljs.core.BlackNode(key, val, ins.right, right, null), null);
    } else {
      if (ins.right instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.right.key, ins.right.val, new cljs.core.BlackNode(ins.key, ins.val, ins.left, ins.right.left, null), new cljs.core.BlackNode(key, val, ins.right.right, right, null), null);
      } else {
        return new cljs.core.BlackNode(key, val, ins, right, null);
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, ins, right, null);
  }
};
cljs.core.balance_right = function cljs$core$balance_right(key, val, left, ins) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, new cljs.core.BlackNode(key, val, left, ins.left, null), ins.right.blacken(), null);
    } else {
      if (ins.left instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.left.key, ins.left.val, new cljs.core.BlackNode(key, val, left, ins.left.left, null), new cljs.core.BlackNode(ins.key, ins.val, ins.left.right, ins.right, null), null);
      } else {
        return new cljs.core.BlackNode(key, val, left, ins, null);
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, left, ins, null);
  }
};
cljs.core.balance_left_del = function cljs$core$balance_left_del(key, val, del, right) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, del.blacken(), right, null);
  } else {
    if (right instanceof cljs.core.BlackNode) {
      return cljs.core.balance_right(key, val, del, right.redden());
    } else {
      if (right instanceof cljs.core.RedNode && right.left instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(right.left.key, right.left.val, new cljs.core.BlackNode(key, val, del, right.left.left, null), cljs.core.balance_right(right.key, right.val, right.left.right, right.right.redden()), null);
      } else {
        throw new Error("red-black tree invariant violation");
      }
    }
  }
};
cljs.core.balance_right_del = function cljs$core$balance_right_del(key, val, left, del) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, left, del.blacken(), null);
  } else {
    if (left instanceof cljs.core.BlackNode) {
      return cljs.core.balance_left(key, val, left.redden(), del);
    } else {
      if (left instanceof cljs.core.RedNode && left.right instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(left.right.key, left.right.val, cljs.core.balance_left(left.key, left.val, left.left.redden(), left.right.left), new cljs.core.BlackNode(key, val, left.right.right, del, null), null);
      } else {
        throw new Error("red-black tree invariant violation");
      }
    }
  }
};
cljs.core.tree_map_kv_reduce = function cljs$core$tree_map_kv_reduce(node, f, init) {
  var init__$1 = !(node.left == null) ? cljs$core$tree_map_kv_reduce(node.left, f, init) : init;
  if (cljs.core.reduced_QMARK_(init__$1)) {
    var G__9889 = init__$1;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__9889) : cljs.core.deref.call(null, G__9889);
  } else {
    var init__$2 = function() {
      var G__9890 = init__$1;
      var G__9891 = node.key;
      var G__9892 = node.val;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__9890, G__9891, G__9892) : f.call(null, G__9890, G__9891, G__9892);
    }();
    if (cljs.core.reduced_QMARK_(init__$2)) {
      var G__9893 = init__$2;
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__9893) : cljs.core.deref.call(null, G__9893);
    } else {
      var init__$3 = !(node.right == null) ? cljs$core$tree_map_kv_reduce(node.right, f, init__$2) : init__$2;
      if (cljs.core.reduced_QMARK_(init__$3)) {
        var G__9894 = init__$3;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__9894) : cljs.core.deref.call(null, G__9894);
      } else {
        return init__$3;
      }
    }
  }
};
cljs.core.BlackNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.BlackNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_right(node);
};
cljs.core.BlackNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.BlackNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return node;
};
cljs.core.BlackNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_left(node);
};
cljs.core.BlackNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.BlackNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
};
cljs.core.BlackNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
};
cljs.core.BlackNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_left_del(self__.key, self__.val, del, self__.right);
};
cljs.core.BlackNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce(node, f, init);
};
cljs.core.BlackNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_right_del(self__.key, self__.val, self__.left, del);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, null);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, not_found);
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return null;
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return not_found;
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return (new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.BlackNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.BlackNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.BlackNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4725__auto__ = self__.__hash;
  if (!(h__4725__auto__ == null)) {
    return h__4725__auto__;
  } else {
    var h__4725__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4725__auto____$1;
    return h__4725__auto____$1;
  }
};
cljs.core.BlackNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.BlackNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(node__$1, f);
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(node__$1, f, start);
};
cljs.core.BlackNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.BlackNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj(cljs.core._conj(cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.BlackNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.BlackNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.BlackNode.prototype.call = function() {
  var G__9896 = null;
  var G__9896__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__9896__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__9896 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9896__2.call(this, self__, k);
      case 3:
        return G__9896__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__9896.cljs$core$IFn$_invoke$arity$2 = G__9896__2;
  G__9896.cljs$core$IFn$_invoke$arity$3 = G__9896__3;
  return G__9896;
}();
cljs.core.BlackNode.prototype.apply = function(self__, args9895) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args9895)));
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.BlackNode.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "key", "key", 124488940, null), new cljs.core.Symbol(null, "val", "val", 1769233139, null), new cljs.core.Symbol(null, "left", "left", 1241415590, null), new cljs.core.Symbol(null, "right", "right", 1187949694, null), new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null)], null);
};
cljs.core.BlackNode.cljs$lang$type = true;
cljs.core.BlackNode.cljs$lang$ctorStr = "cljs.core/BlackNode";
cljs.core.BlackNode.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/BlackNode");
};
cljs.core.__GT_BlackNode = function cljs$core$__GT_BlackNode(key, val, left, right, __hash) {
  return new cljs.core.BlackNode(key, val, left, right, __hash);
};
cljs.core.BlackNode.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5285__auto__ = this;
  return cljs.core.es6_iterator(this__5285__auto__);
};
cljs.core.RedNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.RedNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, ins, null);
};
cljs.core.RedNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  throw new Error("red-black tree invariant violation");
};
cljs.core.RedNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.RedNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, ins, self__.right, null);
};
cljs.core.RedNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.RedNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.left instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, self__.left.blacken(), new cljs.core.BlackNode(parent.key, parent.val, self__.right, parent.right, null), null);
  } else {
    if (self__.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.right.key, self__.right.val, new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right.left, null), new cljs.core.BlackNode(parent.key, parent.val, self__.right.right, parent.right, null), null);
    } else {
      return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
    }
  }
};
cljs.core.RedNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.right instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left, null), self__.right.blacken(), null);
  } else {
    if (self__.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.left.key, self__.left.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left.left, null), new cljs.core.BlackNode(self__.key, self__.val, self__.left.right, self__.right, null), null);
    } else {
      return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
    }
  }
};
cljs.core.RedNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, del, self__.right, null);
};
cljs.core.RedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce(node, f, init);
};
cljs.core.RedNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, del, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, not_found);
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return null;
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return not_found;
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return (new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.RedNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.RedNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.RedNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4725__auto__ = self__.__hash;
  if (!(h__4725__auto__ == null)) {
    return h__4725__auto__;
  } else {
    var h__4725__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__4725__auto____$1;
    return h__4725__auto____$1;
  }
};
cljs.core.RedNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.RedNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(node__$1, f);
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(node__$1, f, start);
};
cljs.core.RedNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.RedNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj(cljs.core._conj(cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.RedNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.RedNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.RedNode.prototype.call = function() {
  var G__9898 = null;
  var G__9898__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__9898__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__9898 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9898__2.call(this, self__, k);
      case 3:
        return G__9898__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__9898.cljs$core$IFn$_invoke$arity$2 = G__9898__2;
  G__9898.cljs$core$IFn$_invoke$arity$3 = G__9898__3;
  return G__9898;
}();
cljs.core.RedNode.prototype.apply = function(self__, args9897) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args9897)));
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.RedNode.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "key", "key", 124488940, null), new cljs.core.Symbol(null, "val", "val", 1769233139, null), new cljs.core.Symbol(null, "left", "left", 1241415590, null), new cljs.core.Symbol(null, "right", "right", 1187949694, null), new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null)], null);
};
cljs.core.RedNode.cljs$lang$type = true;
cljs.core.RedNode.cljs$lang$ctorStr = "cljs.core/RedNode";
cljs.core.RedNode.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/RedNode");
};
cljs.core.__GT_RedNode = function cljs$core$__GT_RedNode(key, val, left, right, __hash) {
  return new cljs.core.RedNode(key, val, left, right, __hash);
};
cljs.core.RedNode.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5285__auto__ = this;
  return cljs.core.es6_iterator(this__5285__auto__);
};
cljs.core.tree_map_add = function cljs$core$tree_map_add(comp, tree, k, v, found) {
  if (tree == null) {
    return new cljs.core.RedNode(k, v, null, null, null);
  } else {
    var c = function() {
      var G__9911 = k;
      var G__9912 = tree.key;
      return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__9911, G__9912) : comp.call(null, G__9911, G__9912);
    }();
    if (c === 0) {
      found[0] = tree;
      return null;
    } else {
      if (c < 0) {
        var ins = cljs$core$tree_map_add(comp, tree.left, k, v, found);
        if (!(ins == null)) {
          return tree.add_left(ins);
        } else {
          return null;
        }
      } else {
        var ins = cljs$core$tree_map_add(comp, tree.right, k, v, found);
        if (!(ins == null)) {
          return tree.add_right(ins);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.tree_map_append = function cljs$core$tree_map_append(left, right) {
  if (left == null) {
    return right;
  } else {
    if (right == null) {
      return left;
    } else {
      if (left instanceof cljs.core.RedNode) {
        if (right instanceof cljs.core.RedNode) {
          var app = cljs$core$tree_map_append(left.right, right.left);
          if (app instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.RedNode(left.key, left.val, left.left, app.left, null), new cljs.core.RedNode(right.key, right.val, app.right, right.right, null), null);
          } else {
            return new cljs.core.RedNode(left.key, left.val, left.left, new cljs.core.RedNode(right.key, right.val, app, right.right, null), null);
          }
        } else {
          return new cljs.core.RedNode(left.key, left.val, left.left, cljs$core$tree_map_append(left.right, right), null);
        }
      } else {
        if (right instanceof cljs.core.RedNode) {
          return new cljs.core.RedNode(right.key, right.val, cljs$core$tree_map_append(left, right.left), right.right, null);
        } else {
          var app = cljs$core$tree_map_append(left.right, right.left);
          if (app instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.BlackNode(left.key, left.val, left.left, app.left, null), new cljs.core.BlackNode(right.key, right.val, app.right, right.right, null), null);
          } else {
            return cljs.core.balance_left_del(left.key, left.val, left.left, new cljs.core.BlackNode(right.key, right.val, app, right.right, null));
          }
        }
      }
    }
  }
};
cljs.core.tree_map_remove = function cljs$core$tree_map_remove(comp, tree, k, found) {
  if (!(tree == null)) {
    var c = function() {
      var G__9931 = k;
      var G__9932 = tree.key;
      return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__9931, G__9932) : comp.call(null, G__9931, G__9932);
    }();
    if (c === 0) {
      found[0] = tree;
      return cljs.core.tree_map_append(tree.left, tree.right);
    } else {
      if (c < 0) {
        var del = cljs$core$tree_map_remove(comp, tree.left, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.left instanceof cljs.core.BlackNode) {
            return cljs.core.balance_left_del(tree.key, tree.val, del, tree.right);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, del, tree.right, null);
          }
        } else {
          return null;
        }
      } else {
        var del = cljs$core$tree_map_remove(comp, tree.right, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.right instanceof cljs.core.BlackNode) {
            return cljs.core.balance_right_del(tree.key, tree.val, tree.left, del);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, tree.left, del, null);
          }
        } else {
          return null;
        }
      }
    }
  } else {
    return null;
  }
};
cljs.core.tree_map_replace = function cljs$core$tree_map_replace(comp, tree, k, v) {
  var tk = tree.key;
  var c = function() {
    var G__9943 = k;
    var G__9944 = tk;
    return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__9943, G__9944) : comp.call(null, G__9943, G__9944);
  }();
  if (c === 0) {
    return tree.replace(tk, v, tree.left, tree.right);
  } else {
    if (c < 0) {
      return tree.replace(tk, tree.val, cljs$core$tree_map_replace(comp, tree.left, k, v), tree.right);
    } else {
      return tree.replace(tk, tree.val, tree.left, cljs$core$tree_map_replace(comp, tree.right, k, v));
    }
  }
};
cljs.core.PersistentTreeMap = function(comp, tree, cnt, meta, __hash) {
  this.comp = comp;
  this.tree = tree;
  this.cnt = cnt;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 418776847;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__9946 = cljs.core.seq(coll);
  var chunk__9947 = null;
  var count__9948 = 0;
  var i__9949 = 0;
  while (true) {
    if (i__9949 < count__9948) {
      var vec__9950 = chunk__9947.cljs$core$IIndexed$_nth$arity$2(null, i__9949);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9950, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9950, 1, null);
      var G__9951_9963 = v;
      var G__9952_9964 = k;
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9951_9963, G__9952_9964) : f.call(null, G__9951_9963, G__9952_9964);
      var G__9965 = seq__9946;
      var G__9966 = chunk__9947;
      var G__9967 = count__9948;
      var G__9968 = i__9949 + 1;
      seq__9946 = G__9965;
      chunk__9947 = G__9966;
      count__9948 = G__9967;
      i__9949 = G__9968;
      continue;
    } else {
      var temp__4422__auto__ = cljs.core.seq(seq__9946);
      if (temp__4422__auto__) {
        var seq__9946__$1 = temp__4422__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__9946__$1)) {
          var c__5094__auto__ = cljs.core.chunk_first(seq__9946__$1);
          var G__9969 = cljs.core.chunk_rest(seq__9946__$1);
          var G__9970 = c__5094__auto__;
          var G__9971 = cljs.core.count(c__5094__auto__);
          var G__9972 = 0;
          seq__9946 = G__9969;
          chunk__9947 = G__9970;
          count__9948 = G__9971;
          i__9949 = G__9972;
          continue;
        } else {
          var vec__9953 = cljs.core.first(seq__9946__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9953, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9953, 1, null);
          var G__9954_9973 = v;
          var G__9955_9974 = k;
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9954_9973, G__9955_9974) : f.call(null, G__9954_9973, G__9955_9974);
          var G__9975 = cljs.core.next(seq__9946__$1);
          var G__9976 = null;
          var G__9977 = 0;
          var G__9978 = 0;
          seq__9946 = G__9975;
          chunk__9947 = G__9976;
          count__9948 = G__9977;
          i__9949 = G__9978;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.get = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentTreeMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__9956 = coll;
    return cljs.core.keys.cljs$core$IFn$_invoke$arity$1 ? cljs.core.keys.cljs$core$IFn$_invoke$arity$1(G__9956) : cljs.core.keys.call(null, G__9956);
  }());
};
cljs.core.PersistentTreeMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(function() {
    var G__9957 = coll;
    return cljs.core.vals.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vals.cljs$core$IFn$_invoke$arity$1(G__9957) : cljs.core.vals.call(null, G__9957);
  }());
};
cljs.core.PersistentTreeMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeMap.prototype.entry_at = function(k) {
  var self__ = this;
  var coll = this;
  var t = self__.tree;
  while (true) {
    if (!(t == null)) {
      var c = function() {
        var G__9958 = k;
        var G__9959 = t.key;
        return self__.comp.cljs$core$IFn$_invoke$arity$2 ? self__.comp.cljs$core$IFn$_invoke$arity$2(G__9958, G__9959) : self__.comp.call(null, G__9958, G__9959);
      }();
      if (c === 0) {
        return t;
      } else {
        if (c < 0) {
          var G__9979 = t.left;
          t = G__9979;
          continue;
        } else {
          var G__9980 = t.right;
          t = G__9980;
          continue;
        }
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = coll__$1.entry_at(k);
  if (!(n == null)) {
    return n.val;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.tree == null)) {
    return cljs.core.tree_map_kv_reduce(self__.tree, f, init);
  } else {
    return init;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, self__.meta, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq(self__.tree, false, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4725__auto__ = self__.__hash;
  if (!(h__4725__auto__ == null)) {
    return h__4725__auto__;
  } else {
    var h__4725__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4725__auto____$1;
    return h__4725__auto____$1;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map(coll__$1, other);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, 0);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_remove(self__.comp, self__.tree, k, found);
  if (t == null) {
    if (cljs.core.nth.cljs$core$IFn$_invoke$arity$2(found, 0) == null) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt - 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_add(self__.comp, self__.tree, k, v, found);
  if (t == null) {
    var found_node = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(found, 0);
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(v, found_node.val)) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, cljs.core.tree_map_replace(self__.comp, self__.tree, k, v), self__.cnt, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt + 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return !(coll__$1.entry_at(k) == null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq(self__.tree, true, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, meta__$1, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq(entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first(es);
        if (cljs.core.vector_QMARK_(e)) {
          var G__9981 = cljs.core._assoc(ret, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 1));
          var G__9982 = cljs.core.next(es);
          ret = G__9981;
          es = G__9982;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentTreeMap.prototype.call = function() {
  var G__9983 = null;
  var G__9983__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__9983__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__9983 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9983__2.call(this, self__, k);
      case 3:
        return G__9983__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__9983.cljs$core$IFn$_invoke$arity$2 = G__9983__2;
  G__9983.cljs$core$IFn$_invoke$arity$3 = G__9983__3;
  return G__9983;
}();
cljs.core.PersistentTreeMap.prototype.apply = function(self__, args9945) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args9945)));
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq(self__.tree, ascending_QMARK_, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var stack = null;
    var t = self__.tree;
    while (true) {
      if (!(t == null)) {
        var c = function() {
          var G__9960 = k;
          var G__9961 = t.key;
          return self__.comp.cljs$core$IFn$_invoke$arity$2 ? self__.comp.cljs$core$IFn$_invoke$arity$2(G__9960, G__9961) : self__.comp.call(null, G__9960, G__9961);
        }();
        if (c === 0) {
          return new cljs.core.PersistentTreeMapSeq(null, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack, t), ascending_QMARK_, -1, null);
        } else {
          if (cljs.core.truth_(ascending_QMARK_)) {
            if (c < 0) {
              var G__9984 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack, t);
              var G__9985 = t.left;
              stack = G__9984;
              t = G__9985;
              continue;
            } else {
              var G__9986 = stack;
              var G__9987 = t.right;
              stack = G__9986;
              t = G__9987;
              continue;
            }
          } else {
            if (c > 0) {
              var G__9988 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack, t);
              var G__9989 = t.right;
              stack = G__9988;
              t = G__9989;
              continue;
            } else {
              var G__9990 = stack;
              var G__9991 = t.left;
              stack = G__9990;
              t = G__9991;
              continue;
            }
          }
        }
      } else {
        if (stack == null) {
          return null;
        } else {
          return new cljs.core.PersistentTreeMapSeq(null, stack, ascending_QMARK_, -1, null);
        }
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  var G__9962 = entry;
  return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(G__9962) : cljs.core.key.call(null, G__9962);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.comp;
};
cljs.core.PersistentTreeMap.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "comp", "comp", -1462482139, null), new cljs.core.Symbol(null, "tree", "tree", 1444219499, null), new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null), new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null)], null);
};
cljs.core.PersistentTreeMap.cljs$lang$type = true;
cljs.core.PersistentTreeMap.cljs$lang$ctorStr = "cljs.core/PersistentTreeMap";
cljs.core.PersistentTreeMap.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/PersistentTreeMap");
};
cljs.core.__GT_PersistentTreeMap = function cljs$core$__GT_PersistentTreeMap(comp, tree, cnt, meta, __hash) {
  return new cljs.core.PersistentTreeMap(comp, tree, cnt, meta, __hash);
};
cljs.core.PersistentTreeMap.EMPTY = new cljs.core.PersistentTreeMap(cljs.core.compare, null, 0, null, cljs.core.empty_unordered_hash);
cljs.core.PersistentTreeMap.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5285__auto__ = this;
  return cljs.core.es6_iterator(this__5285__auto__);
};
cljs.core.hash_map = function cljs$core$hash_map() {
  var argseq__5349__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.hash_map.cljs$core$IFn$_invoke$arity$variadic(argseq__5349__auto__);
};
cljs.core.hash_map.cljs$core$IFn$_invoke$arity$variadic = function(keyvals) {
  var in$ = cljs.core.seq(keyvals);
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (in$) {
      var G__9993 = cljs.core.nnext(in$);
      var G__9994 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, cljs.core.first(in$), cljs.core.second(in$));
      in$ = G__9993;
      out = G__9994;
      continue;
    } else {
      return cljs.core.persistent_BANG_(out);
    }
    break;
  }
};
cljs.core.hash_map.cljs$lang$maxFixedArity = 0;
cljs.core.hash_map.cljs$lang$applyTo = function(seq9992) {
  return cljs.core.hash_map.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq9992));
};
cljs.core.array_map = function cljs$core$array_map() {
  var argseq__5349__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.array_map.cljs$core$IFn$_invoke$arity$variadic(argseq__5349__auto__);
};
cljs.core.array_map.cljs$core$IFn$_invoke$arity$variadic = function(keyvals) {
  var arr = keyvals instanceof cljs.core.IndexedSeq && keyvals.i === 0 ? keyvals.arr : cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(keyvals);
  return cljs.core.PersistentArrayMap.fromArray(arr, true, false);
};
cljs.core.array_map.cljs$lang$maxFixedArity = 0;
cljs.core.array_map.cljs$lang$applyTo = function(seq9995) {
  return cljs.core.array_map.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq9995));
};
cljs.core.obj_map = function cljs$core$obj_map() {
  var argseq__5349__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.obj_map.cljs$core$IFn$_invoke$arity$variadic(argseq__5349__auto__);
};
cljs.core.obj_map.cljs$core$IFn$_invoke$arity$variadic = function(keyvals) {
  var ks = [];
  var obj = function() {
    var obj9998 = {};
    return obj9998;
  }();
  var kvs = cljs.core.seq(keyvals);
  while (true) {
    if (kvs) {
      ks.push(cljs.core.first(kvs));
      obj[cljs.core.first(kvs)] = cljs.core.second(kvs);
      var G__9999 = cljs.core.nnext(kvs);
      kvs = G__9999;
      continue;
    } else {
      return cljs.core.ObjMap.fromObject(ks, obj);
    }
    break;
  }
};
cljs.core.obj_map.cljs$lang$maxFixedArity = 0;
cljs.core.obj_map.cljs$lang$applyTo = function(seq9996) {
  return cljs.core.obj_map.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq9996));
};
cljs.core.sorted_map = function cljs$core$sorted_map() {
  var argseq__5349__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.sorted_map.cljs$core$IFn$_invoke$arity$variadic(argseq__5349__auto__);
};
cljs.core.sorted_map.cljs$core$IFn$_invoke$arity$variadic = function(keyvals) {
  var in$ = cljs.core.seq(keyvals);
  var out = cljs.core.PersistentTreeMap.EMPTY;
  while (true) {
    if (in$) {
      var G__10001 = cljs.core.nnext(in$);
      var G__10002 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(out, cljs.core.first(in$), cljs.core.second(in$));
      in$ = G__10001;
      out = G__10002;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.sorted_map.cljs$lang$maxFixedArity = 0;
cljs.core.sorted_map.cljs$lang$applyTo = function(seq10000) {
  return cljs.core.sorted_map.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq10000));
};
cljs.core.sorted_map_by = function cljs$core$sorted_map_by() {
  var argseq__5349__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return cljs.core.sorted_map_by.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5349__auto__);
};
cljs.core.sorted_map_by.cljs$core$IFn$_invoke$arity$variadic = function(comparator, keyvals) {
  var in$ = cljs.core.seq(keyvals);
  var out = new cljs.core.PersistentTreeMap(cljs.core.fn__GT_comparator(comparator), null, 0, null, 0);
  while (true) {
    if (in$) {
      var G__10005 = cljs.core.nnext(in$);
      var G__10006 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(out, cljs.core.first(in$), cljs.core.second(in$));
      in$ = G__10005;
      out = G__10006;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.sorted_map_by.cljs$lang$maxFixedArity = 1;
cljs.core.sorted_map_by.cljs$lang$applyTo = function(seq10003) {
  var G__10004 = cljs.core.first(seq10003);
  var seq10003__$1 = cljs.core.next(seq10003);
  return cljs.core.sorted_map_by.cljs$core$IFn$_invoke$arity$variadic(G__10004, seq10003__$1);
};
cljs.core.KeySeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.KeySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.KeySeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.KeySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.KeySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__10007 = self__.mseq;
    if (G__10007) {
      var bit__4983__auto__ = G__10007.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4983__auto__ || G__10007.cljs$core$INext$) {
        return true;
      } else {
        if (!G__10007.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__10007);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__10007);
    }
  }() ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.KeySeq(nseq, self__._meta);
  }
};
cljs.core.KeySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.KeySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__._meta);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = self__.mseq.cljs$core$ISeq$_first$arity$1(null);
  return me.cljs$core$IMapEntry$_key$arity$1(null);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__10008 = self__.mseq;
    if (G__10008) {
      var bit__4983__auto__ = G__10008.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4983__auto__ || G__10008.cljs$core$INext$) {
        return true;
      } else {
        if (!G__10008.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__10008);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__10008);
    }
  }() ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.KeySeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.KeySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.KeySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.KeySeq(self__.mseq, new_meta);
};
cljs.core.KeySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.KeySeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "mseq", "mseq", 1602647196, null), new cljs.core.Symbol(null, "_meta", "_meta", -1716892533, null)], null);
};
cljs.core.KeySeq.cljs$lang$type = true;
cljs.core.KeySeq.cljs$lang$ctorStr = "cljs.core/KeySeq";
cljs.core.KeySeq.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/KeySeq");
};
cljs.core.__GT_KeySeq = function cljs$core$__GT_KeySeq(mseq, _meta) {
  return new cljs.core.KeySeq(mseq, _meta);
};
cljs.core.KeySeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5285__auto__ = this;
  return cljs.core.es6_iterator(this__5285__auto__);
};
cljs.core.keys = function cljs$core$keys(hash_map) {
  var temp__4422__auto__ = cljs.core.seq(hash_map);
  if (temp__4422__auto__) {
    var mseq = temp__4422__auto__;
    return new cljs.core.KeySeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.key = function cljs$core$key(map_entry) {
  return cljs.core._key(map_entry);
};
cljs.core.ValSeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.ValSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ValSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ValSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.ValSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__10009 = self__.mseq;
    if (G__10009) {
      var bit__4983__auto__ = G__10009.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4983__auto__ || G__10009.cljs$core$INext$) {
        return true;
      } else {
        if (!G__10009.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__10009);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__10009);
    }
  }() ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.ValSeq(nseq, self__._meta);
  }
};
cljs.core.ValSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ValSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__._meta);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = self__.mseq.cljs$core$ISeq$_first$arity$1(null);
  return me.cljs$core$IMapEntry$_val$arity$1(null);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__10010 = self__.mseq;
    if (G__10010) {
      var bit__4983__auto__ = G__10010.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4983__auto__ || G__10010.cljs$core$INext$) {
        return true;
      } else {
        if (!G__10010.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__10010);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.INext, G__10010);
    }
  }() ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.ValSeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ValSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ValSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ValSeq(self__.mseq, new_meta);
};
cljs.core.ValSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.ValSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "mseq", "mseq", 1602647196, null), new cljs.core.Symbol(null, "_meta", "_meta", -1716892533, null)], null);
};
cljs.core.ValSeq.cljs$lang$type = true;
cljs.core.ValSeq.cljs$lang$ctorStr = "cljs.core/ValSeq";
cljs.core.ValSeq.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/ValSeq");
};
cljs.core.__GT_ValSeq = function cljs$core$__GT_ValSeq(mseq, _meta) {
  return new cljs.core.ValSeq(mseq, _meta);
};
cljs.core.ValSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5285__auto__ = this;
  return cljs.core.es6_iterator(this__5285__auto__);
};
cljs.core.vals = function cljs$core$vals(hash_map) {
  var temp__4422__auto__ = cljs.core.seq(hash_map);
  if (temp__4422__auto__) {
    var mseq = temp__4422__auto__;
    return new cljs.core.ValSeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.val = function cljs$core$val(map_entry) {
  return cljs.core._val(map_entry);
};
cljs.core.merge = function cljs$core$merge() {
  var argseq__5349__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(argseq__5349__auto__);
};
cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic = function(maps) {
  if (cljs.core.truth_(cljs.core.some(cljs.core.identity, maps))) {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(function(p1__10011_SHARP_, p2__10012_SHARP_) {
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(function() {
        var or__4309__auto__ = p1__10011_SHARP_;
        if (cljs.core.truth_(or__4309__auto__)) {
          return or__4309__auto__;
        } else {
          return cljs.core.PersistentArrayMap.EMPTY;
        }
      }(), p2__10012_SHARP_);
    }, maps);
  } else {
    return null;
  }
};
cljs.core.merge.cljs$lang$maxFixedArity = 0;
cljs.core.merge.cljs$lang$applyTo = function(seq10013) {
  return cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq10013));
};
cljs.core.merge_with = function cljs$core$merge_with() {
  var argseq__5349__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5349__auto__);
};
cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic = function(f, maps) {
  if (cljs.core.truth_(cljs.core.some(cljs.core.identity, maps))) {
    var merge_entry = function(m, e) {
      var k = cljs.core.first(e);
      var v = cljs.core.second(e);
      if (cljs.core.contains_QMARK_(m, k)) {
        return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
          var G__10016 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
          var G__10017 = v;
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__10016, G__10017) : f.call(null, G__10016, G__10017);
        }());
      } else {
        return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, v);
      }
    };
    var merge2 = function(merge_entry) {
      return function(m1, m2) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(merge_entry, function() {
          var or__4309__auto__ = m1;
          if (cljs.core.truth_(or__4309__auto__)) {
            return or__4309__auto__;
          } else {
            return cljs.core.PersistentArrayMap.EMPTY;
          }
        }(), cljs.core.seq(m2));
      };
    }(merge_entry);
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(merge2, maps);
  } else {
    return null;
  }
};
cljs.core.merge_with.cljs$lang$maxFixedArity = 1;
cljs.core.merge_with.cljs$lang$applyTo = function(seq10014) {
  var G__10015 = cljs.core.first(seq10014);
  var seq10014__$1 = cljs.core.next(seq10014);
  return cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic(G__10015, seq10014__$1);
};
cljs.core.select_keys = function cljs$core$select_keys(map, keyseq) {
  var ret = cljs.core.PersistentArrayMap.EMPTY;
  var keys = cljs.core.seq(keyseq);
  while (true) {
    if (keys) {
      var key = cljs.core.first(keys);
      var entry = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map, key, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", -1572889185));
      var G__10018 = cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(entry, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", -1572889185)) ? cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ret, key, entry) : ret;
      var G__10019 = cljs.core.next(keys);
      ret = G__10018;
      keys = G__10019;
      continue;
    } else {
      return cljs.core.with_meta(ret, cljs.core.meta(map));
    }
    break;
  }
};
cljs.core.PersistentHashSet = function(meta, hash_map, __hash) {
  this.meta = meta;
  this.hash_map = hash_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 15077647;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentHashSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentHashSet.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentHashSet.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashSet.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_set_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashSet.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashSet.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentHashSet.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__10022 = cljs.core.seq(coll);
  var chunk__10023 = null;
  var count__10024 = 0;
  var i__10025 = 0;
  while (true) {
    if (i__10025 < count__10024) {
      var vec__10026 = chunk__10023.cljs$core$IIndexed$_nth$arity$2(null, i__10025);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10026, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10026, 1, null);
      var G__10027_10032 = v;
      var G__10028_10033 = k;
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__10027_10032, G__10028_10033) : f.call(null, G__10027_10032, G__10028_10033);
      var G__10034 = seq__10022;
      var G__10035 = chunk__10023;
      var G__10036 = count__10024;
      var G__10037 = i__10025 + 1;
      seq__10022 = G__10034;
      chunk__10023 = G__10035;
      count__10024 = G__10036;
      i__10025 = G__10037;
      continue;
    } else {
      var temp__4422__auto__ = cljs.core.seq(seq__10022);
      if (temp__4422__auto__) {
        var seq__10022__$1 = temp__4422__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__10022__$1)) {
          var c__5094__auto__ = cljs.core.chunk_first(seq__10022__$1);
          var G__10038 = cljs.core.chunk_rest(seq__10022__$1);
          var G__10039 = c__5094__auto__;
          var G__10040 = cljs.core.count(c__5094__auto__);
          var G__10041 = 0;
          seq__10022 = G__10038;
          chunk__10023 = G__10039;
          count__10024 = G__10040;
          i__10025 = G__10041;
          continue;
        } else {
          var vec__10029 = cljs.core.first(seq__10022__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10029, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10029, 1, null);
          var G__10030_10042 = v;
          var G__10031_10043 = k;
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__10030_10042, G__10031_10043) : f.call(null, G__10030_10042, G__10031_10043);
          var G__10044 = cljs.core.next(seq__10022__$1);
          var G__10045 = null;
          var G__10046 = 0;
          var G__10047 = 0;
          seq__10022 = G__10044;
          chunk__10023 = G__10045;
          count__10024 = G__10046;
          i__10025 = G__10047;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, v, null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._contains_key_QMARK_(self__.hash_map, v)) {
    return v;
  } else {
    return not_found;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._count(self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4725__auto__ = self__.__hash;
  if (!(h__4725__auto__ == null)) {
    return h__4725__auto__;
  } else {
    var h__4725__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4725__auto____$1;
    return h__4725__auto____$1;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_(other) && cljs.core.count(coll__$1) === cljs.core.count(other) && cljs.core.every_QMARK_(function(coll__$1) {
    return function(p1__10020_SHARP_) {
      return cljs.core.contains_QMARK_(coll__$1, p1__10020_SHARP_);
    };
  }(coll__$1), other);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashSet(cljs.core._as_transient(self__.hash_map));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentHashSet.EMPTY, self__.meta);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core._dissoc(self__.hash_map, v), null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys(self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(meta__$1, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.hash_map, o, null), null);
};
cljs.core.PersistentHashSet.prototype.call = function() {
  var G__10048 = null;
  var G__10048__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__10048__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__10048 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__10048__2.call(this, self__, k);
      case 3:
        return G__10048__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__10048.cljs$core$IFn$_invoke$arity$2 = G__10048__2;
  G__10048.cljs$core$IFn$_invoke$arity$3 = G__10048__3;
  return G__10048;
}();
cljs.core.PersistentHashSet.prototype.apply = function(self__, args10021) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args10021)));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashSet.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "hash-map", "hash-map", -439030950, null), new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null)], null);
};
cljs.core.PersistentHashSet.cljs$lang$type = true;
cljs.core.PersistentHashSet.cljs$lang$ctorStr = "cljs.core/PersistentHashSet";
cljs.core.PersistentHashSet.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/PersistentHashSet");
};
cljs.core.__GT_PersistentHashSet = function cljs$core$__GT_PersistentHashSet(meta, hash_map, __hash) {
  return new cljs.core.PersistentHashSet(meta, hash_map, __hash);
};
cljs.core.PersistentHashSet.EMPTY = new cljs.core.PersistentHashSet(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.empty_unordered_hash);
cljs.core.PersistentHashSet.fromArray = function(items, no_clone) {
  var len = items.length;
  if (len <= cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
    var arr = no_clone ? items : cljs.core.aclone(items);
    var i = 0;
    var out = cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__10049 = i + 1;
        var G__10050 = cljs.core._assoc_BANG_(out, items[i], null);
        i = G__10049;
        out = G__10050;
        continue;
      } else {
        return new cljs.core.PersistentHashSet(null, cljs.core._persistent_BANG_(out), null);
      }
      break;
    }
  } else {
    var i = 0;
    var out = cljs.core.transient$(cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < len) {
        var G__10051 = i + 1;
        var G__10052 = cljs.core._conj_BANG_(out, items[i]);
        i = G__10051;
        out = G__10052;
        continue;
      } else {
        return cljs.core._persistent_BANG_(out);
      }
      break;
    }
  }
};
cljs.core.PersistentHashSet.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5285__auto__ = this;
  return cljs.core.es6_iterator(this__5285__auto__);
};
cljs.core.TransientHashSet = function(transient_map) {
  this.transient_map = transient_map;
  this.cljs$lang$protocol_mask$partition1$ = 136;
  this.cljs$lang$protocol_mask$partition0$ = 259;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(self__.transient_map, o, null);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return new cljs.core.PersistentHashSet(null, cljs.core.persistent_BANG_(self__.transient_map), null);
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientSet$_disjoin_BANG_$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$2(self__.transient_map, v);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core.count(self__.transient_map);
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(tcoll__$1, v, null);
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, v, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return v;
  }
};
cljs.core.TransientHashSet.prototype.call = function() {
  var G__10054 = null;
  var G__10054__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return null;
    } else {
      return k;
    }
  };
  var G__10054__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return not_found;
    } else {
      return k;
    }
  };
  G__10054 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__10054__2.call(this, self__, k);
      case 3:
        return G__10054__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__10054.cljs$core$IFn$_invoke$arity$2 = G__10054__2;
  G__10054.cljs$core$IFn$_invoke$arity$3 = G__10054__3;
  return G__10054;
}();
cljs.core.TransientHashSet.prototype.apply = function(self__, args10053) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args10053)));
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return null;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "transient-map", "transient-map", 351764893, null)], null);
};
cljs.core.TransientHashSet.cljs$lang$type = true;
cljs.core.TransientHashSet.cljs$lang$ctorStr = "cljs.core/TransientHashSet";
cljs.core.TransientHashSet.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/TransientHashSet");
};
cljs.core.__GT_TransientHashSet = function cljs$core$__GT_TransientHashSet(transient_map) {
  return new cljs.core.TransientHashSet(transient_map);
};
cljs.core.PersistentTreeSet = function(meta, tree_map, __hash) {
  this.meta = meta;
  this.tree_map = tree_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 417730831;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentTreeSet.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeSet.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeSet.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_set_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeSet.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeSet.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentTreeSet.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__10057 = cljs.core.seq(coll);
  var chunk__10058 = null;
  var count__10059 = 0;
  var i__10060 = 0;
  while (true) {
    if (i__10060 < count__10059) {
      var vec__10061 = chunk__10058.cljs$core$IIndexed$_nth$arity$2(null, i__10060);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10061, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10061, 1, null);
      var G__10062_10067 = v;
      var G__10063_10068 = k;
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__10062_10067, G__10063_10068) : f.call(null, G__10062_10067, G__10063_10068);
      var G__10069 = seq__10057;
      var G__10070 = chunk__10058;
      var G__10071 = count__10059;
      var G__10072 = i__10060 + 1;
      seq__10057 = G__10069;
      chunk__10058 = G__10070;
      count__10059 = G__10071;
      i__10060 = G__10072;
      continue;
    } else {
      var temp__4422__auto__ = cljs.core.seq(seq__10057);
      if (temp__4422__auto__) {
        var seq__10057__$1 = temp__4422__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__10057__$1)) {
          var c__5094__auto__ = cljs.core.chunk_first(seq__10057__$1);
          var G__10073 = cljs.core.chunk_rest(seq__10057__$1);
          var G__10074 = c__5094__auto__;
          var G__10075 = cljs.core.count(c__5094__auto__);
          var G__10076 = 0;
          seq__10057 = G__10073;
          chunk__10058 = G__10074;
          count__10059 = G__10075;
          i__10060 = G__10076;
          continue;
        } else {
          var vec__10064 = cljs.core.first(seq__10057__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10064, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10064, 1, null);
          var G__10065_10077 = v;
          var G__10066_10078 = k;
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__10065_10077, G__10066_10078) : f.call(null, G__10065_10077, G__10066_10078);
          var G__10079 = cljs.core.next(seq__10057__$1);
          var G__10080 = null;
          var G__10081 = 0;
          var G__10082 = 0;
          seq__10057 = G__10079;
          chunk__10058 = G__10080;
          count__10059 = G__10081;
          i__10060 = G__10082;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, v, null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = self__.tree_map.entry_at(v);
  if (!(n == null)) {
    return n.key;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.count(self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.count(self__.tree_map) > 0) {
    return cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.key, cljs.core.rseq(self__.tree_map));
  } else {
    return null;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4725__auto__ = self__.__hash;
  if (!(h__4725__auto__ == null)) {
    return h__4725__auto__;
  } else {
    var h__4725__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__4725__auto____$1;
    return h__4725__auto____$1;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_(other) && cljs.core.count(coll__$1) === cljs.core.count(other) && cljs.core.every_QMARK_(function(coll__$1) {
    return function(p1__10055_SHARP_) {
      return cljs.core.contains_QMARK_(coll__$1, p1__10055_SHARP_);
    };
  }(coll__$1), other);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core._empty(self__.tree_map), 0);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(self__.tree_map, v), null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys(self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(meta__$1, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.tree_map, o, null), null);
};
cljs.core.PersistentTreeSet.prototype.call = function() {
  var G__10083 = null;
  var G__10083__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__10083__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__10083 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__10083__2.call(this, self__, k);
      case 3:
        return G__10083__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__10083.cljs$core$IFn$_invoke$arity$2 = G__10083__2;
  G__10083.cljs$core$IFn$_invoke$arity$3 = G__10083__3;
  return G__10083;
}();
cljs.core.PersistentTreeSet.prototype.apply = function(self__, args10056) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args10056)));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.key, cljs.core._sorted_seq(self__.tree_map, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.key, cljs.core._sorted_seq_from(self__.tree_map, k, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return entry;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._comparator(self__.tree_map);
};
cljs.core.PersistentTreeSet.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "tree-map", "tree-map", 1373073049, null), new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null)], null);
};
cljs.core.PersistentTreeSet.cljs$lang$type = true;
cljs.core.PersistentTreeSet.cljs$lang$ctorStr = "cljs.core/PersistentTreeSet";
cljs.core.PersistentTreeSet.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/PersistentTreeSet");
};
cljs.core.__GT_PersistentTreeSet = function cljs$core$__GT_PersistentTreeSet(meta, tree_map, __hash) {
  return new cljs.core.PersistentTreeSet(meta, tree_map, __hash);
};
cljs.core.PersistentTreeSet.EMPTY = new cljs.core.PersistentTreeSet(null, cljs.core.PersistentTreeMap.EMPTY, cljs.core.empty_unordered_hash);
cljs.core.PersistentTreeSet.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5285__auto__ = this;
  return cljs.core.es6_iterator(this__5285__auto__);
};
cljs.core.set_from_indexed_seq = function cljs$core$set_from_indexed_seq(iseq) {
  var arr = iseq.arr;
  var ret = function() {
    var a__5188__auto__ = arr;
    var i = 0;
    var res = cljs.core._as_transient(cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < a__5188__auto__.length) {
        var G__10084 = i + 1;
        var G__10085 = res.cljs$core$ITransientCollection$_conj_BANG_$arity$2(null, arr[i]);
        i = G__10084;
        res = G__10085;
        continue;
      } else {
        return res;
      }
      break;
    }
  }();
  return ret.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(null);
};
cljs.core.set = function cljs$core$set(coll) {
  var in$ = cljs.core.seq(coll);
  if (in$ == null) {
    return cljs.core.PersistentHashSet.EMPTY;
  } else {
    if (in$ instanceof cljs.core.IndexedSeq && in$.i === 0) {
      return cljs.core.set_from_indexed_seq(in$);
    } else {
      var in$__$1 = in$;
      var out = cljs.core._as_transient(cljs.core.PersistentHashSet.EMPTY);
      while (true) {
        if (!(in$__$1 == null)) {
          var G__10086 = cljs.core.next(in$__$1);
          var G__10087 = out.cljs$core$ITransientCollection$_conj_BANG_$arity$2(null, in$__$1.cljs$core$ISeq$_first$arity$1(null));
          in$__$1 = G__10086;
          out = G__10087;
          continue;
        } else {
          return cljs.core.persistent_BANG_(out);
        }
        break;
      }
    }
  }
};
cljs.core.hash_set = function cljs$core$hash_set() {
  var G__10090 = arguments.length;
  switch(G__10090) {
    case 0:
      return cljs.core.hash_set.cljs$core$IFn$_invoke$arity$0();
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0);
      return cljs.core.hash_set.cljs$core$IFn$_invoke$arity$variadic(argseq__5360__auto__);
  }
};
cljs.core.hash_set.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.PersistentHashSet.EMPTY;
};
cljs.core.hash_set.cljs$core$IFn$_invoke$arity$variadic = function(keys) {
  return cljs.core.set(keys);
};
cljs.core.hash_set.cljs$lang$applyTo = function(seq10088) {
  return cljs.core.hash_set.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq10088));
};
cljs.core.hash_set.cljs$lang$maxFixedArity = 0;
cljs.core.sorted_set = function cljs$core$sorted_set() {
  var argseq__5349__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.sorted_set.cljs$core$IFn$_invoke$arity$variadic(argseq__5349__auto__);
};
cljs.core.sorted_set.cljs$core$IFn$_invoke$arity$variadic = function(keys) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, cljs.core.PersistentTreeSet.EMPTY, keys);
};
cljs.core.sorted_set.cljs$lang$maxFixedArity = 0;
cljs.core.sorted_set.cljs$lang$applyTo = function(seq10092) {
  return cljs.core.sorted_set.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq10092));
};
cljs.core.sorted_set_by = function cljs$core$sorted_set_by() {
  var argseq__5349__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return cljs.core.sorted_set_by.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5349__auto__);
};
cljs.core.sorted_set_by.cljs$core$IFn$_invoke$arity$variadic = function(comparator, keys) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, new cljs.core.PersistentTreeSet(null, cljs.core.sorted_map_by(comparator), 0), keys);
};
cljs.core.sorted_set_by.cljs$lang$maxFixedArity = 1;
cljs.core.sorted_set_by.cljs$lang$applyTo = function(seq10093) {
  var G__10094 = cljs.core.first(seq10093);
  var seq10093__$1 = cljs.core.next(seq10093);
  return cljs.core.sorted_set_by.cljs$core$IFn$_invoke$arity$variadic(G__10094, seq10093__$1);
};
cljs.core.replace = function cljs$core$replace() {
  var G__10098 = arguments.length;
  switch(G__10098) {
    case 1:
      return cljs.core.replace.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.replace.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.replace.cljs$core$IFn$_invoke$arity$1 = function(smap) {
  return cljs.core.map.cljs$core$IFn$_invoke$arity$1(function(p1__10095_SHARP_) {
    var temp__4420__auto__ = cljs.core.find(smap, p1__10095_SHARP_);
    if (cljs.core.truth_(temp__4420__auto__)) {
      var e = temp__4420__auto__;
      return cljs.core.val(e);
    } else {
      return p1__10095_SHARP_;
    }
  });
};
cljs.core.replace.cljs$core$IFn$_invoke$arity$2 = function(smap, coll) {
  if (cljs.core.vector_QMARK_(coll)) {
    var n = cljs.core.count(coll);
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(n) {
      return function(v, i) {
        var temp__4420__auto__ = cljs.core.find(smap, cljs.core.nth.cljs$core$IFn$_invoke$arity$2(v, i));
        if (cljs.core.truth_(temp__4420__auto__)) {
          var e = temp__4420__auto__;
          return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(v, i, cljs.core.second(e));
        } else {
          return v;
        }
      };
    }(n), coll, cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.iterate(cljs.core.inc, 0)));
  } else {
    return cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(p1__10096_SHARP_) {
      var temp__4420__auto__ = cljs.core.find(smap, p1__10096_SHARP_);
      if (cljs.core.truth_(temp__4420__auto__)) {
        var e = temp__4420__auto__;
        return cljs.core.second(e);
      } else {
        return p1__10096_SHARP_;
      }
    }, coll);
  }
};
cljs.core.replace.cljs$lang$maxFixedArity = 2;
cljs.core.distinct = function cljs$core$distinct() {
  var G__10101 = arguments.length;
  switch(G__10101) {
    case 0:
      return cljs.core.distinct.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.distinct.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.distinct.cljs$core$IFn$_invoke$arity$0 = function() {
  return function(rf) {
    var seen = cljs.core.volatile_BANG_(cljs.core.PersistentHashSet.EMPTY);
    return function(seen) {
      return function() {
        var G__10113 = null;
        var G__10113__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__10113__1 = function(result) {
          var G__10102 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__10102) : rf.call(null, G__10102);
        };
        var G__10113__2 = function(result, input) {
          if (cljs.core.contains_QMARK_(function() {
            var G__10103 = seen;
            return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10103) : cljs.core.deref.call(null, G__10103);
          }(), input)) {
            return result;
          } else {
            cljs.core._vreset_BANG_(seen, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core._deref(seen), input));
            var G__10104 = result;
            var G__10105 = input;
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__10104, G__10105) : rf.call(null, G__10104, G__10105);
          }
        };
        G__10113 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__10113__0.call(this);
            case 1:
              return G__10113__1.call(this, result);
            case 2:
              return G__10113__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__10113.cljs$core$IFn$_invoke$arity$0 = G__10113__0;
        G__10113.cljs$core$IFn$_invoke$arity$1 = G__10113__1;
        G__10113.cljs$core$IFn$_invoke$arity$2 = G__10113__2;
        return G__10113;
      }();
    }(seen);
  };
};
cljs.core.distinct.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var step = function cljs$core$step(xs, seen) {
    return new cljs.core.LazySeq(null, function() {
      return function(p__10110, seen__$1) {
        while (true) {
          var vec__10111 = p__10110;
          var f = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10111, 0, null);
          var xs__$1 = vec__10111;
          var temp__4422__auto__ = cljs.core.seq(xs__$1);
          if (temp__4422__auto__) {
            var s = temp__4422__auto__;
            if (cljs.core.contains_QMARK_(seen__$1, f)) {
              var G__10114 = cljs.core.rest(s);
              var G__10115 = seen__$1;
              p__10110 = G__10114;
              seen__$1 = G__10115;
              continue;
            } else {
              return cljs.core.cons(f, cljs$core$step(cljs.core.rest(s), cljs.core.conj.cljs$core$IFn$_invoke$arity$2(seen__$1, f)));
            }
          } else {
            return null;
          }
          break;
        }
      }.call(null, xs, seen);
    }, null, null);
  };
  return step(coll, cljs.core.PersistentHashSet.EMPTY);
};
cljs.core.distinct.cljs$lang$maxFixedArity = 1;
cljs.core.butlast = function cljs$core$butlast(s) {
  var ret = cljs.core.PersistentVector.EMPTY;
  var s__$1 = s;
  while (true) {
    if (cljs.core.next(s__$1)) {
      var G__10116 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(ret, cljs.core.first(s__$1));
      var G__10117 = cljs.core.next(s__$1);
      ret = G__10116;
      s__$1 = G__10117;
      continue;
    } else {
      return cljs.core.seq(ret);
    }
    break;
  }
};
cljs.core.name = function cljs$core$name(x) {
  if (function() {
    var G__10119 = x;
    if (G__10119) {
      var bit__4976__auto__ = G__10119.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__4976__auto__ || G__10119.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return x.cljs$core$INamed$_name$arity$1(null);
  } else {
    if (typeof x === "string") {
      return x;
    } else {
      throw new Error([cljs.core.str("Doesn't support name: "), cljs.core.str(x)].join(""));
    }
  }
};
cljs.core.zipmap = function cljs$core$zipmap(keys, vals) {
  var map = cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY);
  var ks = cljs.core.seq(keys);
  var vs = cljs.core.seq(vals);
  while (true) {
    if (ks && vs) {
      var G__10120 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(map, cljs.core.first(ks), cljs.core.first(vs));
      var G__10121 = cljs.core.next(ks);
      var G__10122 = cljs.core.next(vs);
      map = G__10120;
      ks = G__10121;
      vs = G__10122;
      continue;
    } else {
      return cljs.core.persistent_BANG_(map);
    }
    break;
  }
};
cljs.core.max_key = function cljs$core$max_key() {
  var G__10130 = arguments.length;
  switch(G__10130) {
    case 2:
      return cljs.core.max_key.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.max_key.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 3), 0);
      return cljs.core.max_key.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5360__auto__);
  }
};
cljs.core.max_key.cljs$core$IFn$_invoke$arity$2 = function(k, x) {
  return x;
};
cljs.core.max_key.cljs$core$IFn$_invoke$arity$3 = function(k, x, y) {
  if (function() {
    var G__10131 = x;
    return k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(G__10131) : k.call(null, G__10131);
  }() > function() {
    var G__10132 = y;
    return k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(G__10132) : k.call(null, G__10132);
  }()) {
    return x;
  } else {
    return y;
  }
};
cljs.core.max_key.cljs$core$IFn$_invoke$arity$variadic = function(k, x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__10123_SHARP_, p2__10124_SHARP_) {
    return cljs.core.max_key.cljs$core$IFn$_invoke$arity$3(k, p1__10123_SHARP_, p2__10124_SHARP_);
  }, cljs.core.max_key.cljs$core$IFn$_invoke$arity$3(k, x, y), more);
};
cljs.core.max_key.cljs$lang$applyTo = function(seq10125) {
  var G__10126 = cljs.core.first(seq10125);
  var seq10125__$1 = cljs.core.next(seq10125);
  var G__10127 = cljs.core.first(seq10125__$1);
  var seq10125__$2 = cljs.core.next(seq10125__$1);
  var G__10128 = cljs.core.first(seq10125__$2);
  var seq10125__$3 = cljs.core.next(seq10125__$2);
  return cljs.core.max_key.cljs$core$IFn$_invoke$arity$variadic(G__10126, G__10127, G__10128, seq10125__$3);
};
cljs.core.max_key.cljs$lang$maxFixedArity = 3;
cljs.core.min_key = function cljs$core$min_key() {
  var G__10141 = arguments.length;
  switch(G__10141) {
    case 2:
      return cljs.core.min_key.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.min_key.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 3), 0);
      return cljs.core.min_key.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5360__auto__);
  }
};
cljs.core.min_key.cljs$core$IFn$_invoke$arity$2 = function(k, x) {
  return x;
};
cljs.core.min_key.cljs$core$IFn$_invoke$arity$3 = function(k, x, y) {
  if (function() {
    var G__10142 = x;
    return k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(G__10142) : k.call(null, G__10142);
  }() < function() {
    var G__10143 = y;
    return k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(G__10143) : k.call(null, G__10143);
  }()) {
    return x;
  } else {
    return y;
  }
};
cljs.core.min_key.cljs$core$IFn$_invoke$arity$variadic = function(k, x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__10134_SHARP_, p2__10135_SHARP_) {
    return cljs.core.min_key.cljs$core$IFn$_invoke$arity$3(k, p1__10134_SHARP_, p2__10135_SHARP_);
  }, cljs.core.min_key.cljs$core$IFn$_invoke$arity$3(k, x, y), more);
};
cljs.core.min_key.cljs$lang$applyTo = function(seq10136) {
  var G__10137 = cljs.core.first(seq10136);
  var seq10136__$1 = cljs.core.next(seq10136);
  var G__10138 = cljs.core.first(seq10136__$1);
  var seq10136__$2 = cljs.core.next(seq10136__$1);
  var G__10139 = cljs.core.first(seq10136__$2);
  var seq10136__$3 = cljs.core.next(seq10136__$2);
  return cljs.core.min_key.cljs$core$IFn$_invoke$arity$variadic(G__10137, G__10138, G__10139, seq10136__$3);
};
cljs.core.min_key.cljs$lang$maxFixedArity = 3;
cljs.core.ArrayList = function(arr) {
  this.arr = arr;
};
cljs.core.ArrayList.prototype.add = function(x) {
  var self__ = this;
  var _ = this;
  return self__.arr.push(x);
};
cljs.core.ArrayList.prototype.size = function() {
  var self__ = this;
  var _ = this;
  return self__.arr.length;
};
cljs.core.ArrayList.prototype.clear = function() {
  var self__ = this;
  var _ = this;
  return self__.arr = [];
};
cljs.core.ArrayList.prototype.isEmpty = function() {
  var self__ = this;
  var _ = this;
  return self__.arr.length === 0;
};
cljs.core.ArrayList.prototype.toArray = function() {
  var self__ = this;
  var _ = this;
  return self__.arr;
};
cljs.core.ArrayList.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "arr", "arr", 2115492975, null)], null);
};
cljs.core.ArrayList.cljs$lang$type = true;
cljs.core.ArrayList.cljs$lang$ctorStr = "cljs.core/ArrayList";
cljs.core.ArrayList.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/ArrayList");
};
cljs.core.__GT_ArrayList = function cljs$core$__GT_ArrayList(arr) {
  return new cljs.core.ArrayList(arr);
};
cljs.core.array_list = function cljs$core$array_list() {
  return new cljs.core.ArrayList([]);
};
cljs.core.partition_all = function cljs$core$partition_all() {
  var G__10146 = arguments.length;
  switch(G__10146) {
    case 1:
      return cljs.core.partition_all.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.partition_all.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.partition_all.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.partition_all.cljs$core$IFn$_invoke$arity$1 = function(n) {
  return function(rf) {
    var a = cljs.core.array_list();
    return function(a) {
      return function() {
        var G__10153 = null;
        var G__10153__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__10153__1 = function(result) {
          var result__$1 = cljs.core.truth_(a.isEmpty()) ? result : function() {
            var v = cljs.core.vec(a.toArray());
            a.clear();
            return cljs.core.unreduced(function() {
              var G__10147 = result;
              var G__10148 = v;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__10147, G__10148) : rf.call(null, G__10147, G__10148);
            }());
          }();
          var G__10149 = result__$1;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__10149) : rf.call(null, G__10149);
        };
        var G__10153__2 = function(result, input) {
          a.add(input);
          if (n === a.size()) {
            var v = cljs.core.vec(a.toArray());
            a.clear();
            var G__10150 = result;
            var G__10151 = v;
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__10150, G__10151) : rf.call(null, G__10150, G__10151);
          } else {
            return result;
          }
        };
        G__10153 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__10153__0.call(this);
            case 1:
              return G__10153__1.call(this, result);
            case 2:
              return G__10153__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__10153.cljs$core$IFn$_invoke$arity$0 = G__10153__0;
        G__10153.cljs$core$IFn$_invoke$arity$1 = G__10153__1;
        G__10153.cljs$core$IFn$_invoke$arity$2 = G__10153__2;
        return G__10153;
      }();
    }(a);
  };
};
cljs.core.partition_all.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  return cljs.core.partition_all.cljs$core$IFn$_invoke$arity$3(n, n, coll);
};
cljs.core.partition_all.cljs$core$IFn$_invoke$arity$3 = function(n, step, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4422__auto__ = cljs.core.seq(coll);
    if (temp__4422__auto__) {
      var s = temp__4422__auto__;
      return cljs.core.cons(cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, s), cljs.core.partition_all.cljs$core$IFn$_invoke$arity$3(n, step, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(step, s)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.partition_all.cljs$lang$maxFixedArity = 3;
cljs.core.take_while = function cljs$core$take_while() {
  var G__10155 = arguments.length;
  switch(G__10155) {
    case 1:
      return cljs.core.take_while.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.take_while.cljs$core$IFn$_invoke$arity$1 = function(pred) {
  return function(rf) {
    return function() {
      var G__10162 = null;
      var G__10162__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__10162__1 = function(result) {
        var G__10156 = result;
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__10156) : rf.call(null, G__10156);
      };
      var G__10162__2 = function(result, input) {
        if (cljs.core.truth_(function() {
          var G__10157 = input;
          return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__10157) : pred.call(null, G__10157);
        }())) {
          var G__10158 = result;
          var G__10159 = input;
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__10158, G__10159) : rf.call(null, G__10158, G__10159);
        } else {
          return cljs.core.reduced(result);
        }
      };
      G__10162 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__10162__0.call(this);
          case 1:
            return G__10162__1.call(this, result);
          case 2:
            return G__10162__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__10162.cljs$core$IFn$_invoke$arity$0 = G__10162__0;
      G__10162.cljs$core$IFn$_invoke$arity$1 = G__10162__1;
      G__10162.cljs$core$IFn$_invoke$arity$2 = G__10162__2;
      return G__10162;
    }();
  };
};
cljs.core.take_while.cljs$core$IFn$_invoke$arity$2 = function(pred, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4422__auto__ = cljs.core.seq(coll);
    if (temp__4422__auto__) {
      var s = temp__4422__auto__;
      if (cljs.core.truth_(function() {
        var G__10160 = cljs.core.first(s);
        return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__10160) : pred.call(null, G__10160);
      }())) {
        return cljs.core.cons(cljs.core.first(s), cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(pred, cljs.core.rest(s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.take_while.cljs$lang$maxFixedArity = 2;
cljs.core.mk_bound_fn = function cljs$core$mk_bound_fn(sc, test, key) {
  return function(e) {
    var comp = cljs.core._comparator(sc);
    var G__10167 = function() {
      var G__10169 = cljs.core._entry_key(sc, e);
      var G__10170 = key;
      return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__10169, G__10170) : comp.call(null, G__10169, G__10170);
    }();
    var G__10168 = 0;
    return test.cljs$core$IFn$_invoke$arity$2 ? test.cljs$core$IFn$_invoke$arity$2(G__10167, G__10168) : test.call(null, G__10167, G__10168);
  };
};
cljs.core.subseq = function cljs$core$subseq() {
  var G__10172 = arguments.length;
  switch(G__10172) {
    case 3:
      return cljs.core.subseq.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 5:
      return cljs.core.subseq.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.subseq.cljs$core$IFn$_invoke$arity$3 = function(sc, test, key) {
  var include = cljs.core.mk_bound_fn(sc, test, key);
  if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._GT_, cljs.core._GT__EQ_], true).call(null, test))) {
    var temp__4422__auto__ = cljs.core._sorted_seq_from(sc, key, true);
    if (cljs.core.truth_(temp__4422__auto__)) {
      var vec__10173 = temp__4422__auto__;
      var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10173, 0, null);
      var s = vec__10173;
      if (cljs.core.truth_(function() {
        var G__10174 = e;
        return include.cljs$core$IFn$_invoke$arity$1 ? include.cljs$core$IFn$_invoke$arity$1(G__10174) : include.call(null, G__10174);
      }())) {
        return s;
      } else {
        return cljs.core.next(s);
      }
    } else {
      return null;
    }
  } else {
    return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(include, cljs.core._sorted_seq(sc, true));
  }
};
cljs.core.subseq.cljs$core$IFn$_invoke$arity$5 = function(sc, start_test, start_key, end_test, end_key) {
  var temp__4422__auto__ = cljs.core._sorted_seq_from(sc, start_key, true);
  if (cljs.core.truth_(temp__4422__auto__)) {
    var vec__10175 = temp__4422__auto__;
    var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10175, 0, null);
    var s = vec__10175;
    return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(cljs.core.mk_bound_fn(sc, end_test, end_key), cljs.core.truth_(cljs.core.mk_bound_fn(sc, start_test, start_key).call(null, e)) ? s : cljs.core.next(s));
  } else {
    return null;
  }
};
cljs.core.subseq.cljs$lang$maxFixedArity = 5;
cljs.core.rsubseq = function cljs$core$rsubseq() {
  var G__10178 = arguments.length;
  switch(G__10178) {
    case 3:
      return cljs.core.rsubseq.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 5:
      return cljs.core.rsubseq.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.rsubseq.cljs$core$IFn$_invoke$arity$3 = function(sc, test, key) {
  var include = cljs.core.mk_bound_fn(sc, test, key);
  if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._LT_, cljs.core._LT__EQ_], true).call(null, test))) {
    var temp__4422__auto__ = cljs.core._sorted_seq_from(sc, key, false);
    if (cljs.core.truth_(temp__4422__auto__)) {
      var vec__10179 = temp__4422__auto__;
      var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10179, 0, null);
      var s = vec__10179;
      if (cljs.core.truth_(function() {
        var G__10180 = e;
        return include.cljs$core$IFn$_invoke$arity$1 ? include.cljs$core$IFn$_invoke$arity$1(G__10180) : include.call(null, G__10180);
      }())) {
        return s;
      } else {
        return cljs.core.next(s);
      }
    } else {
      return null;
    }
  } else {
    return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(include, cljs.core._sorted_seq(sc, false));
  }
};
cljs.core.rsubseq.cljs$core$IFn$_invoke$arity$5 = function(sc, start_test, start_key, end_test, end_key) {
  var temp__4422__auto__ = cljs.core._sorted_seq_from(sc, end_key, false);
  if (cljs.core.truth_(temp__4422__auto__)) {
    var vec__10181 = temp__4422__auto__;
    var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10181, 0, null);
    var s = vec__10181;
    return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(cljs.core.mk_bound_fn(sc, start_test, start_key), cljs.core.truth_(cljs.core.mk_bound_fn(sc, end_test, end_key).call(null, e)) ? s : cljs.core.next(s));
  } else {
    return null;
  }
};
cljs.core.rsubseq.cljs$lang$maxFixedArity = 5;
cljs.core.RangeIterator = function(i, end, step) {
  this.i = i;
  this.end = end;
  this.step = step;
};
cljs.core.RangeIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  if (self__.step > 0) {
    return self__.i < self__.end;
  } else {
    return self__.i > self__.end;
  }
};
cljs.core.RangeIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.i;
  self__.i = self__.i + self__.step;
  return ret;
};
cljs.core.RangeIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.Symbol(null, "end", "end", 1372345569, null), new cljs.core.Symbol(null, "step", "step", -1365547645, null)], null);
};
cljs.core.RangeIterator.cljs$lang$type = true;
cljs.core.RangeIterator.cljs$lang$ctorStr = "cljs.core/RangeIterator";
cljs.core.RangeIterator.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/RangeIterator");
};
cljs.core.__GT_RangeIterator = function cljs$core$__GT_RangeIterator(i, end, step) {
  return new cljs.core.RangeIterator(i, end, step);
};
cljs.core.Range = function(meta, start, end, step, __hash) {
  this.meta = meta;
  this.start = start;
  this.end = end;
  this.step = step;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375006;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Range.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.Range.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$2 = function(rng, n) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count(rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      throw new Error("Index out of bounds");
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$3 = function(rng, n, not_found) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count(rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      return not_found;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIterable$ = true;
cljs.core.Range.prototype.cljs$core$IIterable$_iterator$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RangeIterator(self__.start, self__.end, self__.step);
};
cljs.core.Range.prototype.cljs$core$IMeta$_meta$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return self__.meta;
};
cljs.core.Range.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Range(self__.meta, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$INext$_next$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start + self__.step < self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  } else {
    if (self__.start + self__.step > self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICounted$_count$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core.not(cljs.core._seq(rng__$1))) {
    return 0;
  } else {
    var G__10183 = (self__.end - self__.start) / self__.step;
    return Math.ceil(G__10183);
  }
};
cljs.core.Range.prototype.cljs$core$IHash$_hash$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  var h__4725__auto__ = self__.__hash;
  if (!(h__4725__auto__ == null)) {
    return h__4725__auto__;
  } else {
    var h__4725__auto____$1 = cljs.core.hash_ordered_coll(rng__$1);
    self__.__hash = h__4725__auto____$1;
    return h__4725__auto____$1;
  }
};
cljs.core.Range.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(rng, other) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.equiv_sequential(rng__$1, other);
};
cljs.core.Range.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$2 = function(rng, f) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(rng__$1, f);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$3 = function(rng, f, init) {
  var self__ = this;
  var rng__$1 = this;
  var i = self__.start;
  var ret = init;
  while (true) {
    if (self__.step > 0 ? i < self__.end : i > self__.end) {
      var ret__$1 = function() {
        var G__10184 = ret;
        var G__10185 = i;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__10184, G__10185) : f.call(null, G__10184, G__10185);
      }();
      if (cljs.core.reduced_QMARK_(ret__$1)) {
        var G__10186 = ret__$1;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10186) : cljs.core.deref.call(null, G__10186);
      } else {
        var G__10187 = i + self__.step;
        var G__10188 = ret__$1;
        i = G__10187;
        ret = G__10188;
        continue;
      }
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_first$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core._seq(rng__$1) == null) {
    return null;
  } else {
    return self__.start;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_rest$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (!(cljs.core._seq(rng__$1) == null)) {
    return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.Range.prototype.cljs$core$ISeqable$_seq$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start < self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  } else {
    if (self__.start > self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(rng, meta__$1) {
  var self__ = this;
  var rng__$1 = this;
  return new cljs.core.Range(meta__$1, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$ICollection$_conj$arity$2 = function(rng, o) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.cons(o, rng__$1);
};
cljs.core.Range.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "start", "start", 1285322546, null), new cljs.core.Symbol(null, "end", "end", 1372345569, null), new cljs.core.Symbol(null, "step", "step", -1365547645, null), new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null)], null);
};
cljs.core.Range.cljs$lang$type = true;
cljs.core.Range.cljs$lang$ctorStr = "cljs.core/Range";
cljs.core.Range.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/Range");
};
cljs.core.__GT_Range = function cljs$core$__GT_Range(meta, start, end, step, __hash) {
  return new cljs.core.Range(meta, start, end, step, __hash);
};
cljs.core.Range.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5285__auto__ = this;
  return cljs.core.es6_iterator(this__5285__auto__);
};
cljs.core.range = function cljs$core$range() {
  var G__10190 = arguments.length;
  switch(G__10190) {
    case 0:
      return cljs.core.range.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.range.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.range.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.range.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.range.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.range.cljs$core$IFn$_invoke$arity$3(0, Number.MAX_VALUE, 1);
};
cljs.core.range.cljs$core$IFn$_invoke$arity$1 = function(end) {
  return cljs.core.range.cljs$core$IFn$_invoke$arity$3(0, end, 1);
};
cljs.core.range.cljs$core$IFn$_invoke$arity$2 = function(start, end) {
  return cljs.core.range.cljs$core$IFn$_invoke$arity$3(start, end, 1);
};
cljs.core.range.cljs$core$IFn$_invoke$arity$3 = function(start, end, step) {
  return new cljs.core.Range(null, start, end, step, null);
};
cljs.core.range.cljs$lang$maxFixedArity = 3;
cljs.core.take_nth = function cljs$core$take_nth() {
  var G__10193 = arguments.length;
  switch(G__10193) {
    case 1:
      return cljs.core.take_nth.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.take_nth.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.take_nth.cljs$core$IFn$_invoke$arity$1 = function(n) {
  return function(rf) {
    var ia = cljs.core.volatile_BANG_(-1);
    return function(ia) {
      return function() {
        var G__10198 = null;
        var G__10198__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__10198__1 = function(result) {
          var G__10194 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__10194) : rf.call(null, G__10194);
        };
        var G__10198__2 = function(result, input) {
          var i = cljs.core._vreset_BANG_(ia, cljs.core._deref(ia) + 1);
          if (cljs.core.rem(i, n) === 0) {
            var G__10195 = result;
            var G__10196 = input;
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__10195, G__10196) : rf.call(null, G__10195, G__10196);
          } else {
            return result;
          }
        };
        G__10198 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__10198__0.call(this);
            case 1:
              return G__10198__1.call(this, result);
            case 2:
              return G__10198__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__10198.cljs$core$IFn$_invoke$arity$0 = G__10198__0;
        G__10198.cljs$core$IFn$_invoke$arity$1 = G__10198__1;
        G__10198.cljs$core$IFn$_invoke$arity$2 = G__10198__2;
        return G__10198;
      }();
    }(ia);
  };
};
cljs.core.take_nth.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4422__auto__ = cljs.core.seq(coll);
    if (temp__4422__auto__) {
      var s = temp__4422__auto__;
      return cljs.core.cons(cljs.core.first(s), cljs.core.take_nth.cljs$core$IFn$_invoke$arity$2(n, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, s)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.take_nth.cljs$lang$maxFixedArity = 2;
cljs.core.split_with = function cljs$core$split_with(pred, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(pred, coll), cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2(pred, coll)], null);
};
cljs.core.partition_by = function cljs$core$partition_by() {
  var G__10201 = arguments.length;
  switch(G__10201) {
    case 1:
      return cljs.core.partition_by.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.partition_by.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function(rf) {
    var a = cljs.core.array_list();
    var pa = cljs.core.volatile_BANG_(new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439));
    return function(a, pa) {
      return function() {
        var G__10212 = null;
        var G__10212__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__10212__1 = function(result) {
          var result__$1 = cljs.core.truth_(a.isEmpty()) ? result : function() {
            var v = cljs.core.vec(a.toArray());
            a.clear();
            return cljs.core.unreduced(function() {
              var G__10202 = result;
              var G__10203 = v;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__10202, G__10203) : rf.call(null, G__10202, G__10203);
            }());
          }();
          var G__10204 = result__$1;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__10204) : rf.call(null, G__10204);
        };
        var G__10212__2 = function(result, input) {
          var pval = function() {
            var G__10205 = pa;
            return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10205) : cljs.core.deref.call(null, G__10205);
          }();
          var val = function() {
            var G__10206 = input;
            return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__10206) : f.call(null, G__10206);
          }();
          cljs.core.vreset_BANG_(pa, val);
          if (cljs.core.keyword_identical_QMARK_(pval, new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439)) || cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(val, pval)) {
            a.add(input);
            return result;
          } else {
            var v = cljs.core.vec(a.toArray());
            a.clear();
            var ret = function() {
              var G__10207 = result;
              var G__10208 = v;
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__10207, G__10208) : rf.call(null, G__10207, G__10208);
            }();
            if (cljs.core.reduced_QMARK_(ret)) {
            } else {
              a.add(input);
            }
            return ret;
          }
        };
        G__10212 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__10212__0.call(this);
            case 1:
              return G__10212__1.call(this, result);
            case 2:
              return G__10212__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__10212.cljs$core$IFn$_invoke$arity$0 = G__10212__0;
        G__10212.cljs$core$IFn$_invoke$arity$1 = G__10212__1;
        G__10212.cljs$core$IFn$_invoke$arity$2 = G__10212__2;
        return G__10212;
      }();
    }(a, pa);
  };
};
cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4422__auto__ = cljs.core.seq(coll);
    if (temp__4422__auto__) {
      var s = temp__4422__auto__;
      var fst = cljs.core.first(s);
      var fv = function() {
        var G__10209 = fst;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__10209) : f.call(null, G__10209);
      }();
      var run = cljs.core.cons(fst, cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(function(fst, fv, s, temp__4422__auto__) {
        return function(p1__10199_SHARP_) {
          return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(fv, function() {
            var G__10210 = p1__10199_SHARP_;
            return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__10210) : f.call(null, G__10210);
          }());
        };
      }(fst, fv, s, temp__4422__auto__), cljs.core.next(s)));
      return cljs.core.cons(run, cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2(f, cljs.core.seq(cljs.core.drop.cljs$core$IFn$_invoke$arity$2(cljs.core.count(run), s))));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.partition_by.cljs$lang$maxFixedArity = 2;
cljs.core.frequencies = function cljs$core$frequencies(coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(counts, x) {
    return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(counts, x, cljs.core.get.cljs$core$IFn$_invoke$arity$3(counts, x, 0) + 1);
  }, cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.reductions = function cljs$core$reductions() {
  var G__10214 = arguments.length;
  switch(G__10214) {
    case 2:
      return cljs.core.reductions.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.reductions.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.reductions.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4420__auto__ = cljs.core.seq(coll);
    if (temp__4420__auto__) {
      var s = temp__4420__auto__;
      return cljs.core.reductions.cljs$core$IFn$_invoke$arity$3(f, cljs.core.first(s), cljs.core.rest(s));
    } else {
      return cljs.core._conj(cljs.core.List.EMPTY, function() {
        return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
      }());
    }
  }, null, null);
};
cljs.core.reductions.cljs$core$IFn$_invoke$arity$3 = function(f, init, coll) {
  return cljs.core.cons(init, new cljs.core.LazySeq(null, function() {
    var temp__4422__auto__ = cljs.core.seq(coll);
    if (temp__4422__auto__) {
      var s = temp__4422__auto__;
      return cljs.core.reductions.cljs$core$IFn$_invoke$arity$3(f, function() {
        var G__10215 = init;
        var G__10216 = cljs.core.first(s);
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__10215, G__10216) : f.call(null, G__10215, G__10216);
      }(), cljs.core.rest(s));
    } else {
      return null;
    }
  }, null, null));
};
cljs.core.reductions.cljs$lang$maxFixedArity = 3;
cljs.core.juxt = function cljs$core$juxt() {
  var G__10233 = arguments.length;
  switch(G__10233) {
    case 1:
      return cljs.core.juxt.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.juxt.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.juxt.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 3), 0);
      return cljs.core.juxt.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5360__auto__);
  }
};
cljs.core.juxt.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function() {
    var G__10277 = null;
    var G__10277__0 = function() {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
        return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
      }()], null);
    };
    var G__10277__1 = function(x) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
        var G__10234 = x;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__10234) : f.call(null, G__10234);
      }()], null);
    };
    var G__10277__2 = function(x, y) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
        var G__10235 = x;
        var G__10236 = y;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__10235, G__10236) : f.call(null, G__10235, G__10236);
      }()], null);
    };
    var G__10277__3 = function(x, y, z) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
        var G__10237 = x;
        var G__10238 = y;
        var G__10239 = z;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__10237, G__10238, G__10239) : f.call(null, G__10237, G__10238, G__10239);
      }()], null);
    };
    var G__10277__4 = function() {
      var G__10278__delegate = function(x, y, z, args) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, x, y, z, args)], null);
      };
      var G__10278 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__10279__i = 0, G__10279__a = new Array(arguments.length - 3);
          while (G__10279__i < G__10279__a.length) {
            G__10279__a[G__10279__i] = arguments[G__10279__i + 3];
            ++G__10279__i;
          }
          args = new cljs.core.IndexedSeq(G__10279__a, 0);
        }
        return G__10278__delegate.call(this, x, y, z, args);
      };
      G__10278.cljs$lang$maxFixedArity = 3;
      G__10278.cljs$lang$applyTo = function(arglist__10280) {
        var x = cljs.core.first(arglist__10280);
        arglist__10280 = cljs.core.next(arglist__10280);
        var y = cljs.core.first(arglist__10280);
        arglist__10280 = cljs.core.next(arglist__10280);
        var z = cljs.core.first(arglist__10280);
        var args = cljs.core.rest(arglist__10280);
        return G__10278__delegate(x, y, z, args);
      };
      G__10278.cljs$core$IFn$_invoke$arity$variadic = G__10278__delegate;
      return G__10278;
    }();
    G__10277 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__10277__0.call(this);
        case 1:
          return G__10277__1.call(this, x);
        case 2:
          return G__10277__2.call(this, x, y);
        case 3:
          return G__10277__3.call(this, x, y, z);
        default:
          var G__10281 = null;
          if (arguments.length > 3) {
            var G__10282__i = 0, G__10282__a = new Array(arguments.length - 3);
            while (G__10282__i < G__10282__a.length) {
              G__10282__a[G__10282__i] = arguments[G__10282__i + 3];
              ++G__10282__i;
            }
            G__10281 = new cljs.core.IndexedSeq(G__10282__a, 0);
          }
          return G__10277__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__10281);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__10277.cljs$lang$maxFixedArity = 3;
    G__10277.cljs$lang$applyTo = G__10277__4.cljs$lang$applyTo;
    G__10277.cljs$core$IFn$_invoke$arity$0 = G__10277__0;
    G__10277.cljs$core$IFn$_invoke$arity$1 = G__10277__1;
    G__10277.cljs$core$IFn$_invoke$arity$2 = G__10277__2;
    G__10277.cljs$core$IFn$_invoke$arity$3 = G__10277__3;
    G__10277.cljs$core$IFn$_invoke$arity$variadic = G__10277__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__10277;
  }();
};
cljs.core.juxt.cljs$core$IFn$_invoke$arity$2 = function(f, g) {
  return function() {
    var G__10283 = null;
    var G__10283__0 = function() {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
        return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
      }(), function() {
        return g.cljs$core$IFn$_invoke$arity$0 ? g.cljs$core$IFn$_invoke$arity$0() : g.call(null);
      }()], null);
    };
    var G__10283__1 = function(x) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
        var G__10240 = x;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__10240) : f.call(null, G__10240);
      }(), function() {
        var G__10241 = x;
        return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__10241) : g.call(null, G__10241);
      }()], null);
    };
    var G__10283__2 = function(x, y) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
        var G__10242 = x;
        var G__10243 = y;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__10242, G__10243) : f.call(null, G__10242, G__10243);
      }(), function() {
        var G__10244 = x;
        var G__10245 = y;
        return g.cljs$core$IFn$_invoke$arity$2 ? g.cljs$core$IFn$_invoke$arity$2(G__10244, G__10245) : g.call(null, G__10244, G__10245);
      }()], null);
    };
    var G__10283__3 = function(x, y, z) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
        var G__10246 = x;
        var G__10247 = y;
        var G__10248 = z;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__10246, G__10247, G__10248) : f.call(null, G__10246, G__10247, G__10248);
      }(), function() {
        var G__10249 = x;
        var G__10250 = y;
        var G__10251 = z;
        return g.cljs$core$IFn$_invoke$arity$3 ? g.cljs$core$IFn$_invoke$arity$3(G__10249, G__10250, G__10251) : g.call(null, G__10249, G__10250, G__10251);
      }()], null);
    };
    var G__10283__4 = function() {
      var G__10284__delegate = function(x, y, z, args) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, x, y, z, args), cljs.core.apply.cljs$core$IFn$_invoke$arity$5(g, x, y, z, args)], null);
      };
      var G__10284 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__10285__i = 0, G__10285__a = new Array(arguments.length - 3);
          while (G__10285__i < G__10285__a.length) {
            G__10285__a[G__10285__i] = arguments[G__10285__i + 3];
            ++G__10285__i;
          }
          args = new cljs.core.IndexedSeq(G__10285__a, 0);
        }
        return G__10284__delegate.call(this, x, y, z, args);
      };
      G__10284.cljs$lang$maxFixedArity = 3;
      G__10284.cljs$lang$applyTo = function(arglist__10286) {
        var x = cljs.core.first(arglist__10286);
        arglist__10286 = cljs.core.next(arglist__10286);
        var y = cljs.core.first(arglist__10286);
        arglist__10286 = cljs.core.next(arglist__10286);
        var z = cljs.core.first(arglist__10286);
        var args = cljs.core.rest(arglist__10286);
        return G__10284__delegate(x, y, z, args);
      };
      G__10284.cljs$core$IFn$_invoke$arity$variadic = G__10284__delegate;
      return G__10284;
    }();
    G__10283 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__10283__0.call(this);
        case 1:
          return G__10283__1.call(this, x);
        case 2:
          return G__10283__2.call(this, x, y);
        case 3:
          return G__10283__3.call(this, x, y, z);
        default:
          var G__10287 = null;
          if (arguments.length > 3) {
            var G__10288__i = 0, G__10288__a = new Array(arguments.length - 3);
            while (G__10288__i < G__10288__a.length) {
              G__10288__a[G__10288__i] = arguments[G__10288__i + 3];
              ++G__10288__i;
            }
            G__10287 = new cljs.core.IndexedSeq(G__10288__a, 0);
          }
          return G__10283__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__10287);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__10283.cljs$lang$maxFixedArity = 3;
    G__10283.cljs$lang$applyTo = G__10283__4.cljs$lang$applyTo;
    G__10283.cljs$core$IFn$_invoke$arity$0 = G__10283__0;
    G__10283.cljs$core$IFn$_invoke$arity$1 = G__10283__1;
    G__10283.cljs$core$IFn$_invoke$arity$2 = G__10283__2;
    G__10283.cljs$core$IFn$_invoke$arity$3 = G__10283__3;
    G__10283.cljs$core$IFn$_invoke$arity$variadic = G__10283__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__10283;
  }();
};
cljs.core.juxt.cljs$core$IFn$_invoke$arity$3 = function(f, g, h) {
  return function() {
    var G__10289 = null;
    var G__10289__0 = function() {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
        return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
      }(), function() {
        return g.cljs$core$IFn$_invoke$arity$0 ? g.cljs$core$IFn$_invoke$arity$0() : g.call(null);
      }(), function() {
        return h.cljs$core$IFn$_invoke$arity$0 ? h.cljs$core$IFn$_invoke$arity$0() : h.call(null);
      }()], null);
    };
    var G__10289__1 = function(x) {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
        var G__10252 = x;
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__10252) : f.call(null, G__10252);
      }(), function() {
        var G__10253 = x;
        return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__10253) : g.call(null, G__10253);
      }(), function() {
        var G__10254 = x;
        return h.cljs$core$IFn$_invoke$arity$1 ? h.cljs$core$IFn$_invoke$arity$1(G__10254) : h.call(null, G__10254);
      }()], null);
    };
    var G__10289__2 = function(x, y) {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
        var G__10255 = x;
        var G__10256 = y;
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__10255, G__10256) : f.call(null, G__10255, G__10256);
      }(), function() {
        var G__10257 = x;
        var G__10258 = y;
        return g.cljs$core$IFn$_invoke$arity$2 ? g.cljs$core$IFn$_invoke$arity$2(G__10257, G__10258) : g.call(null, G__10257, G__10258);
      }(), function() {
        var G__10259 = x;
        var G__10260 = y;
        return h.cljs$core$IFn$_invoke$arity$2 ? h.cljs$core$IFn$_invoke$arity$2(G__10259, G__10260) : h.call(null, G__10259, G__10260);
      }()], null);
    };
    var G__10289__3 = function(x, y, z) {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
        var G__10261 = x;
        var G__10262 = y;
        var G__10263 = z;
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__10261, G__10262, G__10263) : f.call(null, G__10261, G__10262, G__10263);
      }(), function() {
        var G__10264 = x;
        var G__10265 = y;
        var G__10266 = z;
        return g.cljs$core$IFn$_invoke$arity$3 ? g.cljs$core$IFn$_invoke$arity$3(G__10264, G__10265, G__10266) : g.call(null, G__10264, G__10265, G__10266);
      }(), function() {
        var G__10267 = x;
        var G__10268 = y;
        var G__10269 = z;
        return h.cljs$core$IFn$_invoke$arity$3 ? h.cljs$core$IFn$_invoke$arity$3(G__10267, G__10268, G__10269) : h.call(null, G__10267, G__10268, G__10269);
      }()], null);
    };
    var G__10289__4 = function() {
      var G__10290__delegate = function(x, y, z, args) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, x, y, z, args), cljs.core.apply.cljs$core$IFn$_invoke$arity$5(g, x, y, z, args), cljs.core.apply.cljs$core$IFn$_invoke$arity$5(h, x, y, z, args)], null);
      };
      var G__10290 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__10291__i = 0, G__10291__a = new Array(arguments.length - 3);
          while (G__10291__i < G__10291__a.length) {
            G__10291__a[G__10291__i] = arguments[G__10291__i + 3];
            ++G__10291__i;
          }
          args = new cljs.core.IndexedSeq(G__10291__a, 0);
        }
        return G__10290__delegate.call(this, x, y, z, args);
      };
      G__10290.cljs$lang$maxFixedArity = 3;
      G__10290.cljs$lang$applyTo = function(arglist__10292) {
        var x = cljs.core.first(arglist__10292);
        arglist__10292 = cljs.core.next(arglist__10292);
        var y = cljs.core.first(arglist__10292);
        arglist__10292 = cljs.core.next(arglist__10292);
        var z = cljs.core.first(arglist__10292);
        var args = cljs.core.rest(arglist__10292);
        return G__10290__delegate(x, y, z, args);
      };
      G__10290.cljs$core$IFn$_invoke$arity$variadic = G__10290__delegate;
      return G__10290;
    }();
    G__10289 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__10289__0.call(this);
        case 1:
          return G__10289__1.call(this, x);
        case 2:
          return G__10289__2.call(this, x, y);
        case 3:
          return G__10289__3.call(this, x, y, z);
        default:
          var G__10293 = null;
          if (arguments.length > 3) {
            var G__10294__i = 0, G__10294__a = new Array(arguments.length - 3);
            while (G__10294__i < G__10294__a.length) {
              G__10294__a[G__10294__i] = arguments[G__10294__i + 3];
              ++G__10294__i;
            }
            G__10293 = new cljs.core.IndexedSeq(G__10294__a, 0);
          }
          return G__10289__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__10293);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__10289.cljs$lang$maxFixedArity = 3;
    G__10289.cljs$lang$applyTo = G__10289__4.cljs$lang$applyTo;
    G__10289.cljs$core$IFn$_invoke$arity$0 = G__10289__0;
    G__10289.cljs$core$IFn$_invoke$arity$1 = G__10289__1;
    G__10289.cljs$core$IFn$_invoke$arity$2 = G__10289__2;
    G__10289.cljs$core$IFn$_invoke$arity$3 = G__10289__3;
    G__10289.cljs$core$IFn$_invoke$arity$variadic = G__10289__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__10289;
  }();
};
cljs.core.juxt.cljs$core$IFn$_invoke$arity$variadic = function(f, g, h, fs) {
  var fs__$1 = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(f, g, h, fs);
  return function(fs__$1) {
    return function() {
      var G__10295 = null;
      var G__10295__0 = function() {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
          return function(p1__10218_SHARP_, p2__10219_SHARP_) {
            return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__10218_SHARP_, function() {
              return p2__10219_SHARP_.cljs$core$IFn$_invoke$arity$0 ? p2__10219_SHARP_.cljs$core$IFn$_invoke$arity$0() : p2__10219_SHARP_.call(null);
            }());
          };
        }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
      };
      var G__10295__1 = function(x) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
          return function(p1__10220_SHARP_, p2__10221_SHARP_) {
            return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__10220_SHARP_, function() {
              var G__10270 = x;
              return p2__10221_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p2__10221_SHARP_.cljs$core$IFn$_invoke$arity$1(G__10270) : p2__10221_SHARP_.call(null, G__10270);
            }());
          };
        }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
      };
      var G__10295__2 = function(x, y) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
          return function(p1__10222_SHARP_, p2__10223_SHARP_) {
            return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__10222_SHARP_, function() {
              var G__10271 = x;
              var G__10272 = y;
              return p2__10223_SHARP_.cljs$core$IFn$_invoke$arity$2 ? p2__10223_SHARP_.cljs$core$IFn$_invoke$arity$2(G__10271, G__10272) : p2__10223_SHARP_.call(null, G__10271, G__10272);
            }());
          };
        }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
      };
      var G__10295__3 = function(x, y, z) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
          return function(p1__10224_SHARP_, p2__10225_SHARP_) {
            return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__10224_SHARP_, function() {
              var G__10273 = x;
              var G__10274 = y;
              var G__10275 = z;
              return p2__10225_SHARP_.cljs$core$IFn$_invoke$arity$3 ? p2__10225_SHARP_.cljs$core$IFn$_invoke$arity$3(G__10273, G__10274, G__10275) : p2__10225_SHARP_.call(null, G__10273, G__10274, G__10275);
            }());
          };
        }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
      };
      var G__10295__4 = function() {
        var G__10296__delegate = function(x, y, z, args) {
          return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
            return function(p1__10226_SHARP_, p2__10227_SHARP_) {
              return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__10226_SHARP_, cljs.core.apply.cljs$core$IFn$_invoke$arity$5(p2__10227_SHARP_, x, y, z, args));
            };
          }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
        };
        var G__10296 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__10297__i = 0, G__10297__a = new Array(arguments.length - 3);
            while (G__10297__i < G__10297__a.length) {
              G__10297__a[G__10297__i] = arguments[G__10297__i + 3];
              ++G__10297__i;
            }
            args = new cljs.core.IndexedSeq(G__10297__a, 0);
          }
          return G__10296__delegate.call(this, x, y, z, args);
        };
        G__10296.cljs$lang$maxFixedArity = 3;
        G__10296.cljs$lang$applyTo = function(arglist__10298) {
          var x = cljs.core.first(arglist__10298);
          arglist__10298 = cljs.core.next(arglist__10298);
          var y = cljs.core.first(arglist__10298);
          arglist__10298 = cljs.core.next(arglist__10298);
          var z = cljs.core.first(arglist__10298);
          var args = cljs.core.rest(arglist__10298);
          return G__10296__delegate(x, y, z, args);
        };
        G__10296.cljs$core$IFn$_invoke$arity$variadic = G__10296__delegate;
        return G__10296;
      }();
      G__10295 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__10295__0.call(this);
          case 1:
            return G__10295__1.call(this, x);
          case 2:
            return G__10295__2.call(this, x, y);
          case 3:
            return G__10295__3.call(this, x, y, z);
          default:
            var G__10299 = null;
            if (arguments.length > 3) {
              var G__10300__i = 0, G__10300__a = new Array(arguments.length - 3);
              while (G__10300__i < G__10300__a.length) {
                G__10300__a[G__10300__i] = arguments[G__10300__i + 3];
                ++G__10300__i;
              }
              G__10299 = new cljs.core.IndexedSeq(G__10300__a, 0);
            }
            return G__10295__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__10299);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__10295.cljs$lang$maxFixedArity = 3;
      G__10295.cljs$lang$applyTo = G__10295__4.cljs$lang$applyTo;
      G__10295.cljs$core$IFn$_invoke$arity$0 = G__10295__0;
      G__10295.cljs$core$IFn$_invoke$arity$1 = G__10295__1;
      G__10295.cljs$core$IFn$_invoke$arity$2 = G__10295__2;
      G__10295.cljs$core$IFn$_invoke$arity$3 = G__10295__3;
      G__10295.cljs$core$IFn$_invoke$arity$variadic = G__10295__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__10295;
    }();
  }(fs__$1);
};
cljs.core.juxt.cljs$lang$applyTo = function(seq10228) {
  var G__10229 = cljs.core.first(seq10228);
  var seq10228__$1 = cljs.core.next(seq10228);
  var G__10230 = cljs.core.first(seq10228__$1);
  var seq10228__$2 = cljs.core.next(seq10228__$1);
  var G__10231 = cljs.core.first(seq10228__$2);
  var seq10228__$3 = cljs.core.next(seq10228__$2);
  return cljs.core.juxt.cljs$core$IFn$_invoke$arity$variadic(G__10229, G__10230, G__10231, seq10228__$3);
};
cljs.core.juxt.cljs$lang$maxFixedArity = 3;
cljs.core.dorun = function cljs$core$dorun() {
  var G__10302 = arguments.length;
  switch(G__10302) {
    case 1:
      return cljs.core.dorun.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.dorun.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.dorun.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  while (true) {
    if (cljs.core.seq(coll)) {
      var G__10304 = cljs.core.next(coll);
      coll = G__10304;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.dorun.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  while (true) {
    if (cljs.core.seq(coll) && n > 0) {
      var G__10305 = n - 1;
      var G__10306 = cljs.core.next(coll);
      n = G__10305;
      coll = G__10306;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.dorun.cljs$lang$maxFixedArity = 2;
cljs.core.doall = function cljs$core$doall() {
  var G__10308 = arguments.length;
  switch(G__10308) {
    case 1:
      return cljs.core.doall.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.doall.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.doall.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  cljs.core.dorun.cljs$core$IFn$_invoke$arity$1(coll);
  return coll;
};
cljs.core.doall.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  cljs.core.dorun.cljs$core$IFn$_invoke$arity$2(n, coll);
  return coll;
};
cljs.core.doall.cljs$lang$maxFixedArity = 2;
cljs.core.regexp_QMARK_ = function cljs$core$regexp_QMARK_(x) {
  return x instanceof RegExp;
};
cljs.core.re_matches = function cljs$core$re_matches(re, s) {
  if (typeof s === "string") {
    var matches = re.exec(s);
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.first(matches), s)) {
      if (cljs.core.count(matches) === 1) {
        return cljs.core.first(matches);
      } else {
        return cljs.core.vec(matches);
      }
    } else {
      return null;
    }
  } else {
    throw new TypeError("re-matches must match against a string.");
  }
};
cljs.core.re_find = function cljs$core$re_find(re, s) {
  if (typeof s === "string") {
    var matches = re.exec(s);
    if (matches == null) {
      return null;
    } else {
      if (cljs.core.count(matches) === 1) {
        return cljs.core.first(matches);
      } else {
        return cljs.core.vec(matches);
      }
    }
  } else {
    throw new TypeError("re-find must match against a string.");
  }
};
cljs.core.re_seq = function cljs$core$re_seq(re, s) {
  var match_data = cljs.core.re_find(re, s);
  var match_idx = s.search(re);
  var match_str = cljs.core.coll_QMARK_(match_data) ? cljs.core.first(match_data) : match_data;
  var post_match = cljs.core.subs.cljs$core$IFn$_invoke$arity$2(s, match_idx + cljs.core.count(match_str));
  if (cljs.core.truth_(match_data)) {
    return new cljs.core.LazySeq(null, function(match_data, match_idx, match_str, post_match) {
      return function() {
        return cljs.core.cons(match_data, cljs.core.seq(post_match) ? cljs$core$re_seq(re, post_match) : null);
      };
    }(match_data, match_idx, match_str, post_match), null, null);
  } else {
    return null;
  }
};
cljs.core.re_pattern = function cljs$core$re_pattern(s) {
  if (s instanceof RegExp) {
    return s;
  } else {
    var vec__10313 = cljs.core.re_find(/^\(\?([idmsux]*)\)/, s);
    var prefix = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10313, 0, null);
    var flags = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10313, 1, null);
    var pattern = cljs.core.subs.cljs$core$IFn$_invoke$arity$2(s, cljs.core.count(prefix));
    return new RegExp(pattern, function() {
      var or__4309__auto__ = flags;
      if (cljs.core.truth_(or__4309__auto__)) {
        return or__4309__auto__;
      } else {
        return "";
      }
    }());
  }
};
cljs.core.pr_sequential_writer = function cljs$core$pr_sequential_writer(writer, print_one, begin, sep, end, opts, coll) {
  var _STAR_print_level_STAR_10321 = cljs.core._STAR_print_level_STAR_;
  cljs.core._STAR_print_level_STAR_ = cljs.core._STAR_print_level_STAR_ == null ? null : cljs.core._STAR_print_level_STAR_ - 1;
  try {
    if (!(cljs.core._STAR_print_level_STAR_ == null) && cljs.core._STAR_print_level_STAR_ < 0) {
      return cljs.core._write(writer, "#");
    } else {
      cljs.core._write(writer, begin);
      if ((new cljs.core.Keyword(null, "print-length", "print-length", 1931866356)).cljs$core$IFn$_invoke$arity$1(opts) === 0) {
        if (cljs.core.seq(coll)) {
          cljs.core._write(writer, function() {
            var or__4309__auto__ = (new cljs.core.Keyword(null, "more-marker", "more-marker", -14717935)).cljs$core$IFn$_invoke$arity$1(opts);
            if (cljs.core.truth_(or__4309__auto__)) {
              return or__4309__auto__;
            } else {
              return "...";
            }
          }());
        } else {
        }
      } else {
        if (cljs.core.seq(coll)) {
          var G__10322_10328 = cljs.core.first(coll);
          var G__10323_10329 = writer;
          var G__10324_10330 = opts;
          print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__10322_10328, G__10323_10329, G__10324_10330) : print_one.call(null, G__10322_10328, G__10323_10329, G__10324_10330);
        } else {
        }
        var coll_10331__$1 = cljs.core.next(coll);
        var n_10332 = (new cljs.core.Keyword(null, "print-length", "print-length", 1931866356)).cljs$core$IFn$_invoke$arity$1(opts) - 1;
        while (true) {
          if (coll_10331__$1 && (n_10332 == null || !(n_10332 === 0))) {
            cljs.core._write(writer, sep);
            var G__10325_10333 = cljs.core.first(coll_10331__$1);
            var G__10326_10334 = writer;
            var G__10327_10335 = opts;
            print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__10325_10333, G__10326_10334, G__10327_10335) : print_one.call(null, G__10325_10333, G__10326_10334, G__10327_10335);
            var G__10336 = cljs.core.next(coll_10331__$1);
            var G__10337 = n_10332 - 1;
            coll_10331__$1 = G__10336;
            n_10332 = G__10337;
            continue;
          } else {
            if (cljs.core.seq(coll_10331__$1) && n_10332 === 0) {
              cljs.core._write(writer, sep);
              cljs.core._write(writer, function() {
                var or__4309__auto__ = (new cljs.core.Keyword(null, "more-marker", "more-marker", -14717935)).cljs$core$IFn$_invoke$arity$1(opts);
                if (cljs.core.truth_(or__4309__auto__)) {
                  return or__4309__auto__;
                } else {
                  return "...";
                }
              }());
            } else {
            }
          }
          break;
        }
      }
      return cljs.core._write(writer, end);
    }
  } finally {
    cljs.core._STAR_print_level_STAR_ = _STAR_print_level_STAR_10321;
  }
};
cljs.core.write_all = function cljs$core$write_all() {
  var argseq__5349__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5349__auto__);
};
cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic = function(writer, ss) {
  var seq__10340 = cljs.core.seq(ss);
  var chunk__10341 = null;
  var count__10342 = 0;
  var i__10343 = 0;
  while (true) {
    if (i__10343 < count__10342) {
      var s = chunk__10341.cljs$core$IIndexed$_nth$arity$2(null, i__10343);
      cljs.core._write(writer, s);
      var G__10344 = seq__10340;
      var G__10345 = chunk__10341;
      var G__10346 = count__10342;
      var G__10347 = i__10343 + 1;
      seq__10340 = G__10344;
      chunk__10341 = G__10345;
      count__10342 = G__10346;
      i__10343 = G__10347;
      continue;
    } else {
      var temp__4422__auto__ = cljs.core.seq(seq__10340);
      if (temp__4422__auto__) {
        var seq__10340__$1 = temp__4422__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__10340__$1)) {
          var c__5094__auto__ = cljs.core.chunk_first(seq__10340__$1);
          var G__10348 = cljs.core.chunk_rest(seq__10340__$1);
          var G__10349 = c__5094__auto__;
          var G__10350 = cljs.core.count(c__5094__auto__);
          var G__10351 = 0;
          seq__10340 = G__10348;
          chunk__10341 = G__10349;
          count__10342 = G__10350;
          i__10343 = G__10351;
          continue;
        } else {
          var s = cljs.core.first(seq__10340__$1);
          cljs.core._write(writer, s);
          var G__10352 = cljs.core.next(seq__10340__$1);
          var G__10353 = null;
          var G__10354 = 0;
          var G__10355 = 0;
          seq__10340 = G__10352;
          chunk__10341 = G__10353;
          count__10342 = G__10354;
          i__10343 = G__10355;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.write_all.cljs$lang$maxFixedArity = 1;
cljs.core.write_all.cljs$lang$applyTo = function(seq10338) {
  var G__10339 = cljs.core.first(seq10338);
  var seq10338__$1 = cljs.core.next(seq10338);
  return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(G__10339, seq10338__$1);
};
cljs.core.string_print = function cljs$core$string_print(x) {
  cljs.core._STAR_print_fn_STAR_.cljs$core$IFn$_invoke$arity$1 ? cljs.core._STAR_print_fn_STAR_.cljs$core$IFn$_invoke$arity$1(x) : cljs.core._STAR_print_fn_STAR_.call(null, x);
  return null;
};
cljs.core.flush = function cljs$core$flush() {
  return null;
};
cljs.core.char_escapes = function() {
  var obj10357 = {'"':'\\"', "\\":"\\\\", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t"};
  return obj10357;
}();
cljs.core.quote_string = function cljs$core$quote_string(s) {
  return [cljs.core.str('"'), cljs.core.str(s.replace(function() {
    var G__10360 = '[\\\\"\b\f\n\r\t]';
    var G__10361 = "g";
    return RegExp(G__10360, G__10361);
  }(), function(match) {
    return cljs.core.char_escapes[match];
  })), cljs.core.str('"')].join("");
};
cljs.core.pr_writer_impl = function cljs$core$pr_writer_impl(obj, writer, opts) {
  if (obj == null) {
    return cljs.core._write(writer, "nil");
  } else {
    if (void 0 === obj) {
      return cljs.core._write(writer, "#\x3cundefined\x3e");
    } else {
      if (cljs.core.truth_(function() {
        var and__4297__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(opts, new cljs.core.Keyword(null, "meta", "meta", 1499536964));
        if (cljs.core.truth_(and__4297__auto__)) {
          var and__4297__auto____$1 = function() {
            var G__10375 = obj;
            if (G__10375) {
              var bit__4983__auto__ = G__10375.cljs$lang$protocol_mask$partition0$ & 131072;
              if (bit__4983__auto__ || G__10375.cljs$core$IMeta$) {
                return true;
              } else {
                if (!G__10375.cljs$lang$protocol_mask$partition0$) {
                  return cljs.core.native_satisfies_QMARK_(cljs.core.IMeta, G__10375);
                } else {
                  return false;
                }
              }
            } else {
              return cljs.core.native_satisfies_QMARK_(cljs.core.IMeta, G__10375);
            }
          }();
          if (and__4297__auto____$1) {
            return cljs.core.meta(obj);
          } else {
            return and__4297__auto____$1;
          }
        } else {
          return and__4297__auto__;
        }
      }())) {
        cljs.core._write(writer, "^");
        var G__10376_10386 = cljs.core.meta(obj);
        var G__10377_10387 = writer;
        var G__10378_10388 = opts;
        cljs.core.pr_writer.cljs$core$IFn$_invoke$arity$3 ? cljs.core.pr_writer.cljs$core$IFn$_invoke$arity$3(G__10376_10386, G__10377_10387, G__10378_10388) : cljs.core.pr_writer.call(null, G__10376_10386, G__10377_10387, G__10378_10388);
        cljs.core._write(writer, " ");
      } else {
      }
      if (obj == null) {
        return cljs.core._write(writer, "nil");
      } else {
        if (obj.cljs$lang$type) {
          return obj.cljs$lang$ctorPrWriter(obj, writer, opts);
        } else {
          if (function() {
            var G__10379 = obj;
            if (G__10379) {
              var bit__4976__auto__ = G__10379.cljs$lang$protocol_mask$partition0$ & 2147483648;
              if (bit__4976__auto__ || G__10379.cljs$core$IPrintWithWriter$) {
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          }()) {
            return obj.cljs$core$IPrintWithWriter$_pr_writer$arity$3(null, writer, opts);
          } else {
            if (cljs.core.type(obj) === Boolean || typeof obj === "number") {
              return cljs.core._write(writer, [cljs.core.str(obj)].join(""));
            } else {
              if (cljs.core.object_QMARK_(obj)) {
                cljs.core._write(writer, "#js ");
                var G__10380 = cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(k) {
                  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(k), obj[k]], null);
                }, cljs.core.js_keys(obj));
                var G__10381 = cljs.core.pr_writer;
                var G__10382 = writer;
                var G__10383 = opts;
                return cljs.core.print_map.cljs$core$IFn$_invoke$arity$4 ? cljs.core.print_map.cljs$core$IFn$_invoke$arity$4(G__10380, G__10381, G__10382, G__10383) : cljs.core.print_map.call(null, G__10380, G__10381, G__10382, G__10383);
              } else {
                if (cljs.core.array_QMARK_(obj)) {
                  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#js [", " ", "]", opts, obj);
                } else {
                  if (cljs.core.truth_(function() {
                    var G__10384 = obj;
                    return goog.isString(G__10384);
                  }())) {
                    if (cljs.core.truth_((new cljs.core.Keyword(null, "readably", "readably", 1129599760)).cljs$core$IFn$_invoke$arity$1(opts))) {
                      return cljs.core._write(writer, cljs.core.quote_string(obj));
                    } else {
                      return cljs.core._write(writer, obj);
                    }
                  } else {
                    if (cljs.core.fn_QMARK_(obj)) {
                      return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(["#\x3c", [cljs.core.str(obj)].join(""), "\x3e"], 0));
                    } else {
                      if (obj instanceof Date) {
                        var normalize = function(n, len) {
                          var ns = [cljs.core.str(n)].join("");
                          while (true) {
                            if (cljs.core.count(ns) < len) {
                              var G__10389 = [cljs.core.str("0"), cljs.core.str(ns)].join("");
                              ns = G__10389;
                              continue;
                            } else {
                              return ns;
                            }
                            break;
                          }
                        };
                        return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(['#inst "', [cljs.core.str(obj.getUTCFullYear())].join(""), "-", normalize(obj.getUTCMonth() + 1, 2), "-", normalize(obj.getUTCDate(), 2), "T", normalize(obj.getUTCHours(), 2), ":", normalize(obj.getUTCMinutes(), 2), ":", normalize(obj.getUTCSeconds(), 2), ".", normalize(obj.getUTCMilliseconds(), 3), "-", '00:00"'], 0));
                      } else {
                        if (cljs.core.truth_(cljs.core.regexp_QMARK_(obj))) {
                          return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(['#"', obj.source, '"'], 0));
                        } else {
                          if (function() {
                            var G__10385 = obj;
                            if (G__10385) {
                              var bit__4983__auto__ = G__10385.cljs$lang$protocol_mask$partition0$ & 2147483648;
                              if (bit__4983__auto__ || G__10385.cljs$core$IPrintWithWriter$) {
                                return true;
                              } else {
                                if (!G__10385.cljs$lang$protocol_mask$partition0$) {
                                  return cljs.core.native_satisfies_QMARK_(cljs.core.IPrintWithWriter, G__10385);
                                } else {
                                  return false;
                                }
                              }
                            } else {
                              return cljs.core.native_satisfies_QMARK_(cljs.core.IPrintWithWriter, G__10385);
                            }
                          }()) {
                            return cljs.core._pr_writer(obj, writer, opts);
                          } else {
                            return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(["#\x3c", [cljs.core.str(obj)].join(""), "\x3e"], 0));
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.pr_writer = function cljs$core$pr_writer(obj, writer, opts) {
  var temp__4420__auto__ = (new cljs.core.Keyword(null, "alt-impl", "alt-impl", 670969595)).cljs$core$IFn$_invoke$arity$1(opts);
  if (cljs.core.truth_(temp__4420__auto__)) {
    var alt_impl = temp__4420__auto__;
    var G__10393 = obj;
    var G__10394 = writer;
    var G__10395 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(opts, new cljs.core.Keyword(null, "fallback-impl", "fallback-impl", -1501286995), cljs.core.pr_writer_impl);
    return alt_impl.cljs$core$IFn$_invoke$arity$3 ? alt_impl.cljs$core$IFn$_invoke$arity$3(G__10393, G__10394, G__10395) : alt_impl.call(null, G__10393, G__10394, G__10395);
  } else {
    return cljs.core.pr_writer_impl(obj, writer, opts);
  }
};
cljs.core.pr_seq_writer = function cljs$core$pr_seq_writer(objs, writer, opts) {
  cljs.core.pr_writer(cljs.core.first(objs), writer, opts);
  var seq__10400 = cljs.core.seq(cljs.core.next(objs));
  var chunk__10401 = null;
  var count__10402 = 0;
  var i__10403 = 0;
  while (true) {
    if (i__10403 < count__10402) {
      var obj = chunk__10401.cljs$core$IIndexed$_nth$arity$2(null, i__10403);
      cljs.core._write(writer, " ");
      cljs.core.pr_writer(obj, writer, opts);
      var G__10404 = seq__10400;
      var G__10405 = chunk__10401;
      var G__10406 = count__10402;
      var G__10407 = i__10403 + 1;
      seq__10400 = G__10404;
      chunk__10401 = G__10405;
      count__10402 = G__10406;
      i__10403 = G__10407;
      continue;
    } else {
      var temp__4422__auto__ = cljs.core.seq(seq__10400);
      if (temp__4422__auto__) {
        var seq__10400__$1 = temp__4422__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__10400__$1)) {
          var c__5094__auto__ = cljs.core.chunk_first(seq__10400__$1);
          var G__10408 = cljs.core.chunk_rest(seq__10400__$1);
          var G__10409 = c__5094__auto__;
          var G__10410 = cljs.core.count(c__5094__auto__);
          var G__10411 = 0;
          seq__10400 = G__10408;
          chunk__10401 = G__10409;
          count__10402 = G__10410;
          i__10403 = G__10411;
          continue;
        } else {
          var obj = cljs.core.first(seq__10400__$1);
          cljs.core._write(writer, " ");
          cljs.core.pr_writer(obj, writer, opts);
          var G__10412 = cljs.core.next(seq__10400__$1);
          var G__10413 = null;
          var G__10414 = 0;
          var G__10415 = 0;
          seq__10400 = G__10412;
          chunk__10401 = G__10413;
          count__10402 = G__10414;
          i__10403 = G__10415;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.pr_sb_with_opts = function cljs$core$pr_sb_with_opts(objs, opts) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core.pr_seq_writer(objs, writer, opts);
  writer.cljs$core$IWriter$_flush$arity$1(null);
  return sb;
};
cljs.core.pr_str_with_opts = function cljs$core$pr_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_(objs)) {
    return "";
  } else {
    return [cljs.core.str(cljs.core.pr_sb_with_opts(objs, opts))].join("");
  }
};
cljs.core.prn_str_with_opts = function cljs$core$prn_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_(objs)) {
    return "\n";
  } else {
    var sb = cljs.core.pr_sb_with_opts(objs, opts);
    sb.append("\n");
    return [cljs.core.str(sb)].join("");
  }
};
cljs.core.pr_with_opts = function cljs$core$pr_with_opts(objs, opts) {
  return cljs.core.string_print(cljs.core.pr_str_with_opts(objs, opts));
};
cljs.core.newline = function cljs$core$newline() {
  var G__10417 = arguments.length;
  switch(G__10417) {
    case 0:
      return cljs.core.newline.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.newline.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.newline.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.newline.cljs$core$IFn$_invoke$arity$1(null);
};
cljs.core.newline.cljs$core$IFn$_invoke$arity$1 = function(opts) {
  cljs.core.string_print("\n");
  if (cljs.core.truth_(cljs.core.get.cljs$core$IFn$_invoke$arity$2(opts, new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", -151457939)))) {
    return cljs.core.flush();
  } else {
    return null;
  }
};
cljs.core.newline.cljs$lang$maxFixedArity = 1;
cljs.core.pr_str = function cljs$core$pr_str() {
  var argseq__5349__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(argseq__5349__auto__);
};
cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  return cljs.core.pr_str_with_opts(objs, cljs.core.pr_opts());
};
cljs.core.pr_str.cljs$lang$maxFixedArity = 0;
cljs.core.pr_str.cljs$lang$applyTo = function(seq10419) {
  return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq10419));
};
cljs.core.prn_str = function cljs$core$prn_str() {
  var argseq__5349__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.prn_str.cljs$core$IFn$_invoke$arity$variadic(argseq__5349__auto__);
};
cljs.core.prn_str.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  return cljs.core.prn_str_with_opts(objs, cljs.core.pr_opts());
};
cljs.core.prn_str.cljs$lang$maxFixedArity = 0;
cljs.core.prn_str.cljs$lang$applyTo = function(seq10420) {
  return cljs.core.prn_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq10420));
};
cljs.core.pr = function cljs$core$pr() {
  var argseq__5349__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.pr.cljs$core$IFn$_invoke$arity$variadic(argseq__5349__auto__);
};
cljs.core.pr.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  return cljs.core.pr_with_opts(objs, cljs.core.pr_opts());
};
cljs.core.pr.cljs$lang$maxFixedArity = 0;
cljs.core.pr.cljs$lang$applyTo = function(seq10421) {
  return cljs.core.pr.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq10421));
};
cljs.core.print = function() {
  var cljs$core$cljs_core_print__delegate = function(objs) {
    return cljs.core.pr_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  };
  var cljs$core$cljs_core_print = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__10422__i = 0, G__10422__a = new Array(arguments.length - 0);
      while (G__10422__i < G__10422__a.length) {
        G__10422__a[G__10422__i] = arguments[G__10422__i + 0];
        ++G__10422__i;
      }
      objs = new cljs.core.IndexedSeq(G__10422__a, 0);
    }
    return cljs$core$cljs_core_print__delegate.call(this, objs);
  };
  cljs$core$cljs_core_print.cljs$lang$maxFixedArity = 0;
  cljs$core$cljs_core_print.cljs$lang$applyTo = function(arglist__10423) {
    var objs = cljs.core.seq(arglist__10423);
    return cljs$core$cljs_core_print__delegate(objs);
  };
  cljs$core$cljs_core_print.cljs$core$IFn$_invoke$arity$variadic = cljs$core$cljs_core_print__delegate;
  return cljs$core$cljs_core_print;
}();
cljs.core.print_str = function cljs$core$print_str() {
  var argseq__5349__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.print_str.cljs$core$IFn$_invoke$arity$variadic(argseq__5349__auto__);
};
cljs.core.print_str.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  return cljs.core.pr_str_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
};
cljs.core.print_str.cljs$lang$maxFixedArity = 0;
cljs.core.print_str.cljs$lang$applyTo = function(seq10424) {
  return cljs.core.print_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq10424));
};
cljs.core.println = function cljs$core$println() {
  var argseq__5349__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(argseq__5349__auto__);
};
cljs.core.println.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  cljs.core.pr_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
    return cljs.core.newline.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_opts());
  } else {
    return null;
  }
};
cljs.core.println.cljs$lang$maxFixedArity = 0;
cljs.core.println.cljs$lang$applyTo = function(seq10425) {
  return cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq10425));
};
cljs.core.println_str = function cljs$core$println_str() {
  var argseq__5349__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.println_str.cljs$core$IFn$_invoke$arity$variadic(argseq__5349__auto__);
};
cljs.core.println_str.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  return cljs.core.prn_str_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
};
cljs.core.println_str.cljs$lang$maxFixedArity = 0;
cljs.core.println_str.cljs$lang$applyTo = function(seq10426) {
  return cljs.core.println_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq10426));
};
cljs.core.prn = function cljs$core$prn() {
  var argseq__5349__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic(argseq__5349__auto__);
};
cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  cljs.core.pr_with_opts(objs, cljs.core.pr_opts());
  if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
    return cljs.core.newline.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_opts());
  } else {
    return null;
  }
};
cljs.core.prn.cljs$lang$maxFixedArity = 0;
cljs.core.prn.cljs$lang$applyTo = function(seq10427) {
  return cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq10427));
};
cljs.core.print_map = function cljs$core$print_map(m, print_one, writer, opts) {
  return cljs.core.pr_sequential_writer(writer, function(e, w, opts__$1) {
    var G__10434_10440 = cljs.core.key(e);
    var G__10435_10441 = w;
    var G__10436_10442 = opts__$1;
    print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__10434_10440, G__10435_10441, G__10436_10442) : print_one.call(null, G__10434_10440, G__10435_10441, G__10436_10442);
    cljs.core._write(w, " ");
    var G__10437 = cljs.core.val(e);
    var G__10438 = w;
    var G__10439 = opts__$1;
    return print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__10437, G__10438, G__10439) : print_one.call(null, G__10437, G__10438, G__10439);
  }, "{", ", ", "}", opts, cljs.core.seq(m));
};
cljs.core.Volatile.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Volatile.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var a__$1 = this;
  cljs.core._write(writer, "#\x3cVolatile: ");
  cljs.core.pr_writer(a__$1.state, writer, opts);
  return cljs.core._write(writer, "\x3e");
};
cljs.core.Var.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Var.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var a__$1 = this;
  cljs.core._write(writer, "#'");
  return cljs.core.pr_writer(a__$1.sym, writer, opts);
};
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ES6IteratorSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var a__$1 = this;
  cljs.core._write(writer, "#\x3cAtom: ");
  cljs.core.pr_writer(a__$1.state, writer, opts);
  return cljs.core._write(writer, "\x3e");
};
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core._write(writer, "()");
};
cljs.core.LazyTransformer.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazyTransformer.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#queue [", " ", "]", opts, cljs.core.seq(coll__$1));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.List.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.List.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Symbol.prototype.cljs$core$IComparable$ = true;
cljs.core.Symbol.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  if (y instanceof cljs.core.Symbol) {
    return cljs.core.compare_symbols(x__$1, y);
  } else {
    throw new Error([cljs.core.str("Cannot compare "), cljs.core.str(x__$1), cljs.core.str(" to "), cljs.core.str(y)].join(""));
  }
};
cljs.core.Keyword.prototype.cljs$core$IComparable$ = true;
cljs.core.Keyword.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  if (y instanceof cljs.core.Keyword) {
    return cljs.core.compare_keywords(x__$1, y);
  } else {
    throw new Error([cljs.core.str("Cannot compare "), cljs.core.str(x__$1), cljs.core.str(" to "), cljs.core.str(y)].join(""));
  }
};
cljs.core.Subvec.prototype.cljs$core$IComparable$ = true;
cljs.core.Subvec.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  if (cljs.core.vector_QMARK_(y)) {
    return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2(x__$1, y);
  } else {
    throw new Error([cljs.core.str("Cannot compare "), cljs.core.str(x__$1), cljs.core.str(" to "), cljs.core.str(y)].join(""));
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IComparable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  if (cljs.core.vector_QMARK_(y)) {
    return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2(x__$1, y);
  } else {
    throw new Error([cljs.core.str("Cannot compare "), cljs.core.str(x__$1), cljs.core.str(" to "), cljs.core.str(y)].join(""));
  }
};
cljs.core.alter_meta_BANG_ = function cljs$core$alter_meta_BANG_() {
  var argseq__5349__auto__ = 2 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 2), 0) : null;
  return cljs.core.alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5349__auto__);
};
cljs.core.alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(iref, f, args) {
  return iref.meta = cljs.core.apply.cljs$core$IFn$_invoke$arity$3(f, iref.meta, args);
};
cljs.core.alter_meta_BANG_.cljs$lang$maxFixedArity = 2;
cljs.core.alter_meta_BANG_.cljs$lang$applyTo = function(seq10443) {
  var G__10444 = cljs.core.first(seq10443);
  var seq10443__$1 = cljs.core.next(seq10443);
  var G__10445 = cljs.core.first(seq10443__$1);
  var seq10443__$2 = cljs.core.next(seq10443__$1);
  return cljs.core.alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__10444, G__10445, seq10443__$2);
};
cljs.core.reset_meta_BANG_ = function cljs$core$reset_meta_BANG_(iref, m) {
  return iref.meta = m;
};
cljs.core.add_watch = function cljs$core$add_watch(iref, key, f) {
  cljs.core._add_watch(iref, key, f);
  return iref;
};
cljs.core.remove_watch = function cljs$core$remove_watch(iref, key) {
  cljs.core._remove_watch(iref, key);
  return iref;
};
cljs.core.gensym_counter = null;
cljs.core.gensym = function cljs$core$gensym() {
  var G__10447 = arguments.length;
  switch(G__10447) {
    case 0:
      return cljs.core.gensym.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.gensym.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.gensym.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.gensym.cljs$core$IFn$_invoke$arity$1("G__");
};
cljs.core.gensym.cljs$core$IFn$_invoke$arity$1 = function(prefix_string) {
  if (cljs.core.gensym_counter == null) {
    cljs.core.gensym_counter = function() {
      var G__10448 = 0;
      return cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(G__10448) : cljs.core.atom.call(null, G__10448);
    }();
  } else {
  }
  return cljs.core.symbol.cljs$core$IFn$_invoke$arity$1([cljs.core.str(prefix_string), cljs.core.str(cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(cljs.core.gensym_counter, cljs.core.inc))].join(""));
};
cljs.core.gensym.cljs$lang$maxFixedArity = 1;
cljs.core.fixture1 = 1;
cljs.core.fixture2 = 2;
cljs.core.Delay = function(f, value) {
  this.f = f;
  this.value = value;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
  this.cljs$lang$protocol_mask$partition1$ = 1;
};
cljs.core.Delay.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (cljs.core.truth_(self__.f)) {
    self__.value = function() {
      return self__.f.cljs$core$IFn$_invoke$arity$0 ? self__.f.cljs$core$IFn$_invoke$arity$0() : self__.f.call(null);
    }();
    self__.f = null;
  } else {
  }
  return self__.value;
};
cljs.core.Delay.prototype.cljs$core$IPending$_realized_QMARK_$arity$1 = function(d) {
  var self__ = this;
  var d__$1 = this;
  return cljs.core.not(self__.f);
};
cljs.core.Delay.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "f", "f", 43394975, null), new cljs.core.Symbol(null, "value", "value", 1946509744, null)], null);
};
cljs.core.Delay.cljs$lang$type = true;
cljs.core.Delay.cljs$lang$ctorStr = "cljs.core/Delay";
cljs.core.Delay.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/Delay");
};
cljs.core.__GT_Delay = function cljs$core$__GT_Delay(f, value) {
  return new cljs.core.Delay(f, value);
};
cljs.core.delay_QMARK_ = function cljs$core$delay_QMARK_(x) {
  return x instanceof cljs.core.Delay;
};
cljs.core.force = function cljs$core$force(x) {
  if (cljs.core.delay_QMARK_(x)) {
    var G__10451 = x;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10451) : cljs.core.deref.call(null, G__10451);
  } else {
    return x;
  }
};
cljs.core.realized_QMARK_ = function cljs$core$realized_QMARK_(d) {
  return cljs.core._realized_QMARK_(d);
};
cljs.core.preserving_reduced = function cljs$core$preserving_reduced(rf) {
  return function(p1__10452_SHARP_, p2__10453_SHARP_) {
    var ret = function() {
      var G__10456 = p1__10452_SHARP_;
      var G__10457 = p2__10453_SHARP_;
      return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__10456, G__10457) : rf.call(null, G__10456, G__10457);
    }();
    if (cljs.core.reduced_QMARK_(ret)) {
      return cljs.core.reduced(ret);
    } else {
      return ret;
    }
  };
};
cljs.core.cat = function cljs$core$cat(rf) {
  var rf1 = cljs.core.preserving_reduced(rf);
  return function(rf1) {
    return function() {
      var G__10460 = null;
      var G__10460__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__10460__1 = function(result) {
        var G__10459 = result;
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__10459) : rf.call(null, G__10459);
      };
      var G__10460__2 = function(result, input) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(rf1, result, input);
      };
      G__10460 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__10460__0.call(this);
          case 1:
            return G__10460__1.call(this, result);
          case 2:
            return G__10460__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__10460.cljs$core$IFn$_invoke$arity$0 = G__10460__0;
      G__10460.cljs$core$IFn$_invoke$arity$1 = G__10460__1;
      G__10460.cljs$core$IFn$_invoke$arity$2 = G__10460__2;
      return G__10460;
    }();
  }(rf1);
};
cljs.core.dedupe = function cljs$core$dedupe() {
  var G__10462 = arguments.length;
  switch(G__10462) {
    case 0:
      return cljs.core.dedupe.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.dedupe.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.dedupe.cljs$core$IFn$_invoke$arity$0 = function() {
  return function(rf) {
    var pa = cljs.core.volatile_BANG_(new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439));
    return function(pa) {
      return function() {
        var G__10468 = null;
        var G__10468__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__10468__1 = function(result) {
          var G__10463 = result;
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(G__10463) : rf.call(null, G__10463);
        };
        var G__10468__2 = function(result, input) {
          var prior = function() {
            var G__10464 = pa;
            return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10464) : cljs.core.deref.call(null, G__10464);
          }();
          cljs.core.vreset_BANG_(pa, input);
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(prior, input)) {
            return result;
          } else {
            var G__10465 = result;
            var G__10466 = input;
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__10465, G__10466) : rf.call(null, G__10465, G__10466);
          }
        };
        G__10468 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__10468__0.call(this);
            case 1:
              return G__10468__1.call(this, result);
            case 2:
              return G__10468__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__10468.cljs$core$IFn$_invoke$arity$0 = G__10468__0;
        G__10468.cljs$core$IFn$_invoke$arity$1 = G__10468__1;
        G__10468.cljs$core$IFn$_invoke$arity$2 = G__10468__2;
        return G__10468;
      }();
    }(pa);
  };
};
cljs.core.dedupe.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return cljs.core.sequence.cljs$core$IFn$_invoke$arity$2(cljs.core.dedupe.cljs$core$IFn$_invoke$arity$0(), coll);
};
cljs.core.dedupe.cljs$lang$maxFixedArity = 1;
cljs.core.random_sample = function cljs$core$random_sample() {
  var G__10470 = arguments.length;
  switch(G__10470) {
    case 1:
      return cljs.core.random_sample.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.random_sample.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.random_sample.cljs$core$IFn$_invoke$arity$1 = function(prob) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$1(function(_) {
    return function() {
      return cljs.core.rand.cljs$core$IFn$_invoke$arity$0 ? cljs.core.rand.cljs$core$IFn$_invoke$arity$0() : cljs.core.rand.call(null);
    }() < prob;
  });
};
cljs.core.random_sample.cljs$core$IFn$_invoke$arity$2 = function(prob, coll) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(function(_) {
    return function() {
      return cljs.core.rand.cljs$core$IFn$_invoke$arity$0 ? cljs.core.rand.cljs$core$IFn$_invoke$arity$0() : cljs.core.rand.call(null);
    }() < prob;
  }, coll);
};
cljs.core.random_sample.cljs$lang$maxFixedArity = 2;
cljs.core.Eduction = function(xform, coll) {
  this.xform = xform;
  this.coll = coll;
  this.cljs$lang$protocol_mask$partition0$ = 2173173760;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.Eduction.prototype.cljs$core$ISeqable$_seq$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.seq(cljs.core.sequence.cljs$core$IFn$_invoke$arity$2(self__.xform, self__.coll));
};
cljs.core.Eduction.prototype.cljs$core$IReduce$_reduce$arity$2 = function(_, f) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.transduce.cljs$core$IFn$_invoke$arity$3(self__.xform, cljs.core.completing.cljs$core$IFn$_invoke$arity$1(f), self__.coll);
};
cljs.core.Eduction.prototype.cljs$core$IReduce$_reduce$arity$3 = function(_, f, init) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(self__.xform, cljs.core.completing.cljs$core$IFn$_invoke$arity$1(f), init, self__.coll);
};
cljs.core.Eduction.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll__$1, writer, opts) {
  var self__ = this;
  var coll__$2 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$2);
};
cljs.core.Eduction.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "xform", "xform", -85179481, null), new cljs.core.Symbol(null, "coll", "coll", -1006698606, null)], null);
};
cljs.core.Eduction.cljs$lang$type = true;
cljs.core.Eduction.cljs$lang$ctorStr = "cljs.core/Eduction";
cljs.core.Eduction.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/Eduction");
};
cljs.core.__GT_Eduction = function cljs$core$__GT_Eduction(xform, coll) {
  return new cljs.core.Eduction(xform, coll);
};
cljs.core.Eduction.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5285__auto__ = this;
  return cljs.core.es6_iterator(this__5285__auto__);
};
cljs.core.eduction = function cljs$core$eduction() {
  var argseq__5349__auto__ = 0 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 0), 0) : null;
  return cljs.core.eduction.cljs$core$IFn$_invoke$arity$variadic(argseq__5349__auto__);
};
cljs.core.eduction.cljs$core$IFn$_invoke$arity$variadic = function(xforms) {
  return new cljs.core.Eduction(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.comp, cljs.core.butlast(xforms)), cljs.core.last(xforms));
};
cljs.core.eduction.cljs$lang$maxFixedArity = 0;
cljs.core.eduction.cljs$lang$applyTo = function(seq10472) {
  return cljs.core.eduction.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq10472));
};
cljs.core.run_BANG_ = function cljs$core$run_BANG_(proc, coll) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__10474_SHARP_, p2__10473_SHARP_) {
    var G__10476 = p2__10473_SHARP_;
    return proc.cljs$core$IFn$_invoke$arity$1 ? proc.cljs$core$IFn$_invoke$arity$1(G__10476) : proc.call(null, G__10476);
  }, null, coll);
};
cljs.core.IEncodeJS = function() {
  var obj10478 = {};
  return obj10478;
}();
cljs.core._clj__GT_js = function cljs$core$_clj__GT_js(x) {
  if (function() {
    var and__4297__auto__ = x;
    if (and__4297__auto__) {
      return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1(x);
  } else {
    var x__4945__auto__ = x == null ? null : x;
    return function() {
      var or__4309__auto__ = cljs.core._clj__GT_js[function() {
        var G__10482 = x__4945__auto__;
        return goog.typeOf(G__10482);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._clj__GT_js["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEncodeJS.-clj-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._key__GT_js = function cljs$core$_key__GT_js(x) {
  if (function() {
    var and__4297__auto__ = x;
    if (and__4297__auto__) {
      return x.cljs$core$IEncodeJS$_key__GT_js$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_key__GT_js$arity$1(x);
  } else {
    var x__4945__auto__ = x == null ? null : x;
    return function() {
      var or__4309__auto__ = cljs.core._key__GT_js[function() {
        var G__10486 = x__4945__auto__;
        return goog.typeOf(G__10486);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._key__GT_js["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEncodeJS.-key-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.key__GT_js = function cljs$core$key__GT_js(k) {
  if (function() {
    var G__10489 = k;
    if (G__10489) {
      var bit__4983__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__4309__auto__ = bit__4983__auto__;
        if (cljs.core.truth_(or__4309__auto__)) {
          return or__4309__auto__;
        } else {
          return G__10489.cljs$core$IEncodeJS$;
        }
      }())) {
        return true;
      } else {
        if (!G__10489.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, G__10489);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, G__10489);
    }
  }()) {
    return cljs.core._clj__GT_js(k);
  } else {
    if (typeof k === "string" || typeof k === "number" || k instanceof cljs.core.Keyword || k instanceof cljs.core.Symbol) {
      var G__10490 = k;
      return cljs.core.clj__GT_js.cljs$core$IFn$_invoke$arity$1 ? cljs.core.clj__GT_js.cljs$core$IFn$_invoke$arity$1(G__10490) : cljs.core.clj__GT_js.call(null, G__10490);
    } else {
      return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([k], 0));
    }
  }
};
cljs.core.clj__GT_js = function cljs$core$clj__GT_js(x) {
  if (x == null) {
    return null;
  } else {
    if (function() {
      var G__10506 = x;
      if (G__10506) {
        var bit__4983__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__4309__auto__ = bit__4983__auto__;
          if (cljs.core.truth_(or__4309__auto__)) {
            return or__4309__auto__;
          } else {
            return G__10506.cljs$core$IEncodeJS$;
          }
        }())) {
          return true;
        } else {
          if (!G__10506.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, G__10506);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, G__10506);
      }
    }()) {
      return cljs.core._clj__GT_js(x);
    } else {
      if (x instanceof cljs.core.Keyword) {
        return cljs.core.name(x);
      } else {
        if (x instanceof cljs.core.Symbol) {
          return [cljs.core.str(x)].join("");
        } else {
          if (cljs.core.map_QMARK_(x)) {
            var m = function() {
              var obj10508 = {};
              return obj10508;
            }();
            var seq__10509_10519 = cljs.core.seq(x);
            var chunk__10510_10520 = null;
            var count__10511_10521 = 0;
            var i__10512_10522 = 0;
            while (true) {
              if (i__10512_10522 < count__10511_10521) {
                var vec__10513_10523 = chunk__10510_10520.cljs$core$IIndexed$_nth$arity$2(null, i__10512_10522);
                var k_10524 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10513_10523, 0, null);
                var v_10525 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10513_10523, 1, null);
                m[cljs.core.key__GT_js(k_10524)] = cljs$core$clj__GT_js(v_10525);
                var G__10526 = seq__10509_10519;
                var G__10527 = chunk__10510_10520;
                var G__10528 = count__10511_10521;
                var G__10529 = i__10512_10522 + 1;
                seq__10509_10519 = G__10526;
                chunk__10510_10520 = G__10527;
                count__10511_10521 = G__10528;
                i__10512_10522 = G__10529;
                continue;
              } else {
                var temp__4422__auto___10530 = cljs.core.seq(seq__10509_10519);
                if (temp__4422__auto___10530) {
                  var seq__10509_10531__$1 = temp__4422__auto___10530;
                  if (cljs.core.chunked_seq_QMARK_(seq__10509_10531__$1)) {
                    var c__5094__auto___10532 = cljs.core.chunk_first(seq__10509_10531__$1);
                    var G__10533 = cljs.core.chunk_rest(seq__10509_10531__$1);
                    var G__10534 = c__5094__auto___10532;
                    var G__10535 = cljs.core.count(c__5094__auto___10532);
                    var G__10536 = 0;
                    seq__10509_10519 = G__10533;
                    chunk__10510_10520 = G__10534;
                    count__10511_10521 = G__10535;
                    i__10512_10522 = G__10536;
                    continue;
                  } else {
                    var vec__10514_10537 = cljs.core.first(seq__10509_10531__$1);
                    var k_10538 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10514_10537, 0, null);
                    var v_10539 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10514_10537, 1, null);
                    m[cljs.core.key__GT_js(k_10538)] = cljs$core$clj__GT_js(v_10539);
                    var G__10540 = cljs.core.next(seq__10509_10531__$1);
                    var G__10541 = null;
                    var G__10542 = 0;
                    var G__10543 = 0;
                    seq__10509_10519 = G__10540;
                    chunk__10510_10520 = G__10541;
                    count__10511_10521 = G__10542;
                    i__10512_10522 = G__10543;
                    continue;
                  }
                } else {
                }
              }
              break;
            }
            return m;
          } else {
            if (cljs.core.coll_QMARK_(x)) {
              var arr = [];
              var seq__10515_10544 = cljs.core.seq(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs$core$clj__GT_js, x));
              var chunk__10516_10545 = null;
              var count__10517_10546 = 0;
              var i__10518_10547 = 0;
              while (true) {
                if (i__10518_10547 < count__10517_10546) {
                  var x_10548__$1 = chunk__10516_10545.cljs$core$IIndexed$_nth$arity$2(null, i__10518_10547);
                  arr.push(x_10548__$1);
                  var G__10549 = seq__10515_10544;
                  var G__10550 = chunk__10516_10545;
                  var G__10551 = count__10517_10546;
                  var G__10552 = i__10518_10547 + 1;
                  seq__10515_10544 = G__10549;
                  chunk__10516_10545 = G__10550;
                  count__10517_10546 = G__10551;
                  i__10518_10547 = G__10552;
                  continue;
                } else {
                  var temp__4422__auto___10553 = cljs.core.seq(seq__10515_10544);
                  if (temp__4422__auto___10553) {
                    var seq__10515_10554__$1 = temp__4422__auto___10553;
                    if (cljs.core.chunked_seq_QMARK_(seq__10515_10554__$1)) {
                      var c__5094__auto___10555 = cljs.core.chunk_first(seq__10515_10554__$1);
                      var G__10556 = cljs.core.chunk_rest(seq__10515_10554__$1);
                      var G__10557 = c__5094__auto___10555;
                      var G__10558 = cljs.core.count(c__5094__auto___10555);
                      var G__10559 = 0;
                      seq__10515_10544 = G__10556;
                      chunk__10516_10545 = G__10557;
                      count__10517_10546 = G__10558;
                      i__10518_10547 = G__10559;
                      continue;
                    } else {
                      var x_10560__$1 = cljs.core.first(seq__10515_10554__$1);
                      arr.push(x_10560__$1);
                      var G__10561 = cljs.core.next(seq__10515_10554__$1);
                      var G__10562 = null;
                      var G__10563 = 0;
                      var G__10564 = 0;
                      seq__10515_10544 = G__10561;
                      chunk__10516_10545 = G__10562;
                      count__10517_10546 = G__10563;
                      i__10518_10547 = G__10564;
                      continue;
                    }
                  } else {
                  }
                }
                break;
              }
              return arr;
            } else {
              return x;
            }
          }
        }
      }
    }
  }
};
cljs.core.IEncodeClojure = function() {
  var obj10566 = {};
  return obj10566;
}();
cljs.core._js__GT_clj = function cljs$core$_js__GT_clj(x, options) {
  if (function() {
    var and__4297__auto__ = x;
    if (and__4297__auto__) {
      return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2(x, options);
  } else {
    var x__4945__auto__ = x == null ? null : x;
    return function() {
      var or__4309__auto__ = cljs.core._js__GT_clj[function() {
        var G__10570 = x__4945__auto__;
        return goog.typeOf(G__10570);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._js__GT_clj["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IEncodeClojure.-js-\x3eclj", x);
        }
      }
    }().call(null, x, options);
  }
};
cljs.core.js__GT_clj = function cljs$core$js__GT_clj() {
  var G__10574 = arguments.length;
  switch(G__10574) {
    case 1:
      return cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0);
      return cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5360__auto__);
  }
};
cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252), false], null)], 0));
};
cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic = function(x, opts) {
  var map__10575 = opts;
  var map__10575__$1 = cljs.core.seq_QMARK_(map__10575) ? cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map, map__10575) : map__10575;
  var keywordize_keys = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__10575__$1, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252));
  var keyfn = cljs.core.truth_(keywordize_keys) ? cljs.core.keyword : cljs.core.str;
  var f = function(map__10575, map__10575__$1, keywordize_keys, keyfn) {
    return function cljs$core$thisfn(x__$1) {
      if (function() {
        var G__10591 = x__$1;
        if (G__10591) {
          var bit__4983__auto__ = null;
          if (cljs.core.truth_(function() {
            var or__4309__auto__ = bit__4983__auto__;
            if (cljs.core.truth_(or__4309__auto__)) {
              return or__4309__auto__;
            } else {
              return G__10591.cljs$core$IEncodeClojure$;
            }
          }())) {
            return true;
          } else {
            if (!G__10591.cljs$lang$protocol_mask$partition$) {
              return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeClojure, G__10591);
            } else {
              return false;
            }
          }
        } else {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeClojure, G__10591);
        }
      }()) {
        return cljs.core._js__GT_clj(x__$1, cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.array_map, opts));
      } else {
        if (cljs.core.seq_QMARK_(x__$1)) {
          return cljs.core.doall.cljs$core$IFn$_invoke$arity$1(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs$core$thisfn, x__$1));
        } else {
          if (cljs.core.coll_QMARK_(x__$1)) {
            return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.empty(x__$1), cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs$core$thisfn, x__$1));
          } else {
            if (cljs.core.array_QMARK_(x__$1)) {
              return cljs.core.vec(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs$core$thisfn, x__$1));
            } else {
              if (cljs.core.type(x__$1) === Object) {
                return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY, function() {
                  var iter__5063__auto__ = function(map__10575, map__10575__$1, keywordize_keys, keyfn) {
                    return function cljs$core$thisfn_$_iter__10592(s__10593) {
                      return new cljs.core.LazySeq(null, function(map__10575, map__10575__$1, keywordize_keys, keyfn) {
                        return function() {
                          var s__10593__$1 = s__10593;
                          while (true) {
                            var temp__4422__auto__ = cljs.core.seq(s__10593__$1);
                            if (temp__4422__auto__) {
                              var s__10593__$2 = temp__4422__auto__;
                              if (cljs.core.chunked_seq_QMARK_(s__10593__$2)) {
                                var c__5061__auto__ = cljs.core.chunk_first(s__10593__$2);
                                var size__5062__auto__ = cljs.core.count(c__5061__auto__);
                                var b__10595 = cljs.core.chunk_buffer(size__5062__auto__);
                                if (function() {
                                  var i__10594 = 0;
                                  while (true) {
                                    if (i__10594 < size__5062__auto__) {
                                      var k = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c__5061__auto__, i__10594);
                                      cljs.core.chunk_append(b__10595, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
                                        var G__10600 = k;
                                        return keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(G__10600) : keyfn.call(null, G__10600);
                                      }(), cljs$core$thisfn(x__$1[k])], null));
                                      var G__10603 = i__10594 + 1;
                                      i__10594 = G__10603;
                                      continue;
                                    } else {
                                      return true;
                                    }
                                    break;
                                  }
                                }()) {
                                  return cljs.core.chunk_cons(cljs.core.chunk(b__10595), cljs$core$thisfn_$_iter__10592(cljs.core.chunk_rest(s__10593__$2)));
                                } else {
                                  return cljs.core.chunk_cons(cljs.core.chunk(b__10595), null);
                                }
                              } else {
                                var k = cljs.core.first(s__10593__$2);
                                return cljs.core.cons(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
                                  var G__10601 = k;
                                  return keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(G__10601) : keyfn.call(null, G__10601);
                                }(), cljs$core$thisfn(x__$1[k])], null), cljs$core$thisfn_$_iter__10592(cljs.core.rest(s__10593__$2)));
                              }
                            } else {
                              return null;
                            }
                            break;
                          }
                        };
                      }(map__10575, map__10575__$1, keywordize_keys, keyfn), null, null);
                    };
                  }(map__10575, map__10575__$1, keywordize_keys, keyfn);
                  return iter__5063__auto__(cljs.core.js_keys(x__$1));
                }());
              } else {
                return x__$1;
              }
            }
          }
        }
      }
    };
  }(map__10575, map__10575__$1, keywordize_keys, keyfn);
  return f(x);
};
cljs.core.js__GT_clj.cljs$lang$applyTo = function(seq10571) {
  var G__10572 = cljs.core.first(seq10571);
  var seq10571__$1 = cljs.core.next(seq10571);
  return cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic(G__10572, seq10571__$1);
};
cljs.core.js__GT_clj.cljs$lang$maxFixedArity = 1;
cljs.core.memoize = function cljs$core$memoize(f) {
  var mem = function() {
    var G__10606 = cljs.core.PersistentArrayMap.EMPTY;
    return cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(G__10606) : cljs.core.atom.call(null, G__10606);
  }();
  return function(mem) {
    return function() {
      var G__10608__delegate = function(args) {
        var v = cljs.core.get.cljs$core$IFn$_invoke$arity$3(function() {
          var G__10607 = mem;
          return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10607) : cljs.core.deref.call(null, G__10607);
        }(), args, cljs.core.lookup_sentinel);
        if (v === cljs.core.lookup_sentinel) {
          var ret = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f, args);
          cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(mem, cljs.core.assoc, args, ret);
          return ret;
        } else {
          return v;
        }
      };
      var G__10608 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          var G__10609__i = 0, G__10609__a = new Array(arguments.length - 0);
          while (G__10609__i < G__10609__a.length) {
            G__10609__a[G__10609__i] = arguments[G__10609__i + 0];
            ++G__10609__i;
          }
          args = new cljs.core.IndexedSeq(G__10609__a, 0);
        }
        return G__10608__delegate.call(this, args);
      };
      G__10608.cljs$lang$maxFixedArity = 0;
      G__10608.cljs$lang$applyTo = function(arglist__10610) {
        var args = cljs.core.seq(arglist__10610);
        return G__10608__delegate(args);
      };
      G__10608.cljs$core$IFn$_invoke$arity$variadic = G__10608__delegate;
      return G__10608;
    }();
  }(mem);
};
cljs.core.trampoline = function cljs$core$trampoline() {
  var G__10614 = arguments.length;
  switch(G__10614) {
    case 1:
      return cljs.core.trampoline.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var argseq__5360__auto__ = new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0);
      return cljs.core.trampoline.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5360__auto__);
  }
};
cljs.core.trampoline.cljs$core$IFn$_invoke$arity$1 = function(f) {
  while (true) {
    var ret = function() {
      return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    }();
    if (cljs.core.fn_QMARK_(ret)) {
      var G__10616 = ret;
      f = G__10616;
      continue;
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.trampoline.cljs$core$IFn$_invoke$arity$variadic = function(f, args) {
  return cljs.core.trampoline.cljs$core$IFn$_invoke$arity$1(function() {
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f, args);
  });
};
cljs.core.trampoline.cljs$lang$applyTo = function(seq10611) {
  var G__10612 = cljs.core.first(seq10611);
  var seq10611__$1 = cljs.core.next(seq10611);
  return cljs.core.trampoline.cljs$core$IFn$_invoke$arity$variadic(G__10612, seq10611__$1);
};
cljs.core.trampoline.cljs$lang$maxFixedArity = 1;
cljs.core.rand = function cljs$core$rand() {
  var G__10618 = arguments.length;
  switch(G__10618) {
    case 0:
      return cljs.core.rand.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.rand.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.rand.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.rand.cljs$core$IFn$_invoke$arity$1(1);
};
cljs.core.rand.cljs$core$IFn$_invoke$arity$1 = function(n) {
  return function() {
    return Math.random();
  }() * n;
};
cljs.core.rand.cljs$lang$maxFixedArity = 1;
cljs.core.rand_int = function cljs$core$rand_int(n) {
  var G__10621 = function() {
    return Math.random();
  }() * n;
  return Math.floor(G__10621);
};
cljs.core.rand_nth = function cljs$core$rand_nth(coll) {
  return cljs.core.nth.cljs$core$IFn$_invoke$arity$2(coll, cljs.core.rand_int(cljs.core.count(coll)));
};
cljs.core.group_by = function cljs$core$group_by(f, coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(ret, x) {
    var k = function() {
      var G__10623 = x;
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__10623) : f.call(null, G__10623);
    }();
    return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(ret, k, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(ret, k, cljs.core.PersistentVector.EMPTY), x));
  }, cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.make_hierarchy = function cljs$core$make_hierarchy() {
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", -2027538891), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "descendants", "descendants", 1824886031), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424), cljs.core.PersistentArrayMap.EMPTY], null);
};
cljs.core._global_hierarchy = null;
cljs.core.get_global_hierarchy = function cljs$core$get_global_hierarchy() {
  if (cljs.core._global_hierarchy == null) {
    cljs.core._global_hierarchy = function() {
      var G__10625 = cljs.core.make_hierarchy();
      return cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(G__10625) : cljs.core.atom.call(null, G__10625);
    }();
  } else {
  }
  return cljs.core._global_hierarchy;
};
cljs.core.swap_global_hierarchy_BANG_ = function cljs$core$swap_global_hierarchy_BANG_() {
  var argseq__5349__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5349__auto__);
};
cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(f, args) {
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$4(cljs.core.swap_BANG_, cljs.core.get_global_hierarchy(), f, args);
};
cljs.core.swap_global_hierarchy_BANG_.cljs$lang$maxFixedArity = 1;
cljs.core.swap_global_hierarchy_BANG_.cljs$lang$applyTo = function(seq10626) {
  var G__10627 = cljs.core.first(seq10626);
  var seq10626__$1 = cljs.core.next(seq10626);
  return cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__10627, seq10626__$1);
};
cljs.core.isa_QMARK_ = function cljs$core$isa_QMARK_() {
  var G__10629 = arguments.length;
  switch(G__10629) {
    case 2:
      return cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$2 = function(child, parent) {
  return cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3(function() {
    var G__10630 = cljs.core.get_global_hierarchy();
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10630) : cljs.core.deref.call(null, G__10630);
  }(), child, parent);
};
cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3 = function(h, child, parent) {
  var or__4309__auto__ = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(child, parent);
  if (or__4309__auto__) {
    return or__4309__auto__;
  } else {
    var or__4309__auto____$1 = cljs.core.contains_QMARK_((new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h).call(null, child), parent);
    if (or__4309__auto____$1) {
      return or__4309__auto____$1;
    } else {
      var and__4297__auto__ = cljs.core.vector_QMARK_(parent);
      if (and__4297__auto__) {
        var and__4297__auto____$1 = cljs.core.vector_QMARK_(child);
        if (and__4297__auto____$1) {
          var and__4297__auto____$2 = cljs.core.count(parent) === cljs.core.count(child);
          if (and__4297__auto____$2) {
            var ret = true;
            var i = 0;
            while (true) {
              if (!ret || i === cljs.core.count(parent)) {
                return ret;
              } else {
                var G__10656 = cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3(h, function() {
                  var G__10653 = i;
                  return child.cljs$core$IFn$_invoke$arity$1 ? child.cljs$core$IFn$_invoke$arity$1(G__10653) : child.call(null, G__10653);
                }(), function() {
                  var G__10654 = i;
                  return parent.cljs$core$IFn$_invoke$arity$1 ? parent.cljs$core$IFn$_invoke$arity$1(G__10654) : parent.call(null, G__10654);
                }());
                var G__10657 = i + 1;
                ret = G__10656;
                i = G__10657;
                continue;
              }
              break;
            }
          } else {
            return and__4297__auto____$2;
          }
        } else {
          return and__4297__auto____$1;
        }
      } else {
        return and__4297__auto__;
      }
    }
  }
};
cljs.core.isa_QMARK_.cljs$lang$maxFixedArity = 3;
cljs.core.parents = function cljs$core$parents() {
  var G__10659 = arguments.length;
  switch(G__10659) {
    case 1:
      return cljs.core.parents.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.parents.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.parents.cljs$core$IFn$_invoke$arity$1 = function(tag) {
  return cljs.core.parents.cljs$core$IFn$_invoke$arity$2(function() {
    var G__10660 = cljs.core.get_global_hierarchy();
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10660) : cljs.core.deref.call(null, G__10660);
  }(), tag);
};
cljs.core.parents.cljs$core$IFn$_invoke$arity$2 = function(h, tag) {
  return cljs.core.not_empty(cljs.core.get.cljs$core$IFn$_invoke$arity$2((new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h), tag));
};
cljs.core.parents.cljs$lang$maxFixedArity = 2;
cljs.core.ancestors = function cljs$core$ancestors() {
  var G__10663 = arguments.length;
  switch(G__10663) {
    case 1:
      return cljs.core.ancestors.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.ancestors.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.ancestors.cljs$core$IFn$_invoke$arity$1 = function(tag) {
  return cljs.core.ancestors.cljs$core$IFn$_invoke$arity$2(function() {
    var G__10664 = cljs.core.get_global_hierarchy();
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10664) : cljs.core.deref.call(null, G__10664);
  }(), tag);
};
cljs.core.ancestors.cljs$core$IFn$_invoke$arity$2 = function(h, tag) {
  return cljs.core.not_empty(cljs.core.get.cljs$core$IFn$_invoke$arity$2((new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h), tag));
};
cljs.core.ancestors.cljs$lang$maxFixedArity = 2;
cljs.core.descendants = function cljs$core$descendants() {
  var G__10667 = arguments.length;
  switch(G__10667) {
    case 1:
      return cljs.core.descendants.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.descendants.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.descendants.cljs$core$IFn$_invoke$arity$1 = function(tag) {
  return cljs.core.descendants.cljs$core$IFn$_invoke$arity$2(function() {
    var G__10668 = cljs.core.get_global_hierarchy();
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10668) : cljs.core.deref.call(null, G__10668);
  }(), tag);
};
cljs.core.descendants.cljs$core$IFn$_invoke$arity$2 = function(h, tag) {
  return cljs.core.not_empty(cljs.core.get.cljs$core$IFn$_invoke$arity$2((new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h), tag));
};
cljs.core.descendants.cljs$lang$maxFixedArity = 2;
cljs.core.derive = function cljs$core$derive() {
  var G__10671 = arguments.length;
  switch(G__10671) {
    case 2:
      return cljs.core.derive.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.derive.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.derive.cljs$core$IFn$_invoke$arity$2 = function(tag, parent) {
  if (cljs.core.truth_(cljs.core.namespace(parent))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.list(new cljs.core.Symbol(null, "namespace", "namespace", 1263021155, null), new cljs.core.Symbol(null, "parent", "parent", 761652748, null))], 0)))].join(""));
  }
  cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.derive, cljs.core.array_seq([tag, parent], 0));
  return null;
};
cljs.core.derive.cljs$core$IFn$_invoke$arity$3 = function(h, tag, parent) {
  if (cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(tag, parent)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.list(new cljs.core.Symbol(null, "not\x3d", "not\x3d", 1466536204, null), new cljs.core.Symbol(null, "tag", "tag", 350170304, null), new cljs.core.Symbol(null, "parent", "parent", 761652748, null))], 0)))].join(""));
  }
  var tp = (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h);
  var td = (new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h);
  var ta = (new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h);
  var tf = function(tp, td, ta) {
    return function(m, source, sources, target, targets) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(tp, td, ta) {
        return function(ret, k) {
          return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ret, k, cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj, cljs.core.get.cljs$core$IFn$_invoke$arity$3(targets, k, cljs.core.PersistentHashSet.EMPTY), cljs.core.cons(target, function() {
            var G__10672 = target;
            return targets.cljs$core$IFn$_invoke$arity$1 ? targets.cljs$core$IFn$_invoke$arity$1(G__10672) : targets.call(null, G__10672);
          }())));
        };
      }(tp, td, ta), m, cljs.core.cons(source, function() {
        var G__10673 = source;
        return sources.cljs$core$IFn$_invoke$arity$1 ? sources.cljs$core$IFn$_invoke$arity$1(G__10673) : sources.call(null, G__10673);
      }()));
    };
  }(tp, td, ta);
  var or__4309__auto__ = cljs.core.contains_QMARK_(function() {
    var G__10677 = tag;
    return tp.cljs$core$IFn$_invoke$arity$1 ? tp.cljs$core$IFn$_invoke$arity$1(G__10677) : tp.call(null, G__10677);
  }(), parent) ? null : function() {
    if (cljs.core.contains_QMARK_(function() {
      var G__10678 = tag;
      return ta.cljs$core$IFn$_invoke$arity$1 ? ta.cljs$core$IFn$_invoke$arity$1(G__10678) : ta.call(null, G__10678);
    }(), parent)) {
      throw new Error([cljs.core.str(tag), cljs.core.str("already has"), cljs.core.str(parent), cljs.core.str("as ancestor")].join(""));
    } else {
    }
    if (cljs.core.contains_QMARK_(function() {
      var G__10679 = parent;
      return ta.cljs$core$IFn$_invoke$arity$1 ? ta.cljs$core$IFn$_invoke$arity$1(G__10679) : ta.call(null, G__10679);
    }(), tag)) {
      throw new Error([cljs.core.str("Cyclic derivation:"), cljs.core.str(parent), cljs.core.str("has"), cljs.core.str(tag), cljs.core.str("as ancestor")].join(""));
    } else {
    }
    return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", -2027538891), cljs.core.assoc.cljs$core$IFn$_invoke$arity$3((new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h), tag, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(tp, tag, cljs.core.PersistentHashSet.EMPTY), parent)), new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424), tf((new cljs.core.Keyword(null, 
    "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h), tag, td, parent, ta), new cljs.core.Keyword(null, "descendants", "descendants", 1824886031), tf((new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h), parent, ta, tag, td)], null);
  }();
  if (cljs.core.truth_(or__4309__auto__)) {
    return or__4309__auto__;
  } else {
    return h;
  }
};
cljs.core.derive.cljs$lang$maxFixedArity = 3;
cljs.core.underive = function cljs$core$underive() {
  var G__10685 = arguments.length;
  switch(G__10685) {
    case 2:
      return cljs.core.underive.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.underive.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.underive.cljs$core$IFn$_invoke$arity$2 = function(tag, parent) {
  cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.underive, cljs.core.array_seq([tag, parent], 0));
  return null;
};
cljs.core.underive.cljs$core$IFn$_invoke$arity$3 = function(h, tag, parent) {
  var parentMap = (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h);
  var childsParents = cljs.core.truth_(function() {
    var G__10686 = tag;
    return parentMap.cljs$core$IFn$_invoke$arity$1 ? parentMap.cljs$core$IFn$_invoke$arity$1(G__10686) : parentMap.call(null, G__10686);
  }()) ? cljs.core.disj.cljs$core$IFn$_invoke$arity$2(function() {
    var G__10687 = tag;
    return parentMap.cljs$core$IFn$_invoke$arity$1 ? parentMap.cljs$core$IFn$_invoke$arity$1(G__10687) : parentMap.call(null, G__10687);
  }(), parent) : cljs.core.PersistentHashSet.EMPTY;
  var newParents = cljs.core.truth_(cljs.core.not_empty(childsParents)) ? cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(parentMap, tag, childsParents) : cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(parentMap, tag);
  var deriv_seq = cljs.core.flatten(cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(parentMap, childsParents, newParents) {
    return function(p1__10681_SHARP_) {
      return cljs.core.cons(cljs.core.first(p1__10681_SHARP_), cljs.core.interpose.cljs$core$IFn$_invoke$arity$2(cljs.core.first(p1__10681_SHARP_), cljs.core.second(p1__10681_SHARP_)));
    };
  }(parentMap, childsParents, newParents), cljs.core.seq(newParents)));
  if (cljs.core.contains_QMARK_(function() {
    var G__10688 = tag;
    return parentMap.cljs$core$IFn$_invoke$arity$1 ? parentMap.cljs$core$IFn$_invoke$arity$1(G__10688) : parentMap.call(null, G__10688);
  }(), parent)) {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(parentMap, childsParents, newParents, deriv_seq) {
      return function(p1__10682_SHARP_, p2__10683_SHARP_) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.derive, p1__10682_SHARP_, p2__10683_SHARP_);
      };
    }(parentMap, childsParents, newParents, deriv_seq), cljs.core.make_hierarchy(), cljs.core.partition.cljs$core$IFn$_invoke$arity$2(2, deriv_seq));
  } else {
    return h;
  }
};
cljs.core.underive.cljs$lang$maxFixedArity = 3;
cljs.core.reset_cache = function cljs$core$reset_cache(method_cache, method_table, cached_hierarchy, hierarchy) {
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(method_cache, function(_) {
    var G__10692 = method_table;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10692) : cljs.core.deref.call(null, G__10692);
  });
  return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(cached_hierarchy, function(_) {
    var G__10693 = hierarchy;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10693) : cljs.core.deref.call(null, G__10693);
  });
};
cljs.core.prefers_STAR_ = function cljs$core$prefers_STAR_(x, y, prefer_table) {
  var xprefs = function() {
    var G__10709 = prefer_table;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10709) : cljs.core.deref.call(null, G__10709);
  }().call(null, x);
  var or__4309__auto__ = cljs.core.truth_(function() {
    var and__4297__auto__ = xprefs;
    if (cljs.core.truth_(and__4297__auto__)) {
      var G__10711 = y;
      return xprefs.cljs$core$IFn$_invoke$arity$1 ? xprefs.cljs$core$IFn$_invoke$arity$1(G__10711) : xprefs.call(null, G__10711);
    } else {
      return and__4297__auto__;
    }
  }()) ? true : null;
  if (cljs.core.truth_(or__4309__auto__)) {
    return or__4309__auto__;
  } else {
    var or__4309__auto____$1 = function() {
      var ps = cljs.core.parents.cljs$core$IFn$_invoke$arity$1(y);
      while (true) {
        if (cljs.core.count(ps) > 0) {
          if (cljs.core.truth_(cljs$core$prefers_STAR_(x, cljs.core.first(ps), prefer_table))) {
          } else {
          }
          var G__10712 = cljs.core.rest(ps);
          ps = G__10712;
          continue;
        } else {
          return null;
        }
        break;
      }
    }();
    if (cljs.core.truth_(or__4309__auto____$1)) {
      return or__4309__auto____$1;
    } else {
      var or__4309__auto____$2 = function() {
        var ps = cljs.core.parents.cljs$core$IFn$_invoke$arity$1(x);
        while (true) {
          if (cljs.core.count(ps) > 0) {
            if (cljs.core.truth_(cljs$core$prefers_STAR_(cljs.core.first(ps), y, prefer_table))) {
            } else {
            }
            var G__10713 = cljs.core.rest(ps);
            ps = G__10713;
            continue;
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(or__4309__auto____$2)) {
        return or__4309__auto____$2;
      } else {
        return false;
      }
    }
  }
};
cljs.core.dominates = function cljs$core$dominates(x, y, prefer_table) {
  var or__4309__auto__ = cljs.core.prefers_STAR_(x, y, prefer_table);
  if (cljs.core.truth_(or__4309__auto__)) {
    return or__4309__auto__;
  } else {
    return cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$2(x, y);
  }
};
cljs.core.find_and_cache_best_method = function cljs$core$find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  var best_entry = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(be, p__10727) {
    var vec__10728 = p__10727;
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10728, 0, null);
    var _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10728, 1, null);
    var e = vec__10728;
    if (cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3(function() {
      var G__10729 = hierarchy;
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10729) : cljs.core.deref.call(null, G__10729);
    }(), dispatch_val, k)) {
      var be2 = cljs.core.truth_(function() {
        var or__4309__auto__ = be == null;
        if (or__4309__auto__) {
          return or__4309__auto__;
        } else {
          return cljs.core.dominates(k, cljs.core.first(be), prefer_table);
        }
      }()) ? e : be;
      if (cljs.core.truth_(cljs.core.dominates(cljs.core.first(be2), k, prefer_table))) {
      } else {
        throw new Error([cljs.core.str("Multiple methods in multimethod '"), cljs.core.str(name), cljs.core.str("' match dispatch value: "), cljs.core.str(dispatch_val), cljs.core.str(" -\x3e "), cljs.core.str(k), cljs.core.str(" and "), cljs.core.str(cljs.core.first(be2)), cljs.core.str(", and neither is preferred")].join(""));
      }
      return be2;
    } else {
      return be;
    }
  }, null, function() {
    var G__10730 = method_table;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10730) : cljs.core.deref.call(null, G__10730);
  }());
  if (cljs.core.truth_(best_entry)) {
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(function() {
      var G__10731 = cached_hierarchy;
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10731) : cljs.core.deref.call(null, G__10731);
    }(), function() {
      var G__10732 = hierarchy;
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10732) : cljs.core.deref.call(null, G__10732);
    }())) {
      cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(method_cache, cljs.core.assoc, dispatch_val, cljs.core.second(best_entry));
      return cljs.core.second(best_entry);
    } else {
      cljs.core.reset_cache(method_cache, method_table, cached_hierarchy, hierarchy);
      return cljs$core$find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
    }
  } else {
    return null;
  }
};
cljs.core.IMultiFn = function() {
  var obj10734 = {};
  return obj10734;
}();
cljs.core._reset = function cljs$core$_reset(mf) {
  if (function() {
    var and__4297__auto__ = mf;
    if (and__4297__auto__) {
      return mf.cljs$core$IMultiFn$_reset$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_reset$arity$1(mf);
  } else {
    var x__4945__auto__ = mf == null ? null : mf;
    return function() {
      var or__4309__auto__ = cljs.core._reset[function() {
        var G__10738 = x__4945__auto__;
        return goog.typeOf(G__10738);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._reset["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-reset", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._add_method = function cljs$core$_add_method(mf, dispatch_val, method) {
  if (function() {
    var and__4297__auto__ = mf;
    if (and__4297__auto__) {
      return mf.cljs$core$IMultiFn$_add_method$arity$3;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_add_method$arity$3(mf, dispatch_val, method);
  } else {
    var x__4945__auto__ = mf == null ? null : mf;
    return function() {
      var or__4309__auto__ = cljs.core._add_method[function() {
        var G__10742 = x__4945__auto__;
        return goog.typeOf(G__10742);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._add_method["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-add-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, method);
  }
};
cljs.core._remove_method = function cljs$core$_remove_method(mf, dispatch_val) {
  if (function() {
    var and__4297__auto__ = mf;
    if (and__4297__auto__) {
      return mf.cljs$core$IMultiFn$_remove_method$arity$2;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_remove_method$arity$2(mf, dispatch_val);
  } else {
    var x__4945__auto__ = mf == null ? null : mf;
    return function() {
      var or__4309__auto__ = cljs.core._remove_method[function() {
        var G__10746 = x__4945__auto__;
        return goog.typeOf(G__10746);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._remove_method["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-remove-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._prefer_method = function cljs$core$_prefer_method(mf, dispatch_val, dispatch_val_y) {
  if (function() {
    var and__4297__auto__ = mf;
    if (and__4297__auto__) {
      return mf.cljs$core$IMultiFn$_prefer_method$arity$3;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefer_method$arity$3(mf, dispatch_val, dispatch_val_y);
  } else {
    var x__4945__auto__ = mf == null ? null : mf;
    return function() {
      var or__4309__auto__ = cljs.core._prefer_method[function() {
        var G__10750 = x__4945__auto__;
        return goog.typeOf(G__10750);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._prefer_method["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-prefer-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, dispatch_val_y);
  }
};
cljs.core._get_method = function cljs$core$_get_method(mf, dispatch_val) {
  if (function() {
    var and__4297__auto__ = mf;
    if (and__4297__auto__) {
      return mf.cljs$core$IMultiFn$_get_method$arity$2;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_get_method$arity$2(mf, dispatch_val);
  } else {
    var x__4945__auto__ = mf == null ? null : mf;
    return function() {
      var or__4309__auto__ = cljs.core._get_method[function() {
        var G__10754 = x__4945__auto__;
        return goog.typeOf(G__10754);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._get_method["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-get-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._methods = function cljs$core$_methods(mf) {
  if (function() {
    var and__4297__auto__ = mf;
    if (and__4297__auto__) {
      return mf.cljs$core$IMultiFn$_methods$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_methods$arity$1(mf);
  } else {
    var x__4945__auto__ = mf == null ? null : mf;
    return function() {
      var or__4309__auto__ = cljs.core._methods[function() {
        var G__10758 = x__4945__auto__;
        return goog.typeOf(G__10758);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._methods["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-methods", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._prefers = function cljs$core$_prefers(mf) {
  if (function() {
    var and__4297__auto__ = mf;
    if (and__4297__auto__) {
      return mf.cljs$core$IMultiFn$_prefers$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefers$arity$1(mf);
  } else {
    var x__4945__auto__ = mf == null ? null : mf;
    return function() {
      var or__4309__auto__ = cljs.core._prefers[function() {
        var G__10762 = x__4945__auto__;
        return goog.typeOf(G__10762);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._prefers["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-prefers", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._default_dispatch_val = function cljs$core$_default_dispatch_val(mf) {
  if (function() {
    var and__4297__auto__ = mf;
    if (and__4297__auto__) {
      return mf.cljs$core$IMultiFn$_default_dispatch_val$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_default_dispatch_val$arity$1(mf);
  } else {
    var x__4945__auto__ = mf == null ? null : mf;
    return function() {
      var or__4309__auto__ = cljs.core._default_dispatch_val[function() {
        var G__10766 = x__4945__auto__;
        return goog.typeOf(G__10766);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._default_dispatch_val["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-default-dispatch-val", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._dispatch_fn = function cljs$core$_dispatch_fn(mf) {
  if (function() {
    var and__4297__auto__ = mf;
    if (and__4297__auto__) {
      return mf.cljs$core$IMultiFn$_dispatch_fn$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_dispatch_fn$arity$1(mf);
  } else {
    var x__4945__auto__ = mf == null ? null : mf;
    return function() {
      var or__4309__auto__ = cljs.core._dispatch_fn[function() {
        var G__10770 = x__4945__auto__;
        return goog.typeOf(G__10770);
      }()];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core._dispatch_fn["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol("IMultiFn.-dispatch-fn", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core.throw_no_method_error = function cljs$core$throw_no_method_error(name, dispatch_val) {
  throw new Error([cljs.core.str("No method in multimethod '"), cljs.core.str(name), cljs.core.str("' for dispatch value: "), cljs.core.str(dispatch_val)].join(""));
};
cljs.core.MultiFn = function(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  this.name = name;
  this.dispatch_fn = dispatch_fn;
  this.default_dispatch_val = default_dispatch_val;
  this.hierarchy = hierarchy;
  this.method_table = method_table;
  this.prefer_table = prefer_table;
  this.method_cache = method_cache;
  this.cached_hierarchy = cached_hierarchy;
  this.cljs$lang$protocol_mask$partition0$ = 4194305;
  this.cljs$lang$protocol_mask$partition1$ = 4352;
};
cljs.core.MultiFn.prototype.call = function() {
  var G__11619 = null;
  var G__11619__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0() : self__.dispatch_fn.call(null);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$0 ? target_fn.cljs$core$IFn$_invoke$arity$0() : target_fn.call(null);
  };
  var G__11619__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__10772 = a;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1(G__10772) : self__.dispatch_fn.call(null, G__10772);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__10773 = a;
    return target_fn.cljs$core$IFn$_invoke$arity$1 ? target_fn.cljs$core$IFn$_invoke$arity$1(G__10773) : target_fn.call(null, G__10773);
  };
  var G__11619__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__10774 = a;
      var G__10775 = b;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2(G__10774, G__10775) : self__.dispatch_fn.call(null, G__10774, G__10775);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__10776 = a;
    var G__10777 = b;
    return target_fn.cljs$core$IFn$_invoke$arity$2 ? target_fn.cljs$core$IFn$_invoke$arity$2(G__10776, G__10777) : target_fn.call(null, G__10776, G__10777);
  };
  var G__11619__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__10778 = a;
      var G__10779 = b;
      var G__10780 = c;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3(G__10778, G__10779, G__10780) : self__.dispatch_fn.call(null, G__10778, G__10779, G__10780);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__10781 = a;
    var G__10782 = b;
    var G__10783 = c;
    return target_fn.cljs$core$IFn$_invoke$arity$3 ? target_fn.cljs$core$IFn$_invoke$arity$3(G__10781, G__10782, G__10783) : target_fn.call(null, G__10781, G__10782, G__10783);
  };
  var G__11619__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__10784 = a;
      var G__10785 = b;
      var G__10786 = c;
      var G__10787 = d;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4(G__10784, G__10785, G__10786, G__10787) : self__.dispatch_fn.call(null, G__10784, G__10785, G__10786, G__10787);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__10788 = a;
    var G__10789 = b;
    var G__10790 = c;
    var G__10791 = d;
    return target_fn.cljs$core$IFn$_invoke$arity$4 ? target_fn.cljs$core$IFn$_invoke$arity$4(G__10788, G__10789, G__10790, G__10791) : target_fn.call(null, G__10788, G__10789, G__10790, G__10791);
  };
  var G__11619__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__10792 = a;
      var G__10793 = b;
      var G__10794 = c;
      var G__10795 = d;
      var G__10796 = e;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5(G__10792, G__10793, G__10794, G__10795, G__10796) : self__.dispatch_fn.call(null, G__10792, G__10793, G__10794, G__10795, G__10796);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__10797 = a;
    var G__10798 = b;
    var G__10799 = c;
    var G__10800 = d;
    var G__10801 = e;
    return target_fn.cljs$core$IFn$_invoke$arity$5 ? target_fn.cljs$core$IFn$_invoke$arity$5(G__10797, G__10798, G__10799, G__10800, G__10801) : target_fn.call(null, G__10797, G__10798, G__10799, G__10800, G__10801);
  };
  var G__11619__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__10802 = a;
      var G__10803 = b;
      var G__10804 = c;
      var G__10805 = d;
      var G__10806 = e;
      var G__10807 = f;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6(G__10802, G__10803, G__10804, G__10805, G__10806, G__10807) : self__.dispatch_fn.call(null, G__10802, G__10803, G__10804, G__10805, G__10806, G__10807);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__10808 = a;
    var G__10809 = b;
    var G__10810 = c;
    var G__10811 = d;
    var G__10812 = e;
    var G__10813 = f;
    return target_fn.cljs$core$IFn$_invoke$arity$6 ? target_fn.cljs$core$IFn$_invoke$arity$6(G__10808, G__10809, G__10810, G__10811, G__10812, G__10813) : target_fn.call(null, G__10808, G__10809, G__10810, G__10811, G__10812, G__10813);
  };
  var G__11619__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__10814 = a;
      var G__10815 = b;
      var G__10816 = c;
      var G__10817 = d;
      var G__10818 = e;
      var G__10819 = f;
      var G__10820 = g;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7(G__10814, G__10815, G__10816, G__10817, G__10818, G__10819, G__10820) : self__.dispatch_fn.call(null, G__10814, G__10815, G__10816, G__10817, G__10818, G__10819, G__10820);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__10821 = a;
    var G__10822 = b;
    var G__10823 = c;
    var G__10824 = d;
    var G__10825 = e;
    var G__10826 = f;
    var G__10827 = g;
    return target_fn.cljs$core$IFn$_invoke$arity$7 ? target_fn.cljs$core$IFn$_invoke$arity$7(G__10821, G__10822, G__10823, G__10824, G__10825, G__10826, G__10827) : target_fn.call(null, G__10821, G__10822, G__10823, G__10824, G__10825, G__10826, G__10827);
  };
  var G__11619__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__10828 = a;
      var G__10829 = b;
      var G__10830 = c;
      var G__10831 = d;
      var G__10832 = e;
      var G__10833 = f;
      var G__10834 = g;
      var G__10835 = h;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8(G__10828, G__10829, G__10830, G__10831, G__10832, G__10833, G__10834, G__10835) : self__.dispatch_fn.call(null, G__10828, G__10829, G__10830, G__10831, G__10832, G__10833, G__10834, G__10835);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__10836 = a;
    var G__10837 = b;
    var G__10838 = c;
    var G__10839 = d;
    var G__10840 = e;
    var G__10841 = f;
    var G__10842 = g;
    var G__10843 = h;
    return target_fn.cljs$core$IFn$_invoke$arity$8 ? target_fn.cljs$core$IFn$_invoke$arity$8(G__10836, G__10837, G__10838, G__10839, G__10840, G__10841, G__10842, G__10843) : target_fn.call(null, G__10836, G__10837, G__10838, G__10839, G__10840, G__10841, G__10842, G__10843);
  };
  var G__11619__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__10844 = a;
      var G__10845 = b;
      var G__10846 = c;
      var G__10847 = d;
      var G__10848 = e;
      var G__10849 = f;
      var G__10850 = g;
      var G__10851 = h;
      var G__10852 = i;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9(G__10844, G__10845, G__10846, G__10847, G__10848, G__10849, G__10850, G__10851, G__10852) : self__.dispatch_fn.call(null, G__10844, G__10845, G__10846, G__10847, G__10848, G__10849, G__10850, G__10851, G__10852);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__10853 = a;
    var G__10854 = b;
    var G__10855 = c;
    var G__10856 = d;
    var G__10857 = e;
    var G__10858 = f;
    var G__10859 = g;
    var G__10860 = h;
    var G__10861 = i;
    return target_fn.cljs$core$IFn$_invoke$arity$9 ? target_fn.cljs$core$IFn$_invoke$arity$9(G__10853, G__10854, G__10855, G__10856, G__10857, G__10858, G__10859, G__10860, G__10861) : target_fn.call(null, G__10853, G__10854, G__10855, G__10856, G__10857, G__10858, G__10859, G__10860, G__10861);
  };
  var G__11619__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__10862 = a;
      var G__10863 = b;
      var G__10864 = c;
      var G__10865 = d;
      var G__10866 = e;
      var G__10867 = f;
      var G__10868 = g;
      var G__10869 = h;
      var G__10870 = i;
      var G__10871 = j;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10(G__10862, G__10863, G__10864, G__10865, G__10866, G__10867, G__10868, G__10869, G__10870, G__10871) : self__.dispatch_fn.call(null, G__10862, G__10863, G__10864, G__10865, G__10866, G__10867, G__10868, G__10869, G__10870, G__10871);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__10872 = a;
    var G__10873 = b;
    var G__10874 = c;
    var G__10875 = d;
    var G__10876 = e;
    var G__10877 = f;
    var G__10878 = g;
    var G__10879 = h;
    var G__10880 = i;
    var G__10881 = j;
    return target_fn.cljs$core$IFn$_invoke$arity$10 ? target_fn.cljs$core$IFn$_invoke$arity$10(G__10872, G__10873, G__10874, G__10875, G__10876, G__10877, G__10878, G__10879, G__10880, G__10881) : target_fn.call(null, G__10872, G__10873, G__10874, G__10875, G__10876, G__10877, G__10878, G__10879, G__10880, G__10881);
  };
  var G__11619__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__10882 = a;
      var G__10883 = b;
      var G__10884 = c;
      var G__10885 = d;
      var G__10886 = e;
      var G__10887 = f;
      var G__10888 = g;
      var G__10889 = h;
      var G__10890 = i;
      var G__10891 = j;
      var G__10892 = k;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11(G__10882, G__10883, G__10884, G__10885, G__10886, G__10887, G__10888, G__10889, G__10890, G__10891, G__10892) : self__.dispatch_fn.call(null, G__10882, G__10883, G__10884, G__10885, G__10886, G__10887, G__10888, G__10889, G__10890, G__10891, G__10892);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__10893 = a;
    var G__10894 = b;
    var G__10895 = c;
    var G__10896 = d;
    var G__10897 = e;
    var G__10898 = f;
    var G__10899 = g;
    var G__10900 = h;
    var G__10901 = i;
    var G__10902 = j;
    var G__10903 = k;
    return target_fn.cljs$core$IFn$_invoke$arity$11 ? target_fn.cljs$core$IFn$_invoke$arity$11(G__10893, G__10894, G__10895, G__10896, G__10897, G__10898, G__10899, G__10900, G__10901, G__10902, G__10903) : target_fn.call(null, G__10893, G__10894, G__10895, G__10896, G__10897, G__10898, G__10899, G__10900, G__10901, G__10902, G__10903);
  };
  var G__11619__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__10904 = a;
      var G__10905 = b;
      var G__10906 = c;
      var G__10907 = d;
      var G__10908 = e;
      var G__10909 = f;
      var G__10910 = g;
      var G__10911 = h;
      var G__10912 = i;
      var G__10913 = j;
      var G__10914 = k;
      var G__10915 = l;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12(G__10904, G__10905, G__10906, G__10907, G__10908, G__10909, G__10910, G__10911, G__10912, G__10913, G__10914, G__10915) : self__.dispatch_fn.call(null, G__10904, G__10905, G__10906, G__10907, G__10908, G__10909, G__10910, G__10911, G__10912, G__10913, G__10914, G__10915);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__10916 = a;
    var G__10917 = b;
    var G__10918 = c;
    var G__10919 = d;
    var G__10920 = e;
    var G__10921 = f;
    var G__10922 = g;
    var G__10923 = h;
    var G__10924 = i;
    var G__10925 = j;
    var G__10926 = k;
    var G__10927 = l;
    return target_fn.cljs$core$IFn$_invoke$arity$12 ? target_fn.cljs$core$IFn$_invoke$arity$12(G__10916, G__10917, G__10918, G__10919, G__10920, G__10921, G__10922, G__10923, G__10924, G__10925, G__10926, G__10927) : target_fn.call(null, G__10916, G__10917, G__10918, G__10919, G__10920, G__10921, G__10922, G__10923, G__10924, G__10925, G__10926, G__10927);
  };
  var G__11619__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__10928 = a;
      var G__10929 = b;
      var G__10930 = c;
      var G__10931 = d;
      var G__10932 = e;
      var G__10933 = f;
      var G__10934 = g;
      var G__10935 = h;
      var G__10936 = i;
      var G__10937 = j;
      var G__10938 = k;
      var G__10939 = l;
      var G__10940 = m;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13(G__10928, G__10929, G__10930, G__10931, G__10932, G__10933, G__10934, G__10935, G__10936, G__10937, G__10938, G__10939, G__10940) : self__.dispatch_fn.call(null, G__10928, G__10929, G__10930, G__10931, G__10932, G__10933, G__10934, G__10935, G__10936, G__10937, G__10938, G__10939, G__10940);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__10941 = a;
    var G__10942 = b;
    var G__10943 = c;
    var G__10944 = d;
    var G__10945 = e;
    var G__10946 = f;
    var G__10947 = g;
    var G__10948 = h;
    var G__10949 = i;
    var G__10950 = j;
    var G__10951 = k;
    var G__10952 = l;
    var G__10953 = m;
    return target_fn.cljs$core$IFn$_invoke$arity$13 ? target_fn.cljs$core$IFn$_invoke$arity$13(G__10941, G__10942, G__10943, G__10944, G__10945, G__10946, G__10947, G__10948, G__10949, G__10950, G__10951, G__10952, G__10953) : target_fn.call(null, G__10941, G__10942, G__10943, G__10944, G__10945, G__10946, G__10947, G__10948, G__10949, G__10950, G__10951, G__10952, G__10953);
  };
  var G__11619__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__10954 = a;
      var G__10955 = b;
      var G__10956 = c;
      var G__10957 = d;
      var G__10958 = e;
      var G__10959 = f;
      var G__10960 = g;
      var G__10961 = h;
      var G__10962 = i;
      var G__10963 = j;
      var G__10964 = k;
      var G__10965 = l;
      var G__10966 = m;
      var G__10967 = n;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14(G__10954, G__10955, G__10956, G__10957, G__10958, G__10959, G__10960, G__10961, G__10962, G__10963, G__10964, G__10965, G__10966, G__10967) : self__.dispatch_fn.call(null, G__10954, G__10955, G__10956, G__10957, G__10958, G__10959, G__10960, G__10961, G__10962, G__10963, G__10964, G__10965, G__10966, G__10967);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__10968 = a;
    var G__10969 = b;
    var G__10970 = c;
    var G__10971 = d;
    var G__10972 = e;
    var G__10973 = f;
    var G__10974 = g;
    var G__10975 = h;
    var G__10976 = i;
    var G__10977 = j;
    var G__10978 = k;
    var G__10979 = l;
    var G__10980 = m;
    var G__10981 = n;
    return target_fn.cljs$core$IFn$_invoke$arity$14 ? target_fn.cljs$core$IFn$_invoke$arity$14(G__10968, G__10969, G__10970, G__10971, G__10972, G__10973, G__10974, G__10975, G__10976, G__10977, G__10978, G__10979, G__10980, G__10981) : target_fn.call(null, G__10968, G__10969, G__10970, G__10971, G__10972, G__10973, G__10974, G__10975, G__10976, G__10977, G__10978, G__10979, G__10980, G__10981);
  };
  var G__11619__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__10982 = a;
      var G__10983 = b;
      var G__10984 = c;
      var G__10985 = d;
      var G__10986 = e;
      var G__10987 = f;
      var G__10988 = g;
      var G__10989 = h;
      var G__10990 = i;
      var G__10991 = j;
      var G__10992 = k;
      var G__10993 = l;
      var G__10994 = m;
      var G__10995 = n;
      var G__10996 = o;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15(G__10982, G__10983, G__10984, G__10985, G__10986, G__10987, G__10988, G__10989, G__10990, G__10991, G__10992, G__10993, G__10994, G__10995, G__10996) : self__.dispatch_fn.call(null, G__10982, G__10983, G__10984, G__10985, G__10986, G__10987, G__10988, G__10989, G__10990, G__10991, G__10992, G__10993, G__10994, G__10995, G__10996);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__10997 = a;
    var G__10998 = b;
    var G__10999 = c;
    var G__11000 = d;
    var G__11001 = e;
    var G__11002 = f;
    var G__11003 = g;
    var G__11004 = h;
    var G__11005 = i;
    var G__11006 = j;
    var G__11007 = k;
    var G__11008 = l;
    var G__11009 = m;
    var G__11010 = n;
    var G__11011 = o;
    return target_fn.cljs$core$IFn$_invoke$arity$15 ? target_fn.cljs$core$IFn$_invoke$arity$15(G__10997, G__10998, G__10999, G__11000, G__11001, G__11002, G__11003, G__11004, G__11005, G__11006, G__11007, G__11008, G__11009, G__11010, G__11011) : target_fn.call(null, G__10997, G__10998, G__10999, G__11000, G__11001, G__11002, G__11003, G__11004, G__11005, G__11006, G__11007, G__11008, G__11009, G__11010, G__11011);
  };
  var G__11619__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__11012 = a;
      var G__11013 = b;
      var G__11014 = c;
      var G__11015 = d;
      var G__11016 = e;
      var G__11017 = f;
      var G__11018 = g;
      var G__11019 = h;
      var G__11020 = i;
      var G__11021 = j;
      var G__11022 = k;
      var G__11023 = l;
      var G__11024 = m;
      var G__11025 = n;
      var G__11026 = o;
      var G__11027 = p;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16(G__11012, G__11013, G__11014, G__11015, G__11016, G__11017, G__11018, G__11019, G__11020, G__11021, G__11022, G__11023, G__11024, G__11025, G__11026, G__11027) : self__.dispatch_fn.call(null, G__11012, G__11013, G__11014, G__11015, G__11016, G__11017, G__11018, G__11019, G__11020, G__11021, G__11022, G__11023, G__11024, G__11025, G__11026, G__11027);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__11028 = a;
    var G__11029 = b;
    var G__11030 = c;
    var G__11031 = d;
    var G__11032 = e;
    var G__11033 = f;
    var G__11034 = g;
    var G__11035 = h;
    var G__11036 = i;
    var G__11037 = j;
    var G__11038 = k;
    var G__11039 = l;
    var G__11040 = m;
    var G__11041 = n;
    var G__11042 = o;
    var G__11043 = p;
    return target_fn.cljs$core$IFn$_invoke$arity$16 ? target_fn.cljs$core$IFn$_invoke$arity$16(G__11028, G__11029, G__11030, G__11031, G__11032, G__11033, G__11034, G__11035, G__11036, G__11037, G__11038, G__11039, G__11040, G__11041, G__11042, G__11043) : target_fn.call(null, G__11028, G__11029, G__11030, G__11031, G__11032, G__11033, G__11034, G__11035, G__11036, G__11037, G__11038, G__11039, G__11040, G__11041, G__11042, G__11043);
  };
  var G__11619__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__11044 = a;
      var G__11045 = b;
      var G__11046 = c;
      var G__11047 = d;
      var G__11048 = e;
      var G__11049 = f;
      var G__11050 = g;
      var G__11051 = h;
      var G__11052 = i;
      var G__11053 = j;
      var G__11054 = k;
      var G__11055 = l;
      var G__11056 = m;
      var G__11057 = n;
      var G__11058 = o;
      var G__11059 = p;
      var G__11060 = q;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17(G__11044, G__11045, G__11046, G__11047, G__11048, G__11049, G__11050, G__11051, G__11052, G__11053, G__11054, G__11055, G__11056, G__11057, G__11058, G__11059, G__11060) : self__.dispatch_fn.call(null, G__11044, G__11045, G__11046, G__11047, G__11048, G__11049, G__11050, G__11051, G__11052, G__11053, G__11054, G__11055, G__11056, G__11057, G__11058, G__11059, G__11060);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__11061 = a;
    var G__11062 = b;
    var G__11063 = c;
    var G__11064 = d;
    var G__11065 = e;
    var G__11066 = f;
    var G__11067 = g;
    var G__11068 = h;
    var G__11069 = i;
    var G__11070 = j;
    var G__11071 = k;
    var G__11072 = l;
    var G__11073 = m;
    var G__11074 = n;
    var G__11075 = o;
    var G__11076 = p;
    var G__11077 = q;
    return target_fn.cljs$core$IFn$_invoke$arity$17 ? target_fn.cljs$core$IFn$_invoke$arity$17(G__11061, G__11062, G__11063, G__11064, G__11065, G__11066, G__11067, G__11068, G__11069, G__11070, G__11071, G__11072, G__11073, G__11074, G__11075, G__11076, G__11077) : target_fn.call(null, G__11061, G__11062, G__11063, G__11064, G__11065, G__11066, G__11067, G__11068, G__11069, G__11070, G__11071, G__11072, G__11073, G__11074, G__11075, G__11076, G__11077);
  };
  var G__11619__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__11078 = a;
      var G__11079 = b;
      var G__11080 = c;
      var G__11081 = d;
      var G__11082 = e;
      var G__11083 = f;
      var G__11084 = g;
      var G__11085 = h;
      var G__11086 = i;
      var G__11087 = j;
      var G__11088 = k;
      var G__11089 = l;
      var G__11090 = m;
      var G__11091 = n;
      var G__11092 = o;
      var G__11093 = p;
      var G__11094 = q;
      var G__11095 = r;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18(G__11078, G__11079, G__11080, G__11081, G__11082, G__11083, G__11084, G__11085, G__11086, G__11087, G__11088, G__11089, G__11090, G__11091, G__11092, G__11093, G__11094, G__11095) : self__.dispatch_fn.call(null, G__11078, G__11079, G__11080, G__11081, G__11082, G__11083, G__11084, G__11085, G__11086, G__11087, G__11088, G__11089, G__11090, G__11091, G__11092, G__11093, G__11094, G__11095);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__11096 = a;
    var G__11097 = b;
    var G__11098 = c;
    var G__11099 = d;
    var G__11100 = e;
    var G__11101 = f;
    var G__11102 = g;
    var G__11103 = h;
    var G__11104 = i;
    var G__11105 = j;
    var G__11106 = k;
    var G__11107 = l;
    var G__11108 = m;
    var G__11109 = n;
    var G__11110 = o;
    var G__11111 = p;
    var G__11112 = q;
    var G__11113 = r;
    return target_fn.cljs$core$IFn$_invoke$arity$18 ? target_fn.cljs$core$IFn$_invoke$arity$18(G__11096, G__11097, G__11098, G__11099, G__11100, G__11101, G__11102, G__11103, G__11104, G__11105, G__11106, G__11107, G__11108, G__11109, G__11110, G__11111, G__11112, G__11113) : target_fn.call(null, G__11096, G__11097, G__11098, G__11099, G__11100, G__11101, G__11102, G__11103, G__11104, G__11105, G__11106, G__11107, G__11108, G__11109, G__11110, G__11111, G__11112, G__11113);
  };
  var G__11619__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__11114 = a;
      var G__11115 = b;
      var G__11116 = c;
      var G__11117 = d;
      var G__11118 = e;
      var G__11119 = f;
      var G__11120 = g;
      var G__11121 = h;
      var G__11122 = i;
      var G__11123 = j;
      var G__11124 = k;
      var G__11125 = l;
      var G__11126 = m;
      var G__11127 = n;
      var G__11128 = o;
      var G__11129 = p;
      var G__11130 = q;
      var G__11131 = r;
      var G__11132 = s;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19(G__11114, G__11115, G__11116, G__11117, G__11118, G__11119, G__11120, G__11121, G__11122, G__11123, G__11124, G__11125, G__11126, G__11127, G__11128, G__11129, G__11130, G__11131, G__11132) : self__.dispatch_fn.call(null, G__11114, G__11115, G__11116, G__11117, G__11118, G__11119, G__11120, G__11121, G__11122, G__11123, G__11124, G__11125, G__11126, G__11127, G__11128, G__11129, G__11130, 
      G__11131, G__11132);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__11133 = a;
    var G__11134 = b;
    var G__11135 = c;
    var G__11136 = d;
    var G__11137 = e;
    var G__11138 = f;
    var G__11139 = g;
    var G__11140 = h;
    var G__11141 = i;
    var G__11142 = j;
    var G__11143 = k;
    var G__11144 = l;
    var G__11145 = m;
    var G__11146 = n;
    var G__11147 = o;
    var G__11148 = p;
    var G__11149 = q;
    var G__11150 = r;
    var G__11151 = s;
    return target_fn.cljs$core$IFn$_invoke$arity$19 ? target_fn.cljs$core$IFn$_invoke$arity$19(G__11133, G__11134, G__11135, G__11136, G__11137, G__11138, G__11139, G__11140, G__11141, G__11142, G__11143, G__11144, G__11145, G__11146, G__11147, G__11148, G__11149, G__11150, G__11151) : target_fn.call(null, G__11133, G__11134, G__11135, G__11136, G__11137, G__11138, G__11139, G__11140, G__11141, G__11142, G__11143, G__11144, G__11145, G__11146, G__11147, G__11148, G__11149, G__11150, G__11151);
  };
  var G__11619__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = function() {
      var G__11152 = a;
      var G__11153 = b;
      var G__11154 = c;
      var G__11155 = d;
      var G__11156 = e;
      var G__11157 = f;
      var G__11158 = g;
      var G__11159 = h;
      var G__11160 = i;
      var G__11161 = j;
      var G__11162 = k;
      var G__11163 = l;
      var G__11164 = m;
      var G__11165 = n;
      var G__11166 = o;
      var G__11167 = p;
      var G__11168 = q;
      var G__11169 = r;
      var G__11170 = s;
      var G__11171 = t;
      return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20(G__11152, G__11153, G__11154, G__11155, G__11156, G__11157, G__11158, G__11159, G__11160, G__11161, G__11162, G__11163, G__11164, G__11165, G__11166, G__11167, G__11168, G__11169, G__11170, G__11171) : self__.dispatch_fn.call(null, G__11152, G__11153, G__11154, G__11155, G__11156, G__11157, G__11158, G__11159, G__11160, G__11161, G__11162, G__11163, G__11164, G__11165, G__11166, G__11167, 
      G__11168, G__11169, G__11170, G__11171);
    }();
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    var G__11172 = a;
    var G__11173 = b;
    var G__11174 = c;
    var G__11175 = d;
    var G__11176 = e;
    var G__11177 = f;
    var G__11178 = g;
    var G__11179 = h;
    var G__11180 = i;
    var G__11181 = j;
    var G__11182 = k;
    var G__11183 = l;
    var G__11184 = m;
    var G__11185 = n;
    var G__11186 = o;
    var G__11187 = p;
    var G__11188 = q;
    var G__11189 = r;
    var G__11190 = s;
    var G__11191 = t;
    return target_fn.cljs$core$IFn$_invoke$arity$20 ? target_fn.cljs$core$IFn$_invoke$arity$20(G__11172, G__11173, G__11174, G__11175, G__11176, G__11177, G__11178, G__11179, G__11180, G__11181, G__11182, G__11183, G__11184, G__11185, G__11186, G__11187, G__11188, G__11189, G__11190, G__11191) : target_fn.call(null, G__11172, G__11173, G__11174, G__11175, G__11176, G__11177, G__11178, G__11179, G__11180, G__11181, G__11182, G__11183, G__11184, G__11185, G__11186, G__11187, G__11188, G__11189, G__11190, 
    G__11191);
  };
  var G__11619__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(self__.dispatch_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(target_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
  };
  G__11619 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__11619__1.call(this, self__);
      case 2:
        return G__11619__2.call(this, self__, a);
      case 3:
        return G__11619__3.call(this, self__, a, b);
      case 4:
        return G__11619__4.call(this, self__, a, b, c);
      case 5:
        return G__11619__5.call(this, self__, a, b, c, d);
      case 6:
        return G__11619__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__11619__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__11619__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__11619__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__11619__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__11619__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__11619__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__11619__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__11619__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__11619__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__11619__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__11619__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__11619__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__11619__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__11619__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__11619__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__11619__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__11619.cljs$core$IFn$_invoke$arity$1 = G__11619__1;
  G__11619.cljs$core$IFn$_invoke$arity$2 = G__11619__2;
  G__11619.cljs$core$IFn$_invoke$arity$3 = G__11619__3;
  G__11619.cljs$core$IFn$_invoke$arity$4 = G__11619__4;
  G__11619.cljs$core$IFn$_invoke$arity$5 = G__11619__5;
  G__11619.cljs$core$IFn$_invoke$arity$6 = G__11619__6;
  G__11619.cljs$core$IFn$_invoke$arity$7 = G__11619__7;
  G__11619.cljs$core$IFn$_invoke$arity$8 = G__11619__8;
  G__11619.cljs$core$IFn$_invoke$arity$9 = G__11619__9;
  G__11619.cljs$core$IFn$_invoke$arity$10 = G__11619__10;
  G__11619.cljs$core$IFn$_invoke$arity$11 = G__11619__11;
  G__11619.cljs$core$IFn$_invoke$arity$12 = G__11619__12;
  G__11619.cljs$core$IFn$_invoke$arity$13 = G__11619__13;
  G__11619.cljs$core$IFn$_invoke$arity$14 = G__11619__14;
  G__11619.cljs$core$IFn$_invoke$arity$15 = G__11619__15;
  G__11619.cljs$core$IFn$_invoke$arity$16 = G__11619__16;
  G__11619.cljs$core$IFn$_invoke$arity$17 = G__11619__17;
  G__11619.cljs$core$IFn$_invoke$arity$18 = G__11619__18;
  G__11619.cljs$core$IFn$_invoke$arity$19 = G__11619__19;
  G__11619.cljs$core$IFn$_invoke$arity$20 = G__11619__20;
  G__11619.cljs$core$IFn$_invoke$arity$21 = G__11619__21;
  G__11619.cljs$core$IFn$_invoke$arity$22 = G__11619__22;
  return G__11619;
}();
cljs.core.MultiFn.prototype.apply = function(self__, args10771) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args10771)));
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0() : self__.dispatch_fn.call(null);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$0 ? target_fn.cljs$core$IFn$_invoke$arity$0() : target_fn.call(null);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__11192 = a;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1(G__11192) : self__.dispatch_fn.call(null, G__11192);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__11193 = a;
  return target_fn.cljs$core$IFn$_invoke$arity$1 ? target_fn.cljs$core$IFn$_invoke$arity$1(G__11193) : target_fn.call(null, G__11193);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__11194 = a;
    var G__11195 = b;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2(G__11194, G__11195) : self__.dispatch_fn.call(null, G__11194, G__11195);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__11196 = a;
  var G__11197 = b;
  return target_fn.cljs$core$IFn$_invoke$arity$2 ? target_fn.cljs$core$IFn$_invoke$arity$2(G__11196, G__11197) : target_fn.call(null, G__11196, G__11197);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__11198 = a;
    var G__11199 = b;
    var G__11200 = c;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3(G__11198, G__11199, G__11200) : self__.dispatch_fn.call(null, G__11198, G__11199, G__11200);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__11201 = a;
  var G__11202 = b;
  var G__11203 = c;
  return target_fn.cljs$core$IFn$_invoke$arity$3 ? target_fn.cljs$core$IFn$_invoke$arity$3(G__11201, G__11202, G__11203) : target_fn.call(null, G__11201, G__11202, G__11203);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__11204 = a;
    var G__11205 = b;
    var G__11206 = c;
    var G__11207 = d;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4(G__11204, G__11205, G__11206, G__11207) : self__.dispatch_fn.call(null, G__11204, G__11205, G__11206, G__11207);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__11208 = a;
  var G__11209 = b;
  var G__11210 = c;
  var G__11211 = d;
  return target_fn.cljs$core$IFn$_invoke$arity$4 ? target_fn.cljs$core$IFn$_invoke$arity$4(G__11208, G__11209, G__11210, G__11211) : target_fn.call(null, G__11208, G__11209, G__11210, G__11211);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__11212 = a;
    var G__11213 = b;
    var G__11214 = c;
    var G__11215 = d;
    var G__11216 = e;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5(G__11212, G__11213, G__11214, G__11215, G__11216) : self__.dispatch_fn.call(null, G__11212, G__11213, G__11214, G__11215, G__11216);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__11217 = a;
  var G__11218 = b;
  var G__11219 = c;
  var G__11220 = d;
  var G__11221 = e;
  return target_fn.cljs$core$IFn$_invoke$arity$5 ? target_fn.cljs$core$IFn$_invoke$arity$5(G__11217, G__11218, G__11219, G__11220, G__11221) : target_fn.call(null, G__11217, G__11218, G__11219, G__11220, G__11221);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__11222 = a;
    var G__11223 = b;
    var G__11224 = c;
    var G__11225 = d;
    var G__11226 = e;
    var G__11227 = f;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6(G__11222, G__11223, G__11224, G__11225, G__11226, G__11227) : self__.dispatch_fn.call(null, G__11222, G__11223, G__11224, G__11225, G__11226, G__11227);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__11228 = a;
  var G__11229 = b;
  var G__11230 = c;
  var G__11231 = d;
  var G__11232 = e;
  var G__11233 = f;
  return target_fn.cljs$core$IFn$_invoke$arity$6 ? target_fn.cljs$core$IFn$_invoke$arity$6(G__11228, G__11229, G__11230, G__11231, G__11232, G__11233) : target_fn.call(null, G__11228, G__11229, G__11230, G__11231, G__11232, G__11233);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__11234 = a;
    var G__11235 = b;
    var G__11236 = c;
    var G__11237 = d;
    var G__11238 = e;
    var G__11239 = f;
    var G__11240 = g;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7(G__11234, G__11235, G__11236, G__11237, G__11238, G__11239, G__11240) : self__.dispatch_fn.call(null, G__11234, G__11235, G__11236, G__11237, G__11238, G__11239, G__11240);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__11241 = a;
  var G__11242 = b;
  var G__11243 = c;
  var G__11244 = d;
  var G__11245 = e;
  var G__11246 = f;
  var G__11247 = g;
  return target_fn.cljs$core$IFn$_invoke$arity$7 ? target_fn.cljs$core$IFn$_invoke$arity$7(G__11241, G__11242, G__11243, G__11244, G__11245, G__11246, G__11247) : target_fn.call(null, G__11241, G__11242, G__11243, G__11244, G__11245, G__11246, G__11247);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__11248 = a;
    var G__11249 = b;
    var G__11250 = c;
    var G__11251 = d;
    var G__11252 = e;
    var G__11253 = f;
    var G__11254 = g;
    var G__11255 = h;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8(G__11248, G__11249, G__11250, G__11251, G__11252, G__11253, G__11254, G__11255) : self__.dispatch_fn.call(null, G__11248, G__11249, G__11250, G__11251, G__11252, G__11253, G__11254, G__11255);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__11256 = a;
  var G__11257 = b;
  var G__11258 = c;
  var G__11259 = d;
  var G__11260 = e;
  var G__11261 = f;
  var G__11262 = g;
  var G__11263 = h;
  return target_fn.cljs$core$IFn$_invoke$arity$8 ? target_fn.cljs$core$IFn$_invoke$arity$8(G__11256, G__11257, G__11258, G__11259, G__11260, G__11261, G__11262, G__11263) : target_fn.call(null, G__11256, G__11257, G__11258, G__11259, G__11260, G__11261, G__11262, G__11263);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__11264 = a;
    var G__11265 = b;
    var G__11266 = c;
    var G__11267 = d;
    var G__11268 = e;
    var G__11269 = f;
    var G__11270 = g;
    var G__11271 = h;
    var G__11272 = i;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9(G__11264, G__11265, G__11266, G__11267, G__11268, G__11269, G__11270, G__11271, G__11272) : self__.dispatch_fn.call(null, G__11264, G__11265, G__11266, G__11267, G__11268, G__11269, G__11270, G__11271, G__11272);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__11273 = a;
  var G__11274 = b;
  var G__11275 = c;
  var G__11276 = d;
  var G__11277 = e;
  var G__11278 = f;
  var G__11279 = g;
  var G__11280 = h;
  var G__11281 = i;
  return target_fn.cljs$core$IFn$_invoke$arity$9 ? target_fn.cljs$core$IFn$_invoke$arity$9(G__11273, G__11274, G__11275, G__11276, G__11277, G__11278, G__11279, G__11280, G__11281) : target_fn.call(null, G__11273, G__11274, G__11275, G__11276, G__11277, G__11278, G__11279, G__11280, G__11281);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__11282 = a;
    var G__11283 = b;
    var G__11284 = c;
    var G__11285 = d;
    var G__11286 = e;
    var G__11287 = f;
    var G__11288 = g;
    var G__11289 = h;
    var G__11290 = i;
    var G__11291 = j;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10(G__11282, G__11283, G__11284, G__11285, G__11286, G__11287, G__11288, G__11289, G__11290, G__11291) : self__.dispatch_fn.call(null, G__11282, G__11283, G__11284, G__11285, G__11286, G__11287, G__11288, G__11289, G__11290, G__11291);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__11292 = a;
  var G__11293 = b;
  var G__11294 = c;
  var G__11295 = d;
  var G__11296 = e;
  var G__11297 = f;
  var G__11298 = g;
  var G__11299 = h;
  var G__11300 = i;
  var G__11301 = j;
  return target_fn.cljs$core$IFn$_invoke$arity$10 ? target_fn.cljs$core$IFn$_invoke$arity$10(G__11292, G__11293, G__11294, G__11295, G__11296, G__11297, G__11298, G__11299, G__11300, G__11301) : target_fn.call(null, G__11292, G__11293, G__11294, G__11295, G__11296, G__11297, G__11298, G__11299, G__11300, G__11301);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__11302 = a;
    var G__11303 = b;
    var G__11304 = c;
    var G__11305 = d;
    var G__11306 = e;
    var G__11307 = f;
    var G__11308 = g;
    var G__11309 = h;
    var G__11310 = i;
    var G__11311 = j;
    var G__11312 = k;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11(G__11302, G__11303, G__11304, G__11305, G__11306, G__11307, G__11308, G__11309, G__11310, G__11311, G__11312) : self__.dispatch_fn.call(null, G__11302, G__11303, G__11304, G__11305, G__11306, G__11307, G__11308, G__11309, G__11310, G__11311, G__11312);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__11313 = a;
  var G__11314 = b;
  var G__11315 = c;
  var G__11316 = d;
  var G__11317 = e;
  var G__11318 = f;
  var G__11319 = g;
  var G__11320 = h;
  var G__11321 = i;
  var G__11322 = j;
  var G__11323 = k;
  return target_fn.cljs$core$IFn$_invoke$arity$11 ? target_fn.cljs$core$IFn$_invoke$arity$11(G__11313, G__11314, G__11315, G__11316, G__11317, G__11318, G__11319, G__11320, G__11321, G__11322, G__11323) : target_fn.call(null, G__11313, G__11314, G__11315, G__11316, G__11317, G__11318, G__11319, G__11320, G__11321, G__11322, G__11323);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__11324 = a;
    var G__11325 = b;
    var G__11326 = c;
    var G__11327 = d;
    var G__11328 = e;
    var G__11329 = f;
    var G__11330 = g;
    var G__11331 = h;
    var G__11332 = i;
    var G__11333 = j;
    var G__11334 = k;
    var G__11335 = l;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12(G__11324, G__11325, G__11326, G__11327, G__11328, G__11329, G__11330, G__11331, G__11332, G__11333, G__11334, G__11335) : self__.dispatch_fn.call(null, G__11324, G__11325, G__11326, G__11327, G__11328, G__11329, G__11330, G__11331, G__11332, G__11333, G__11334, G__11335);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__11336 = a;
  var G__11337 = b;
  var G__11338 = c;
  var G__11339 = d;
  var G__11340 = e;
  var G__11341 = f;
  var G__11342 = g;
  var G__11343 = h;
  var G__11344 = i;
  var G__11345 = j;
  var G__11346 = k;
  var G__11347 = l;
  return target_fn.cljs$core$IFn$_invoke$arity$12 ? target_fn.cljs$core$IFn$_invoke$arity$12(G__11336, G__11337, G__11338, G__11339, G__11340, G__11341, G__11342, G__11343, G__11344, G__11345, G__11346, G__11347) : target_fn.call(null, G__11336, G__11337, G__11338, G__11339, G__11340, G__11341, G__11342, G__11343, G__11344, G__11345, G__11346, G__11347);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__11348 = a;
    var G__11349 = b;
    var G__11350 = c;
    var G__11351 = d;
    var G__11352 = e;
    var G__11353 = f;
    var G__11354 = g;
    var G__11355 = h;
    var G__11356 = i;
    var G__11357 = j;
    var G__11358 = k;
    var G__11359 = l;
    var G__11360 = m;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13(G__11348, G__11349, G__11350, G__11351, G__11352, G__11353, G__11354, G__11355, G__11356, G__11357, G__11358, G__11359, G__11360) : self__.dispatch_fn.call(null, G__11348, G__11349, G__11350, G__11351, G__11352, G__11353, G__11354, G__11355, G__11356, G__11357, G__11358, G__11359, G__11360);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__11361 = a;
  var G__11362 = b;
  var G__11363 = c;
  var G__11364 = d;
  var G__11365 = e;
  var G__11366 = f;
  var G__11367 = g;
  var G__11368 = h;
  var G__11369 = i;
  var G__11370 = j;
  var G__11371 = k;
  var G__11372 = l;
  var G__11373 = m;
  return target_fn.cljs$core$IFn$_invoke$arity$13 ? target_fn.cljs$core$IFn$_invoke$arity$13(G__11361, G__11362, G__11363, G__11364, G__11365, G__11366, G__11367, G__11368, G__11369, G__11370, G__11371, G__11372, G__11373) : target_fn.call(null, G__11361, G__11362, G__11363, G__11364, G__11365, G__11366, G__11367, G__11368, G__11369, G__11370, G__11371, G__11372, G__11373);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__11374 = a;
    var G__11375 = b;
    var G__11376 = c;
    var G__11377 = d;
    var G__11378 = e;
    var G__11379 = f;
    var G__11380 = g;
    var G__11381 = h;
    var G__11382 = i;
    var G__11383 = j;
    var G__11384 = k;
    var G__11385 = l;
    var G__11386 = m;
    var G__11387 = n;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14(G__11374, G__11375, G__11376, G__11377, G__11378, G__11379, G__11380, G__11381, G__11382, G__11383, G__11384, G__11385, G__11386, G__11387) : self__.dispatch_fn.call(null, G__11374, G__11375, G__11376, G__11377, G__11378, G__11379, G__11380, G__11381, G__11382, G__11383, G__11384, G__11385, G__11386, G__11387);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__11388 = a;
  var G__11389 = b;
  var G__11390 = c;
  var G__11391 = d;
  var G__11392 = e;
  var G__11393 = f;
  var G__11394 = g;
  var G__11395 = h;
  var G__11396 = i;
  var G__11397 = j;
  var G__11398 = k;
  var G__11399 = l;
  var G__11400 = m;
  var G__11401 = n;
  return target_fn.cljs$core$IFn$_invoke$arity$14 ? target_fn.cljs$core$IFn$_invoke$arity$14(G__11388, G__11389, G__11390, G__11391, G__11392, G__11393, G__11394, G__11395, G__11396, G__11397, G__11398, G__11399, G__11400, G__11401) : target_fn.call(null, G__11388, G__11389, G__11390, G__11391, G__11392, G__11393, G__11394, G__11395, G__11396, G__11397, G__11398, G__11399, G__11400, G__11401);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__11402 = a;
    var G__11403 = b;
    var G__11404 = c;
    var G__11405 = d;
    var G__11406 = e;
    var G__11407 = f;
    var G__11408 = g;
    var G__11409 = h;
    var G__11410 = i;
    var G__11411 = j;
    var G__11412 = k;
    var G__11413 = l;
    var G__11414 = m;
    var G__11415 = n;
    var G__11416 = o;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15(G__11402, G__11403, G__11404, G__11405, G__11406, G__11407, G__11408, G__11409, G__11410, G__11411, G__11412, G__11413, G__11414, G__11415, G__11416) : self__.dispatch_fn.call(null, G__11402, G__11403, G__11404, G__11405, G__11406, G__11407, G__11408, G__11409, G__11410, G__11411, G__11412, G__11413, G__11414, G__11415, G__11416);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__11417 = a;
  var G__11418 = b;
  var G__11419 = c;
  var G__11420 = d;
  var G__11421 = e;
  var G__11422 = f;
  var G__11423 = g;
  var G__11424 = h;
  var G__11425 = i;
  var G__11426 = j;
  var G__11427 = k;
  var G__11428 = l;
  var G__11429 = m;
  var G__11430 = n;
  var G__11431 = o;
  return target_fn.cljs$core$IFn$_invoke$arity$15 ? target_fn.cljs$core$IFn$_invoke$arity$15(G__11417, G__11418, G__11419, G__11420, G__11421, G__11422, G__11423, G__11424, G__11425, G__11426, G__11427, G__11428, G__11429, G__11430, G__11431) : target_fn.call(null, G__11417, G__11418, G__11419, G__11420, G__11421, G__11422, G__11423, G__11424, G__11425, G__11426, G__11427, G__11428, G__11429, G__11430, G__11431);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__11432 = a;
    var G__11433 = b;
    var G__11434 = c;
    var G__11435 = d;
    var G__11436 = e;
    var G__11437 = f;
    var G__11438 = g;
    var G__11439 = h;
    var G__11440 = i;
    var G__11441 = j;
    var G__11442 = k;
    var G__11443 = l;
    var G__11444 = m;
    var G__11445 = n;
    var G__11446 = o;
    var G__11447 = p;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16(G__11432, G__11433, G__11434, G__11435, G__11436, G__11437, G__11438, G__11439, G__11440, G__11441, G__11442, G__11443, G__11444, G__11445, G__11446, G__11447) : self__.dispatch_fn.call(null, G__11432, G__11433, G__11434, G__11435, G__11436, G__11437, G__11438, G__11439, G__11440, G__11441, G__11442, G__11443, G__11444, G__11445, G__11446, G__11447);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__11448 = a;
  var G__11449 = b;
  var G__11450 = c;
  var G__11451 = d;
  var G__11452 = e;
  var G__11453 = f;
  var G__11454 = g;
  var G__11455 = h;
  var G__11456 = i;
  var G__11457 = j;
  var G__11458 = k;
  var G__11459 = l;
  var G__11460 = m;
  var G__11461 = n;
  var G__11462 = o;
  var G__11463 = p;
  return target_fn.cljs$core$IFn$_invoke$arity$16 ? target_fn.cljs$core$IFn$_invoke$arity$16(G__11448, G__11449, G__11450, G__11451, G__11452, G__11453, G__11454, G__11455, G__11456, G__11457, G__11458, G__11459, G__11460, G__11461, G__11462, G__11463) : target_fn.call(null, G__11448, G__11449, G__11450, G__11451, G__11452, G__11453, G__11454, G__11455, G__11456, G__11457, G__11458, G__11459, G__11460, G__11461, G__11462, G__11463);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__11464 = a;
    var G__11465 = b;
    var G__11466 = c;
    var G__11467 = d;
    var G__11468 = e;
    var G__11469 = f;
    var G__11470 = g;
    var G__11471 = h;
    var G__11472 = i;
    var G__11473 = j;
    var G__11474 = k;
    var G__11475 = l;
    var G__11476 = m;
    var G__11477 = n;
    var G__11478 = o;
    var G__11479 = p;
    var G__11480 = q;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17(G__11464, G__11465, G__11466, G__11467, G__11468, G__11469, G__11470, G__11471, G__11472, G__11473, G__11474, G__11475, G__11476, G__11477, G__11478, G__11479, G__11480) : self__.dispatch_fn.call(null, G__11464, G__11465, G__11466, G__11467, G__11468, G__11469, G__11470, G__11471, G__11472, G__11473, G__11474, G__11475, G__11476, G__11477, G__11478, G__11479, G__11480);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__11481 = a;
  var G__11482 = b;
  var G__11483 = c;
  var G__11484 = d;
  var G__11485 = e;
  var G__11486 = f;
  var G__11487 = g;
  var G__11488 = h;
  var G__11489 = i;
  var G__11490 = j;
  var G__11491 = k;
  var G__11492 = l;
  var G__11493 = m;
  var G__11494 = n;
  var G__11495 = o;
  var G__11496 = p;
  var G__11497 = q;
  return target_fn.cljs$core$IFn$_invoke$arity$17 ? target_fn.cljs$core$IFn$_invoke$arity$17(G__11481, G__11482, G__11483, G__11484, G__11485, G__11486, G__11487, G__11488, G__11489, G__11490, G__11491, G__11492, G__11493, G__11494, G__11495, G__11496, G__11497) : target_fn.call(null, G__11481, G__11482, G__11483, G__11484, G__11485, G__11486, G__11487, G__11488, G__11489, G__11490, G__11491, G__11492, G__11493, G__11494, G__11495, G__11496, G__11497);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__11498 = a;
    var G__11499 = b;
    var G__11500 = c;
    var G__11501 = d;
    var G__11502 = e;
    var G__11503 = f;
    var G__11504 = g;
    var G__11505 = h;
    var G__11506 = i;
    var G__11507 = j;
    var G__11508 = k;
    var G__11509 = l;
    var G__11510 = m;
    var G__11511 = n;
    var G__11512 = o;
    var G__11513 = p;
    var G__11514 = q;
    var G__11515 = r;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18(G__11498, G__11499, G__11500, G__11501, G__11502, G__11503, G__11504, G__11505, G__11506, G__11507, G__11508, G__11509, G__11510, G__11511, G__11512, G__11513, G__11514, G__11515) : self__.dispatch_fn.call(null, G__11498, G__11499, G__11500, G__11501, G__11502, G__11503, G__11504, G__11505, G__11506, G__11507, G__11508, G__11509, G__11510, G__11511, G__11512, G__11513, G__11514, G__11515);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__11516 = a;
  var G__11517 = b;
  var G__11518 = c;
  var G__11519 = d;
  var G__11520 = e;
  var G__11521 = f;
  var G__11522 = g;
  var G__11523 = h;
  var G__11524 = i;
  var G__11525 = j;
  var G__11526 = k;
  var G__11527 = l;
  var G__11528 = m;
  var G__11529 = n;
  var G__11530 = o;
  var G__11531 = p;
  var G__11532 = q;
  var G__11533 = r;
  return target_fn.cljs$core$IFn$_invoke$arity$18 ? target_fn.cljs$core$IFn$_invoke$arity$18(G__11516, G__11517, G__11518, G__11519, G__11520, G__11521, G__11522, G__11523, G__11524, G__11525, G__11526, G__11527, G__11528, G__11529, G__11530, G__11531, G__11532, G__11533) : target_fn.call(null, G__11516, G__11517, G__11518, G__11519, G__11520, G__11521, G__11522, G__11523, G__11524, G__11525, G__11526, G__11527, G__11528, G__11529, G__11530, G__11531, G__11532, G__11533);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__11534 = a;
    var G__11535 = b;
    var G__11536 = c;
    var G__11537 = d;
    var G__11538 = e;
    var G__11539 = f;
    var G__11540 = g;
    var G__11541 = h;
    var G__11542 = i;
    var G__11543 = j;
    var G__11544 = k;
    var G__11545 = l;
    var G__11546 = m;
    var G__11547 = n;
    var G__11548 = o;
    var G__11549 = p;
    var G__11550 = q;
    var G__11551 = r;
    var G__11552 = s;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19(G__11534, G__11535, G__11536, G__11537, G__11538, G__11539, G__11540, G__11541, G__11542, G__11543, G__11544, G__11545, G__11546, G__11547, G__11548, G__11549, G__11550, G__11551, G__11552) : self__.dispatch_fn.call(null, G__11534, G__11535, G__11536, G__11537, G__11538, G__11539, G__11540, G__11541, G__11542, G__11543, G__11544, G__11545, G__11546, G__11547, G__11548, G__11549, G__11550, 
    G__11551, G__11552);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__11553 = a;
  var G__11554 = b;
  var G__11555 = c;
  var G__11556 = d;
  var G__11557 = e;
  var G__11558 = f;
  var G__11559 = g;
  var G__11560 = h;
  var G__11561 = i;
  var G__11562 = j;
  var G__11563 = k;
  var G__11564 = l;
  var G__11565 = m;
  var G__11566 = n;
  var G__11567 = o;
  var G__11568 = p;
  var G__11569 = q;
  var G__11570 = r;
  var G__11571 = s;
  return target_fn.cljs$core$IFn$_invoke$arity$19 ? target_fn.cljs$core$IFn$_invoke$arity$19(G__11553, G__11554, G__11555, G__11556, G__11557, G__11558, G__11559, G__11560, G__11561, G__11562, G__11563, G__11564, G__11565, G__11566, G__11567, G__11568, G__11569, G__11570, G__11571) : target_fn.call(null, G__11553, G__11554, G__11555, G__11556, G__11557, G__11558, G__11559, G__11560, G__11561, G__11562, G__11563, G__11564, G__11565, G__11566, G__11567, G__11568, G__11569, G__11570, G__11571);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var mf = this;
  var dispatch_val = function() {
    var G__11572 = a;
    var G__11573 = b;
    var G__11574 = c;
    var G__11575 = d;
    var G__11576 = e;
    var G__11577 = f;
    var G__11578 = g;
    var G__11579 = h;
    var G__11580 = i;
    var G__11581 = j;
    var G__11582 = k;
    var G__11583 = l;
    var G__11584 = m;
    var G__11585 = n;
    var G__11586 = o;
    var G__11587 = p;
    var G__11588 = q;
    var G__11589 = r;
    var G__11590 = s;
    var G__11591 = t;
    return self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20(G__11572, G__11573, G__11574, G__11575, G__11576, G__11577, G__11578, G__11579, G__11580, G__11581, G__11582, G__11583, G__11584, G__11585, G__11586, G__11587, G__11588, G__11589, G__11590, G__11591) : self__.dispatch_fn.call(null, G__11572, G__11573, G__11574, G__11575, G__11576, G__11577, G__11578, G__11579, G__11580, G__11581, G__11582, G__11583, G__11584, G__11585, G__11586, G__11587, 
    G__11588, G__11589, G__11590, G__11591);
  }();
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  var G__11592 = a;
  var G__11593 = b;
  var G__11594 = c;
  var G__11595 = d;
  var G__11596 = e;
  var G__11597 = f;
  var G__11598 = g;
  var G__11599 = h;
  var G__11600 = i;
  var G__11601 = j;
  var G__11602 = k;
  var G__11603 = l;
  var G__11604 = m;
  var G__11605 = n;
  var G__11606 = o;
  var G__11607 = p;
  var G__11608 = q;
  var G__11609 = r;
  var G__11610 = s;
  var G__11611 = t;
  return target_fn.cljs$core$IFn$_invoke$arity$20 ? target_fn.cljs$core$IFn$_invoke$arity$20(G__11592, G__11593, G__11594, G__11595, G__11596, G__11597, G__11598, G__11599, G__11600, G__11601, G__11602, G__11603, G__11604, G__11605, G__11606, G__11607, G__11608, G__11609, G__11610, G__11611) : target_fn.call(null, G__11592, G__11593, G__11594, G__11595, G__11596, G__11597, G__11598, G__11599, G__11600, G__11601, G__11602, G__11603, G__11604, G__11605, G__11606, G__11607, G__11608, G__11609, G__11610, 
  G__11611);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var mf = this;
  var dispatch_val = cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(self__.dispatch_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(target_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefer_method$arity$3 = function(mf, dispatch_val_x, dispatch_val_y) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core.truth_(cljs.core.prefers_STAR_(dispatch_val_x, dispatch_val_y, self__.prefer_table))) {
    throw new Error([cljs.core.str("Preference conflict in multimethod '"), cljs.core.str(self__.name), cljs.core.str("': "), cljs.core.str(dispatch_val_y), cljs.core.str(" is already preferred to "), cljs.core.str(dispatch_val_x)].join(""));
  } else {
  }
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.prefer_table, function(mf__$1) {
    return function(old) {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(old, dispatch_val_x, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(old, dispatch_val_x, cljs.core.PersistentHashSet.EMPTY), dispatch_val_y));
    };
  }(mf__$1));
  return cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_default_dispatch_val$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return self__.default_dispatch_val;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_remove_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(self__.method_table, cljs.core.dissoc, dispatch_val);
  cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_methods$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  var G__11612 = self__.method_table;
  return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__11612) : cljs.core.deref.call(null, G__11612);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefers$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  var G__11613 = self__.prefer_table;
  return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__11613) : cljs.core.deref.call(null, G__11613);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_dispatch_fn$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return self__.dispatch_fn;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_add_method$arity$3 = function(mf, dispatch_val, method) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(self__.method_table, cljs.core.assoc, dispatch_val, method);
  cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_reset$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.method_table, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.method_cache, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.prefer_table, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.cached_hierarchy, function(mf__$1) {
    return function(mf__$2) {
      return null;
    };
  }(mf__$1));
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_get_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(function() {
    var G__11615 = self__.cached_hierarchy;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__11615) : cljs.core.deref.call(null, G__11615);
  }(), function() {
    var G__11616 = self__.hierarchy;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__11616) : cljs.core.deref.call(null, G__11616);
  }())) {
  } else {
    cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  }
  var temp__4420__auto__ = function() {
    var G__11617 = self__.method_cache;
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__11617) : cljs.core.deref.call(null, G__11617);
  }().call(null, dispatch_val);
  if (cljs.core.truth_(temp__4420__auto__)) {
    var target_fn = temp__4420__auto__;
    return target_fn;
  } else {
    var temp__4420__auto____$1 = cljs.core.find_and_cache_best_method(self__.name, dispatch_val, self__.hierarchy, self__.method_table, self__.prefer_table, self__.method_cache, self__.cached_hierarchy);
    if (cljs.core.truth_(temp__4420__auto____$1)) {
      var target_fn = temp__4420__auto____$1;
      return target_fn;
    } else {
      return function() {
        var G__11618 = self__.method_table;
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__11618) : cljs.core.deref.call(null, G__11618);
      }().call(null, self__.default_dispatch_val);
    }
  }
};
cljs.core.MultiFn.prototype.cljs$core$INamed$_name$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._name(self__.name);
};
cljs.core.MultiFn.prototype.cljs$core$INamed$_namespace$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._namespace(self__.name);
};
cljs.core.MultiFn.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var G__11614 = this$__$1;
  return goog.getUid(G__11614);
};
cljs.core.MultiFn.getBasis = function() {
  return new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "name", "name", -810760592, null), new cljs.core.Symbol(null, "dispatch-fn", "dispatch-fn", -1401088155, null), new cljs.core.Symbol(null, "default-dispatch-val", "default-dispatch-val", -1231201266, null), new cljs.core.Symbol(null, "hierarchy", "hierarchy", 587061186, null), new cljs.core.Symbol(null, "method-table", "method-table", -1878263165, null), new cljs.core.Symbol(null, 
  "prefer-table", "prefer-table", 462168584, null), new cljs.core.Symbol(null, "method-cache", "method-cache", 1230193905, null), new cljs.core.Symbol(null, "cached-hierarchy", "cached-hierarchy", -1085460203, null)], null);
};
cljs.core.MultiFn.cljs$lang$type = true;
cljs.core.MultiFn.cljs$lang$ctorStr = "cljs.core/MultiFn";
cljs.core.MultiFn.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/MultiFn");
};
cljs.core.__GT_MultiFn = function cljs$core$__GT_MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  return new cljs.core.MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
};
cljs.core.remove_all_methods = function cljs$core$remove_all_methods(multifn) {
  return cljs.core._reset(multifn);
};
cljs.core.remove_method = function cljs$core$remove_method(multifn, dispatch_val) {
  return cljs.core._remove_method(multifn, dispatch_val);
};
cljs.core.prefer_method = function cljs$core$prefer_method(multifn, dispatch_val_x, dispatch_val_y) {
  return cljs.core._prefer_method(multifn, dispatch_val_x, dispatch_val_y);
};
cljs.core.methods$ = function cljs$core$methods(multifn) {
  return cljs.core._methods(multifn);
};
cljs.core.get_method = function cljs$core$get_method(multifn, dispatch_val) {
  return cljs.core._get_method(multifn, dispatch_val);
};
cljs.core.prefers = function cljs$core$prefers(multifn) {
  return cljs.core._prefers(multifn);
};
cljs.core.default_dispatch_val = function cljs$core$default_dispatch_val(multifn) {
  return cljs.core._default_dispatch_val(multifn);
};
cljs.core.dispatch_fn = function cljs$core$dispatch_fn(multifn) {
  return cljs.core._dispatch_fn(multifn);
};
cljs.core.UUID = function(uuid, __hash) {
  this.uuid = uuid;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 2153775104;
  this.cljs$lang$protocol_mask$partition1$ = 2048;
};
cljs.core.UUID.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.uuid;
};
cljs.core.UUID.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  return other instanceof cljs.core.UUID && self__.uuid === other.uuid;
};
cljs.core.UUID.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, ___$1) {
  var self__ = this;
  var ___$2 = this;
  return cljs.core._write(writer, [cljs.core.str('#uuid "'), cljs.core.str(self__.uuid), cljs.core.str('"')].join(""));
};
cljs.core.UUID.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.__hash == null) {
    self__.__hash = function() {
      var G__11620 = self__.uuid;
      return goog.string.hashCode(G__11620);
    }();
  } else {
  }
  return self__.__hash;
};
cljs.core.UUID.prototype.cljs$core$IComparable$_compare$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  var G__11621 = self__.uuid;
  var G__11622 = other.uuid;
  return goog.array.defaultCompare(G__11621, G__11622);
};
cljs.core.UUID.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "uuid", "uuid", -504564192, null), new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null)], null);
};
cljs.core.UUID.cljs$lang$type = true;
cljs.core.UUID.cljs$lang$ctorStr = "cljs.core/UUID";
cljs.core.UUID.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/UUID");
};
cljs.core.__GT_UUID = function cljs$core$__GT_UUID(uuid, __hash) {
  return new cljs.core.UUID(uuid, __hash);
};
cljs.core.uuid = function cljs$core$uuid(s) {
  return new cljs.core.UUID(s, null);
};
cljs.core.random_uuid = function cljs$core$random_uuid() {
  var hex = function cljs$core$random_uuid_$_hex() {
    return cljs.core.rand_int(15).toString(16);
  };
  var rhex = (8 | 3 & cljs.core.rand_int(14)).toString(16);
  return cljs.core.uuid([cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str("-"), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str("-"), cljs.core.str("4"), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str("-"), cljs.core.str(rhex), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), 
  cljs.core.str("-"), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex())].join(""));
};
cljs.core.pr_writer_ex_info = function cljs$core$pr_writer_ex_info(obj, writer, opts) {
  cljs.core._write(writer, "#ExceptionInfo{:message ");
  cljs.core.pr_writer(obj.message, writer, opts);
  if (cljs.core.truth_(obj.data)) {
    cljs.core._write(writer, ", :data ");
    cljs.core.pr_writer(obj.data, writer, opts);
  } else {
  }
  if (cljs.core.truth_(obj.cause)) {
    cljs.core._write(writer, ", :cause ");
    cljs.core.pr_writer(obj.cause, writer, opts);
  } else {
  }
  return cljs.core._write(writer, "}");
};
cljs.core.ExceptionInfo = function cljs$core$ExceptionInfo(message, data, cause) {
  var e = new Error;
  var this$ = this;
  this$.message = message;
  this$.data = data;
  this$.cause = cause;
  this$.name = e.name;
  this$.description = e.description;
  this$.number = e.number;
  this$.fileName = e.fileName;
  this$.lineNumber = e.lineNumber;
  this$.columnNumber = e.columnNumber;
  this$.stack = e.stack;
  return this$;
};
cljs.core.ExceptionInfo.prototype.__proto__ = Error.prototype;
cljs.core.ExceptionInfo.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ExceptionInfo.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(obj, writer, opts) {
  var obj__$1 = this;
  return cljs.core.pr_writer_ex_info(obj__$1, writer, opts);
};
cljs.core.ExceptionInfo.prototype.toString = function() {
  var this$ = this;
  return cljs.core.pr_str_STAR_(this$);
};
cljs.core.ex_info = function cljs$core$ex_info() {
  var G__11624 = arguments.length;
  switch(G__11624) {
    case 2:
      return cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.ex_info.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2 = function(msg, data) {
  return cljs.core.ex_info.cljs$core$IFn$_invoke$arity$3(msg, data, null);
};
cljs.core.ex_info.cljs$core$IFn$_invoke$arity$3 = function(msg, data, cause) {
  return new cljs.core.ExceptionInfo(msg, data, cause);
};
cljs.core.ex_info.cljs$lang$maxFixedArity = 3;
cljs.core.ex_data = function cljs$core$ex_data(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.data;
  } else {
    return null;
  }
};
cljs.core.ex_message = function cljs$core$ex_message(ex) {
  if (ex instanceof Error) {
    return ex.message;
  } else {
    return null;
  }
};
cljs.core.ex_cause = function cljs$core$ex_cause(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.cause;
  } else {
    return null;
  }
};
cljs.core.comparator = function cljs$core$comparator(pred) {
  return function(x, y) {
    if (cljs.core.truth_(function() {
      var G__11630 = x;
      var G__11631 = y;
      return pred.cljs$core$IFn$_invoke$arity$2 ? pred.cljs$core$IFn$_invoke$arity$2(G__11630, G__11631) : pred.call(null, G__11630, G__11631);
    }())) {
      return -1;
    } else {
      if (cljs.core.truth_(function() {
        var G__11632 = y;
        var G__11633 = x;
        return pred.cljs$core$IFn$_invoke$arity$2 ? pred.cljs$core$IFn$_invoke$arity$2(G__11632, G__11633) : pred.call(null, G__11632, G__11633);
      }())) {
        return 1;
      } else {
        return 0;
      }
    }
  };
};
cljs.core.special_symbol_QMARK_ = function cljs$core$special_symbol_QMARK_(x) {
  return cljs.core.contains_QMARK_(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 19, [new cljs.core.Symbol(null, "\x26", "\x26", -2144855648, null), null, new cljs.core.Symbol(null, "defrecord*", "defrecord*", -1936366207, null), null, new cljs.core.Symbol(null, "try", "try", -1273693247, null), null, new cljs.core.Symbol(null, "loop*", "loop*", 615029416, null), null, new cljs.core.Symbol(null, "do", "do", 1686842252, null), null, new cljs.core.Symbol(null, "letfn*", 
  "letfn*", -110097810, null), null, new cljs.core.Symbol(null, "if", "if", 1181717262, null), null, new cljs.core.Symbol(null, "new", "new", -444906321, null), null, new cljs.core.Symbol(null, "ns", "ns", 2082130287, null), null, new cljs.core.Symbol(null, "deftype*", "deftype*", 962659890, null), null, new cljs.core.Symbol(null, "let*", "let*", 1920721458, null), null, new cljs.core.Symbol(null, "js*", "js*", -1134233646, null), null, new cljs.core.Symbol(null, "fn*", "fn*", -752876845, null), 
  null, new cljs.core.Symbol(null, "recur", "recur", 1202958259, null), null, new cljs.core.Symbol(null, "set!", "set!", 250714521, null), null, new cljs.core.Symbol(null, ".", ".", 1975675962, null), null, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), null, new cljs.core.Symbol(null, "throw", "throw", 595905694, null), null, new cljs.core.Symbol(null, "def", "def", 597100991, null), null], null), null), x);
};
cljs.core.test = function cljs$core$test(v) {
  var f = v.cljs$lang$test;
  if (cljs.core.truth_(f)) {
    f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    return new cljs.core.Keyword(null, "ok", "ok", 967785236);
  } else {
    return new cljs.core.Keyword(null, "no-test", "no-test", -1679482642);
  }
};
cljs.core.TaggedLiteral = function(tag, form) {
  this.tag = tag;
  this.form = form;
  this.cljs$lang$protocol_mask$partition0$ = 2153775360;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.TaggedLiteral.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.TaggedLiteral.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var self__ = this;
  var this$__$1 = this;
  return other instanceof cljs.core.TaggedLiteral && cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.tag, other.tag) && cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.form, other.form);
};
cljs.core.TaggedLiteral.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return 31 * cljs.core.hash(self__.tag) + cljs.core.hash(self__.form);
};
cljs.core.TaggedLiteral.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this$, v) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(this$__$1, v, null);
};
cljs.core.TaggedLiteral.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this$, v, not_found) {
  var self__ = this;
  var this$__$1 = this;
  var G__11634 = v instanceof cljs.core.Keyword ? v.fqn : null;
  switch(G__11634) {
    case "tag":
      return self__.tag;
      break;
    case "form":
      return self__.form;
      break;
    default:
      return not_found;
  }
};
cljs.core.TaggedLiteral.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, opts) {
  var self__ = this;
  var o__$1 = this;
  cljs.core._write(writer, [cljs.core.str("#"), cljs.core.str(self__.tag), cljs.core.str(" ")].join(""));
  return cljs.core.pr_writer(self__.form, writer, opts);
};
cljs.core.TaggedLiteral.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "tag", "tag", 350170304, null), new cljs.core.Symbol(null, "form", "form", 16469056, null)], null);
};
cljs.core.TaggedLiteral.cljs$lang$type = true;
cljs.core.TaggedLiteral.cljs$lang$ctorStr = "cljs.core/TaggedLiteral";
cljs.core.TaggedLiteral.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write(writer__4889__auto__, "cljs.core/TaggedLiteral");
};
cljs.core.__GT_TaggedLiteral = function cljs$core$__GT_TaggedLiteral(tag, form) {
  return new cljs.core.TaggedLiteral(tag, form);
};
cljs.core.tagged_literal_QMARK_ = function cljs$core$tagged_literal_QMARK_(value) {
  return value instanceof cljs.core.TaggedLiteral;
};
cljs.core.tagged_literal = function cljs$core$tagged_literal(tag, form) {
  if (tag instanceof cljs.core.Symbol) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.list(new cljs.core.Symbol(null, "symbol?", "symbol?", 1820680511, null), new cljs.core.Symbol(null, "tag", "tag", 350170304, null))], 0)))].join(""));
  }
  return new cljs.core.TaggedLiteral(tag, form);
};
goog.provide("metaverse.util");
goog.require("cljs.core");
metaverse.util.append_onload = function metaverse$util$append_onload(f) {
  var old_onload = document.onreadystatechange;
  var new_onload = function(old_onload) {
    return function(evt) {
      if (cljs.core._EQ_.call(null, document.readyState, "complete")) {
        f.call(null, evt);
        if (cljs.core.truth_(old_onload)) {
          return old_onload.call(null, evt);
        } else {
          return null;
        }
      } else {
        return null;
      }
    };
  }(old_onload);
  return document.onreadystatechange = new_onload;
};
metaverse.util.DEFAULT_TIMEOUT = 1E3;
metaverse.util.set_timeout = function metaverse$util$set_timeout() {
  var argseq__5349__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return metaverse.util.set_timeout.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5349__auto__);
};
metaverse.util.set_timeout.cljs$core$IFn$_invoke$arity$variadic = function(f, p__57066) {
  var vec__57067 = p__57066;
  var delay = cljs.core.nth.call(null, vec__57067, 0, null);
  return setTimeout(f, function() {
    var or__4309__auto__ = delay;
    if (cljs.core.truth_(or__4309__auto__)) {
      return or__4309__auto__;
    } else {
      return metaverse.util.DEFAULT_TIMEOUT;
    }
  }());
};
metaverse.util.set_timeout.cljs$lang$maxFixedArity = 1;
metaverse.util.set_timeout.cljs$lang$applyTo = function(seq57064) {
  var G__57065 = cljs.core.first.call(null, seq57064);
  var seq57064__$1 = cljs.core.next.call(null, seq57064);
  return metaverse.util.set_timeout.cljs$core$IFn$_invoke$arity$variadic(G__57065, seq57064__$1);
};
metaverse.util.recur_infinitely = function metaverse$util$recur_infinitely() {
  var argseq__5349__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return metaverse.util.recur_infinitely.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5349__auto__);
};
metaverse.util.recur_infinitely.cljs$core$IFn$_invoke$arity$variadic = function(f, p__57070) {
  var vec__57071 = p__57070;
  var delay = cljs.core.nth.call(null, vec__57071, 0, null);
  return metaverse.util.set_timeout.call(null, function(vec__57071, delay) {
    return function metaverse$util$self() {
      f.call(null);
      return metaverse.util.set_timeout.call(null, metaverse$util$self, delay);
    };
  }(vec__57071, delay), delay);
};
metaverse.util.recur_infinitely.cljs$lang$maxFixedArity = 1;
metaverse.util.recur_infinitely.cljs$lang$applyTo = function(seq57068) {
  var G__57069 = cljs.core.first.call(null, seq57068);
  var seq57068__$1 = cljs.core.next.call(null, seq57068);
  return metaverse.util.recur_infinitely.cljs$core$IFn$_invoke$arity$variadic(G__57069, seq57068__$1);
};
goog.provide("goog.labs.userAgent.util");
goog.require("goog.string");
goog.labs.userAgent.util.getNativeUserAgentString_ = function() {
  var navigator = goog.labs.userAgent.util.getNavigator_();
  if (navigator) {
    var userAgent = navigator.userAgent;
    if (userAgent) {
      return userAgent;
    }
  }
  return "";
};
goog.labs.userAgent.util.getNavigator_ = function() {
  return goog.global.navigator;
};
goog.labs.userAgent.util.userAgent_ = goog.labs.userAgent.util.getNativeUserAgentString_();
goog.labs.userAgent.util.setUserAgent = function(opt_userAgent) {
  goog.labs.userAgent.util.userAgent_ = opt_userAgent || goog.labs.userAgent.util.getNativeUserAgentString_();
};
goog.labs.userAgent.util.getUserAgent = function() {
  return goog.labs.userAgent.util.userAgent_;
};
goog.labs.userAgent.util.matchUserAgent = function(str) {
  var userAgent = goog.labs.userAgent.util.getUserAgent();
  return goog.string.contains(userAgent, str);
};
goog.labs.userAgent.util.matchUserAgentIgnoreCase = function(str) {
  var userAgent = goog.labs.userAgent.util.getUserAgent();
  return goog.string.caseInsensitiveContains(userAgent, str);
};
goog.labs.userAgent.util.extractVersionTuples = function(userAgent) {
  var versionRegExp = new RegExp("(\\w[\\w ]+)" + "/" + "([^\\s]+)" + "\\s*" + "(?:\\((.*?)\\))?", "g");
  var data = [];
  var match;
  while (match = versionRegExp.exec(userAgent)) {
    data.push([match[1], match[2], match[3] || undefined]);
  }
  return data;
};
goog.provide("cljs.core.async.impl.protocols");
goog.require("cljs.core");
cljs.core.async.impl.protocols.MAX_QUEUE_SIZE = 1024;
cljs.core.async.impl.protocols.ReadPort = function() {
  var obj17646 = {};
  return obj17646;
}();
cljs.core.async.impl.protocols.take_BANG_ = function cljs$core$async$impl$protocols$take_BANG_(port, fn1_handler) {
  if (function() {
    var and__4297__auto__ = port;
    if (and__4297__auto__) {
      return port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2(port, fn1_handler);
  } else {
    var x__4945__auto__ = port == null ? null : port;
    return function() {
      var or__4309__auto__ = cljs.core.async.impl.protocols.take_BANG_[goog.typeOf(x__4945__auto__)];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core.async.impl.protocols.take_BANG_["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ReadPort.take!", port);
        }
      }
    }().call(null, port, fn1_handler);
  }
};
cljs.core.async.impl.protocols.WritePort = function() {
  var obj17648 = {};
  return obj17648;
}();
cljs.core.async.impl.protocols.put_BANG_ = function cljs$core$async$impl$protocols$put_BANG_(port, val, fn1_handler) {
  if (function() {
    var and__4297__auto__ = port;
    if (and__4297__auto__) {
      return port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3(port, val, fn1_handler);
  } else {
    var x__4945__auto__ = port == null ? null : port;
    return function() {
      var or__4309__auto__ = cljs.core.async.impl.protocols.put_BANG_[goog.typeOf(x__4945__auto__)];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core.async.impl.protocols.put_BANG_["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "WritePort.put!", port);
        }
      }
    }().call(null, port, val, fn1_handler);
  }
};
cljs.core.async.impl.protocols.Channel = function() {
  var obj17650 = {};
  return obj17650;
}();
cljs.core.async.impl.protocols.close_BANG_ = function cljs$core$async$impl$protocols$close_BANG_(chan) {
  if (function() {
    var and__4297__auto__ = chan;
    if (and__4297__auto__) {
      return chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1(chan);
  } else {
    var x__4945__auto__ = chan == null ? null : chan;
    return function() {
      var or__4309__auto__ = cljs.core.async.impl.protocols.close_BANG_[goog.typeOf(x__4945__auto__)];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core.async.impl.protocols.close_BANG_["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Channel.close!", chan);
        }
      }
    }().call(null, chan);
  }
};
cljs.core.async.impl.protocols.closed_QMARK_ = function cljs$core$async$impl$protocols$closed_QMARK_(chan) {
  if (function() {
    var and__4297__auto__ = chan;
    if (and__4297__auto__) {
      return chan.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return chan.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1(chan);
  } else {
    var x__4945__auto__ = chan == null ? null : chan;
    return function() {
      var or__4309__auto__ = cljs.core.async.impl.protocols.closed_QMARK_[goog.typeOf(x__4945__auto__)];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core.async.impl.protocols.closed_QMARK_["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Channel.closed?", chan);
        }
      }
    }().call(null, chan);
  }
};
cljs.core.async.impl.protocols.Handler = function() {
  var obj17652 = {};
  return obj17652;
}();
cljs.core.async.impl.protocols.active_QMARK_ = function cljs$core$async$impl$protocols$active_QMARK_(h) {
  if (function() {
    var and__4297__auto__ = h;
    if (and__4297__auto__) {
      return h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1(h);
  } else {
    var x__4945__auto__ = h == null ? null : h;
    return function() {
      var or__4309__auto__ = cljs.core.async.impl.protocols.active_QMARK_[goog.typeOf(x__4945__auto__)];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core.async.impl.protocols.active_QMARK_["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Handler.active?", h);
        }
      }
    }().call(null, h);
  }
};
cljs.core.async.impl.protocols.commit = function cljs$core$async$impl$protocols$commit(h) {
  if (function() {
    var and__4297__auto__ = h;
    if (and__4297__auto__) {
      return h.cljs$core$async$impl$protocols$Handler$commit$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return h.cljs$core$async$impl$protocols$Handler$commit$arity$1(h);
  } else {
    var x__4945__auto__ = h == null ? null : h;
    return function() {
      var or__4309__auto__ = cljs.core.async.impl.protocols.commit[goog.typeOf(x__4945__auto__)];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core.async.impl.protocols.commit["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Handler.commit", h);
        }
      }
    }().call(null, h);
  }
};
cljs.core.async.impl.protocols.Buffer = function() {
  var obj17654 = {};
  return obj17654;
}();
cljs.core.async.impl.protocols.full_QMARK_ = function cljs$core$async$impl$protocols$full_QMARK_(b) {
  if (function() {
    var and__4297__auto__ = b;
    if (and__4297__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1(b);
  } else {
    var x__4945__auto__ = b == null ? null : b;
    return function() {
      var or__4309__auto__ = cljs.core.async.impl.protocols.full_QMARK_[goog.typeOf(x__4945__auto__)];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core.async.impl.protocols.full_QMARK_["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.full?", b);
        }
      }
    }().call(null, b);
  }
};
cljs.core.async.impl.protocols.remove_BANG_ = function cljs$core$async$impl$protocols$remove_BANG_(b) {
  if (function() {
    var and__4297__auto__ = b;
    if (and__4297__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1(b);
  } else {
    var x__4945__auto__ = b == null ? null : b;
    return function() {
      var or__4309__auto__ = cljs.core.async.impl.protocols.remove_BANG_[goog.typeOf(x__4945__auto__)];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core.async.impl.protocols.remove_BANG_["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.remove!", b);
        }
      }
    }().call(null, b);
  }
};
cljs.core.async.impl.protocols.add_BANG__STAR_ = function cljs$core$async$impl$protocols$add_BANG__STAR_(b, itm) {
  if (function() {
    var and__4297__auto__ = b;
    if (and__4297__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2(b, itm);
  } else {
    var x__4945__auto__ = b == null ? null : b;
    return function() {
      var or__4309__auto__ = cljs.core.async.impl.protocols.add_BANG__STAR_[goog.typeOf(x__4945__auto__)];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core.async.impl.protocols.add_BANG__STAR_["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.add!*", b);
        }
      }
    }().call(null, b, itm);
  }
};
cljs.core.async.impl.protocols.add_BANG_ = function cljs$core$async$impl$protocols$add_BANG_() {
  var G__17656 = arguments.length;
  switch(G__17656) {
    case 1:
      return cljs.core.async.impl.protocols.add_BANG_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.impl.protocols.add_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.impl.protocols.add_BANG_.cljs$core$IFn$_invoke$arity$1 = function(b) {
  return b;
};
cljs.core.async.impl.protocols.add_BANG_.cljs$core$IFn$_invoke$arity$2 = function(b, itm) {
  if (!(itm == null)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "itm", "itm", -713282527, null)))))].join(""));
  }
  return cljs.core.async.impl.protocols.add_BANG__STAR_.call(null, b, itm);
};
cljs.core.async.impl.protocols.add_BANG_.cljs$lang$maxFixedArity = 2;
cljs.core.async.impl.protocols.UnblockingBuffer = function() {
  var obj17659 = {};
  return obj17659;
}();
goog.provide("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.ioc_helpers.FN_IDX = 0;
cljs.core.async.impl.ioc_helpers.STATE_IDX = 1;
cljs.core.async.impl.ioc_helpers.VALUE_IDX = 2;
cljs.core.async.impl.ioc_helpers.BINDINGS_IDX = 3;
cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES = 4;
cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION = 5;
cljs.core.async.impl.ioc_helpers.USER_START_IDX = 6;
cljs.core.async.impl.ioc_helpers.aset_object = function cljs$core$async$impl$ioc_helpers$aset_object(arr, idx, o) {
  return arr[idx][o];
};
cljs.core.async.impl.ioc_helpers.aget_object = function cljs$core$async$impl$ioc_helpers$aget_object(arr, idx) {
  return arr[idx];
};
cljs.core.async.impl.ioc_helpers.finished_QMARK_ = function cljs$core$async$impl$ioc_helpers$finished_QMARK_(state_array) {
  return cljs.core.keyword_identical_QMARK_.call(null, state_array[cljs.core.async.impl.ioc_helpers.STATE_IDX], new cljs.core.Keyword(null, "finished", "finished", -1018867731));
};
cljs.core.async.impl.ioc_helpers.fn_handler = function cljs$core$async$impl$ioc_helpers$fn_handler(f) {
  if (typeof cljs.core.async.impl.ioc_helpers.t17604 !== "undefined") {
  } else {
    cljs.core.async.impl.ioc_helpers.t17604 = function(fn_handler, f, meta17605) {
      this.fn_handler = fn_handler;
      this.f = f;
      this.meta17605 = meta17605;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.async.impl.ioc_helpers.t17604.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_17606, meta17605__$1) {
      var self__ = this;
      var _17606__$1 = this;
      return new cljs.core.async.impl.ioc_helpers.t17604(self__.fn_handler, self__.f, meta17605__$1);
    };
    cljs.core.async.impl.ioc_helpers.t17604.prototype.cljs$core$IMeta$_meta$arity$1 = function(_17606) {
      var self__ = this;
      var _17606__$1 = this;
      return self__.meta17605;
    };
    cljs.core.async.impl.ioc_helpers.t17604.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.impl.ioc_helpers.t17604.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.impl.ioc_helpers.t17604.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.f;
    };
    cljs.core.async.impl.ioc_helpers.t17604.getBasis = function() {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "fn-handler", "fn-handler", 648785851, null), new cljs.core.Symbol(null, "f", "f", 43394975, null), new cljs.core.Symbol(null, "meta17605", "meta17605", -489005505, null)], null);
    };
    cljs.core.async.impl.ioc_helpers.t17604.cljs$lang$type = true;
    cljs.core.async.impl.ioc_helpers.t17604.cljs$lang$ctorStr = "cljs.core.async.impl.ioc-helpers/t17604";
    cljs.core.async.impl.ioc_helpers.t17604.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
      return cljs.core._write.call(null, writer__4889__auto__, "cljs.core.async.impl.ioc-helpers/t17604");
    };
    cljs.core.async.impl.ioc_helpers.__GT_t17604 = function cljs$core$async$impl$ioc_helpers$fn_handler_$___GT_t17604(fn_handler__$1, f__$1, meta17605) {
      return new cljs.core.async.impl.ioc_helpers.t17604(fn_handler__$1, f__$1, meta17605);
    };
  }
  return new cljs.core.async.impl.ioc_helpers.t17604(cljs$core$async$impl$ioc_helpers$fn_handler, f, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.impl.ioc_helpers.run_state_machine = function cljs$core$async$impl$ioc_helpers$run_state_machine(state) {
  return cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.FN_IDX).call(null, state);
};
cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped = function cljs$core$async$impl$ioc_helpers$run_state_machine_wrapped(state) {
  try {
    return cljs.core.async.impl.ioc_helpers.run_state_machine.call(null, state);
  } catch (e17608) {
    if (e17608 instanceof Object) {
      var ex = e17608;
      cljs.core.async.impl.protocols.close_BANG_.call(null, cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.USER_START_IDX));
      throw ex;
    } else {
      throw e17608;
    }
  }
};
cljs.core.async.impl.ioc_helpers.take_BANG_ = function cljs$core$async$impl$ioc_helpers$take_BANG_(state, blk, c) {
  var temp__4420__auto__ = cljs.core.async.impl.protocols.take_BANG_.call(null, c, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(x) {
    var statearr_17611_17613 = state;
    statearr_17611_17613[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = x;
    statearr_17611_17613[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
  }));
  if (cljs.core.truth_(temp__4420__auto__)) {
    var cb = temp__4420__auto__;
    var statearr_17612_17614 = state;
    statearr_17612_17614[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    statearr_17612_17614[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
  } else {
    return null;
  }
};
cljs.core.async.impl.ioc_helpers.put_BANG_ = function cljs$core$async$impl$ioc_helpers$put_BANG_(state, blk, c, val) {
  var temp__4420__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, c, val, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(ret_val) {
    var statearr_17617_17619 = state;
    statearr_17617_17619[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = ret_val;
    statearr_17617_17619[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
  }));
  if (cljs.core.truth_(temp__4420__auto__)) {
    var cb = temp__4420__auto__;
    var statearr_17618_17620 = state;
    statearr_17618_17620[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    statearr_17618_17620[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
  } else {
    return null;
  }
};
cljs.core.async.impl.ioc_helpers.return_chan = function cljs$core$async$impl$ioc_helpers$return_chan(state, value) {
  var c = state[cljs.core.async.impl.ioc_helpers.USER_START_IDX];
  if (value == null) {
  } else {
    cljs.core.async.impl.protocols.put_BANG_.call(null, c, value, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(c) {
      return function() {
        return null;
      };
    }(c)));
  }
  cljs.core.async.impl.protocols.close_BANG_.call(null, c);
  return c;
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame = function(catch_block, catch_exception, finally_block, continue_block, prev, __meta, __extmap, __hash) {
  this.catch_block = catch_block;
  this.catch_exception = catch_exception;
  this.finally_block = finally_block;
  this.continue_block = continue_block;
  this.prev = prev;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4904__auto__, k__4905__auto__) {
  var self__ = this;
  var this__4904__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4904__auto____$1, k__4905__auto__, null);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4906__auto__, k17622, else__4907__auto__) {
  var self__ = this;
  var this__4906__auto____$1 = this;
  var G__17624 = k17622 instanceof cljs.core.Keyword ? k17622.fqn : null;
  switch(G__17624) {
    case "catch-block":
      return self__.catch_block;
      break;
    case "catch-exception":
      return self__.catch_exception;
      break;
    case "finally-block":
      return self__.finally_block;
      break;
    case "continue-block":
      return self__.continue_block;
      break;
    case "prev":
      return self__.prev;
      break;
    default:
      return cljs.core.get.call(null, self__.__extmap, k17622, else__4907__auto__);
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4918__auto__, writer__4919__auto__, opts__4920__auto__) {
  var self__ = this;
  var this__4918__auto____$1 = this;
  var pr_pair__4921__auto__ = function(this__4918__auto____$1) {
    return function(keyval__4922__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4919__auto__, cljs.core.pr_writer, "", " ", "", opts__4920__auto__, keyval__4922__auto__);
    };
  }(this__4918__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4919__auto__, pr_pair__4921__auto__, "#cljs.core.async.impl.ioc-helpers.ExceptionFrame{", ", ", "}", opts__4920__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), self__.catch_block], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), self__.catch_exception], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), self__.finally_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), 
  self__.continue_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "prev", "prev", -1597069226), self__.prev], null)], null), self__.__extmap));
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4902__auto__) {
  var self__ = this;
  var this__4902__auto____$1 = this;
  return self__.__meta;
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4898__auto__) {
  var self__ = this;
  var this__4898__auto____$1 = this;
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, self__.__hash);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4908__auto__) {
  var self__ = this;
  var this__4908__auto____$1 = this;
  return 5 + cljs.core.count.call(null, self__.__extmap);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4899__auto__) {
  var self__ = this;
  var this__4899__auto____$1 = this;
  var h__4725__auto__ = self__.__hash;
  if (!(h__4725__auto__ == null)) {
    return h__4725__auto__;
  } else {
    var h__4725__auto____$1 = cljs.core.hash_imap.call(null, this__4899__auto____$1);
    self__.__hash = h__4725__auto____$1;
    return h__4725__auto____$1;
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4900__auto__, other__4901__auto__) {
  var self__ = this;
  var this__4900__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__4297__auto__ = other__4901__auto__;
    if (cljs.core.truth_(and__4297__auto__)) {
      var and__4297__auto____$1 = this__4900__auto____$1.constructor === other__4901__auto__.constructor;
      if (and__4297__auto____$1) {
        return cljs.core.equiv_map.call(null, this__4900__auto____$1, other__4901__auto__);
      } else {
        return and__4297__auto____$1;
      }
    } else {
      return and__4297__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4913__auto__, k__4914__auto__) {
  var self__ = this;
  var this__4913__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), null, new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), null, new cljs.core.Keyword(null, "prev", "prev", -1597069226), null, new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), 
  null], null), null), k__4914__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4913__auto____$1), self__.__meta), k__4914__auto__);
  } else {
    return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4914__auto__)), null);
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4911__auto__, k__4912__auto__, G__17621) {
  var self__ = this;
  var this__4911__auto____$1 = this;
  var pred__17625 = cljs.core.keyword_identical_QMARK_;
  var expr__17626 = k__4912__auto__;
  if (cljs.core.truth_(pred__17625.call(null, new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), expr__17626))) {
    return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(G__17621, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__17625.call(null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), expr__17626))) {
      return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, G__17621, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__17625.call(null, new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), expr__17626))) {
        return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, G__17621, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
      } else {
        if (cljs.core.truth_(pred__17625.call(null, new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), expr__17626))) {
          return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, G__17621, self__.prev, self__.__meta, self__.__extmap, null);
        } else {
          if (cljs.core.truth_(pred__17625.call(null, new cljs.core.Keyword(null, "prev", "prev", -1597069226), expr__17626))) {
            return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, G__17621, self__.__meta, self__.__extmap, null);
          } else {
            return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4912__auto__, G__17621), null);
          }
        }
      }
    }
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4916__auto__) {
  var self__ = this;
  var this__4916__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), self__.catch_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), self__.catch_exception], 
  null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), self__.finally_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), self__.continue_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "prev", 
  "prev", -1597069226), self__.prev], null)], null), self__.__extmap));
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4903__auto__, G__17621) {
  var self__ = this;
  var this__4903__auto____$1 = this;
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, G__17621, self__.__extmap, self__.__hash);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4909__auto__, entry__4910__auto__) {
  var self__ = this;
  var this__4909__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4910__auto__)) {
    return cljs.core._assoc.call(null, this__4909__auto____$1, cljs.core._nth.call(null, entry__4910__auto__, 0), cljs.core._nth.call(null, entry__4910__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4909__auto____$1, entry__4910__auto__);
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "catch-block", "catch-block", -1479223021, null), new cljs.core.Symbol(null, "catch-exception", "catch-exception", -356775268, null), new cljs.core.Symbol(null, "finally-block", "finally-block", -1821453297, null), new cljs.core.Symbol(null, "continue-block", "continue-block", -211516323, null), new cljs.core.Symbol(null, "prev", "prev", 43462301, null)], null);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$type = true;
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$ctorPrSeq = function(this__4938__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "cljs.core.async.impl.ioc-helpers/ExceptionFrame");
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$ctorPrWriter = function(this__4938__auto__, writer__4939__auto__) {
  return cljs.core._write.call(null, writer__4939__auto__, "cljs.core.async.impl.ioc-helpers/ExceptionFrame");
};
cljs.core.async.impl.ioc_helpers.__GT_ExceptionFrame = function cljs$core$async$impl$ioc_helpers$__GT_ExceptionFrame(catch_block, catch_exception, finally_block, continue_block, prev) {
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(catch_block, catch_exception, finally_block, continue_block, prev, null, null, null);
};
cljs.core.async.impl.ioc_helpers.map__GT_ExceptionFrame = function cljs$core$async$impl$ioc_helpers$map__GT_ExceptionFrame(G__17623) {
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame((new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748)).cljs$core$IFn$_invoke$arity$1(G__17623), (new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795)).cljs$core$IFn$_invoke$arity$1(G__17623), (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(G__17623), (new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850)).cljs$core$IFn$_invoke$arity$1(G__17623), 
  (new cljs.core.Keyword(null, "prev", "prev", -1597069226)).cljs$core$IFn$_invoke$arity$1(G__17623), null, cljs.core.dissoc.call(null, G__17623, new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), new cljs.core.Keyword(null, "prev", "prev", -1597069226)), 
  null);
};
cljs.core.async.impl.ioc_helpers.add_exception_frame = function cljs$core$async$impl$ioc_helpers$add_exception_frame(state, catch_block, catch_exception, finally_block, continue_block) {
  var statearr_17630 = state;
  statearr_17630[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.async.impl.ioc_helpers.__GT_ExceptionFrame.call(null, catch_block, catch_exception, finally_block, continue_block, cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES));
  return statearr_17630;
};
cljs.core.async.impl.ioc_helpers.process_exception = function cljs$core$async$impl$ioc_helpers$process_exception(state) {
  while (true) {
    var exception_frame = cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES);
    var catch_block = (new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748)).cljs$core$IFn$_invoke$arity$1(exception_frame);
    var catch_exception = (new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795)).cljs$core$IFn$_invoke$arity$1(exception_frame);
    var exception = cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION);
    if (cljs.core.truth_(function() {
      var and__4297__auto__ = exception;
      if (cljs.core.truth_(and__4297__auto__)) {
        return cljs.core.not.call(null, exception_frame);
      } else {
        return and__4297__auto__;
      }
    }())) {
      throw exception;
    } else {
      if (cljs.core.truth_(function() {
        var and__4297__auto__ = exception;
        if (cljs.core.truth_(and__4297__auto__)) {
          var and__4297__auto____$1 = catch_block;
          if (cljs.core.truth_(and__4297__auto____$1)) {
            return exception instanceof catch_exception;
          } else {
            return and__4297__auto____$1;
          }
        } else {
          return and__4297__auto__;
        }
      }())) {
        var statearr_17636 = state;
        statearr_17636[cljs.core.async.impl.ioc_helpers.STATE_IDX] = catch_block;
        statearr_17636[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = exception;
        statearr_17636[cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION] = null;
        statearr_17636[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), null);
        return statearr_17636;
      } else {
        if (cljs.core.truth_(function() {
          var and__4297__auto__ = exception;
          if (cljs.core.truth_(and__4297__auto__)) {
            return cljs.core.not.call(null, catch_block) && cljs.core.not.call(null, (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame));
          } else {
            return and__4297__auto__;
          }
        }())) {
          var statearr_17637_17641 = state;
          statearr_17637_17641[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = (new cljs.core.Keyword(null, "prev", "prev", -1597069226)).cljs$core$IFn$_invoke$arity$1(exception_frame);
          var G__17642 = state;
          state = G__17642;
          continue;
        } else {
          if (cljs.core.truth_(function() {
            var and__4297__auto__ = exception;
            if (cljs.core.truth_(and__4297__auto__)) {
              var and__4297__auto____$1 = cljs.core.not.call(null, catch_block);
              if (and__4297__auto____$1) {
                return (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              } else {
                return and__4297__auto____$1;
              }
            } else {
              return and__4297__auto__;
            }
          }())) {
            var statearr_17638 = state;
            statearr_17638[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame);
            statearr_17638[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), null);
            return statearr_17638;
          } else {
            if (cljs.core.truth_(function() {
              var and__4297__auto__ = cljs.core.not.call(null, exception);
              if (and__4297__auto__) {
                return (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              } else {
                return and__4297__auto__;
              }
            }())) {
              var statearr_17639 = state;
              statearr_17639[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              statearr_17639[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), null);
              return statearr_17639;
            } else {
              if (cljs.core.not.call(null, exception) && cljs.core.not.call(null, (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame))) {
                var statearr_17640 = state;
                statearr_17640[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850)).cljs$core$IFn$_invoke$arity$1(exception_frame);
                statearr_17640[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = (new cljs.core.Keyword(null, "prev", "prev", -1597069226)).cljs$core$IFn$_invoke$arity$1(exception_frame);
                return statearr_17640;
              } else {
                throw new Error("No matching clause");
              }
            }
          }
        }
      }
    }
    break;
  }
};
goog.provide("goog.debug.EntryPointMonitor");
goog.provide("goog.debug.entryPointRegistry");
goog.require("goog.asserts");
goog.debug.EntryPointMonitor = function() {
};
goog.debug.EntryPointMonitor.prototype.wrap;
goog.debug.EntryPointMonitor.prototype.unwrap;
goog.debug.entryPointRegistry.refList_ = [];
goog.debug.entryPointRegistry.monitors_ = [];
goog.debug.entryPointRegistry.monitorsMayExist_ = false;
goog.debug.entryPointRegistry.register = function(callback) {
  goog.debug.entryPointRegistry.refList_[goog.debug.entryPointRegistry.refList_.length] = callback;
  if (goog.debug.entryPointRegistry.monitorsMayExist_) {
    var monitors = goog.debug.entryPointRegistry.monitors_;
    for (var i = 0;i < monitors.length;i++) {
      callback(goog.bind(monitors[i].wrap, monitors[i]));
    }
  }
};
goog.debug.entryPointRegistry.monitorAll = function(monitor) {
  goog.debug.entryPointRegistry.monitorsMayExist_ = true;
  var transformer = goog.bind(monitor.wrap, monitor);
  for (var i = 0;i < goog.debug.entryPointRegistry.refList_.length;i++) {
    goog.debug.entryPointRegistry.refList_[i](transformer);
  }
  goog.debug.entryPointRegistry.monitors_.push(monitor);
};
goog.debug.entryPointRegistry.unmonitorAllIfPossible = function(monitor) {
  var monitors = goog.debug.entryPointRegistry.monitors_;
  goog.asserts.assert(monitor == monitors[monitors.length - 1], "Only the most recent monitor can be unwrapped.");
  var transformer = goog.bind(monitor.unwrap, monitor);
  for (var i = 0;i < goog.debug.entryPointRegistry.refList_.length;i++) {
    goog.debug.entryPointRegistry.refList_[i](transformer);
  }
  monitors.length--;
};
goog.provide("goog.dom.TagName");
goog.dom.TagName = {A:"A", ABBR:"ABBR", ACRONYM:"ACRONYM", ADDRESS:"ADDRESS", APPLET:"APPLET", AREA:"AREA", ARTICLE:"ARTICLE", ASIDE:"ASIDE", AUDIO:"AUDIO", B:"B", BASE:"BASE", BASEFONT:"BASEFONT", BDI:"BDI", BDO:"BDO", BIG:"BIG", BLOCKQUOTE:"BLOCKQUOTE", BODY:"BODY", BR:"BR", BUTTON:"BUTTON", CANVAS:"CANVAS", CAPTION:"CAPTION", CENTER:"CENTER", CITE:"CITE", CODE:"CODE", COL:"COL", COLGROUP:"COLGROUP", COMMAND:"COMMAND", DATA:"DATA", DATALIST:"DATALIST", DD:"DD", DEL:"DEL", DETAILS:"DETAILS", DFN:"DFN", 
DIALOG:"DIALOG", DIR:"DIR", DIV:"DIV", DL:"DL", DT:"DT", EM:"EM", EMBED:"EMBED", FIELDSET:"FIELDSET", FIGCAPTION:"FIGCAPTION", FIGURE:"FIGURE", FONT:"FONT", FOOTER:"FOOTER", FORM:"FORM", FRAME:"FRAME", FRAMESET:"FRAMESET", H1:"H1", H2:"H2", H3:"H3", H4:"H4", H5:"H5", H6:"H6", HEAD:"HEAD", HEADER:"HEADER", HGROUP:"HGROUP", HR:"HR", HTML:"HTML", I:"I", IFRAME:"IFRAME", IMG:"IMG", INPUT:"INPUT", INS:"INS", ISINDEX:"ISINDEX", KBD:"KBD", KEYGEN:"KEYGEN", LABEL:"LABEL", LEGEND:"LEGEND", LI:"LI", LINK:"LINK", 
MAP:"MAP", MARK:"MARK", MATH:"MATH", MENU:"MENU", META:"META", METER:"METER", NAV:"NAV", NOFRAMES:"NOFRAMES", NOSCRIPT:"NOSCRIPT", OBJECT:"OBJECT", OL:"OL", OPTGROUP:"OPTGROUP", OPTION:"OPTION", OUTPUT:"OUTPUT", P:"P", PARAM:"PARAM", PRE:"PRE", PROGRESS:"PROGRESS", Q:"Q", RP:"RP", RT:"RT", RUBY:"RUBY", S:"S", SAMP:"SAMP", SCRIPT:"SCRIPT", SECTION:"SECTION", SELECT:"SELECT", SMALL:"SMALL", SOURCE:"SOURCE", SPAN:"SPAN", STRIKE:"STRIKE", STRONG:"STRONG", STYLE:"STYLE", SUB:"SUB", SUMMARY:"SUMMARY", 
SUP:"SUP", SVG:"SVG", TABLE:"TABLE", TBODY:"TBODY", TD:"TD", TEMPLATE:"TEMPLATE", TEXTAREA:"TEXTAREA", TFOOT:"TFOOT", TH:"TH", THEAD:"THEAD", TIME:"TIME", TITLE:"TITLE", TR:"TR", TRACK:"TRACK", TT:"TT", U:"U", UL:"UL", VAR:"VAR", VIDEO:"VIDEO", WBR:"WBR"};
goog.provide("goog.functions");
goog.functions.constant = function(retValue) {
  return function() {
    return retValue;
  };
};
goog.functions.FALSE = goog.functions.constant(false);
goog.functions.TRUE = goog.functions.constant(true);
goog.functions.NULL = goog.functions.constant(null);
goog.functions.identity = function(opt_returnValue, var_args) {
  return opt_returnValue;
};
goog.functions.error = function(message) {
  return function() {
    throw Error(message);
  };
};
goog.functions.fail = function(err) {
  return function() {
    throw err;
  };
};
goog.functions.lock = function(f, opt_numArgs) {
  opt_numArgs = opt_numArgs || 0;
  return function() {
    return f.apply(this, Array.prototype.slice.call(arguments, 0, opt_numArgs));
  };
};
goog.functions.nth = function(n) {
  return function() {
    return arguments[n];
  };
};
goog.functions.withReturnValue = function(f, retValue) {
  return goog.functions.sequence(f, goog.functions.constant(retValue));
};
goog.functions.equalTo = function(value, opt_useLooseComparison) {
  return function(other) {
    return opt_useLooseComparison ? value == other : value === other;
  };
};
goog.functions.compose = function(fn, var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    var result;
    if (length) {
      result = functions[length - 1].apply(this, arguments);
    }
    for (var i = length - 2;i >= 0;i--) {
      result = functions[i].call(this, result);
    }
    return result;
  };
};
goog.functions.sequence = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    var result;
    for (var i = 0;i < length;i++) {
      result = functions[i].apply(this, arguments);
    }
    return result;
  };
};
goog.functions.and = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    for (var i = 0;i < length;i++) {
      if (!functions[i].apply(this, arguments)) {
        return false;
      }
    }
    return true;
  };
};
goog.functions.or = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    for (var i = 0;i < length;i++) {
      if (functions[i].apply(this, arguments)) {
        return true;
      }
    }
    return false;
  };
};
goog.functions.not = function(f) {
  return function() {
    return !f.apply(this, arguments);
  };
};
goog.functions.create = function(constructor, var_args) {
  var temp = function() {
  };
  temp.prototype = constructor.prototype;
  var obj = new temp;
  constructor.apply(obj, Array.prototype.slice.call(arguments, 1));
  return obj;
};
goog.define("goog.functions.CACHE_RETURN_VALUE", true);
goog.functions.cacheReturnValue = function(fn) {
  var called = false;
  var value;
  return function() {
    if (!goog.functions.CACHE_RETURN_VALUE) {
      return fn();
    }
    if (!called) {
      value = fn();
      called = true;
    }
    return value;
  };
};
goog.provide("goog.labs.userAgent.browser");
goog.require("goog.array");
goog.require("goog.labs.userAgent.util");
goog.require("goog.object");
goog.require("goog.string");
goog.labs.userAgent.browser.matchOpera_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Opera") || goog.labs.userAgent.util.matchUserAgent("OPR");
};
goog.labs.userAgent.browser.matchIE_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Edge") || goog.labs.userAgent.util.matchUserAgent("Trident") || goog.labs.userAgent.util.matchUserAgent("MSIE");
};
goog.labs.userAgent.browser.matchFirefox_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Firefox");
};
goog.labs.userAgent.browser.matchSafari_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Safari") && !(goog.labs.userAgent.browser.matchChrome_() || goog.labs.userAgent.browser.matchCoast_() || goog.labs.userAgent.browser.matchOpera_() || goog.labs.userAgent.browser.matchIE_() || goog.labs.userAgent.browser.isSilk() || goog.labs.userAgent.util.matchUserAgent("Android"));
};
goog.labs.userAgent.browser.matchCoast_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Coast");
};
goog.labs.userAgent.browser.matchIosWebview_ = function() {
  return (goog.labs.userAgent.util.matchUserAgent("iPad") || goog.labs.userAgent.util.matchUserAgent("iPhone")) && !goog.labs.userAgent.browser.matchSafari_() && !goog.labs.userAgent.browser.matchChrome_() && !goog.labs.userAgent.browser.matchCoast_() && goog.labs.userAgent.util.matchUserAgent("AppleWebKit");
};
goog.labs.userAgent.browser.matchChrome_ = function() {
  return (goog.labs.userAgent.util.matchUserAgent("Chrome") || goog.labs.userAgent.util.matchUserAgent("CriOS")) && !goog.labs.userAgent.browser.matchOpera_() && !goog.labs.userAgent.browser.matchIE_();
};
goog.labs.userAgent.browser.matchAndroidBrowser_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Android") && !(goog.labs.userAgent.browser.isChrome() || goog.labs.userAgent.browser.isFirefox() || goog.labs.userAgent.browser.isOpera() || goog.labs.userAgent.browser.isSilk());
};
goog.labs.userAgent.browser.isOpera = goog.labs.userAgent.browser.matchOpera_;
goog.labs.userAgent.browser.isIE = goog.labs.userAgent.browser.matchIE_;
goog.labs.userAgent.browser.isFirefox = goog.labs.userAgent.browser.matchFirefox_;
goog.labs.userAgent.browser.isSafari = goog.labs.userAgent.browser.matchSafari_;
goog.labs.userAgent.browser.isCoast = goog.labs.userAgent.browser.matchCoast_;
goog.labs.userAgent.browser.isIosWebview = goog.labs.userAgent.browser.matchIosWebview_;
goog.labs.userAgent.browser.isChrome = goog.labs.userAgent.browser.matchChrome_;
goog.labs.userAgent.browser.isAndroidBrowser = goog.labs.userAgent.browser.matchAndroidBrowser_;
goog.labs.userAgent.browser.isSilk = function() {
  return goog.labs.userAgent.util.matchUserAgent("Silk");
};
goog.labs.userAgent.browser.getVersion = function() {
  var userAgentString = goog.labs.userAgent.util.getUserAgent();
  if (goog.labs.userAgent.browser.isIE()) {
    return goog.labs.userAgent.browser.getIEVersion_(userAgentString);
  }
  var versionTuples = goog.labs.userAgent.util.extractVersionTuples(userAgentString);
  var versionMap = {};
  goog.array.forEach(versionTuples, function(tuple) {
    var key = tuple[0];
    var value = tuple[1];
    versionMap[key] = value;
  });
  var versionMapHasKey = goog.partial(goog.object.containsKey, versionMap);
  function lookUpValueWithKeys(keys) {
    var key = goog.array.find(keys, versionMapHasKey);
    return versionMap[key] || "";
  }
  if (goog.labs.userAgent.browser.isOpera()) {
    return lookUpValueWithKeys(["Version", "Opera", "OPR"]);
  }
  if (goog.labs.userAgent.browser.isChrome()) {
    return lookUpValueWithKeys(["Chrome", "CriOS"]);
  }
  var tuple = versionTuples[2];
  return tuple && tuple[1] || "";
};
goog.labs.userAgent.browser.isVersionOrHigher = function(version) {
  return goog.string.compareVersions(goog.labs.userAgent.browser.getVersion(), version) >= 0;
};
goog.labs.userAgent.browser.getIEVersion_ = function(userAgent) {
  var rv = /rv: *([\d\.]*)/.exec(userAgent);
  if (rv && rv[1]) {
    return rv[1];
  }
  var edge = /Edge\/([\d\.]+)/.exec(userAgent);
  if (edge) {
    return edge[1];
  }
  var version = "";
  var msie = /MSIE +([\d\.]+)/.exec(userAgent);
  if (msie && msie[1]) {
    var tridentVersion = /Trident\/(\d.\d)/.exec(userAgent);
    if (msie[1] == "7.0") {
      if (tridentVersion && tridentVersion[1]) {
        switch(tridentVersion[1]) {
          case "4.0":
            version = "8.0";
            break;
          case "5.0":
            version = "9.0";
            break;
          case "6.0":
            version = "10.0";
            break;
          case "7.0":
            version = "11.0";
            break;
        }
      } else {
        version = "7.0";
      }
    } else {
      version = msie[1];
    }
  }
  return version;
};
goog.provide("goog.labs.userAgent.engine");
goog.require("goog.array");
goog.require("goog.labs.userAgent.util");
goog.require("goog.string");
goog.labs.userAgent.engine.isPresto = function() {
  return goog.labs.userAgent.util.matchUserAgent("Presto");
};
goog.labs.userAgent.engine.isTrident = function() {
  return goog.labs.userAgent.util.matchUserAgent("Trident") || goog.labs.userAgent.util.matchUserAgent("MSIE");
};
goog.labs.userAgent.engine.isEdge = function() {
  return goog.labs.userAgent.util.matchUserAgent("Edge");
};
goog.labs.userAgent.engine.isWebKit = function() {
  return goog.labs.userAgent.util.matchUserAgentIgnoreCase("WebKit") && !goog.labs.userAgent.engine.isEdge();
};
goog.labs.userAgent.engine.isGecko = function() {
  return goog.labs.userAgent.util.matchUserAgent("Gecko") && !goog.labs.userAgent.engine.isWebKit() && !goog.labs.userAgent.engine.isTrident() && !goog.labs.userAgent.engine.isEdge();
};
goog.labs.userAgent.engine.getVersion = function() {
  var userAgentString = goog.labs.userAgent.util.getUserAgent();
  if (userAgentString) {
    var tuples = goog.labs.userAgent.util.extractVersionTuples(userAgentString);
    var engineTuple = goog.labs.userAgent.engine.getEngineTuple_(tuples);
    if (engineTuple) {
      if (engineTuple[0] == "Gecko") {
        return goog.labs.userAgent.engine.getVersionForKey_(tuples, "Firefox");
      }
      return engineTuple[1];
    }
    var browserTuple = tuples[0];
    var info;
    if (browserTuple && (info = browserTuple[2])) {
      var match = /Trident\/([^\s;]+)/.exec(info);
      if (match) {
        return match[1];
      }
    }
  }
  return "";
};
goog.labs.userAgent.engine.getEngineTuple_ = function(tuples) {
  if (!goog.labs.userAgent.engine.isEdge()) {
    return tuples[1];
  }
  for (var i = 0;i < tuples.length;i++) {
    var tuple = tuples[i];
    if (tuple[0] == "Edge") {
      return tuple;
    }
  }
};
goog.labs.userAgent.engine.isVersionOrHigher = function(version) {
  return goog.string.compareVersions(goog.labs.userAgent.engine.getVersion(), version) >= 0;
};
goog.labs.userAgent.engine.getVersionForKey_ = function(tuples, key) {
  var pair = goog.array.find(tuples, function(pair) {
    return key == pair[0];
  });
  return pair && pair[1] || "";
};
goog.provide("goog.async.nextTick");
goog.provide("goog.async.throwException");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.dom.TagName");
goog.require("goog.functions");
goog.require("goog.labs.userAgent.browser");
goog.require("goog.labs.userAgent.engine");
goog.async.throwException = function(exception) {
  goog.global.setTimeout(function() {
    throw exception;
  }, 0);
};
goog.async.nextTick = function(callback, opt_context, opt_useSetImmediate) {
  var cb = callback;
  if (opt_context) {
    cb = goog.bind(callback, opt_context);
  }
  cb = goog.async.nextTick.wrapCallback_(cb);
  if (goog.isFunction(goog.global.setImmediate) && (opt_useSetImmediate || !goog.global.Window || !goog.global.Window.prototype || goog.global.Window.prototype.setImmediate != goog.global.setImmediate)) {
    goog.global.setImmediate(cb);
    return;
  }
  if (!goog.async.nextTick.setImmediate_) {
    goog.async.nextTick.setImmediate_ = goog.async.nextTick.getSetImmediateEmulator_();
  }
  goog.async.nextTick.setImmediate_(cb);
};
goog.async.nextTick.setImmediate_;
goog.async.nextTick.getSetImmediateEmulator_ = function() {
  var Channel = goog.global["MessageChannel"];
  if (typeof Channel === "undefined" && typeof window !== "undefined" && window.postMessage && window.addEventListener && !goog.labs.userAgent.engine.isPresto()) {
    Channel = function() {
      var iframe = document.createElement(goog.dom.TagName.IFRAME);
      iframe.style.display = "none";
      iframe.src = "";
      document.documentElement.appendChild(iframe);
      var win = iframe.contentWindow;
      var doc = win.document;
      doc.open();
      doc.write("");
      doc.close();
      var message = "callImmediate" + Math.random();
      var origin = win.location.protocol == "file:" ? "*" : win.location.protocol + "//" + win.location.host;
      var onmessage = goog.bind(function(e) {
        if (origin != "*" && e.origin != origin || e.data != message) {
          return;
        }
        this["port1"].onmessage();
      }, this);
      win.addEventListener("message", onmessage, false);
      this["port1"] = {};
      this["port2"] = {postMessage:function() {
        win.postMessage(message, origin);
      }};
    };
  }
  if (typeof Channel !== "undefined" && !goog.labs.userAgent.browser.isIE()) {
    var channel = new Channel;
    var head = {};
    var tail = head;
    channel["port1"].onmessage = function() {
      if (goog.isDef(head.next)) {
        head = head.next;
        var cb = head.cb;
        head.cb = null;
        cb();
      }
    };
    return function(cb) {
      tail.next = {cb:cb};
      tail = tail.next;
      channel["port2"].postMessage(0);
    };
  }
  if (typeof document !== "undefined" && "onreadystatechange" in document.createElement(goog.dom.TagName.SCRIPT)) {
    return function(cb) {
      var script = document.createElement(goog.dom.TagName.SCRIPT);
      script.onreadystatechange = function() {
        script.onreadystatechange = null;
        script.parentNode.removeChild(script);
        script = null;
        cb();
        cb = null;
      };
      document.documentElement.appendChild(script);
    };
  }
  return function(cb) {
    goog.global.setTimeout(cb, 0);
  };
};
goog.async.nextTick.wrapCallback_ = goog.functions.identity;
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.async.nextTick.wrapCallback_ = transformer;
});
goog.provide("cljs.core.async.impl.buffers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.buffers.acopy = function cljs$core$async$impl$buffers$acopy(src, src_start, dest, dest_start, len) {
  var cnt = 0;
  while (true) {
    if (cnt < len) {
      dest[dest_start + cnt] = src[src_start + cnt];
      var G__17662 = cnt + 1;
      cnt = G__17662;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.async.impl.buffers.RingBuffer = function(head, tail, length, arr) {
  this.head = head;
  this.tail = tail;
  this.length = length;
  this.arr = arr;
};
cljs.core.async.impl.buffers.RingBuffer.prototype.pop = function() {
  var self__ = this;
  var _ = this;
  if (self__.length === 0) {
    return null;
  } else {
    var x = self__.arr[self__.tail];
    self__.arr[self__.tail] = null;
    self__.tail = (self__.tail + 1) % self__.arr.length;
    self__.length = self__.length - 1;
    return x;
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unshift = function(x) {
  var self__ = this;
  var _ = this;
  self__.arr[self__.head] = x;
  self__.head = (self__.head + 1) % self__.arr.length;
  self__.length = self__.length + 1;
  return null;
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unbounded_unshift = function(x) {
  var self__ = this;
  var this$ = this;
  if (self__.length + 1 === self__.arr.length) {
    this$.resize();
  } else {
  }
  return this$.unshift(x);
};
cljs.core.async.impl.buffers.RingBuffer.prototype.resize = function() {
  var self__ = this;
  var _ = this;
  var new_arr_size = self__.arr.length * 2;
  var new_arr = new Array(new_arr_size);
  if (self__.tail < self__.head) {
    cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.length);
    self__.tail = 0;
    self__.head = self__.length;
    return self__.arr = new_arr;
  } else {
    if (self__.tail > self__.head) {
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.arr.length - self__.tail);
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, 0, new_arr, self__.arr.length - self__.tail, self__.head);
      self__.tail = 0;
      self__.head = self__.length;
      return self__.arr = new_arr;
    } else {
      if (self__.tail === self__.head) {
        self__.tail = 0;
        self__.head = 0;
        return self__.arr = new_arr;
      } else {
        return null;
      }
    }
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.cleanup = function(keep_QMARK_) {
  var self__ = this;
  var this$ = this;
  var n__5194__auto__ = self__.length;
  var x = 0;
  while (true) {
    if (x < n__5194__auto__) {
      var v_17663 = this$.pop();
      if (keep_QMARK_.call(null, v_17663)) {
        this$.unshift(v_17663);
      } else {
      }
      var G__17664 = x + 1;
      x = G__17664;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.async.impl.buffers.RingBuffer.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "head", "head", 869147608, null), new cljs.core.Symbol(null, "tail", "tail", 494507963, null), new cljs.core.Symbol(null, "length", "length", -2065447907, null), new cljs.core.Symbol(null, "arr", "arr", 2115492975, null)], null);
};
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/RingBuffer";
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write.call(null, writer__4889__auto__, "cljs.core.async.impl.buffers/RingBuffer");
};
cljs.core.async.impl.buffers.__GT_RingBuffer = function cljs$core$async$impl$buffers$__GT_RingBuffer(head, tail, length, arr) {
  return new cljs.core.async.impl.buffers.RingBuffer(head, tail, length, arr);
};
cljs.core.async.impl.buffers.ring_buffer = function cljs$core$async$impl$buffers$ring_buffer(n) {
  if (n > 0) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Can't create a ring buffer of size 0"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3e", "\x3e", 1085014381, null), new cljs.core.Symbol(null, "n", "n", -2092305744, null), 0)))].join(""));
  }
  return new cljs.core.async.impl.buffers.RingBuffer(0, 0, 0, new Array(n));
};
cljs.core.async.impl.buffers.FixedBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition0$ = 2;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length === self__.n;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  self__.buf.unbounded_unshift(itm);
  return this$__$1;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.FixedBuffer.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "buf", "buf", 1426618187, null), new cljs.core.Symbol(null, "n", "n", -2092305744, null)], null);
};
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/FixedBuffer";
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write.call(null, writer__4889__auto__, "cljs.core.async.impl.buffers/FixedBuffer");
};
cljs.core.async.impl.buffers.__GT_FixedBuffer = function cljs$core$async$impl$buffers$__GT_FixedBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(buf, n);
};
cljs.core.async.impl.buffers.fixed_buffer = function cljs$core$async$impl$buffers$fixed_buffer(n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
cljs.core.async.impl.buffers.DroppingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition0$ = 2;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$UnblockingBuffer$ = true;
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return false;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.buf.length === self__.n) {
  } else {
    self__.buf.unshift(itm);
  }
  return this$__$1;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.DroppingBuffer.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "buf", "buf", 1426618187, null), new cljs.core.Symbol(null, "n", "n", -2092305744, null)], null);
};
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/DroppingBuffer";
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write.call(null, writer__4889__auto__, "cljs.core.async.impl.buffers/DroppingBuffer");
};
cljs.core.async.impl.buffers.__GT_DroppingBuffer = function cljs$core$async$impl$buffers$__GT_DroppingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(buf, n);
};
cljs.core.async.impl.buffers.dropping_buffer = function cljs$core$async$impl$buffers$dropping_buffer(n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
cljs.core.async.impl.buffers.SlidingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition0$ = 2;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$UnblockingBuffer$ = true;
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return false;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.buf.length === self__.n) {
    cljs.core.async.impl.protocols.remove_BANG_.call(null, this$__$1);
  } else {
  }
  self__.buf.unshift(itm);
  return this$__$1;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.SlidingBuffer.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "buf", "buf", 1426618187, null), new cljs.core.Symbol(null, "n", "n", -2092305744, null)], null);
};
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/SlidingBuffer";
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write.call(null, writer__4889__auto__, "cljs.core.async.impl.buffers/SlidingBuffer");
};
cljs.core.async.impl.buffers.__GT_SlidingBuffer = function cljs$core$async$impl$buffers$__GT_SlidingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(buf, n);
};
cljs.core.async.impl.buffers.sliding_buffer = function cljs$core$async$impl$buffers$sliding_buffer(n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
goog.provide("cljs.core.async.impl.dispatch");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.buffers");
goog.require("goog.async.nextTick");
cljs.core.async.impl.dispatch.tasks = cljs.core.async.impl.buffers.ring_buffer.call(null, 32);
cljs.core.async.impl.dispatch.running_QMARK_ = false;
cljs.core.async.impl.dispatch.queued_QMARK_ = false;
cljs.core.async.impl.dispatch.TASK_BATCH_SIZE = 1024;
cljs.core.async.impl.dispatch.process_messages = function cljs$core$async$impl$dispatch$process_messages() {
  cljs.core.async.impl.dispatch.running_QMARK_ = true;
  cljs.core.async.impl.dispatch.queued_QMARK_ = false;
  var count_17667 = 0;
  while (true) {
    var m_17668 = cljs.core.async.impl.dispatch.tasks.pop();
    if (m_17668 == null) {
    } else {
      m_17668.call(null);
      if (count_17667 < cljs.core.async.impl.dispatch.TASK_BATCH_SIZE) {
        var G__17669 = count_17667 + 1;
        count_17667 = G__17669;
        continue;
      } else {
      }
    }
    break;
  }
  cljs.core.async.impl.dispatch.running_QMARK_ = false;
  if (cljs.core.async.impl.dispatch.tasks.length > 0) {
    return cljs.core.async.impl.dispatch.queue_dispatcher.call(null);
  } else {
    return null;
  }
};
cljs.core.async.impl.dispatch.queue_dispatcher = function cljs$core$async$impl$dispatch$queue_dispatcher() {
  if (cljs.core.truth_(function() {
    var and__4297__auto__ = cljs.core.async.impl.dispatch.queued_QMARK_;
    if (cljs.core.truth_(and__4297__auto__)) {
      return cljs.core.async.impl.dispatch.running_QMARK_;
    } else {
      return and__4297__auto__;
    }
  }())) {
    return null;
  } else {
    cljs.core.async.impl.dispatch.queued_QMARK_ = true;
    return goog.async.nextTick(cljs.core.async.impl.dispatch.process_messages);
  }
};
cljs.core.async.impl.dispatch.run = function cljs$core$async$impl$dispatch$run(f) {
  cljs.core.async.impl.dispatch.tasks.unbounded_unshift(f);
  return cljs.core.async.impl.dispatch.queue_dispatcher.call(null);
};
cljs.core.async.impl.dispatch.queue_delay = function cljs$core$async$impl$dispatch$queue_delay(f, delay) {
  return setTimeout(f, delay);
};
goog.provide("cljs.core.async.impl.channels");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.buffers");
cljs.core.async.impl.channels.box = function cljs$core$async$impl$channels$box(val) {
  if (typeof cljs.core.async.impl.channels.t17675 !== "undefined") {
  } else {
    cljs.core.async.impl.channels.t17675 = function(box, val, meta17676) {
      this.box = box;
      this.val = val;
      this.meta17676 = meta17676;
      this.cljs$lang$protocol_mask$partition0$ = 425984;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.async.impl.channels.t17675.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_17677, meta17676__$1) {
      var self__ = this;
      var _17677__$1 = this;
      return new cljs.core.async.impl.channels.t17675(self__.box, self__.val, meta17676__$1);
    };
    cljs.core.async.impl.channels.t17675.prototype.cljs$core$IMeta$_meta$arity$1 = function(_17677) {
      var self__ = this;
      var _17677__$1 = this;
      return self__.meta17676;
    };
    cljs.core.async.impl.channels.t17675.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.val;
    };
    cljs.core.async.impl.channels.t17675.getBasis = function() {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "box", "box", -1123515375, null), new cljs.core.Symbol(null, "val", "val", 1769233139, null), new cljs.core.Symbol(null, "meta17676", "meta17676", 556426846, null)], null);
    };
    cljs.core.async.impl.channels.t17675.cljs$lang$type = true;
    cljs.core.async.impl.channels.t17675.cljs$lang$ctorStr = "cljs.core.async.impl.channels/t17675";
    cljs.core.async.impl.channels.t17675.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
      return cljs.core._write.call(null, writer__4889__auto__, "cljs.core.async.impl.channels/t17675");
    };
    cljs.core.async.impl.channels.__GT_t17675 = function cljs$core$async$impl$channels$box_$___GT_t17675(box__$1, val__$1, meta17676) {
      return new cljs.core.async.impl.channels.t17675(box__$1, val__$1, meta17676);
    };
  }
  return new cljs.core.async.impl.channels.t17675(cljs$core$async$impl$channels$box, val, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.impl.channels.PutBox = function(handler, val) {
  this.handler = handler;
  this.val = val;
};
cljs.core.async.impl.channels.PutBox.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "handler", "handler", 1444934915, null), new cljs.core.Symbol(null, "val", "val", 1769233139, null)], null);
};
cljs.core.async.impl.channels.PutBox.cljs$lang$type = true;
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorStr = "cljs.core.async.impl.channels/PutBox";
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write.call(null, writer__4889__auto__, "cljs.core.async.impl.channels/PutBox");
};
cljs.core.async.impl.channels.__GT_PutBox = function cljs$core$async$impl$channels$__GT_PutBox(handler, val) {
  return new cljs.core.async.impl.channels.PutBox(handler, val);
};
cljs.core.async.impl.channels.put_active_QMARK_ = function cljs$core$async$impl$channels$put_active_QMARK_(box) {
  return cljs.core.async.impl.protocols.active_QMARK_.call(null, box.handler);
};
cljs.core.async.impl.channels.MAX_DIRTY = 64;
cljs.core.async.impl.channels.MMC = function() {
  var obj17679 = {};
  return obj17679;
}();
cljs.core.async.impl.channels.abort = function cljs$core$async$impl$channels$abort(this$) {
  if (function() {
    var and__4297__auto__ = this$;
    if (and__4297__auto__) {
      return this$.cljs$core$async$impl$channels$MMC$abort$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return this$.cljs$core$async$impl$channels$MMC$abort$arity$1(this$);
  } else {
    var x__4945__auto__ = this$ == null ? null : this$;
    return function() {
      var or__4309__auto__ = cljs.core.async.impl.channels.abort[goog.typeOf(x__4945__auto__)];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core.async.impl.channels.abort["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "MMC.abort", this$);
        }
      }
    }().call(null, this$);
  }
};
cljs.core.async.impl.channels.ManyToManyChannel = function(takes, dirty_takes, puts, dirty_puts, buf, closed, add_BANG_) {
  this.takes = takes;
  this.dirty_takes = dirty_takes;
  this.puts = puts;
  this.dirty_puts = dirty_puts;
  this.buf = buf;
  this.closed = closed;
  this.add_BANG_ = add_BANG_;
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$channels$MMC$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$channels$MMC$abort$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  while (true) {
    var putter_17680 = self__.puts.pop();
    if (putter_17680 == null) {
    } else {
      var put_handler_17681 = putter_17680.handler;
      var val_17682 = putter_17680.val;
      if (cljs.core.async.impl.protocols.active_QMARK_.call(null, put_handler_17681)) {
        var put_cb_17683 = cljs.core.async.impl.protocols.commit.call(null, put_handler_17681);
        cljs.core.async.impl.dispatch.run.call(null, function(put_cb_17683, put_handler_17681, val_17682, putter_17680, this$__$1) {
          return function() {
            return put_cb_17683.call(null, true);
          };
        }(put_cb_17683, put_handler_17681, val_17682, putter_17680, this$__$1));
      } else {
        continue;
      }
    }
    break;
  }
  self__.puts.cleanup(cljs.core.constantly.call(null, false));
  return cljs.core.async.impl.protocols.close_BANG_.call(null, this$__$1);
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(this$, val, handler) {
  var self__ = this;
  var this$__$1 = this;
  if (!(val == null)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Can't put nil in on a channel"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "val", "val", 1769233139, null)))))].join(""));
  }
  var closed__$1 = self__.closed;
  if (closed__$1 || !cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)) {
    return cljs.core.async.impl.channels.box.call(null, !closed__$1);
  } else {
    if (cljs.core.truth_(function() {
      var and__4297__auto__ = self__.buf;
      if (cljs.core.truth_(and__4297__auto__)) {
        return cljs.core.not.call(null, cljs.core.async.impl.protocols.full_QMARK_.call(null, self__.buf));
      } else {
        return and__4297__auto__;
      }
    }())) {
      cljs.core.async.impl.protocols.commit.call(null, handler);
      var done_QMARK_ = cljs.core.reduced_QMARK_.call(null, self__.add_BANG_.call(null, self__.buf, val));
      while (true) {
        if (self__.takes.length > 0 && cljs.core.count.call(null, self__.buf) > 0) {
          var taker_17684 = self__.takes.pop();
          if (cljs.core.async.impl.protocols.active_QMARK_.call(null, taker_17684)) {
            var take_cb_17685 = cljs.core.async.impl.protocols.commit.call(null, taker_17684);
            var val_17686__$1 = cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf);
            cljs.core.async.impl.dispatch.run.call(null, function(take_cb_17685, val_17686__$1, taker_17684, done_QMARK_, closed__$1, this$__$1) {
              return function() {
                return take_cb_17685.call(null, val_17686__$1);
              };
            }(take_cb_17685, val_17686__$1, taker_17684, done_QMARK_, closed__$1, this$__$1));
          } else {
            continue;
          }
        } else {
        }
        break;
      }
      if (done_QMARK_) {
        cljs.core.async.impl.channels.abort.call(null, this$__$1);
      } else {
      }
      return cljs.core.async.impl.channels.box.call(null, true);
    } else {
      var taker = function() {
        while (true) {
          var taker = self__.takes.pop();
          if (cljs.core.truth_(taker)) {
            if (cljs.core.truth_(cljs.core.async.impl.protocols.active_QMARK_.call(null, taker))) {
              return taker;
            } else {
              continue;
            }
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(taker)) {
        var take_cb = cljs.core.async.impl.protocols.commit.call(null, taker);
        cljs.core.async.impl.protocols.commit.call(null, handler);
        cljs.core.async.impl.dispatch.run.call(null, function(take_cb, taker, closed__$1, this$__$1) {
          return function() {
            return take_cb.call(null, val);
          };
        }(take_cb, taker, closed__$1, this$__$1));
        return cljs.core.async.impl.channels.box.call(null, true);
      } else {
        if (self__.dirty_puts > cljs.core.async.impl.channels.MAX_DIRTY) {
          self__.dirty_puts = 0;
          self__.puts.cleanup(cljs.core.async.impl.channels.put_active_QMARK_);
        } else {
          self__.dirty_puts = self__.dirty_puts + 1;
        }
        if (self__.puts.length < cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) {
        } else {
          throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("No more than "), cljs.core.str(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE), cljs.core.str(" pending puts are allowed on a single channel."), cljs.core.str(" Consider using a windowed buffer.")].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3c", "\x3c", 993667236, null), cljs.core.list(new cljs.core.Symbol(null, ".-length", ".-length", 
          -280799999, null), new cljs.core.Symbol(null, "puts", "puts", -1883877054, null)), new cljs.core.Symbol("impl", "MAX-QUEUE-SIZE", "impl/MAX-QUEUE-SIZE", 1508600732, null))))].join(""));
        }
        self__.puts.unbounded_unshift(new cljs.core.async.impl.channels.PutBox(handler, val));
        return null;
      }
    }
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(this$, handler) {
  var self__ = this;
  var this$__$1 = this;
  if (!cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)) {
    return null;
  } else {
    if (!(self__.buf == null) && cljs.core.count.call(null, self__.buf) > 0) {
      var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
      var retval = cljs.core.async.impl.channels.box.call(null, cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf));
      while (true) {
        if (cljs.core.truth_(cljs.core.async.impl.protocols.full_QMARK_.call(null, self__.buf))) {
        } else {
          var putter_17687 = self__.puts.pop();
          if (putter_17687 == null) {
          } else {
            var put_handler_17688 = putter_17687.handler;
            var val_17689 = putter_17687.val;
            if (cljs.core.async.impl.protocols.active_QMARK_.call(null, put_handler_17688)) {
              var put_cb_17690 = cljs.core.async.impl.protocols.commit.call(null, put_handler_17688);
              cljs.core.async.impl.protocols.commit.call(null, handler);
              cljs.core.async.impl.dispatch.run.call(null, function(put_cb_17690, put_handler_17688, val_17689, putter_17687, _, retval, this$__$1) {
                return function() {
                  return put_cb_17690.call(null, true);
                };
              }(put_cb_17690, put_handler_17688, val_17689, putter_17687, _, retval, this$__$1));
              if (cljs.core.reduced_QMARK_.call(null, self__.add_BANG_.call(null, self__.buf, val_17689))) {
                cljs.core.async.impl.channels.abort.call(null, this$__$1);
              } else {
              }
            } else {
            }
            continue;
          }
        }
        break;
      }
      return retval;
    } else {
      var putter = function() {
        while (true) {
          var putter = self__.puts.pop();
          if (cljs.core.truth_(putter)) {
            if (cljs.core.async.impl.protocols.active_QMARK_.call(null, putter.handler)) {
              return putter;
            } else {
              continue;
            }
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(putter)) {
        var put_cb = cljs.core.async.impl.protocols.commit.call(null, putter.handler);
        cljs.core.async.impl.protocols.commit.call(null, handler);
        cljs.core.async.impl.dispatch.run.call(null, function(put_cb, putter, this$__$1) {
          return function() {
            return put_cb.call(null, true);
          };
        }(put_cb, putter, this$__$1));
        return cljs.core.async.impl.channels.box.call(null, putter.val);
      } else {
        if (cljs.core.truth_(self__.closed)) {
          if (cljs.core.truth_(self__.buf)) {
            self__.add_BANG_.call(null, self__.buf);
          } else {
          }
          if (cljs.core.truth_(function() {
            var and__4297__auto__ = cljs.core.async.impl.protocols.active_QMARK_.call(null, handler);
            if (cljs.core.truth_(and__4297__auto__)) {
              return cljs.core.async.impl.protocols.commit.call(null, handler);
            } else {
              return and__4297__auto__;
            }
          }())) {
            var has_val = function() {
              var and__4297__auto__ = self__.buf;
              if (cljs.core.truth_(and__4297__auto__)) {
                return cljs.core.count.call(null, self__.buf) > 0;
              } else {
                return and__4297__auto__;
              }
            }();
            var val = cljs.core.truth_(has_val) ? cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf) : null;
            return cljs.core.async.impl.channels.box.call(null, val);
          } else {
            return null;
          }
        } else {
          if (self__.dirty_takes > cljs.core.async.impl.channels.MAX_DIRTY) {
            self__.dirty_takes = 0;
            self__.takes.cleanup(cljs.core.async.impl.protocols.active_QMARK_);
          } else {
            self__.dirty_takes = self__.dirty_takes + 1;
          }
          if (self__.takes.length < cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) {
          } else {
            throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("No more than "), cljs.core.str(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE), cljs.core.str(" pending takes are allowed on a single channel.")].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3c", "\x3c", 993667236, null), cljs.core.list(new cljs.core.Symbol(null, ".-length", ".-length", -280799999, null), new cljs.core.Symbol(null, "takes", 
            "takes", 298247964, null)), new cljs.core.Symbol("impl", "MAX-QUEUE-SIZE", "impl/MAX-QUEUE-SIZE", 1508600732, null))))].join(""));
          }
          self__.takes.unbounded_unshift(handler);
          return null;
        }
      }
    }
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.closed;
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.closed) {
    return null;
  } else {
    self__.closed = true;
    if (cljs.core.truth_(function() {
      var and__4297__auto__ = self__.buf;
      if (cljs.core.truth_(and__4297__auto__)) {
        return self__.puts.length === 0;
      } else {
        return and__4297__auto__;
      }
    }())) {
      self__.add_BANG_.call(null, self__.buf);
    } else {
    }
    while (true) {
      var taker_17691 = self__.takes.pop();
      if (taker_17691 == null) {
      } else {
        if (cljs.core.async.impl.protocols.active_QMARK_.call(null, taker_17691)) {
          var take_cb_17692 = cljs.core.async.impl.protocols.commit.call(null, taker_17691);
          var val_17693 = cljs.core.truth_(function() {
            var and__4297__auto__ = self__.buf;
            if (cljs.core.truth_(and__4297__auto__)) {
              return cljs.core.count.call(null, self__.buf) > 0;
            } else {
              return and__4297__auto__;
            }
          }()) ? cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf) : null;
          cljs.core.async.impl.dispatch.run.call(null, function(take_cb_17692, val_17693, taker_17691, this$__$1) {
            return function() {
              return take_cb_17692.call(null, val_17693);
            };
          }(take_cb_17692, val_17693, taker_17691, this$__$1));
        } else {
        }
        continue;
      }
      break;
    }
    return null;
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.getBasis = function() {
  return new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "takes", "takes", 298247964, null), new cljs.core.Symbol(null, "dirty-takes", "dirty-takes", 575642138, null), new cljs.core.Symbol(null, "puts", "puts", -1883877054, null), new cljs.core.Symbol(null, "dirty-puts", "dirty-puts", 57041148, null), new cljs.core.Symbol(null, "buf", "buf", 1426618187, null), new cljs.core.Symbol(null, "closed", "closed", 720856168, null), new cljs.core.Symbol(null, 
  "add!", "add!", 2046056845, null)], null);
};
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$type = true;
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorStr = "cljs.core.async.impl.channels/ManyToManyChannel";
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write.call(null, writer__4889__auto__, "cljs.core.async.impl.channels/ManyToManyChannel");
};
cljs.core.async.impl.channels.__GT_ManyToManyChannel = function cljs$core$async$impl$channels$__GT_ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed, add_BANG_) {
  return new cljs.core.async.impl.channels.ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed, add_BANG_);
};
cljs.core.async.impl.channels.ex_handler = function cljs$core$async$impl$channels$ex_handler(ex) {
  console.log(ex);
  return null;
};
cljs.core.async.impl.channels.handle = function cljs$core$async$impl$channels$handle(buf, exh, t) {
  var else$ = function() {
    var or__4309__auto__ = exh;
    if (cljs.core.truth_(or__4309__auto__)) {
      return or__4309__auto__;
    } else {
      return cljs.core.async.impl.channels.ex_handler;
    }
  }().call(null, t);
  if (else$ == null) {
    return buf;
  } else {
    return cljs.core.async.impl.protocols.add_BANG_.call(null, buf, else$);
  }
};
cljs.core.async.impl.channels.chan = function cljs$core$async$impl$channels$chan() {
  var G__17695 = arguments.length;
  switch(G__17695) {
    case 1:
      return cljs.core.async.impl.channels.chan.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.impl.channels.chan.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.impl.channels.chan.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.impl.channels.chan.cljs$core$IFn$_invoke$arity$1 = function(buf) {
  return cljs.core.async.impl.channels.chan.call(null, buf, null);
};
cljs.core.async.impl.channels.chan.cljs$core$IFn$_invoke$arity$2 = function(buf, xform) {
  return cljs.core.async.impl.channels.chan.call(null, buf, xform, null);
};
cljs.core.async.impl.channels.chan.cljs$core$IFn$_invoke$arity$3 = function(buf, xform, exh) {
  return new cljs.core.async.impl.channels.ManyToManyChannel(cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, buf, false, function() {
    var add_BANG_ = cljs.core.truth_(xform) ? xform.call(null, cljs.core.async.impl.protocols.add_BANG_) : cljs.core.async.impl.protocols.add_BANG_;
    return function(add_BANG_) {
      return function() {
        var G__17699 = null;
        var G__17699__1 = function(buf__$1) {
          try {
            return add_BANG_.call(null, buf__$1);
          } catch (e17696) {
            var t = e17696;
            return cljs.core.async.impl.channels.handle.call(null, buf__$1, exh, t);
          }
        };
        var G__17699__2 = function(buf__$1, val) {
          try {
            return add_BANG_.call(null, buf__$1, val);
          } catch (e17697) {
            var t = e17697;
            return cljs.core.async.impl.channels.handle.call(null, buf__$1, exh, t);
          }
        };
        G__17699 = function(buf__$1, val) {
          switch(arguments.length) {
            case 1:
              return G__17699__1.call(this, buf__$1);
            case 2:
              return G__17699__2.call(this, buf__$1, val);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__17699.cljs$core$IFn$_invoke$arity$1 = G__17699__1;
        G__17699.cljs$core$IFn$_invoke$arity$2 = G__17699__2;
        return G__17699;
      }();
    }(add_BANG_);
  }());
};
cljs.core.async.impl.channels.chan.cljs$lang$maxFixedArity = 3;
goog.provide("cljs.core.async.impl.timers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.dispatch");
cljs.core.async.impl.timers.MAX_LEVEL = 15;
cljs.core.async.impl.timers.P = 1 / 2;
cljs.core.async.impl.timers.random_level = function cljs$core$async$impl$timers$random_level() {
  var G__17567 = arguments.length;
  switch(G__17567) {
    case 0:
      return cljs.core.async.impl.timers.random_level.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.async.impl.timers.random_level.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.impl.timers.random_level.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.async.impl.timers.random_level.call(null, 0);
};
cljs.core.async.impl.timers.random_level.cljs$core$IFn$_invoke$arity$1 = function(level) {
  while (true) {
    if (Math.random() < cljs.core.async.impl.timers.P && level < cljs.core.async.impl.timers.MAX_LEVEL) {
      var G__17569 = level + 1;
      level = G__17569;
      continue;
    } else {
      return level;
    }
    break;
  }
};
cljs.core.async.impl.timers.random_level.cljs$lang$maxFixedArity = 1;
cljs.core.async.impl.timers.SkipListNode = function(key, val, forward) {
  this.key = key;
  this.val = val;
  this.forward = forward;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.async.impl.timers.SkipListNode.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "key", "key", 124488940, null), new cljs.core.Symbol(null, "val", "val", 1769233139, null), new cljs.core.Symbol(null, "forward", "forward", 1083186224, null)], null);
};
cljs.core.async.impl.timers.SkipListNode.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipListNode";
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write.call(null, writer__4889__auto__, "cljs.core.async.impl.timers/SkipListNode");
};
cljs.core.async.impl.timers.__GT_SkipListNode = function cljs$core$async$impl$timers$__GT_SkipListNode(key, val, forward) {
  return new cljs.core.async.impl.timers.SkipListNode(key, val, forward);
};
cljs.core.async.impl.timers.skip_list_node = function cljs$core$async$impl$timers$skip_list_node() {
  var G__17571 = arguments.length;
  switch(G__17571) {
    case 1:
      return cljs.core.async.impl.timers.skip_list_node.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 3:
      return cljs.core.async.impl.timers.skip_list_node.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.impl.timers.skip_list_node.cljs$core$IFn$_invoke$arity$1 = function(level) {
  return cljs.core.async.impl.timers.skip_list_node.call(null, null, null, level);
};
cljs.core.async.impl.timers.skip_list_node.cljs$core$IFn$_invoke$arity$3 = function(k, v, level) {
  var arr = new Array(level + 1);
  var i_17573 = 0;
  while (true) {
    if (i_17573 < arr.length) {
      arr[i_17573] = null;
      var G__17574 = i_17573 + 1;
      i_17573 = G__17574;
      continue;
    } else {
    }
    break;
  }
  return new cljs.core.async.impl.timers.SkipListNode(k, v, arr);
};
cljs.core.async.impl.timers.skip_list_node.cljs$lang$maxFixedArity = 3;
cljs.core.async.impl.timers.least_greater_node = function cljs$core$async$impl$timers$least_greater_node() {
  var G__17576 = arguments.length;
  switch(G__17576) {
    case 3:
      return cljs.core.async.impl.timers.least_greater_node.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.async.impl.timers.least_greater_node.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.impl.timers.least_greater_node.cljs$core$IFn$_invoke$arity$3 = function(x, k, level) {
  return cljs.core.async.impl.timers.least_greater_node.call(null, x, k, level, null);
};
cljs.core.async.impl.timers.least_greater_node.cljs$core$IFn$_invoke$arity$4 = function(x, k, level, update) {
  while (true) {
    if (!(level < 0)) {
      var x__$1 = function() {
        var x__$1 = x;
        while (true) {
          var temp__4420__auto__ = x__$1.forward[level];
          if (cljs.core.truth_(temp__4420__auto__)) {
            var x_SINGLEQUOTE_ = temp__4420__auto__;
            if (x_SINGLEQUOTE_.key < k) {
              var G__17578 = x_SINGLEQUOTE_;
              x__$1 = G__17578;
              continue;
            } else {
              return x__$1;
            }
          } else {
            return x__$1;
          }
          break;
        }
      }();
      if (update == null) {
      } else {
        update[level] = x__$1;
      }
      var G__17579 = x__$1;
      var G__17580 = k;
      var G__17581 = level - 1;
      var G__17582 = update;
      x = G__17579;
      k = G__17580;
      level = G__17581;
      update = G__17582;
      continue;
    } else {
      return x;
    }
    break;
  }
};
cljs.core.async.impl.timers.least_greater_node.cljs$lang$maxFixedArity = 4;
cljs.core.async.impl.timers.SkipList = function(header, level) {
  this.header = header;
  this.level = level;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.async.impl.timers.SkipList.prototype.put = function(k, v) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward[0];
  if (!(x__$1 == null) && x__$1.key === k) {
    return x__$1.val = v;
  } else {
    var new_level = cljs.core.async.impl.timers.random_level.call(null);
    if (new_level > self__.level) {
      var i_17583 = self__.level + 1;
      while (true) {
        if (i_17583 <= new_level + 1) {
          update[i_17583] = self__.header;
          var G__17584 = i_17583 + 1;
          i_17583 = G__17584;
          continue;
        } else {
        }
        break;
      }
      self__.level = new_level;
    } else {
    }
    var x__$2 = cljs.core.async.impl.timers.skip_list_node.call(null, k, v, new Array(new_level));
    var i = 0;
    while (true) {
      if (i <= self__.level) {
        var links = update[i].forward;
        x__$2.forward[i] = links[i];
        return links[i] = x__$2;
      } else {
        return null;
      }
      break;
    }
  }
};
cljs.core.async.impl.timers.SkipList.prototype.remove = function(k) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward[0];
  if (!(x__$1 == null) && x__$1.key === k) {
    var i_17585 = 0;
    while (true) {
      if (i_17585 <= self__.level) {
        var links_17586 = update[i_17585].forward;
        if (links_17586[i_17585] === x__$1) {
          links_17586[i_17585] = x__$1.forward[i_17585];
          var G__17587 = i_17585 + 1;
          i_17585 = G__17587;
          continue;
        } else {
          var G__17588 = i_17585 + 1;
          i_17585 = G__17588;
          continue;
        }
      } else {
      }
      break;
    }
    while (true) {
      if (self__.level > 0 && self__.header.forward[self__.level] == null) {
        self__.level = self__.level - 1;
        continue;
      } else {
        return null;
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.ceilingEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while (true) {
    if (!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while (true) {
          var x_SINGLEQUOTE_ = x__$1.forward[level__$1];
          if (x_SINGLEQUOTE_ == null) {
            return null;
          } else {
            if (x_SINGLEQUOTE_.key >= k) {
              return x_SINGLEQUOTE_;
            } else {
              var G__17589 = x_SINGLEQUOTE_;
              x__$1 = G__17589;
              continue;
            }
          }
          break;
        }
      }();
      if (!(nx == null)) {
        var G__17590 = nx;
        var G__17591 = level__$1 - 1;
        x = G__17590;
        level__$1 = G__17591;
        continue;
      } else {
        var G__17592 = x;
        var G__17593 = level__$1 - 1;
        x = G__17592;
        level__$1 = G__17593;
        continue;
      }
    } else {
      if (x === self__.header) {
        return null;
      } else {
        return x;
      }
    }
    break;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.floorEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while (true) {
    if (!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while (true) {
          var x_SINGLEQUOTE_ = x__$1.forward[level__$1];
          if (!(x_SINGLEQUOTE_ == null)) {
            if (x_SINGLEQUOTE_.key > k) {
              return x__$1;
            } else {
              var G__17594 = x_SINGLEQUOTE_;
              x__$1 = G__17594;
              continue;
            }
          } else {
            if (level__$1 === 0) {
              return x__$1;
            } else {
              return null;
            }
          }
          break;
        }
      }();
      if (cljs.core.truth_(nx)) {
        var G__17595 = nx;
        var G__17596 = level__$1 - 1;
        x = G__17595;
        level__$1 = G__17596;
        continue;
      } else {
        var G__17597 = x;
        var G__17598 = level__$1 - 1;
        x = G__17597;
        level__$1 = G__17598;
        continue;
      }
    } else {
      if (x === self__.header) {
        return null;
      } else {
        return x;
      }
    }
    break;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var iter = function(coll__$1) {
    return function cljs$core$async$impl$timers$iter(node) {
      return new cljs.core.LazySeq(null, function(coll__$1) {
        return function() {
          if (node == null) {
            return null;
          } else {
            return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [node.key, node.val], null), cljs$core$async$impl$timers$iter.call(null, node.forward[0]));
          }
        };
      }(coll__$1), null, null);
    };
  }(coll__$1);
  return iter.call(null, self__.header.forward[0]);
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var coll__$1 = this;
  var pr_pair = function(coll__$1) {
    return function(keyval) {
      return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "", " ", "", opts, keyval);
    };
  }(coll__$1);
  return cljs.core.pr_sequential_writer.call(null, writer, pr_pair, "{", ", ", "}", opts, coll__$1);
};
cljs.core.async.impl.timers.SkipList.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "header", "header", 1759972661, null), new cljs.core.Symbol(null, "level", "level", -1363938217, null)], null);
};
cljs.core.async.impl.timers.SkipList.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipList";
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
  return cljs.core._write.call(null, writer__4889__auto__, "cljs.core.async.impl.timers/SkipList");
};
cljs.core.async.impl.timers.__GT_SkipList = function cljs$core$async$impl$timers$__GT_SkipList(header, level) {
  return new cljs.core.async.impl.timers.SkipList(header, level);
};
cljs.core.async.impl.timers.skip_list = function cljs$core$async$impl$timers$skip_list() {
  return new cljs.core.async.impl.timers.SkipList(cljs.core.async.impl.timers.skip_list_node.call(null, 0), 0);
};
cljs.core.async.impl.timers.timeouts_map = cljs.core.async.impl.timers.skip_list.call(null);
cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS = 10;
cljs.core.async.impl.timers.timeout = function cljs$core$async$impl$timers$timeout(msecs) {
  var timeout__$1 = (new Date).valueOf() + msecs;
  var me = cljs.core.async.impl.timers.timeouts_map.ceilingEntry(timeout__$1);
  var or__4309__auto__ = cljs.core.truth_(function() {
    var and__4297__auto__ = me;
    if (cljs.core.truth_(and__4297__auto__)) {
      return me.key < timeout__$1 + cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS;
    } else {
      return and__4297__auto__;
    }
  }()) ? me.val : null;
  if (cljs.core.truth_(or__4309__auto__)) {
    return or__4309__auto__;
  } else {
    var timeout_channel = cljs.core.async.impl.channels.chan.call(null, null);
    cljs.core.async.impl.timers.timeouts_map.put(timeout__$1, timeout_channel);
    cljs.core.async.impl.dispatch.queue_delay.call(null, function(timeout_channel, or__4309__auto__, timeout__$1, me) {
      return function() {
        cljs.core.async.impl.timers.timeouts_map.remove(timeout__$1);
        return cljs.core.async.impl.protocols.close_BANG_.call(null, timeout_channel);
      };
    }(timeout_channel, or__4309__auto__, timeout__$1, me), msecs);
    return timeout_channel;
  }
};
goog.provide("cljs.core.async");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.timers");
cljs.core.async.fn_handler = function cljs$core$async$fn_handler(f) {
  if (typeof cljs.core.async.t15073 !== "undefined") {
  } else {
    cljs.core.async.t15073 = function(fn_handler, f, meta15074) {
      this.fn_handler = fn_handler;
      this.f = f;
      this.meta15074 = meta15074;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.async.t15073.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_15075, meta15074__$1) {
      var self__ = this;
      var _15075__$1 = this;
      return new cljs.core.async.t15073(self__.fn_handler, self__.f, meta15074__$1);
    };
    cljs.core.async.t15073.prototype.cljs$core$IMeta$_meta$arity$1 = function(_15075) {
      var self__ = this;
      var _15075__$1 = this;
      return self__.meta15074;
    };
    cljs.core.async.t15073.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t15073.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.t15073.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.f;
    };
    cljs.core.async.t15073.getBasis = function() {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "fn-handler", "fn-handler", 648785851, null), new cljs.core.Symbol(null, "f", "f", 43394975, null), new cljs.core.Symbol(null, "meta15074", "meta15074", 369506679, null)], null);
    };
    cljs.core.async.t15073.cljs$lang$type = true;
    cljs.core.async.t15073.cljs$lang$ctorStr = "cljs.core.async/t15073";
    cljs.core.async.t15073.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
      return cljs.core._write.call(null, writer__4889__auto__, "cljs.core.async/t15073");
    };
    cljs.core.async.__GT_t15073 = function cljs$core$async$fn_handler_$___GT_t15073(fn_handler__$1, f__$1, meta15074) {
      return new cljs.core.async.t15073(fn_handler__$1, f__$1, meta15074);
    };
  }
  return new cljs.core.async.t15073(cljs$core$async$fn_handler, f, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.buffer = function cljs$core$async$buffer(n) {
  return cljs.core.async.impl.buffers.fixed_buffer.call(null, n);
};
cljs.core.async.dropping_buffer = function cljs$core$async$dropping_buffer(n) {
  return cljs.core.async.impl.buffers.dropping_buffer.call(null, n);
};
cljs.core.async.sliding_buffer = function cljs$core$async$sliding_buffer(n) {
  return cljs.core.async.impl.buffers.sliding_buffer.call(null, n);
};
cljs.core.async.unblocking_buffer_QMARK_ = function cljs$core$async$unblocking_buffer_QMARK_(buff) {
  var G__15077 = buff;
  if (G__15077) {
    var bit__4983__auto__ = null;
    if (cljs.core.truth_(function() {
      var or__4309__auto__ = bit__4983__auto__;
      if (cljs.core.truth_(or__4309__auto__)) {
        return or__4309__auto__;
      } else {
        return G__15077.cljs$core$async$impl$protocols$UnblockingBuffer$;
      }
    }())) {
      return true;
    } else {
      if (!G__15077.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.async.impl.protocols.UnblockingBuffer, G__15077);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.async.impl.protocols.UnblockingBuffer, G__15077);
  }
};
cljs.core.async.chan = function cljs$core$async$chan() {
  var G__15079 = arguments.length;
  switch(G__15079) {
    case 0:
      return cljs.core.async.chan.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.chan.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.chan.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.chan.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.async.chan.call(null, null);
};
cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1 = function(buf_or_n) {
  return cljs.core.async.chan.call(null, buf_or_n, null, null);
};
cljs.core.async.chan.cljs$core$IFn$_invoke$arity$2 = function(buf_or_n, xform) {
  return cljs.core.async.chan.call(null, buf_or_n, xform, null);
};
cljs.core.async.chan.cljs$core$IFn$_invoke$arity$3 = function(buf_or_n, xform, ex_handler) {
  var buf_or_n__$1 = cljs.core._EQ_.call(null, buf_or_n, 0) ? null : buf_or_n;
  if (cljs.core.truth_(xform)) {
    if (cljs.core.truth_(buf_or_n__$1)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("buffer must be supplied when transducer is"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, new cljs.core.Symbol(null, "buf-or-n", "buf-or-n", -1646815050, null)))].join(""));
    }
  } else {
  }
  return cljs.core.async.impl.channels.chan.call(null, typeof buf_or_n__$1 === "number" ? cljs.core.async.buffer.call(null, buf_or_n__$1) : buf_or_n__$1, xform, ex_handler);
};
cljs.core.async.chan.cljs$lang$maxFixedArity = 3;
cljs.core.async.timeout = function cljs$core$async$timeout(msecs) {
  return cljs.core.async.impl.timers.timeout.call(null, msecs);
};
cljs.core.async._LT__BANG_ = function cljs$core$async$_LT__BANG_(port) {
  throw new Error("\x3c! used not in (go ...) block");
};
cljs.core.async.take_BANG_ = function cljs$core$async$take_BANG_() {
  var G__15082 = arguments.length;
  switch(G__15082) {
    case 2:
      return cljs.core.async.take_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.take_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.take_BANG_.cljs$core$IFn$_invoke$arity$2 = function(port, fn1) {
  return cljs.core.async.take_BANG_.call(null, port, fn1, true);
};
cljs.core.async.take_BANG_.cljs$core$IFn$_invoke$arity$3 = function(port, fn1, on_caller_QMARK_) {
  var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.fn_handler.call(null, fn1));
  if (cljs.core.truth_(ret)) {
    var val_15084 = cljs.core.deref.call(null, ret);
    if (cljs.core.truth_(on_caller_QMARK_)) {
      fn1.call(null, val_15084);
    } else {
      cljs.core.async.impl.dispatch.run.call(null, function(val_15084, ret) {
        return function() {
          return fn1.call(null, val_15084);
        };
      }(val_15084, ret));
    }
  } else {
  }
  return null;
};
cljs.core.async.take_BANG_.cljs$lang$maxFixedArity = 3;
cljs.core.async.nop = function cljs$core$async$nop(_) {
  return null;
};
cljs.core.async.fhnop = cljs.core.async.fn_handler.call(null, cljs.core.async.nop);
cljs.core.async._GT__BANG_ = function cljs$core$async$_GT__BANG_(port, val) {
  throw new Error("\x3e! used not in (go ...) block");
};
cljs.core.async.put_BANG_ = function cljs$core$async$put_BANG_() {
  var G__15086 = arguments.length;
  switch(G__15086) {
    case 2:
      return cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2 = function(port, val) {
  var temp__4420__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, port, val, cljs.core.async.fhnop);
  if (cljs.core.truth_(temp__4420__auto__)) {
    var ret = temp__4420__auto__;
    return cljs.core.deref.call(null, ret);
  } else {
    return true;
  }
};
cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$3 = function(port, val, fn1) {
  return cljs.core.async.put_BANG_.call(null, port, val, fn1, true);
};
cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$4 = function(port, val, fn1, on_caller_QMARK_) {
  var temp__4420__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, port, val, cljs.core.async.fn_handler.call(null, fn1));
  if (cljs.core.truth_(temp__4420__auto__)) {
    var retb = temp__4420__auto__;
    var ret = cljs.core.deref.call(null, retb);
    if (cljs.core.truth_(on_caller_QMARK_)) {
      fn1.call(null, ret);
    } else {
      cljs.core.async.impl.dispatch.run.call(null, function(ret, retb, temp__4420__auto__) {
        return function() {
          return fn1.call(null, ret);
        };
      }(ret, retb, temp__4420__auto__));
    }
    return ret;
  } else {
    return true;
  }
};
cljs.core.async.put_BANG_.cljs$lang$maxFixedArity = 4;
cljs.core.async.close_BANG_ = function cljs$core$async$close_BANG_(port) {
  return cljs.core.async.impl.protocols.close_BANG_.call(null, port);
};
cljs.core.async.random_array = function cljs$core$async$random_array(n) {
  var a = new Array(n);
  var n__5194__auto___15088 = n;
  var x_15089 = 0;
  while (true) {
    if (x_15089 < n__5194__auto___15088) {
      a[x_15089] = 0;
      var G__15090 = x_15089 + 1;
      x_15089 = G__15090;
      continue;
    } else {
    }
    break;
  }
  var i = 1;
  while (true) {
    if (cljs.core._EQ_.call(null, i, n)) {
      return a;
    } else {
      var j = cljs.core.rand_int.call(null, i);
      a[i] = a[j];
      a[j] = i;
      var G__15091 = i + 1;
      i = G__15091;
      continue;
    }
    break;
  }
};
cljs.core.async.alt_flag = function cljs$core$async$alt_flag() {
  var flag = cljs.core.atom.call(null, true);
  if (typeof cljs.core.async.t15095 !== "undefined") {
  } else {
    cljs.core.async.t15095 = function(alt_flag, flag, meta15096) {
      this.alt_flag = alt_flag;
      this.flag = flag;
      this.meta15096 = meta15096;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.async.t15095.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(flag) {
      return function(_15097, meta15096__$1) {
        var self__ = this;
        var _15097__$1 = this;
        return new cljs.core.async.t15095(self__.alt_flag, self__.flag, meta15096__$1);
      };
    }(flag);
    cljs.core.async.t15095.prototype.cljs$core$IMeta$_meta$arity$1 = function(flag) {
      return function(_15097) {
        var self__ = this;
        var _15097__$1 = this;
        return self__.meta15096;
      };
    }(flag);
    cljs.core.async.t15095.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t15095.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(flag) {
      return function(_) {
        var self__ = this;
        var ___$1 = this;
        return cljs.core.deref.call(null, self__.flag);
      };
    }(flag);
    cljs.core.async.t15095.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(flag) {
      return function(_) {
        var self__ = this;
        var ___$1 = this;
        cljs.core.reset_BANG_.call(null, self__.flag, null);
        return true;
      };
    }(flag);
    cljs.core.async.t15095.getBasis = function(flag) {
      return function() {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "alt-flag", "alt-flag", -1794972754, null), new cljs.core.Symbol(null, "flag", "flag", -1565787888, null), new cljs.core.Symbol(null, "meta15096", "meta15096", 748223803, null)], null);
      };
    }(flag);
    cljs.core.async.t15095.cljs$lang$type = true;
    cljs.core.async.t15095.cljs$lang$ctorStr = "cljs.core.async/t15095";
    cljs.core.async.t15095.cljs$lang$ctorPrWriter = function(flag) {
      return function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
        return cljs.core._write.call(null, writer__4889__auto__, "cljs.core.async/t15095");
      };
    }(flag);
    cljs.core.async.__GT_t15095 = function(flag) {
      return function cljs$core$async$alt_flag_$___GT_t15095(alt_flag__$1, flag__$1, meta15096) {
        return new cljs.core.async.t15095(alt_flag__$1, flag__$1, meta15096);
      };
    }(flag);
  }
  return new cljs.core.async.t15095(cljs$core$async$alt_flag, flag, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.alt_handler = function cljs$core$async$alt_handler(flag, cb) {
  if (typeof cljs.core.async.t15101 !== "undefined") {
  } else {
    cljs.core.async.t15101 = function(alt_handler, flag, cb, meta15102) {
      this.alt_handler = alt_handler;
      this.flag = flag;
      this.cb = cb;
      this.meta15102 = meta15102;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.async.t15101.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_15103, meta15102__$1) {
      var self__ = this;
      var _15103__$1 = this;
      return new cljs.core.async.t15101(self__.alt_handler, self__.flag, self__.cb, meta15102__$1);
    };
    cljs.core.async.t15101.prototype.cljs$core$IMeta$_meta$arity$1 = function(_15103) {
      var self__ = this;
      var _15103__$1 = this;
      return self__.meta15102;
    };
    cljs.core.async.t15101.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t15101.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.flag);
    };
    cljs.core.async.t15101.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      cljs.core.async.impl.protocols.commit.call(null, self__.flag);
      return self__.cb;
    };
    cljs.core.async.t15101.getBasis = function() {
      return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "alt-handler", "alt-handler", 963786170, null), new cljs.core.Symbol(null, "flag", "flag", -1565787888, null), new cljs.core.Symbol(null, "cb", "cb", -2064487928, null), new cljs.core.Symbol(null, "meta15102", "meta15102", -451582793, null)], null);
    };
    cljs.core.async.t15101.cljs$lang$type = true;
    cljs.core.async.t15101.cljs$lang$ctorStr = "cljs.core.async/t15101";
    cljs.core.async.t15101.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
      return cljs.core._write.call(null, writer__4889__auto__, "cljs.core.async/t15101");
    };
    cljs.core.async.__GT_t15101 = function cljs$core$async$alt_handler_$___GT_t15101(alt_handler__$1, flag__$1, cb__$1, meta15102) {
      return new cljs.core.async.t15101(alt_handler__$1, flag__$1, cb__$1, meta15102);
    };
  }
  return new cljs.core.async.t15101(cljs$core$async$alt_handler, flag, cb, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.do_alts = function cljs$core$async$do_alts(fret, ports, opts) {
  var flag = cljs.core.async.alt_flag.call(null);
  var n = cljs.core.count.call(null, ports);
  var idxs = cljs.core.async.random_array.call(null, n);
  var priority = (new cljs.core.Keyword(null, "priority", "priority", 1431093715)).cljs$core$IFn$_invoke$arity$1(opts);
  var ret = function() {
    var i = 0;
    while (true) {
      if (i < n) {
        var idx = cljs.core.truth_(priority) ? i : idxs[i];
        var port = cljs.core.nth.call(null, ports, idx);
        var wport = cljs.core.vector_QMARK_.call(null, port) ? port.call(null, 0) : null;
        var vbox = cljs.core.truth_(wport) ? function() {
          var val = port.call(null, 1);
          return cljs.core.async.impl.protocols.put_BANG_.call(null, wport, val, cljs.core.async.alt_handler.call(null, flag, function(i, val, idx, port, wport, flag, n, idxs, priority) {
            return function(p1__15104_SHARP_) {
              return fret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__15104_SHARP_, wport], null));
            };
          }(i, val, idx, port, wport, flag, n, idxs, priority)));
        }() : cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.alt_handler.call(null, flag, function(i, idx, port, wport, flag, n, idxs, priority) {
          return function(p1__15105_SHARP_) {
            return fret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__15105_SHARP_, port], null));
          };
        }(i, idx, port, wport, flag, n, idxs, priority)));
        if (cljs.core.truth_(vbox)) {
          return cljs.core.async.impl.channels.box.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.deref.call(null, vbox), function() {
            var or__4309__auto__ = wport;
            if (cljs.core.truth_(or__4309__auto__)) {
              return or__4309__auto__;
            } else {
              return port;
            }
          }()], null));
        } else {
          var G__15106 = i + 1;
          i = G__15106;
          continue;
        }
      } else {
        return null;
      }
      break;
    }
  }();
  var or__4309__auto__ = ret;
  if (cljs.core.truth_(or__4309__auto__)) {
    return or__4309__auto__;
  } else {
    if (cljs.core.contains_QMARK_.call(null, opts, new cljs.core.Keyword(null, "default", "default", -1987822328))) {
      var temp__4422__auto__ = function() {
        var and__4297__auto__ = cljs.core.async.impl.protocols.active_QMARK_.call(null, flag);
        if (cljs.core.truth_(and__4297__auto__)) {
          return cljs.core.async.impl.protocols.commit.call(null, flag);
        } else {
          return and__4297__auto__;
        }
      }();
      if (cljs.core.truth_(temp__4422__auto__)) {
        var got = temp__4422__auto__;
        return cljs.core.async.impl.channels.box.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.Keyword(null, "default", "default", -1987822328)).cljs$core$IFn$_invoke$arity$1(opts), new cljs.core.Keyword(null, "default", "default", -1987822328)], null));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }
};
cljs.core.async.alts_BANG_ = function cljs$core$async$alts_BANG_() {
  var argseq__5349__auto__ = 1 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 1), 0) : null;
  return cljs.core.async.alts_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5349__auto__);
};
cljs.core.async.alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(ports, p__15109) {
  var map__15110 = p__15109;
  var map__15110__$1 = cljs.core.seq_QMARK_.call(null, map__15110) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15110) : map__15110;
  var opts = map__15110__$1;
  throw new Error("alts! used not in (go ...) block");
};
cljs.core.async.alts_BANG_.cljs$lang$maxFixedArity = 1;
cljs.core.async.alts_BANG_.cljs$lang$applyTo = function(seq15107) {
  var G__15108 = cljs.core.first.call(null, seq15107);
  var seq15107__$1 = cljs.core.next.call(null, seq15107);
  return cljs.core.async.alts_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__15108, seq15107__$1);
};
cljs.core.async.pipe = function cljs$core$async$pipe() {
  var G__15112 = arguments.length;
  switch(G__15112) {
    case 2:
      return cljs.core.async.pipe.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.pipe.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.pipe.cljs$core$IFn$_invoke$arity$2 = function(from, to) {
  return cljs.core.async.pipe.call(null, from, to, true);
};
cljs.core.async.pipe.cljs$core$IFn$_invoke$arity$3 = function(from, to, close_QMARK_) {
  var c__12926__auto___15161 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__12926__auto___15161) {
    return function() {
      var f__12927__auto__ = function() {
        var switch__12864__auto__ = function(c__12926__auto___15161) {
          return function(state_15136) {
            var state_val_15137 = state_15136[1];
            if (state_val_15137 === 7) {
              var inst_15132 = state_15136[2];
              var state_15136__$1 = state_15136;
              var statearr_15138_15162 = state_15136__$1;
              statearr_15138_15162[2] = inst_15132;
              statearr_15138_15162[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_15137 === 1) {
                var state_15136__$1 = state_15136;
                var statearr_15139_15163 = state_15136__$1;
                statearr_15139_15163[2] = null;
                statearr_15139_15163[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_15137 === 4) {
                  var inst_15115 = state_15136[7];
                  var inst_15115__$1 = state_15136[2];
                  var inst_15116 = inst_15115__$1 == null;
                  var state_15136__$1 = function() {
                    var statearr_15140 = state_15136;
                    statearr_15140[7] = inst_15115__$1;
                    return statearr_15140;
                  }();
                  if (cljs.core.truth_(inst_15116)) {
                    var statearr_15141_15164 = state_15136__$1;
                    statearr_15141_15164[1] = 5;
                  } else {
                    var statearr_15142_15165 = state_15136__$1;
                    statearr_15142_15165[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_15137 === 13) {
                    var state_15136__$1 = state_15136;
                    var statearr_15143_15166 = state_15136__$1;
                    statearr_15143_15166[2] = null;
                    statearr_15143_15166[1] = 14;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_15137 === 6) {
                      var inst_15115 = state_15136[7];
                      var state_15136__$1 = state_15136;
                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_15136__$1, 11, to, inst_15115);
                    } else {
                      if (state_val_15137 === 3) {
                        var inst_15134 = state_15136[2];
                        var state_15136__$1 = state_15136;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_15136__$1, inst_15134);
                      } else {
                        if (state_val_15137 === 12) {
                          var state_15136__$1 = state_15136;
                          var statearr_15144_15167 = state_15136__$1;
                          statearr_15144_15167[2] = null;
                          statearr_15144_15167[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_15137 === 2) {
                            var state_15136__$1 = state_15136;
                            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_15136__$1, 4, from);
                          } else {
                            if (state_val_15137 === 11) {
                              var inst_15125 = state_15136[2];
                              var state_15136__$1 = state_15136;
                              if (cljs.core.truth_(inst_15125)) {
                                var statearr_15145_15168 = state_15136__$1;
                                statearr_15145_15168[1] = 12;
                              } else {
                                var statearr_15146_15169 = state_15136__$1;
                                statearr_15146_15169[1] = 13;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_15137 === 9) {
                                var state_15136__$1 = state_15136;
                                var statearr_15147_15170 = state_15136__$1;
                                statearr_15147_15170[2] = null;
                                statearr_15147_15170[1] = 10;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_15137 === 5) {
                                  var state_15136__$1 = state_15136;
                                  if (cljs.core.truth_(close_QMARK_)) {
                                    var statearr_15148_15171 = state_15136__$1;
                                    statearr_15148_15171[1] = 8;
                                  } else {
                                    var statearr_15149_15172 = state_15136__$1;
                                    statearr_15149_15172[1] = 9;
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_15137 === 14) {
                                    var inst_15130 = state_15136[2];
                                    var state_15136__$1 = state_15136;
                                    var statearr_15150_15173 = state_15136__$1;
                                    statearr_15150_15173[2] = inst_15130;
                                    statearr_15150_15173[1] = 7;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_15137 === 10) {
                                      var inst_15122 = state_15136[2];
                                      var state_15136__$1 = state_15136;
                                      var statearr_15151_15174 = state_15136__$1;
                                      statearr_15151_15174[2] = inst_15122;
                                      statearr_15151_15174[1] = 7;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_15137 === 8) {
                                        var inst_15119 = cljs.core.async.close_BANG_.call(null, to);
                                        var state_15136__$1 = state_15136;
                                        var statearr_15152_15175 = state_15136__$1;
                                        statearr_15152_15175[2] = inst_15119;
                                        statearr_15152_15175[1] = 10;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        return null;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__12926__auto___15161);
        return function(switch__12864__auto__, c__12926__auto___15161) {
          return function() {
            var cljs$core$async$state_machine__12865__auto__ = null;
            var cljs$core$async$state_machine__12865__auto____0 = function() {
              var statearr_15156 = [null, null, null, null, null, null, null, null];
              statearr_15156[0] = cljs$core$async$state_machine__12865__auto__;
              statearr_15156[1] = 1;
              return statearr_15156;
            };
            var cljs$core$async$state_machine__12865__auto____1 = function(state_15136) {
              while (true) {
                var ret_value__12866__auto__ = function() {
                  try {
                    while (true) {
                      var result__12867__auto__ = switch__12864__auto__.call(null, state_15136);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__12867__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__12867__auto__;
                      }
                      break;
                    }
                  } catch (e15157) {
                    if (e15157 instanceof Object) {
                      var ex__12868__auto__ = e15157;
                      var statearr_15158_15176 = state_15136;
                      statearr_15158_15176[5] = ex__12868__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_15136);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e15157;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__12866__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__15177 = state_15136;
                  state_15136 = G__15177;
                  continue;
                } else {
                  return ret_value__12866__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__12865__auto__ = function(state_15136) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__12865__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__12865__auto____1.call(this, state_15136);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__12865__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__12865__auto____0;
            cljs$core$async$state_machine__12865__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__12865__auto____1;
            return cljs$core$async$state_machine__12865__auto__;
          }();
        }(switch__12864__auto__, c__12926__auto___15161);
      }();
      var state__12928__auto__ = function() {
        var statearr_15159 = f__12927__auto__.call(null);
        statearr_15159[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__12926__auto___15161;
        return statearr_15159;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__12928__auto__);
    };
  }(c__12926__auto___15161));
  return to;
};
cljs.core.async.pipe.cljs$lang$maxFixedArity = 3;
cljs.core.async.pipeline_STAR_ = function cljs$core$async$pipeline_STAR_(n, to, xf, from, close_QMARK_, ex_handler, type) {
  if (n > 0) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "pos?", "pos?", -244377722, null), new cljs.core.Symbol(null, "n", "n", -2092305744, null))))].join(""));
  }
  var jobs = cljs.core.async.chan.call(null, n);
  var results = cljs.core.async.chan.call(null, n);
  var process = function(jobs, results) {
    return function(p__15361) {
      var vec__15362 = p__15361;
      var v = cljs.core.nth.call(null, vec__15362, 0, null);
      var p = cljs.core.nth.call(null, vec__15362, 1, null);
      var job = vec__15362;
      if (job == null) {
        cljs.core.async.close_BANG_.call(null, results);
        return null;
      } else {
        var res = cljs.core.async.chan.call(null, 1, xf, ex_handler);
        var c__12926__auto___15544 = cljs.core.async.chan.call(null, 1);
        cljs.core.async.impl.dispatch.run.call(null, function(c__12926__auto___15544, res, vec__15362, v, p, job, jobs, results) {
          return function() {
            var f__12927__auto__ = function() {
              var switch__12864__auto__ = function(c__12926__auto___15544, res, vec__15362, v, p, job, jobs, results) {
                return function(state_15367) {
                  var state_val_15368 = state_15367[1];
                  if (state_val_15368 === 1) {
                    var state_15367__$1 = state_15367;
                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_15367__$1, 2, res, v);
                  } else {
                    if (state_val_15368 === 2) {
                      var inst_15364 = state_15367[2];
                      var inst_15365 = cljs.core.async.close_BANG_.call(null, res);
                      var state_15367__$1 = function() {
                        var statearr_15369 = state_15367;
                        statearr_15369[7] = inst_15364;
                        return statearr_15369;
                      }();
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_15367__$1, inst_15365);
                    } else {
                      return null;
                    }
                  }
                };
              }(c__12926__auto___15544, res, vec__15362, v, p, job, jobs, results);
              return function(switch__12864__auto__, c__12926__auto___15544, res, vec__15362, v, p, job, jobs, results) {
                return function() {
                  var cljs$core$async$pipeline_STAR__$_state_machine__12865__auto__ = null;
                  var cljs$core$async$pipeline_STAR__$_state_machine__12865__auto____0 = function() {
                    var statearr_15373 = [null, null, null, null, null, null, null, null];
                    statearr_15373[0] = cljs$core$async$pipeline_STAR__$_state_machine__12865__auto__;
                    statearr_15373[1] = 1;
                    return statearr_15373;
                  };
                  var cljs$core$async$pipeline_STAR__$_state_machine__12865__auto____1 = function(state_15367) {
                    while (true) {
                      var ret_value__12866__auto__ = function() {
                        try {
                          while (true) {
                            var result__12867__auto__ = switch__12864__auto__.call(null, state_15367);
                            if (cljs.core.keyword_identical_QMARK_.call(null, result__12867__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                              continue;
                            } else {
                              return result__12867__auto__;
                            }
                            break;
                          }
                        } catch (e15374) {
                          if (e15374 instanceof Object) {
                            var ex__12868__auto__ = e15374;
                            var statearr_15375_15545 = state_15367;
                            statearr_15375_15545[5] = ex__12868__auto__;
                            cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_15367);
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            throw e15374;
                          }
                        }
                      }();
                      if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__12866__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        var G__15546 = state_15367;
                        state_15367 = G__15546;
                        continue;
                      } else {
                        return ret_value__12866__auto__;
                      }
                      break;
                    }
                  };
                  cljs$core$async$pipeline_STAR__$_state_machine__12865__auto__ = function(state_15367) {
                    switch(arguments.length) {
                      case 0:
                        return cljs$core$async$pipeline_STAR__$_state_machine__12865__auto____0.call(this);
                      case 1:
                        return cljs$core$async$pipeline_STAR__$_state_machine__12865__auto____1.call(this, state_15367);
                    }
                    throw new Error("Invalid arity: " + arguments.length);
                  };
                  cljs$core$async$pipeline_STAR__$_state_machine__12865__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$pipeline_STAR__$_state_machine__12865__auto____0;
                  cljs$core$async$pipeline_STAR__$_state_machine__12865__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$pipeline_STAR__$_state_machine__12865__auto____1;
                  return cljs$core$async$pipeline_STAR__$_state_machine__12865__auto__;
                }();
              }(switch__12864__auto__, c__12926__auto___15544, res, vec__15362, v, p, job, jobs, results);
            }();
            var state__12928__auto__ = function() {
              var statearr_15376 = f__12927__auto__.call(null);
              statearr_15376[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__12926__auto___15544;
              return statearr_15376;
            }();
            return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__12928__auto__);
          };
        }(c__12926__auto___15544, res, vec__15362, v, p, job, jobs, results));
        cljs.core.async.put_BANG_.call(null, p, res);
        return true;
      }
    };
  }(jobs, results);
  var async = function(jobs, results, process) {
    return function(p__15377) {
      var vec__15378 = p__15377;
      var v = cljs.core.nth.call(null, vec__15378, 0, null);
      var p = cljs.core.nth.call(null, vec__15378, 1, null);
      var job = vec__15378;
      if (job == null) {
        cljs.core.async.close_BANG_.call(null, results);
        return null;
      } else {
        var res = cljs.core.async.chan.call(null, 1);
        xf.call(null, v, res);
        cljs.core.async.put_BANG_.call(null, p, res);
        return true;
      }
    };
  }(jobs, results, process);
  var n__5194__auto___15547 = n;
  var __15548 = 0;
  while (true) {
    if (__15548 < n__5194__auto___15547) {
      var G__15379_15549 = type instanceof cljs.core.Keyword ? type.fqn : null;
      switch(G__15379_15549) {
        case "compute":
          var c__12926__auto___15551 = cljs.core.async.chan.call(null, 1);
          cljs.core.async.impl.dispatch.run.call(null, function(__15548, c__12926__auto___15551, G__15379_15549, n__5194__auto___15547, jobs, results, process, async) {
            return function() {
              var f__12927__auto__ = function() {
                var switch__12864__auto__ = function(__15548, c__12926__auto___15551, G__15379_15549, n__5194__auto___15547, jobs, results, process, async) {
                  return function(state_15392) {
                    var state_val_15393 = state_15392[1];
                    if (state_val_15393 === 1) {
                      var state_15392__$1 = state_15392;
                      var statearr_15394_15552 = state_15392__$1;
                      statearr_15394_15552[2] = null;
                      statearr_15394_15552[1] = 2;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_15393 === 2) {
                        var state_15392__$1 = state_15392;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_15392__$1, 4, jobs);
                      } else {
                        if (state_val_15393 === 3) {
                          var inst_15390 = state_15392[2];
                          var state_15392__$1 = state_15392;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_15392__$1, inst_15390);
                        } else {
                          if (state_val_15393 === 4) {
                            var inst_15382 = state_15392[2];
                            var inst_15383 = process.call(null, inst_15382);
                            var state_15392__$1 = state_15392;
                            if (cljs.core.truth_(inst_15383)) {
                              var statearr_15395_15553 = state_15392__$1;
                              statearr_15395_15553[1] = 5;
                            } else {
                              var statearr_15396_15554 = state_15392__$1;
                              statearr_15396_15554[1] = 6;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_15393 === 5) {
                              var state_15392__$1 = state_15392;
                              var statearr_15397_15555 = state_15392__$1;
                              statearr_15397_15555[2] = null;
                              statearr_15397_15555[1] = 2;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_15393 === 6) {
                                var state_15392__$1 = state_15392;
                                var statearr_15398_15556 = state_15392__$1;
                                statearr_15398_15556[2] = null;
                                statearr_15398_15556[1] = 7;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_15393 === 7) {
                                  var inst_15388 = state_15392[2];
                                  var state_15392__$1 = state_15392;
                                  var statearr_15399_15557 = state_15392__$1;
                                  statearr_15399_15557[2] = inst_15388;
                                  statearr_15399_15557[1] = 3;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  };
                }(__15548, c__12926__auto___15551, G__15379_15549, n__5194__auto___15547, jobs, results, process, async);
                return function(__15548, switch__12864__auto__, c__12926__auto___15551, G__15379_15549, n__5194__auto___15547, jobs, results, process, async) {
                  return function() {
                    var cljs$core$async$pipeline_STAR__$_state_machine__12865__auto__ = null;
                    var cljs$core$async$pipeline_STAR__$_state_machine__12865__auto____0 = function() {
                      var statearr_15403 = [null, null, null, null, null, null, null];
                      statearr_15403[0] = cljs$core$async$pipeline_STAR__$_state_machine__12865__auto__;
                      statearr_15403[1] = 1;
                      return statearr_15403;
                    };
                    var cljs$core$async$pipeline_STAR__$_state_machine__12865__auto____1 = function(state_15392) {
                      while (true) {
                        var ret_value__12866__auto__ = function() {
                          try {
                            while (true) {
                              var result__12867__auto__ = switch__12864__auto__.call(null, state_15392);
                              if (cljs.core.keyword_identical_QMARK_.call(null, result__12867__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                                continue;
                              } else {
                                return result__12867__auto__;
                              }
                              break;
                            }
                          } catch (e15404) {
                            if (e15404 instanceof Object) {
                              var ex__12868__auto__ = e15404;
                              var statearr_15405_15558 = state_15392;
                              statearr_15405_15558[5] = ex__12868__auto__;
                              cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_15392);
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              throw e15404;
                            }
                          }
                        }();
                        if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__12866__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          var G__15559 = state_15392;
                          state_15392 = G__15559;
                          continue;
                        } else {
                          return ret_value__12866__auto__;
                        }
                        break;
                      }
                    };
                    cljs$core$async$pipeline_STAR__$_state_machine__12865__auto__ = function(state_15392) {
                      switch(arguments.length) {
                        case 0:
                          return cljs$core$async$pipeline_STAR__$_state_machine__12865__auto____0.call(this);
                        case 1:
                          return cljs$core$async$pipeline_STAR__$_state_machine__12865__auto____1.call(this, state_15392);
                      }
                      throw new Error("Invalid arity: " + arguments.length);
                    };
                    cljs$core$async$pipeline_STAR__$_state_machine__12865__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$pipeline_STAR__$_state_machine__12865__auto____0;
                    cljs$core$async$pipeline_STAR__$_state_machine__12865__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$pipeline_STAR__$_state_machine__12865__auto____1;
                    return cljs$core$async$pipeline_STAR__$_state_machine__12865__auto__;
                  }();
                }(__15548, switch__12864__auto__, c__12926__auto___15551, G__15379_15549, n__5194__auto___15547, jobs, results, process, async);
              }();
              var state__12928__auto__ = function() {
                var statearr_15406 = f__12927__auto__.call(null);
                statearr_15406[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__12926__auto___15551;
                return statearr_15406;
              }();
              return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__12928__auto__);
            };
          }(__15548, c__12926__auto___15551, G__15379_15549, n__5194__auto___15547, jobs, results, process, async));
          break;
        case "async":
          var c__12926__auto___15560 = cljs.core.async.chan.call(null, 1);
          cljs.core.async.impl.dispatch.run.call(null, function(__15548, c__12926__auto___15560, G__15379_15549, n__5194__auto___15547, jobs, results, process, async) {
            return function() {
              var f__12927__auto__ = function() {
                var switch__12864__auto__ = function(__15548, c__12926__auto___15560, G__15379_15549, n__5194__auto___15547, jobs, results, process, async) {
                  return function(state_15419) {
                    var state_val_15420 = state_15419[1];
                    if (state_val_15420 === 1) {
                      var state_15419__$1 = state_15419;
                      var statearr_15421_15561 = state_15419__$1;
                      statearr_15421_15561[2] = null;
                      statearr_15421_15561[1] = 2;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_15420 === 2) {
                        var state_15419__$1 = state_15419;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_15419__$1, 4, jobs);
                      } else {
                        if (state_val_15420 === 3) {
                          var inst_15417 = state_15419[2];
                          var state_15419__$1 = state_15419;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_15419__$1, inst_15417);
                        } else {
                          if (state_val_15420 === 4) {
                            var inst_15409 = state_15419[2];
                            var inst_15410 = async.call(null, inst_15409);
                            var state_15419__$1 = state_15419;
                            if (cljs.core.truth_(inst_15410)) {
                              var statearr_15422_15562 = state_15419__$1;
                              statearr_15422_15562[1] = 5;
                            } else {
                              var statearr_15423_15563 = state_15419__$1;
                              statearr_15423_15563[1] = 6;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_15420 === 5) {
                              var state_15419__$1 = state_15419;
                              var statearr_15424_15564 = state_15419__$1;
                              statearr_15424_15564[2] = null;
                              statearr_15424_15564[1] = 2;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_15420 === 6) {
                                var state_15419__$1 = state_15419;
                                var statearr_15425_15565 = state_15419__$1;
                                statearr_15425_15565[2] = null;
                                statearr_15425_15565[1] = 7;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_15420 === 7) {
                                  var inst_15415 = state_15419[2];
                                  var state_15419__$1 = state_15419;
                                  var statearr_15426_15566 = state_15419__$1;
                                  statearr_15426_15566[2] = inst_15415;
                                  statearr_15426_15566[1] = 3;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  };
                }(__15548, c__12926__auto___15560, G__15379_15549, n__5194__auto___15547, jobs, results, process, async);
                return function(__15548, switch__12864__auto__, c__12926__auto___15560, G__15379_15549, n__5194__auto___15547, jobs, results, process, async) {
                  return function() {
                    var cljs$core$async$pipeline_STAR__$_state_machine__12865__auto__ = null;
                    var cljs$core$async$pipeline_STAR__$_state_machine__12865__auto____0 = function() {
                      var statearr_15430 = [null, null, null, null, null, null, null];
                      statearr_15430[0] = cljs$core$async$pipeline_STAR__$_state_machine__12865__auto__;
                      statearr_15430[1] = 1;
                      return statearr_15430;
                    };
                    var cljs$core$async$pipeline_STAR__$_state_machine__12865__auto____1 = function(state_15419) {
                      while (true) {
                        var ret_value__12866__auto__ = function() {
                          try {
                            while (true) {
                              var result__12867__auto__ = switch__12864__auto__.call(null, state_15419);
                              if (cljs.core.keyword_identical_QMARK_.call(null, result__12867__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                                continue;
                              } else {
                                return result__12867__auto__;
                              }
                              break;
                            }
                          } catch (e15431) {
                            if (e15431 instanceof Object) {
                              var ex__12868__auto__ = e15431;
                              var statearr_15432_15567 = state_15419;
                              statearr_15432_15567[5] = ex__12868__auto__;
                              cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_15419);
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              throw e15431;
                            }
                          }
                        }();
                        if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__12866__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          var G__15568 = state_15419;
                          state_15419 = G__15568;
                          continue;
                        } else {
                          return ret_value__12866__auto__;
                        }
                        break;
                      }
                    };
                    cljs$core$async$pipeline_STAR__$_state_machine__12865__auto__ = function(state_15419) {
                      switch(arguments.length) {
                        case 0:
                          return cljs$core$async$pipeline_STAR__$_state_machine__12865__auto____0.call(this);
                        case 1:
                          return cljs$core$async$pipeline_STAR__$_state_machine__12865__auto____1.call(this, state_15419);
                      }
                      throw new Error("Invalid arity: " + arguments.length);
                    };
                    cljs$core$async$pipeline_STAR__$_state_machine__12865__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$pipeline_STAR__$_state_machine__12865__auto____0;
                    cljs$core$async$pipeline_STAR__$_state_machine__12865__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$pipeline_STAR__$_state_machine__12865__auto____1;
                    return cljs$core$async$pipeline_STAR__$_state_machine__12865__auto__;
                  }();
                }(__15548, switch__12864__auto__, c__12926__auto___15560, G__15379_15549, n__5194__auto___15547, jobs, results, process, async);
              }();
              var state__12928__auto__ = function() {
                var statearr_15433 = f__12927__auto__.call(null);
                statearr_15433[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__12926__auto___15560;
                return statearr_15433;
              }();
              return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__12928__auto__);
            };
          }(__15548, c__12926__auto___15560, G__15379_15549, n__5194__auto___15547, jobs, results, process, async));
          break;
        default:
          throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(type)].join(""));;
      }
      var G__15569 = __15548 + 1;
      __15548 = G__15569;
      continue;
    } else {
    }
    break;
  }
  var c__12926__auto___15570 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__12926__auto___15570, jobs, results, process, async) {
    return function() {
      var f__12927__auto__ = function() {
        var switch__12864__auto__ = function(c__12926__auto___15570, jobs, results, process, async) {
          return function(state_15455) {
            var state_val_15456 = state_15455[1];
            if (state_val_15456 === 1) {
              var state_15455__$1 = state_15455;
              var statearr_15457_15571 = state_15455__$1;
              statearr_15457_15571[2] = null;
              statearr_15457_15571[1] = 2;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_15456 === 2) {
                var state_15455__$1 = state_15455;
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_15455__$1, 4, from);
              } else {
                if (state_val_15456 === 3) {
                  var inst_15453 = state_15455[2];
                  var state_15455__$1 = state_15455;
                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_15455__$1, inst_15453);
                } else {
                  if (state_val_15456 === 4) {
                    var inst_15436 = state_15455[7];
                    var inst_15436__$1 = state_15455[2];
                    var inst_15437 = inst_15436__$1 == null;
                    var state_15455__$1 = function() {
                      var statearr_15458 = state_15455;
                      statearr_15458[7] = inst_15436__$1;
                      return statearr_15458;
                    }();
                    if (cljs.core.truth_(inst_15437)) {
                      var statearr_15459_15572 = state_15455__$1;
                      statearr_15459_15572[1] = 5;
                    } else {
                      var statearr_15460_15573 = state_15455__$1;
                      statearr_15460_15573[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_15456 === 5) {
                      var inst_15439 = cljs.core.async.close_BANG_.call(null, jobs);
                      var state_15455__$1 = state_15455;
                      var statearr_15461_15574 = state_15455__$1;
                      statearr_15461_15574[2] = inst_15439;
                      statearr_15461_15574[1] = 7;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_15456 === 6) {
                        var inst_15436 = state_15455[7];
                        var inst_15441 = state_15455[8];
                        var inst_15441__$1 = cljs.core.async.chan.call(null, 1);
                        var inst_15442 = cljs.core.PersistentVector.EMPTY_NODE;
                        var inst_15443 = [inst_15436, inst_15441__$1];
                        var inst_15444 = new cljs.core.PersistentVector(null, 2, 5, inst_15442, inst_15443, null);
                        var state_15455__$1 = function() {
                          var statearr_15462 = state_15455;
                          statearr_15462[8] = inst_15441__$1;
                          return statearr_15462;
                        }();
                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_15455__$1, 8, jobs, inst_15444);
                      } else {
                        if (state_val_15456 === 7) {
                          var inst_15451 = state_15455[2];
                          var state_15455__$1 = state_15455;
                          var statearr_15463_15575 = state_15455__$1;
                          statearr_15463_15575[2] = inst_15451;
                          statearr_15463_15575[1] = 3;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_15456 === 8) {
                            var inst_15441 = state_15455[8];
                            var inst_15446 = state_15455[2];
                            var state_15455__$1 = function() {
                              var statearr_15464 = state_15455;
                              statearr_15464[9] = inst_15446;
                              return statearr_15464;
                            }();
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_15455__$1, 9, results, inst_15441);
                          } else {
                            if (state_val_15456 === 9) {
                              var inst_15448 = state_15455[2];
                              var state_15455__$1 = function() {
                                var statearr_15465 = state_15455;
                                statearr_15465[10] = inst_15448;
                                return statearr_15465;
                              }();
                              var statearr_15466_15576 = state_15455__$1;
                              statearr_15466_15576[2] = null;
                              statearr_15466_15576[1] = 2;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              return null;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__12926__auto___15570, jobs, results, process, async);
        return function(switch__12864__auto__, c__12926__auto___15570, jobs, results, process, async) {
          return function() {
            var cljs$core$async$pipeline_STAR__$_state_machine__12865__auto__ = null;
            var cljs$core$async$pipeline_STAR__$_state_machine__12865__auto____0 = function() {
              var statearr_15470 = [null, null, null, null, null, null, null, null, null, null, null];
              statearr_15470[0] = cljs$core$async$pipeline_STAR__$_state_machine__12865__auto__;
              statearr_15470[1] = 1;
              return statearr_15470;
            };
            var cljs$core$async$pipeline_STAR__$_state_machine__12865__auto____1 = function(state_15455) {
              while (true) {
                var ret_value__12866__auto__ = function() {
                  try {
                    while (true) {
                      var result__12867__auto__ = switch__12864__auto__.call(null, state_15455);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__12867__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__12867__auto__;
                      }
                      break;
                    }
                  } catch (e15471) {
                    if (e15471 instanceof Object) {
                      var ex__12868__auto__ = e15471;
                      var statearr_15472_15577 = state_15455;
                      statearr_15472_15577[5] = ex__12868__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_15455);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e15471;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__12866__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__15578 = state_15455;
                  state_15455 = G__15578;
                  continue;
                } else {
                  return ret_value__12866__auto__;
                }
                break;
              }
            };
            cljs$core$async$pipeline_STAR__$_state_machine__12865__auto__ = function(state_15455) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$pipeline_STAR__$_state_machine__12865__auto____0.call(this);
                case 1:
                  return cljs$core$async$pipeline_STAR__$_state_machine__12865__auto____1.call(this, state_15455);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$pipeline_STAR__$_state_machine__12865__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$pipeline_STAR__$_state_machine__12865__auto____0;
            cljs$core$async$pipeline_STAR__$_state_machine__12865__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$pipeline_STAR__$_state_machine__12865__auto____1;
            return cljs$core$async$pipeline_STAR__$_state_machine__12865__auto__;
          }();
        }(switch__12864__auto__, c__12926__auto___15570, jobs, results, process, async);
      }();
      var state__12928__auto__ = function() {
        var statearr_15473 = f__12927__auto__.call(null);
        statearr_15473[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__12926__auto___15570;
        return statearr_15473;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__12928__auto__);
    };
  }(c__12926__auto___15570, jobs, results, process, async));
  var c__12926__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__12926__auto__, jobs, results, process, async) {
    return function() {
      var f__12927__auto__ = function() {
        var switch__12864__auto__ = function(c__12926__auto__, jobs, results, process, async) {
          return function(state_15511) {
            var state_val_15512 = state_15511[1];
            if (state_val_15512 === 7) {
              var inst_15507 = state_15511[2];
              var state_15511__$1 = state_15511;
              var statearr_15513_15579 = state_15511__$1;
              statearr_15513_15579[2] = inst_15507;
              statearr_15513_15579[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_15512 === 20) {
                var state_15511__$1 = state_15511;
                var statearr_15514_15580 = state_15511__$1;
                statearr_15514_15580[2] = null;
                statearr_15514_15580[1] = 21;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_15512 === 1) {
                  var state_15511__$1 = state_15511;
                  var statearr_15515_15581 = state_15511__$1;
                  statearr_15515_15581[2] = null;
                  statearr_15515_15581[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_15512 === 4) {
                    var inst_15476 = state_15511[7];
                    var inst_15476__$1 = state_15511[2];
                    var inst_15477 = inst_15476__$1 == null;
                    var state_15511__$1 = function() {
                      var statearr_15516 = state_15511;
                      statearr_15516[7] = inst_15476__$1;
                      return statearr_15516;
                    }();
                    if (cljs.core.truth_(inst_15477)) {
                      var statearr_15517_15582 = state_15511__$1;
                      statearr_15517_15582[1] = 5;
                    } else {
                      var statearr_15518_15583 = state_15511__$1;
                      statearr_15518_15583[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_15512 === 15) {
                      var inst_15489 = state_15511[8];
                      var state_15511__$1 = state_15511;
                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_15511__$1, 18, to, inst_15489);
                    } else {
                      if (state_val_15512 === 21) {
                        var inst_15502 = state_15511[2];
                        var state_15511__$1 = state_15511;
                        var statearr_15519_15584 = state_15511__$1;
                        statearr_15519_15584[2] = inst_15502;
                        statearr_15519_15584[1] = 13;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_15512 === 13) {
                          var inst_15504 = state_15511[2];
                          var state_15511__$1 = function() {
                            var statearr_15520 = state_15511;
                            statearr_15520[9] = inst_15504;
                            return statearr_15520;
                          }();
                          var statearr_15521_15585 = state_15511__$1;
                          statearr_15521_15585[2] = null;
                          statearr_15521_15585[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_15512 === 6) {
                            var inst_15476 = state_15511[7];
                            var state_15511__$1 = state_15511;
                            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_15511__$1, 11, inst_15476);
                          } else {
                            if (state_val_15512 === 17) {
                              var inst_15497 = state_15511[2];
                              var state_15511__$1 = state_15511;
                              if (cljs.core.truth_(inst_15497)) {
                                var statearr_15522_15586 = state_15511__$1;
                                statearr_15522_15586[1] = 19;
                              } else {
                                var statearr_15523_15587 = state_15511__$1;
                                statearr_15523_15587[1] = 20;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_15512 === 3) {
                                var inst_15509 = state_15511[2];
                                var state_15511__$1 = state_15511;
                                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_15511__$1, inst_15509);
                              } else {
                                if (state_val_15512 === 12) {
                                  var inst_15486 = state_15511[10];
                                  var state_15511__$1 = state_15511;
                                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_15511__$1, 14, inst_15486);
                                } else {
                                  if (state_val_15512 === 2) {
                                    var state_15511__$1 = state_15511;
                                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_15511__$1, 4, results);
                                  } else {
                                    if (state_val_15512 === 19) {
                                      var state_15511__$1 = state_15511;
                                      var statearr_15524_15588 = state_15511__$1;
                                      statearr_15524_15588[2] = null;
                                      statearr_15524_15588[1] = 12;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_15512 === 11) {
                                        var inst_15486 = state_15511[2];
                                        var state_15511__$1 = function() {
                                          var statearr_15525 = state_15511;
                                          statearr_15525[10] = inst_15486;
                                          return statearr_15525;
                                        }();
                                        var statearr_15526_15589 = state_15511__$1;
                                        statearr_15526_15589[2] = null;
                                        statearr_15526_15589[1] = 12;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_15512 === 9) {
                                          var state_15511__$1 = state_15511;
                                          var statearr_15527_15590 = state_15511__$1;
                                          statearr_15527_15590[2] = null;
                                          statearr_15527_15590[1] = 10;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_15512 === 5) {
                                            var state_15511__$1 = state_15511;
                                            if (cljs.core.truth_(close_QMARK_)) {
                                              var statearr_15528_15591 = state_15511__$1;
                                              statearr_15528_15591[1] = 8;
                                            } else {
                                              var statearr_15529_15592 = state_15511__$1;
                                              statearr_15529_15592[1] = 9;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_15512 === 14) {
                                              var inst_15491 = state_15511[11];
                                              var inst_15489 = state_15511[8];
                                              var inst_15489__$1 = state_15511[2];
                                              var inst_15490 = inst_15489__$1 == null;
                                              var inst_15491__$1 = cljs.core.not.call(null, inst_15490);
                                              var state_15511__$1 = function() {
                                                var statearr_15530 = state_15511;
                                                statearr_15530[11] = inst_15491__$1;
                                                statearr_15530[8] = inst_15489__$1;
                                                return statearr_15530;
                                              }();
                                              if (inst_15491__$1) {
                                                var statearr_15531_15593 = state_15511__$1;
                                                statearr_15531_15593[1] = 15;
                                              } else {
                                                var statearr_15532_15594 = state_15511__$1;
                                                statearr_15532_15594[1] = 16;
                                              }
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_15512 === 16) {
                                                var inst_15491 = state_15511[11];
                                                var state_15511__$1 = state_15511;
                                                var statearr_15533_15595 = state_15511__$1;
                                                statearr_15533_15595[2] = inst_15491;
                                                statearr_15533_15595[1] = 17;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_15512 === 10) {
                                                  var inst_15483 = state_15511[2];
                                                  var state_15511__$1 = state_15511;
                                                  var statearr_15534_15596 = state_15511__$1;
                                                  statearr_15534_15596[2] = inst_15483;
                                                  statearr_15534_15596[1] = 7;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_15512 === 18) {
                                                    var inst_15494 = state_15511[2];
                                                    var state_15511__$1 = state_15511;
                                                    var statearr_15535_15597 = state_15511__$1;
                                                    statearr_15535_15597[2] = inst_15494;
                                                    statearr_15535_15597[1] = 17;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_15512 === 8) {
                                                      var inst_15480 = cljs.core.async.close_BANG_.call(null, to);
                                                      var state_15511__$1 = state_15511;
                                                      var statearr_15536_15598 = state_15511__$1;
                                                      statearr_15536_15598[2] = inst_15480;
                                                      statearr_15536_15598[1] = 10;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      return null;
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__12926__auto__, jobs, results, process, async);
        return function(switch__12864__auto__, c__12926__auto__, jobs, results, process, async) {
          return function() {
            var cljs$core$async$pipeline_STAR__$_state_machine__12865__auto__ = null;
            var cljs$core$async$pipeline_STAR__$_state_machine__12865__auto____0 = function() {
              var statearr_15540 = [null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_15540[0] = cljs$core$async$pipeline_STAR__$_state_machine__12865__auto__;
              statearr_15540[1] = 1;
              return statearr_15540;
            };
            var cljs$core$async$pipeline_STAR__$_state_machine__12865__auto____1 = function(state_15511) {
              while (true) {
                var ret_value__12866__auto__ = function() {
                  try {
                    while (true) {
                      var result__12867__auto__ = switch__12864__auto__.call(null, state_15511);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__12867__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__12867__auto__;
                      }
                      break;
                    }
                  } catch (e15541) {
                    if (e15541 instanceof Object) {
                      var ex__12868__auto__ = e15541;
                      var statearr_15542_15599 = state_15511;
                      statearr_15542_15599[5] = ex__12868__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_15511);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e15541;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__12866__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__15600 = state_15511;
                  state_15511 = G__15600;
                  continue;
                } else {
                  return ret_value__12866__auto__;
                }
                break;
              }
            };
            cljs$core$async$pipeline_STAR__$_state_machine__12865__auto__ = function(state_15511) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$pipeline_STAR__$_state_machine__12865__auto____0.call(this);
                case 1:
                  return cljs$core$async$pipeline_STAR__$_state_machine__12865__auto____1.call(this, state_15511);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$pipeline_STAR__$_state_machine__12865__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$pipeline_STAR__$_state_machine__12865__auto____0;
            cljs$core$async$pipeline_STAR__$_state_machine__12865__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$pipeline_STAR__$_state_machine__12865__auto____1;
            return cljs$core$async$pipeline_STAR__$_state_machine__12865__auto__;
          }();
        }(switch__12864__auto__, c__12926__auto__, jobs, results, process, async);
      }();
      var state__12928__auto__ = function() {
        var statearr_15543 = f__12927__auto__.call(null);
        statearr_15543[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__12926__auto__;
        return statearr_15543;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__12928__auto__);
    };
  }(c__12926__auto__, jobs, results, process, async));
  return c__12926__auto__;
};
cljs.core.async.pipeline_async = function cljs$core$async$pipeline_async() {
  var G__15602 = arguments.length;
  switch(G__15602) {
    case 4:
      return cljs.core.async.pipeline_async.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.async.pipeline_async.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.pipeline_async.cljs$core$IFn$_invoke$arity$4 = function(n, to, af, from) {
  return cljs.core.async.pipeline_async.call(null, n, to, af, from, true);
};
cljs.core.async.pipeline_async.cljs$core$IFn$_invoke$arity$5 = function(n, to, af, from, close_QMARK_) {
  return cljs.core.async.pipeline_STAR_.call(null, n, to, af, from, close_QMARK_, null, new cljs.core.Keyword(null, "async", "async", 1050769601));
};
cljs.core.async.pipeline_async.cljs$lang$maxFixedArity = 5;
cljs.core.async.pipeline = function cljs$core$async$pipeline() {
  var G__15605 = arguments.length;
  switch(G__15605) {
    case 4:
      return cljs.core.async.pipeline.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.async.pipeline.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return cljs.core.async.pipeline.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.pipeline.cljs$core$IFn$_invoke$arity$4 = function(n, to, xf, from) {
  return cljs.core.async.pipeline.call(null, n, to, xf, from, true);
};
cljs.core.async.pipeline.cljs$core$IFn$_invoke$arity$5 = function(n, to, xf, from, close_QMARK_) {
  return cljs.core.async.pipeline.call(null, n, to, xf, from, close_QMARK_, null);
};
cljs.core.async.pipeline.cljs$core$IFn$_invoke$arity$6 = function(n, to, xf, from, close_QMARK_, ex_handler) {
  return cljs.core.async.pipeline_STAR_.call(null, n, to, xf, from, close_QMARK_, ex_handler, new cljs.core.Keyword(null, "compute", "compute", 1555393130));
};
cljs.core.async.pipeline.cljs$lang$maxFixedArity = 6;
cljs.core.async.split = function cljs$core$async$split() {
  var G__15608 = arguments.length;
  switch(G__15608) {
    case 2:
      return cljs.core.async.split.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 4:
      return cljs.core.async.split.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.split.cljs$core$IFn$_invoke$arity$2 = function(p, ch) {
  return cljs.core.async.split.call(null, p, ch, null, null);
};
cljs.core.async.split.cljs$core$IFn$_invoke$arity$4 = function(p, ch, t_buf_or_n, f_buf_or_n) {
  var tc = cljs.core.async.chan.call(null, t_buf_or_n);
  var fc = cljs.core.async.chan.call(null, f_buf_or_n);
  var c__12926__auto___15660 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__12926__auto___15660, tc, fc) {
    return function() {
      var f__12927__auto__ = function() {
        var switch__12864__auto__ = function(c__12926__auto___15660, tc, fc) {
          return function(state_15634) {
            var state_val_15635 = state_15634[1];
            if (state_val_15635 === 7) {
              var inst_15630 = state_15634[2];
              var state_15634__$1 = state_15634;
              var statearr_15636_15661 = state_15634__$1;
              statearr_15636_15661[2] = inst_15630;
              statearr_15636_15661[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_15635 === 1) {
                var state_15634__$1 = state_15634;
                var statearr_15637_15662 = state_15634__$1;
                statearr_15637_15662[2] = null;
                statearr_15637_15662[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_15635 === 4) {
                  var inst_15611 = state_15634[7];
                  var inst_15611__$1 = state_15634[2];
                  var inst_15612 = inst_15611__$1 == null;
                  var state_15634__$1 = function() {
                    var statearr_15638 = state_15634;
                    statearr_15638[7] = inst_15611__$1;
                    return statearr_15638;
                  }();
                  if (cljs.core.truth_(inst_15612)) {
                    var statearr_15639_15663 = state_15634__$1;
                    statearr_15639_15663[1] = 5;
                  } else {
                    var statearr_15640_15664 = state_15634__$1;
                    statearr_15640_15664[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_15635 === 13) {
                    var state_15634__$1 = state_15634;
                    var statearr_15641_15665 = state_15634__$1;
                    statearr_15641_15665[2] = null;
                    statearr_15641_15665[1] = 14;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_15635 === 6) {
                      var inst_15611 = state_15634[7];
                      var inst_15617 = p.call(null, inst_15611);
                      var state_15634__$1 = state_15634;
                      if (cljs.core.truth_(inst_15617)) {
                        var statearr_15642_15666 = state_15634__$1;
                        statearr_15642_15666[1] = 9;
                      } else {
                        var statearr_15643_15667 = state_15634__$1;
                        statearr_15643_15667[1] = 10;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_15635 === 3) {
                        var inst_15632 = state_15634[2];
                        var state_15634__$1 = state_15634;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_15634__$1, inst_15632);
                      } else {
                        if (state_val_15635 === 12) {
                          var state_15634__$1 = state_15634;
                          var statearr_15644_15668 = state_15634__$1;
                          statearr_15644_15668[2] = null;
                          statearr_15644_15668[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_15635 === 2) {
                            var state_15634__$1 = state_15634;
                            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_15634__$1, 4, ch);
                          } else {
                            if (state_val_15635 === 11) {
                              var inst_15611 = state_15634[7];
                              var inst_15621 = state_15634[2];
                              var state_15634__$1 = state_15634;
                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_15634__$1, 8, inst_15621, inst_15611);
                            } else {
                              if (state_val_15635 === 9) {
                                var state_15634__$1 = state_15634;
                                var statearr_15645_15669 = state_15634__$1;
                                statearr_15645_15669[2] = tc;
                                statearr_15645_15669[1] = 11;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_15635 === 5) {
                                  var inst_15614 = cljs.core.async.close_BANG_.call(null, tc);
                                  var inst_15615 = cljs.core.async.close_BANG_.call(null, fc);
                                  var state_15634__$1 = function() {
                                    var statearr_15646 = state_15634;
                                    statearr_15646[8] = inst_15614;
                                    return statearr_15646;
                                  }();
                                  var statearr_15647_15670 = state_15634__$1;
                                  statearr_15647_15670[2] = inst_15615;
                                  statearr_15647_15670[1] = 7;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_15635 === 14) {
                                    var inst_15628 = state_15634[2];
                                    var state_15634__$1 = state_15634;
                                    var statearr_15648_15671 = state_15634__$1;
                                    statearr_15648_15671[2] = inst_15628;
                                    statearr_15648_15671[1] = 7;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_15635 === 10) {
                                      var state_15634__$1 = state_15634;
                                      var statearr_15649_15672 = state_15634__$1;
                                      statearr_15649_15672[2] = fc;
                                      statearr_15649_15672[1] = 11;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_15635 === 8) {
                                        var inst_15623 = state_15634[2];
                                        var state_15634__$1 = state_15634;
                                        if (cljs.core.truth_(inst_15623)) {
                                          var statearr_15650_15673 = state_15634__$1;
                                          statearr_15650_15673[1] = 12;
                                        } else {
                                          var statearr_15651_15674 = state_15634__$1;
                                          statearr_15651_15674[1] = 13;
                                        }
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        return null;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__12926__auto___15660, tc, fc);
        return function(switch__12864__auto__, c__12926__auto___15660, tc, fc) {
          return function() {
            var cljs$core$async$state_machine__12865__auto__ = null;
            var cljs$core$async$state_machine__12865__auto____0 = function() {
              var statearr_15655 = [null, null, null, null, null, null, null, null, null];
              statearr_15655[0] = cljs$core$async$state_machine__12865__auto__;
              statearr_15655[1] = 1;
              return statearr_15655;
            };
            var cljs$core$async$state_machine__12865__auto____1 = function(state_15634) {
              while (true) {
                var ret_value__12866__auto__ = function() {
                  try {
                    while (true) {
                      var result__12867__auto__ = switch__12864__auto__.call(null, state_15634);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__12867__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__12867__auto__;
                      }
                      break;
                    }
                  } catch (e15656) {
                    if (e15656 instanceof Object) {
                      var ex__12868__auto__ = e15656;
                      var statearr_15657_15675 = state_15634;
                      statearr_15657_15675[5] = ex__12868__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_15634);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e15656;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__12866__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__15676 = state_15634;
                  state_15634 = G__15676;
                  continue;
                } else {
                  return ret_value__12866__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__12865__auto__ = function(state_15634) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__12865__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__12865__auto____1.call(this, state_15634);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__12865__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__12865__auto____0;
            cljs$core$async$state_machine__12865__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__12865__auto____1;
            return cljs$core$async$state_machine__12865__auto__;
          }();
        }(switch__12864__auto__, c__12926__auto___15660, tc, fc);
      }();
      var state__12928__auto__ = function() {
        var statearr_15658 = f__12927__auto__.call(null);
        statearr_15658[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__12926__auto___15660;
        return statearr_15658;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__12928__auto__);
    };
  }(c__12926__auto___15660, tc, fc));
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tc, fc], null);
};
cljs.core.async.split.cljs$lang$maxFixedArity = 4;
cljs.core.async.reduce = function cljs$core$async$reduce(f, init, ch) {
  var c__12926__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__12926__auto__) {
    return function() {
      var f__12927__auto__ = function() {
        var switch__12864__auto__ = function(c__12926__auto__) {
          return function(state_15723) {
            var state_val_15724 = state_15723[1];
            if (state_val_15724 === 1) {
              var inst_15709 = init;
              var state_15723__$1 = function() {
                var statearr_15725 = state_15723;
                statearr_15725[7] = inst_15709;
                return statearr_15725;
              }();
              var statearr_15726_15741 = state_15723__$1;
              statearr_15726_15741[2] = null;
              statearr_15726_15741[1] = 2;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_15724 === 2) {
                var state_15723__$1 = state_15723;
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_15723__$1, 4, ch);
              } else {
                if (state_val_15724 === 3) {
                  var inst_15721 = state_15723[2];
                  var state_15723__$1 = state_15723;
                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_15723__$1, inst_15721);
                } else {
                  if (state_val_15724 === 4) {
                    var inst_15712 = state_15723[8];
                    var inst_15712__$1 = state_15723[2];
                    var inst_15713 = inst_15712__$1 == null;
                    var state_15723__$1 = function() {
                      var statearr_15727 = state_15723;
                      statearr_15727[8] = inst_15712__$1;
                      return statearr_15727;
                    }();
                    if (cljs.core.truth_(inst_15713)) {
                      var statearr_15728_15742 = state_15723__$1;
                      statearr_15728_15742[1] = 5;
                    } else {
                      var statearr_15729_15743 = state_15723__$1;
                      statearr_15729_15743[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_15724 === 5) {
                      var inst_15709 = state_15723[7];
                      var state_15723__$1 = state_15723;
                      var statearr_15730_15744 = state_15723__$1;
                      statearr_15730_15744[2] = inst_15709;
                      statearr_15730_15744[1] = 7;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_15724 === 6) {
                        var inst_15709 = state_15723[7];
                        var inst_15712 = state_15723[8];
                        var inst_15716 = f.call(null, inst_15709, inst_15712);
                        var inst_15709__$1 = inst_15716;
                        var state_15723__$1 = function() {
                          var statearr_15731 = state_15723;
                          statearr_15731[7] = inst_15709__$1;
                          return statearr_15731;
                        }();
                        var statearr_15732_15745 = state_15723__$1;
                        statearr_15732_15745[2] = null;
                        statearr_15732_15745[1] = 2;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_15724 === 7) {
                          var inst_15719 = state_15723[2];
                          var state_15723__$1 = state_15723;
                          var statearr_15733_15746 = state_15723__$1;
                          statearr_15733_15746[2] = inst_15719;
                          statearr_15733_15746[1] = 3;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          return null;
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__12926__auto__);
        return function(switch__12864__auto__, c__12926__auto__) {
          return function() {
            var cljs$core$async$reduce_$_state_machine__12865__auto__ = null;
            var cljs$core$async$reduce_$_state_machine__12865__auto____0 = function() {
              var statearr_15737 = [null, null, null, null, null, null, null, null, null];
              statearr_15737[0] = cljs$core$async$reduce_$_state_machine__12865__auto__;
              statearr_15737[1] = 1;
              return statearr_15737;
            };
            var cljs$core$async$reduce_$_state_machine__12865__auto____1 = function(state_15723) {
              while (true) {
                var ret_value__12866__auto__ = function() {
                  try {
                    while (true) {
                      var result__12867__auto__ = switch__12864__auto__.call(null, state_15723);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__12867__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__12867__auto__;
                      }
                      break;
                    }
                  } catch (e15738) {
                    if (e15738 instanceof Object) {
                      var ex__12868__auto__ = e15738;
                      var statearr_15739_15747 = state_15723;
                      statearr_15739_15747[5] = ex__12868__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_15723);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e15738;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__12866__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__15748 = state_15723;
                  state_15723 = G__15748;
                  continue;
                } else {
                  return ret_value__12866__auto__;
                }
                break;
              }
            };
            cljs$core$async$reduce_$_state_machine__12865__auto__ = function(state_15723) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$reduce_$_state_machine__12865__auto____0.call(this);
                case 1:
                  return cljs$core$async$reduce_$_state_machine__12865__auto____1.call(this, state_15723);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$reduce_$_state_machine__12865__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$reduce_$_state_machine__12865__auto____0;
            cljs$core$async$reduce_$_state_machine__12865__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$reduce_$_state_machine__12865__auto____1;
            return cljs$core$async$reduce_$_state_machine__12865__auto__;
          }();
        }(switch__12864__auto__, c__12926__auto__);
      }();
      var state__12928__auto__ = function() {
        var statearr_15740 = f__12927__auto__.call(null);
        statearr_15740[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__12926__auto__;
        return statearr_15740;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__12928__auto__);
    };
  }(c__12926__auto__));
  return c__12926__auto__;
};
cljs.core.async.onto_chan = function cljs$core$async$onto_chan() {
  var G__15750 = arguments.length;
  switch(G__15750) {
    case 2:
      return cljs.core.async.onto_chan.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.onto_chan.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.onto_chan.cljs$core$IFn$_invoke$arity$2 = function(ch, coll) {
  return cljs.core.async.onto_chan.call(null, ch, coll, true);
};
cljs.core.async.onto_chan.cljs$core$IFn$_invoke$arity$3 = function(ch, coll, close_QMARK_) {
  var c__12926__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__12926__auto__) {
    return function() {
      var f__12927__auto__ = function() {
        var switch__12864__auto__ = function(c__12926__auto__) {
          return function(state_15775) {
            var state_val_15776 = state_15775[1];
            if (state_val_15776 === 7) {
              var inst_15757 = state_15775[2];
              var state_15775__$1 = state_15775;
              var statearr_15777_15801 = state_15775__$1;
              statearr_15777_15801[2] = inst_15757;
              statearr_15777_15801[1] = 6;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_15776 === 1) {
                var inst_15751 = cljs.core.seq.call(null, coll);
                var inst_15752 = inst_15751;
                var state_15775__$1 = function() {
                  var statearr_15778 = state_15775;
                  statearr_15778[7] = inst_15752;
                  return statearr_15778;
                }();
                var statearr_15779_15802 = state_15775__$1;
                statearr_15779_15802[2] = null;
                statearr_15779_15802[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_15776 === 4) {
                  var inst_15752 = state_15775[7];
                  var inst_15755 = cljs.core.first.call(null, inst_15752);
                  var state_15775__$1 = state_15775;
                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_15775__$1, 7, ch, inst_15755);
                } else {
                  if (state_val_15776 === 13) {
                    var inst_15769 = state_15775[2];
                    var state_15775__$1 = state_15775;
                    var statearr_15780_15803 = state_15775__$1;
                    statearr_15780_15803[2] = inst_15769;
                    statearr_15780_15803[1] = 10;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_15776 === 6) {
                      var inst_15760 = state_15775[2];
                      var state_15775__$1 = state_15775;
                      if (cljs.core.truth_(inst_15760)) {
                        var statearr_15781_15804 = state_15775__$1;
                        statearr_15781_15804[1] = 8;
                      } else {
                        var statearr_15782_15805 = state_15775__$1;
                        statearr_15782_15805[1] = 9;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_15776 === 3) {
                        var inst_15773 = state_15775[2];
                        var state_15775__$1 = state_15775;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_15775__$1, inst_15773);
                      } else {
                        if (state_val_15776 === 12) {
                          var state_15775__$1 = state_15775;
                          var statearr_15783_15806 = state_15775__$1;
                          statearr_15783_15806[2] = null;
                          statearr_15783_15806[1] = 13;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_15776 === 2) {
                            var inst_15752 = state_15775[7];
                            var state_15775__$1 = state_15775;
                            if (cljs.core.truth_(inst_15752)) {
                              var statearr_15784_15807 = state_15775__$1;
                              statearr_15784_15807[1] = 4;
                            } else {
                              var statearr_15785_15808 = state_15775__$1;
                              statearr_15785_15808[1] = 5;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_15776 === 11) {
                              var inst_15766 = cljs.core.async.close_BANG_.call(null, ch);
                              var state_15775__$1 = state_15775;
                              var statearr_15786_15809 = state_15775__$1;
                              statearr_15786_15809[2] = inst_15766;
                              statearr_15786_15809[1] = 13;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_15776 === 9) {
                                var state_15775__$1 = state_15775;
                                if (cljs.core.truth_(close_QMARK_)) {
                                  var statearr_15787_15810 = state_15775__$1;
                                  statearr_15787_15810[1] = 11;
                                } else {
                                  var statearr_15788_15811 = state_15775__$1;
                                  statearr_15788_15811[1] = 12;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_15776 === 5) {
                                  var inst_15752 = state_15775[7];
                                  var state_15775__$1 = state_15775;
                                  var statearr_15789_15812 = state_15775__$1;
                                  statearr_15789_15812[2] = inst_15752;
                                  statearr_15789_15812[1] = 6;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_15776 === 10) {
                                    var inst_15771 = state_15775[2];
                                    var state_15775__$1 = state_15775;
                                    var statearr_15790_15813 = state_15775__$1;
                                    statearr_15790_15813[2] = inst_15771;
                                    statearr_15790_15813[1] = 3;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_15776 === 8) {
                                      var inst_15752 = state_15775[7];
                                      var inst_15762 = cljs.core.next.call(null, inst_15752);
                                      var inst_15752__$1 = inst_15762;
                                      var state_15775__$1 = function() {
                                        var statearr_15791 = state_15775;
                                        statearr_15791[7] = inst_15752__$1;
                                        return statearr_15791;
                                      }();
                                      var statearr_15792_15814 = state_15775__$1;
                                      statearr_15792_15814[2] = null;
                                      statearr_15792_15814[1] = 2;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      return null;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__12926__auto__);
        return function(switch__12864__auto__, c__12926__auto__) {
          return function() {
            var cljs$core$async$state_machine__12865__auto__ = null;
            var cljs$core$async$state_machine__12865__auto____0 = function() {
              var statearr_15796 = [null, null, null, null, null, null, null, null];
              statearr_15796[0] = cljs$core$async$state_machine__12865__auto__;
              statearr_15796[1] = 1;
              return statearr_15796;
            };
            var cljs$core$async$state_machine__12865__auto____1 = function(state_15775) {
              while (true) {
                var ret_value__12866__auto__ = function() {
                  try {
                    while (true) {
                      var result__12867__auto__ = switch__12864__auto__.call(null, state_15775);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__12867__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__12867__auto__;
                      }
                      break;
                    }
                  } catch (e15797) {
                    if (e15797 instanceof Object) {
                      var ex__12868__auto__ = e15797;
                      var statearr_15798_15815 = state_15775;
                      statearr_15798_15815[5] = ex__12868__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_15775);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e15797;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__12866__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__15816 = state_15775;
                  state_15775 = G__15816;
                  continue;
                } else {
                  return ret_value__12866__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__12865__auto__ = function(state_15775) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__12865__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__12865__auto____1.call(this, state_15775);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__12865__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__12865__auto____0;
            cljs$core$async$state_machine__12865__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__12865__auto____1;
            return cljs$core$async$state_machine__12865__auto__;
          }();
        }(switch__12864__auto__, c__12926__auto__);
      }();
      var state__12928__auto__ = function() {
        var statearr_15799 = f__12927__auto__.call(null);
        statearr_15799[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__12926__auto__;
        return statearr_15799;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__12928__auto__);
    };
  }(c__12926__auto__));
  return c__12926__auto__;
};
cljs.core.async.onto_chan.cljs$lang$maxFixedArity = 3;
cljs.core.async.to_chan = function cljs$core$async$to_chan(coll) {
  var ch = cljs.core.async.chan.call(null, cljs.core.bounded_count.call(null, 100, coll));
  cljs.core.async.onto_chan.call(null, ch, coll);
  return ch;
};
cljs.core.async.Mux = function() {
  var obj15818 = {};
  return obj15818;
}();
cljs.core.async.muxch_STAR_ = function cljs$core$async$muxch_STAR_(_) {
  if (function() {
    var and__4297__auto__ = _;
    if (and__4297__auto__) {
      return _.cljs$core$async$Mux$muxch_STAR_$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return _.cljs$core$async$Mux$muxch_STAR_$arity$1(_);
  } else {
    var x__4945__auto__ = _ == null ? null : _;
    return function() {
      var or__4309__auto__ = cljs.core.async.muxch_STAR_[goog.typeOf(x__4945__auto__)];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core.async.muxch_STAR_["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mux.muxch*", _);
        }
      }
    }().call(null, _);
  }
};
cljs.core.async.Mult = function() {
  var obj15820 = {};
  return obj15820;
}();
cljs.core.async.tap_STAR_ = function cljs$core$async$tap_STAR_(m, ch, close_QMARK_) {
  if (function() {
    var and__4297__auto__ = m;
    if (and__4297__auto__) {
      return m.cljs$core$async$Mult$tap_STAR_$arity$3;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$tap_STAR_$arity$3(m, ch, close_QMARK_);
  } else {
    var x__4945__auto__ = m == null ? null : m;
    return function() {
      var or__4309__auto__ = cljs.core.async.tap_STAR_[goog.typeOf(x__4945__auto__)];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core.async.tap_STAR_["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.tap*", m);
        }
      }
    }().call(null, m, ch, close_QMARK_);
  }
};
cljs.core.async.untap_STAR_ = function cljs$core$async$untap_STAR_(m, ch) {
  if (function() {
    var and__4297__auto__ = m;
    if (and__4297__auto__) {
      return m.cljs$core$async$Mult$untap_STAR_$arity$2;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$untap_STAR_$arity$2(m, ch);
  } else {
    var x__4945__auto__ = m == null ? null : m;
    return function() {
      var or__4309__auto__ = cljs.core.async.untap_STAR_[goog.typeOf(x__4945__auto__)];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core.async.untap_STAR_["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.untap*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.untap_all_STAR_ = function cljs$core$async$untap_all_STAR_(m) {
  if (function() {
    var and__4297__auto__ = m;
    if (and__4297__auto__) {
      return m.cljs$core$async$Mult$untap_all_STAR_$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$untap_all_STAR_$arity$1(m);
  } else {
    var x__4945__auto__ = m == null ? null : m;
    return function() {
      var or__4309__auto__ = cljs.core.async.untap_all_STAR_[goog.typeOf(x__4945__auto__)];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core.async.untap_all_STAR_["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.untap-all*", m);
        }
      }
    }().call(null, m);
  }
};
cljs.core.async.mult = function cljs$core$async$mult(ch) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var m = function() {
    if (typeof cljs.core.async.t16042 !== "undefined") {
    } else {
      cljs.core.async.t16042 = function(mult, ch, cs, meta16043) {
        this.mult = mult;
        this.ch = ch;
        this.cs = cs;
        this.meta16043 = meta16043;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
        this.cljs$lang$protocol_mask$partition1$ = 0;
      };
      cljs.core.async.t16042.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(cs) {
        return function(_16044, meta16043__$1) {
          var self__ = this;
          var _16044__$1 = this;
          return new cljs.core.async.t16042(self__.mult, self__.ch, self__.cs, meta16043__$1);
        };
      }(cs);
      cljs.core.async.t16042.prototype.cljs$core$IMeta$_meta$arity$1 = function(cs) {
        return function(_16044) {
          var self__ = this;
          var _16044__$1 = this;
          return self__.meta16043;
        };
      }(cs);
      cljs.core.async.t16042.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t16042.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(cs) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.ch;
        };
      }(cs);
      cljs.core.async.t16042.prototype.cljs$core$async$Mult$ = true;
      cljs.core.async.t16042.prototype.cljs$core$async$Mult$tap_STAR_$arity$3 = function(cs) {
        return function(_, ch__$1, close_QMARK_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch__$1, close_QMARK_);
          return null;
        };
      }(cs);
      cljs.core.async.t16042.prototype.cljs$core$async$Mult$untap_STAR_$arity$2 = function(cs) {
        return function(_, ch__$1) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch__$1);
          return null;
        };
      }(cs);
      cljs.core.async.t16042.prototype.cljs$core$async$Mult$untap_all_STAR_$arity$1 = function(cs) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
          return null;
        };
      }(cs);
      cljs.core.async.t16042.getBasis = function(cs) {
        return function() {
          return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "mult", "mult", -1187640995, null), new cljs.core.Symbol(null, "ch", "ch", 1085813622, null), new cljs.core.Symbol(null, "cs", "cs", -117024463, null), new cljs.core.Symbol(null, "meta16043", "meta16043", 63718003, null)], null);
        };
      }(cs);
      cljs.core.async.t16042.cljs$lang$type = true;
      cljs.core.async.t16042.cljs$lang$ctorStr = "cljs.core.async/t16042";
      cljs.core.async.t16042.cljs$lang$ctorPrWriter = function(cs) {
        return function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
          return cljs.core._write.call(null, writer__4889__auto__, "cljs.core.async/t16042");
        };
      }(cs);
      cljs.core.async.__GT_t16042 = function(cs) {
        return function cljs$core$async$mult_$___GT_t16042(mult__$1, ch__$1, cs__$1, meta16043) {
          return new cljs.core.async.t16042(mult__$1, ch__$1, cs__$1, meta16043);
        };
      }(cs);
    }
    return new cljs.core.async.t16042(cljs$core$async$mult, ch, cs, cljs.core.PersistentArrayMap.EMPTY);
  }();
  var dchan = cljs.core.async.chan.call(null, 1);
  var dctr = cljs.core.atom.call(null, null);
  var done = function(cs, m, dchan, dctr) {
    return function(_) {
      if (cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
        return cljs.core.async.put_BANG_.call(null, dchan, true);
      } else {
        return null;
      }
    };
  }(cs, m, dchan, dctr);
  var c__12926__auto___16263 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__12926__auto___16263, cs, m, dchan, dctr, done) {
    return function() {
      var f__12927__auto__ = function() {
        var switch__12864__auto__ = function(c__12926__auto___16263, cs, m, dchan, dctr, done) {
          return function(state_16175) {
            var state_val_16176 = state_16175[1];
            if (state_val_16176 === 7) {
              var inst_16171 = state_16175[2];
              var state_16175__$1 = state_16175;
              var statearr_16177_16264 = state_16175__$1;
              statearr_16177_16264[2] = inst_16171;
              statearr_16177_16264[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_16176 === 20) {
                var inst_16076 = state_16175[7];
                var inst_16086 = cljs.core.first.call(null, inst_16076);
                var inst_16087 = cljs.core.nth.call(null, inst_16086, 0, null);
                var inst_16088 = cljs.core.nth.call(null, inst_16086, 1, null);
                var state_16175__$1 = function() {
                  var statearr_16178 = state_16175;
                  statearr_16178[8] = inst_16087;
                  return statearr_16178;
                }();
                if (cljs.core.truth_(inst_16088)) {
                  var statearr_16179_16265 = state_16175__$1;
                  statearr_16179_16265[1] = 22;
                } else {
                  var statearr_16180_16266 = state_16175__$1;
                  statearr_16180_16266[1] = 23;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_16176 === 27) {
                  var inst_16123 = state_16175[9];
                  var inst_16118 = state_16175[10];
                  var inst_16047 = state_16175[11];
                  var inst_16116 = state_16175[12];
                  var inst_16123__$1 = cljs.core._nth.call(null, inst_16116, inst_16118);
                  var inst_16124 = cljs.core.async.put_BANG_.call(null, inst_16123__$1, inst_16047, done);
                  var state_16175__$1 = function() {
                    var statearr_16181 = state_16175;
                    statearr_16181[9] = inst_16123__$1;
                    return statearr_16181;
                  }();
                  if (cljs.core.truth_(inst_16124)) {
                    var statearr_16182_16267 = state_16175__$1;
                    statearr_16182_16267[1] = 30;
                  } else {
                    var statearr_16183_16268 = state_16175__$1;
                    statearr_16183_16268[1] = 31;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_16176 === 1) {
                    var state_16175__$1 = state_16175;
                    var statearr_16184_16269 = state_16175__$1;
                    statearr_16184_16269[2] = null;
                    statearr_16184_16269[1] = 2;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_16176 === 24) {
                      var inst_16076 = state_16175[7];
                      var inst_16093 = state_16175[2];
                      var inst_16094 = cljs.core.next.call(null, inst_16076);
                      var inst_16056 = inst_16094;
                      var inst_16057 = null;
                      var inst_16058 = 0;
                      var inst_16059 = 0;
                      var state_16175__$1 = function() {
                        var statearr_16185 = state_16175;
                        statearr_16185[13] = inst_16057;
                        statearr_16185[14] = inst_16093;
                        statearr_16185[15] = inst_16059;
                        statearr_16185[16] = inst_16058;
                        statearr_16185[17] = inst_16056;
                        return statearr_16185;
                      }();
                      var statearr_16186_16270 = state_16175__$1;
                      statearr_16186_16270[2] = null;
                      statearr_16186_16270[1] = 8;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_16176 === 39) {
                        var state_16175__$1 = state_16175;
                        var statearr_16190_16271 = state_16175__$1;
                        statearr_16190_16271[2] = null;
                        statearr_16190_16271[1] = 41;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_16176 === 4) {
                          var inst_16047 = state_16175[11];
                          var inst_16047__$1 = state_16175[2];
                          var inst_16048 = inst_16047__$1 == null;
                          var state_16175__$1 = function() {
                            var statearr_16191 = state_16175;
                            statearr_16191[11] = inst_16047__$1;
                            return statearr_16191;
                          }();
                          if (cljs.core.truth_(inst_16048)) {
                            var statearr_16192_16272 = state_16175__$1;
                            statearr_16192_16272[1] = 5;
                          } else {
                            var statearr_16193_16273 = state_16175__$1;
                            statearr_16193_16273[1] = 6;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_16176 === 15) {
                            var inst_16057 = state_16175[13];
                            var inst_16059 = state_16175[15];
                            var inst_16058 = state_16175[16];
                            var inst_16056 = state_16175[17];
                            var inst_16072 = state_16175[2];
                            var inst_16073 = inst_16059 + 1;
                            var tmp16187 = inst_16057;
                            var tmp16188 = inst_16058;
                            var tmp16189 = inst_16056;
                            var inst_16056__$1 = tmp16189;
                            var inst_16057__$1 = tmp16187;
                            var inst_16058__$1 = tmp16188;
                            var inst_16059__$1 = inst_16073;
                            var state_16175__$1 = function() {
                              var statearr_16194 = state_16175;
                              statearr_16194[18] = inst_16072;
                              statearr_16194[13] = inst_16057__$1;
                              statearr_16194[15] = inst_16059__$1;
                              statearr_16194[16] = inst_16058__$1;
                              statearr_16194[17] = inst_16056__$1;
                              return statearr_16194;
                            }();
                            var statearr_16195_16274 = state_16175__$1;
                            statearr_16195_16274[2] = null;
                            statearr_16195_16274[1] = 8;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_16176 === 21) {
                              var inst_16097 = state_16175[2];
                              var state_16175__$1 = state_16175;
                              var statearr_16199_16275 = state_16175__$1;
                              statearr_16199_16275[2] = inst_16097;
                              statearr_16199_16275[1] = 18;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_16176 === 31) {
                                var inst_16123 = state_16175[9];
                                var inst_16127 = done.call(null, null);
                                var inst_16128 = cljs.core.async.untap_STAR_.call(null, m, inst_16123);
                                var state_16175__$1 = function() {
                                  var statearr_16200 = state_16175;
                                  statearr_16200[19] = inst_16127;
                                  return statearr_16200;
                                }();
                                var statearr_16201_16276 = state_16175__$1;
                                statearr_16201_16276[2] = inst_16128;
                                statearr_16201_16276[1] = 32;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_16176 === 32) {
                                  var inst_16117 = state_16175[20];
                                  var inst_16118 = state_16175[10];
                                  var inst_16115 = state_16175[21];
                                  var inst_16116 = state_16175[12];
                                  var inst_16130 = state_16175[2];
                                  var inst_16131 = inst_16118 + 1;
                                  var tmp16196 = inst_16117;
                                  var tmp16197 = inst_16115;
                                  var tmp16198 = inst_16116;
                                  var inst_16115__$1 = tmp16197;
                                  var inst_16116__$1 = tmp16198;
                                  var inst_16117__$1 = tmp16196;
                                  var inst_16118__$1 = inst_16131;
                                  var state_16175__$1 = function() {
                                    var statearr_16202 = state_16175;
                                    statearr_16202[20] = inst_16117__$1;
                                    statearr_16202[10] = inst_16118__$1;
                                    statearr_16202[21] = inst_16115__$1;
                                    statearr_16202[22] = inst_16130;
                                    statearr_16202[12] = inst_16116__$1;
                                    return statearr_16202;
                                  }();
                                  var statearr_16203_16277 = state_16175__$1;
                                  statearr_16203_16277[2] = null;
                                  statearr_16203_16277[1] = 25;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_16176 === 40) {
                                    var inst_16143 = state_16175[23];
                                    var inst_16147 = done.call(null, null);
                                    var inst_16148 = cljs.core.async.untap_STAR_.call(null, m, inst_16143);
                                    var state_16175__$1 = function() {
                                      var statearr_16204 = state_16175;
                                      statearr_16204[24] = inst_16147;
                                      return statearr_16204;
                                    }();
                                    var statearr_16205_16278 = state_16175__$1;
                                    statearr_16205_16278[2] = inst_16148;
                                    statearr_16205_16278[1] = 41;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_16176 === 33) {
                                      var inst_16134 = state_16175[25];
                                      var inst_16136 = cljs.core.chunked_seq_QMARK_.call(null, inst_16134);
                                      var state_16175__$1 = state_16175;
                                      if (inst_16136) {
                                        var statearr_16206_16279 = state_16175__$1;
                                        statearr_16206_16279[1] = 36;
                                      } else {
                                        var statearr_16207_16280 = state_16175__$1;
                                        statearr_16207_16280[1] = 37;
                                      }
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_16176 === 13) {
                                        var inst_16066 = state_16175[26];
                                        var inst_16069 = cljs.core.async.close_BANG_.call(null, inst_16066);
                                        var state_16175__$1 = state_16175;
                                        var statearr_16208_16281 = state_16175__$1;
                                        statearr_16208_16281[2] = inst_16069;
                                        statearr_16208_16281[1] = 15;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_16176 === 22) {
                                          var inst_16087 = state_16175[8];
                                          var inst_16090 = cljs.core.async.close_BANG_.call(null, inst_16087);
                                          var state_16175__$1 = state_16175;
                                          var statearr_16209_16282 = state_16175__$1;
                                          statearr_16209_16282[2] = inst_16090;
                                          statearr_16209_16282[1] = 24;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_16176 === 36) {
                                            var inst_16134 = state_16175[25];
                                            var inst_16138 = cljs.core.chunk_first.call(null, inst_16134);
                                            var inst_16139 = cljs.core.chunk_rest.call(null, inst_16134);
                                            var inst_16140 = cljs.core.count.call(null, inst_16138);
                                            var inst_16115 = inst_16139;
                                            var inst_16116 = inst_16138;
                                            var inst_16117 = inst_16140;
                                            var inst_16118 = 0;
                                            var state_16175__$1 = function() {
                                              var statearr_16210 = state_16175;
                                              statearr_16210[20] = inst_16117;
                                              statearr_16210[10] = inst_16118;
                                              statearr_16210[21] = inst_16115;
                                              statearr_16210[12] = inst_16116;
                                              return statearr_16210;
                                            }();
                                            var statearr_16211_16283 = state_16175__$1;
                                            statearr_16211_16283[2] = null;
                                            statearr_16211_16283[1] = 25;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_16176 === 41) {
                                              var inst_16134 = state_16175[25];
                                              var inst_16150 = state_16175[2];
                                              var inst_16151 = cljs.core.next.call(null, inst_16134);
                                              var inst_16115 = inst_16151;
                                              var inst_16116 = null;
                                              var inst_16117 = 0;
                                              var inst_16118 = 0;
                                              var state_16175__$1 = function() {
                                                var statearr_16212 = state_16175;
                                                statearr_16212[20] = inst_16117;
                                                statearr_16212[27] = inst_16150;
                                                statearr_16212[10] = inst_16118;
                                                statearr_16212[21] = inst_16115;
                                                statearr_16212[12] = inst_16116;
                                                return statearr_16212;
                                              }();
                                              var statearr_16213_16284 = state_16175__$1;
                                              statearr_16213_16284[2] = null;
                                              statearr_16213_16284[1] = 25;
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_16176 === 43) {
                                                var state_16175__$1 = state_16175;
                                                var statearr_16214_16285 = state_16175__$1;
                                                statearr_16214_16285[2] = null;
                                                statearr_16214_16285[1] = 44;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_16176 === 29) {
                                                  var inst_16159 = state_16175[2];
                                                  var state_16175__$1 = state_16175;
                                                  var statearr_16215_16286 = state_16175__$1;
                                                  statearr_16215_16286[2] = inst_16159;
                                                  statearr_16215_16286[1] = 26;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_16176 === 44) {
                                                    var inst_16168 = state_16175[2];
                                                    var state_16175__$1 = function() {
                                                      var statearr_16216 = state_16175;
                                                      statearr_16216[28] = inst_16168;
                                                      return statearr_16216;
                                                    }();
                                                    var statearr_16217_16287 = state_16175__$1;
                                                    statearr_16217_16287[2] = null;
                                                    statearr_16217_16287[1] = 2;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_16176 === 6) {
                                                      var inst_16107 = state_16175[29];
                                                      var inst_16106 = cljs.core.deref.call(null, cs);
                                                      var inst_16107__$1 = cljs.core.keys.call(null, inst_16106);
                                                      var inst_16108 = cljs.core.count.call(null, inst_16107__$1);
                                                      var inst_16109 = cljs.core.reset_BANG_.call(null, dctr, inst_16108);
                                                      var inst_16114 = cljs.core.seq.call(null, inst_16107__$1);
                                                      var inst_16115 = inst_16114;
                                                      var inst_16116 = null;
                                                      var inst_16117 = 0;
                                                      var inst_16118 = 0;
                                                      var state_16175__$1 = function() {
                                                        var statearr_16218 = state_16175;
                                                        statearr_16218[20] = inst_16117;
                                                        statearr_16218[10] = inst_16118;
                                                        statearr_16218[21] = inst_16115;
                                                        statearr_16218[12] = inst_16116;
                                                        statearr_16218[30] = inst_16109;
                                                        statearr_16218[29] = inst_16107__$1;
                                                        return statearr_16218;
                                                      }();
                                                      var statearr_16219_16288 = state_16175__$1;
                                                      statearr_16219_16288[2] = null;
                                                      statearr_16219_16288[1] = 25;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_16176 === 28) {
                                                        var inst_16134 = state_16175[25];
                                                        var inst_16115 = state_16175[21];
                                                        var inst_16134__$1 = cljs.core.seq.call(null, inst_16115);
                                                        var state_16175__$1 = function() {
                                                          var statearr_16220 = state_16175;
                                                          statearr_16220[25] = inst_16134__$1;
                                                          return statearr_16220;
                                                        }();
                                                        if (inst_16134__$1) {
                                                          var statearr_16221_16289 = state_16175__$1;
                                                          statearr_16221_16289[1] = 33;
                                                        } else {
                                                          var statearr_16222_16290 = state_16175__$1;
                                                          statearr_16222_16290[1] = 34;
                                                        }
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_16176 === 25) {
                                                          var inst_16117 = state_16175[20];
                                                          var inst_16118 = state_16175[10];
                                                          var inst_16120 = inst_16118 < inst_16117;
                                                          var inst_16121 = inst_16120;
                                                          var state_16175__$1 = state_16175;
                                                          if (cljs.core.truth_(inst_16121)) {
                                                            var statearr_16223_16291 = state_16175__$1;
                                                            statearr_16223_16291[1] = 27;
                                                          } else {
                                                            var statearr_16224_16292 = state_16175__$1;
                                                            statearr_16224_16292[1] = 28;
                                                          }
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          if (state_val_16176 === 34) {
                                                            var state_16175__$1 = state_16175;
                                                            var statearr_16225_16293 = state_16175__$1;
                                                            statearr_16225_16293[2] = null;
                                                            statearr_16225_16293[1] = 35;
                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                          } else {
                                                            if (state_val_16176 === 17) {
                                                              var state_16175__$1 = state_16175;
                                                              var statearr_16226_16294 = state_16175__$1;
                                                              statearr_16226_16294[2] = null;
                                                              statearr_16226_16294[1] = 18;
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              if (state_val_16176 === 3) {
                                                                var inst_16173 = state_16175[2];
                                                                var state_16175__$1 = state_16175;
                                                                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_16175__$1, inst_16173);
                                                              } else {
                                                                if (state_val_16176 === 12) {
                                                                  var inst_16102 = state_16175[2];
                                                                  var state_16175__$1 = state_16175;
                                                                  var statearr_16227_16295 = state_16175__$1;
                                                                  statearr_16227_16295[2] = inst_16102;
                                                                  statearr_16227_16295[1] = 9;
                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                } else {
                                                                  if (state_val_16176 === 2) {
                                                                    var state_16175__$1 = state_16175;
                                                                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_16175__$1, 4, ch);
                                                                  } else {
                                                                    if (state_val_16176 === 23) {
                                                                      var state_16175__$1 = state_16175;
                                                                      var statearr_16228_16296 = state_16175__$1;
                                                                      statearr_16228_16296[2] = null;
                                                                      statearr_16228_16296[1] = 24;
                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                    } else {
                                                                      if (state_val_16176 === 35) {
                                                                        var inst_16157 = state_16175[2];
                                                                        var state_16175__$1 = state_16175;
                                                                        var statearr_16229_16297 = state_16175__$1;
                                                                        statearr_16229_16297[2] = inst_16157;
                                                                        statearr_16229_16297[1] = 29;
                                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                      } else {
                                                                        if (state_val_16176 === 19) {
                                                                          var inst_16076 = state_16175[7];
                                                                          var inst_16080 = cljs.core.chunk_first.call(null, inst_16076);
                                                                          var inst_16081 = cljs.core.chunk_rest.call(null, inst_16076);
                                                                          var inst_16082 = cljs.core.count.call(null, inst_16080);
                                                                          var inst_16056 = inst_16081;
                                                                          var inst_16057 = inst_16080;
                                                                          var inst_16058 = inst_16082;
                                                                          var inst_16059 = 0;
                                                                          var state_16175__$1 = function() {
                                                                            var statearr_16230 = state_16175;
                                                                            statearr_16230[13] = inst_16057;
                                                                            statearr_16230[15] = inst_16059;
                                                                            statearr_16230[16] = inst_16058;
                                                                            statearr_16230[17] = inst_16056;
                                                                            return statearr_16230;
                                                                          }();
                                                                          var statearr_16231_16298 = state_16175__$1;
                                                                          statearr_16231_16298[2] = null;
                                                                          statearr_16231_16298[1] = 8;
                                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                        } else {
                                                                          if (state_val_16176 === 11) {
                                                                            var inst_16076 = state_16175[7];
                                                                            var inst_16056 = state_16175[17];
                                                                            var inst_16076__$1 = cljs.core.seq.call(null, inst_16056);
                                                                            var state_16175__$1 = function() {
                                                                              var statearr_16232 = state_16175;
                                                                              statearr_16232[7] = inst_16076__$1;
                                                                              return statearr_16232;
                                                                            }();
                                                                            if (inst_16076__$1) {
                                                                              var statearr_16233_16299 = state_16175__$1;
                                                                              statearr_16233_16299[1] = 16;
                                                                            } else {
                                                                              var statearr_16234_16300 = state_16175__$1;
                                                                              statearr_16234_16300[1] = 17;
                                                                            }
                                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                          } else {
                                                                            if (state_val_16176 === 9) {
                                                                              var inst_16104 = state_16175[2];
                                                                              var state_16175__$1 = state_16175;
                                                                              var statearr_16235_16301 = state_16175__$1;
                                                                              statearr_16235_16301[2] = inst_16104;
                                                                              statearr_16235_16301[1] = 7;
                                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                            } else {
                                                                              if (state_val_16176 === 5) {
                                                                                var inst_16054 = cljs.core.deref.call(null, cs);
                                                                                var inst_16055 = cljs.core.seq.call(null, inst_16054);
                                                                                var inst_16056 = inst_16055;
                                                                                var inst_16057 = null;
                                                                                var inst_16058 = 0;
                                                                                var inst_16059 = 0;
                                                                                var state_16175__$1 = function() {
                                                                                  var statearr_16236 = state_16175;
                                                                                  statearr_16236[13] = inst_16057;
                                                                                  statearr_16236[15] = inst_16059;
                                                                                  statearr_16236[16] = inst_16058;
                                                                                  statearr_16236[17] = inst_16056;
                                                                                  return statearr_16236;
                                                                                }();
                                                                                var statearr_16237_16302 = state_16175__$1;
                                                                                statearr_16237_16302[2] = null;
                                                                                statearr_16237_16302[1] = 8;
                                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                              } else {
                                                                                if (state_val_16176 === 14) {
                                                                                  var state_16175__$1 = state_16175;
                                                                                  var statearr_16238_16303 = state_16175__$1;
                                                                                  statearr_16238_16303[2] = null;
                                                                                  statearr_16238_16303[1] = 15;
                                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                } else {
                                                                                  if (state_val_16176 === 45) {
                                                                                    var inst_16165 = state_16175[2];
                                                                                    var state_16175__$1 = state_16175;
                                                                                    var statearr_16239_16304 = state_16175__$1;
                                                                                    statearr_16239_16304[2] = inst_16165;
                                                                                    statearr_16239_16304[1] = 44;
                                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                  } else {
                                                                                    if (state_val_16176 === 26) {
                                                                                      var inst_16107 = state_16175[29];
                                                                                      var inst_16161 = state_16175[2];
                                                                                      var inst_16162 = cljs.core.seq.call(null, inst_16107);
                                                                                      var state_16175__$1 = function() {
                                                                                        var statearr_16240 = state_16175;
                                                                                        statearr_16240[31] = inst_16161;
                                                                                        return statearr_16240;
                                                                                      }();
                                                                                      if (inst_16162) {
                                                                                        var statearr_16241_16305 = state_16175__$1;
                                                                                        statearr_16241_16305[1] = 42;
                                                                                      } else {
                                                                                        var statearr_16242_16306 = state_16175__$1;
                                                                                        statearr_16242_16306[1] = 43;
                                                                                      }
                                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                    } else {
                                                                                      if (state_val_16176 === 16) {
                                                                                        var inst_16076 = state_16175[7];
                                                                                        var inst_16078 = cljs.core.chunked_seq_QMARK_.call(null, inst_16076);
                                                                                        var state_16175__$1 = state_16175;
                                                                                        if (inst_16078) {
                                                                                          var statearr_16243_16307 = state_16175__$1;
                                                                                          statearr_16243_16307[1] = 19;
                                                                                        } else {
                                                                                          var statearr_16244_16308 = state_16175__$1;
                                                                                          statearr_16244_16308[1] = 20;
                                                                                        }
                                                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                      } else {
                                                                                        if (state_val_16176 === 38) {
                                                                                          var inst_16154 = state_16175[2];
                                                                                          var state_16175__$1 = state_16175;
                                                                                          var statearr_16245_16309 = state_16175__$1;
                                                                                          statearr_16245_16309[2] = inst_16154;
                                                                                          statearr_16245_16309[1] = 35;
                                                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                        } else {
                                                                                          if (state_val_16176 === 30) {
                                                                                            var state_16175__$1 = state_16175;
                                                                                            var statearr_16246_16310 = state_16175__$1;
                                                                                            statearr_16246_16310[2] = null;
                                                                                            statearr_16246_16310[1] = 32;
                                                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                          } else {
                                                                                            if (state_val_16176 === 10) {
                                                                                              var inst_16057 = state_16175[13];
                                                                                              var inst_16059 = state_16175[15];
                                                                                              var inst_16065 = cljs.core._nth.call(null, inst_16057, inst_16059);
                                                                                              var inst_16066 = cljs.core.nth.call(null, inst_16065, 0, null);
                                                                                              var inst_16067 = cljs.core.nth.call(null, inst_16065, 1, null);
                                                                                              var state_16175__$1 = function() {
                                                                                                var statearr_16247 = state_16175;
                                                                                                statearr_16247[26] = inst_16066;
                                                                                                return statearr_16247;
                                                                                              }();
                                                                                              if (cljs.core.truth_(inst_16067)) {
                                                                                                var statearr_16248_16311 = state_16175__$1;
                                                                                                statearr_16248_16311[1] = 13;
                                                                                              } else {
                                                                                                var statearr_16249_16312 = state_16175__$1;
                                                                                                statearr_16249_16312[1] = 14;
                                                                                              }
                                                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                            } else {
                                                                                              if (state_val_16176 === 18) {
                                                                                                var inst_16100 = state_16175[2];
                                                                                                var state_16175__$1 = state_16175;
                                                                                                var statearr_16250_16313 = state_16175__$1;
                                                                                                statearr_16250_16313[2] = inst_16100;
                                                                                                statearr_16250_16313[1] = 12;
                                                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                              } else {
                                                                                                if (state_val_16176 === 42) {
                                                                                                  var state_16175__$1 = state_16175;
                                                                                                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_16175__$1, 45, dchan);
                                                                                                } else {
                                                                                                  if (state_val_16176 === 37) {
                                                                                                    var inst_16134 = state_16175[25];
                                                                                                    var inst_16143 = state_16175[23];
                                                                                                    var inst_16047 = state_16175[11];
                                                                                                    var inst_16143__$1 = cljs.core.first.call(null, inst_16134);
                                                                                                    var inst_16144 = cljs.core.async.put_BANG_.call(null, inst_16143__$1, inst_16047, done);
                                                                                                    var state_16175__$1 = function() {
                                                                                                      var statearr_16251 = state_16175;
                                                                                                      statearr_16251[23] = inst_16143__$1;
                                                                                                      return statearr_16251;
                                                                                                    }();
                                                                                                    if (cljs.core.truth_(inst_16144)) {
                                                                                                      var statearr_16252_16314 = state_16175__$1;
                                                                                                      statearr_16252_16314[1] = 39;
                                                                                                    } else {
                                                                                                      var statearr_16253_16315 = state_16175__$1;
                                                                                                      statearr_16253_16315[1] = 40;
                                                                                                    }
                                                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                  } else {
                                                                                                    if (state_val_16176 === 8) {
                                                                                                      var inst_16059 = state_16175[15];
                                                                                                      var inst_16058 = state_16175[16];
                                                                                                      var inst_16061 = inst_16059 < inst_16058;
                                                                                                      var inst_16062 = inst_16061;
                                                                                                      var state_16175__$1 = state_16175;
                                                                                                      if (cljs.core.truth_(inst_16062)) {
                                                                                                        var statearr_16254_16316 = state_16175__$1;
                                                                                                        statearr_16254_16316[1] = 10;
                                                                                                      } else {
                                                                                                        var statearr_16255_16317 = state_16175__$1;
                                                                                                        statearr_16255_16317[1] = 11;
                                                                                                      }
                                                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                    } else {
                                                                                                      return null;
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__12926__auto___16263, cs, m, dchan, dctr, done);
        return function(switch__12864__auto__, c__12926__auto___16263, cs, m, dchan, dctr, done) {
          return function() {
            var cljs$core$async$mult_$_state_machine__12865__auto__ = null;
            var cljs$core$async$mult_$_state_machine__12865__auto____0 = function() {
              var statearr_16259 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_16259[0] = cljs$core$async$mult_$_state_machine__12865__auto__;
              statearr_16259[1] = 1;
              return statearr_16259;
            };
            var cljs$core$async$mult_$_state_machine__12865__auto____1 = function(state_16175) {
              while (true) {
                var ret_value__12866__auto__ = function() {
                  try {
                    while (true) {
                      var result__12867__auto__ = switch__12864__auto__.call(null, state_16175);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__12867__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__12867__auto__;
                      }
                      break;
                    }
                  } catch (e16260) {
                    if (e16260 instanceof Object) {
                      var ex__12868__auto__ = e16260;
                      var statearr_16261_16318 = state_16175;
                      statearr_16261_16318[5] = ex__12868__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_16175);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e16260;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__12866__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__16319 = state_16175;
                  state_16175 = G__16319;
                  continue;
                } else {
                  return ret_value__12866__auto__;
                }
                break;
              }
            };
            cljs$core$async$mult_$_state_machine__12865__auto__ = function(state_16175) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$mult_$_state_machine__12865__auto____0.call(this);
                case 1:
                  return cljs$core$async$mult_$_state_machine__12865__auto____1.call(this, state_16175);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$mult_$_state_machine__12865__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$mult_$_state_machine__12865__auto____0;
            cljs$core$async$mult_$_state_machine__12865__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$mult_$_state_machine__12865__auto____1;
            return cljs$core$async$mult_$_state_machine__12865__auto__;
          }();
        }(switch__12864__auto__, c__12926__auto___16263, cs, m, dchan, dctr, done);
      }();
      var state__12928__auto__ = function() {
        var statearr_16262 = f__12927__auto__.call(null);
        statearr_16262[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__12926__auto___16263;
        return statearr_16262;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__12928__auto__);
    };
  }(c__12926__auto___16263, cs, m, dchan, dctr, done));
  return m;
};
cljs.core.async.tap = function cljs$core$async$tap() {
  var G__16321 = arguments.length;
  switch(G__16321) {
    case 2:
      return cljs.core.async.tap.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.tap.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.tap.cljs$core$IFn$_invoke$arity$2 = function(mult, ch) {
  return cljs.core.async.tap.call(null, mult, ch, true);
};
cljs.core.async.tap.cljs$core$IFn$_invoke$arity$3 = function(mult, ch, close_QMARK_) {
  cljs.core.async.tap_STAR_.call(null, mult, ch, close_QMARK_);
  return ch;
};
cljs.core.async.tap.cljs$lang$maxFixedArity = 3;
cljs.core.async.untap = function cljs$core$async$untap(mult, ch) {
  return cljs.core.async.untap_STAR_.call(null, mult, ch);
};
cljs.core.async.untap_all = function cljs$core$async$untap_all(mult) {
  return cljs.core.async.untap_all_STAR_.call(null, mult);
};
cljs.core.async.Mix = function() {
  var obj16324 = {};
  return obj16324;
}();
cljs.core.async.admix_STAR_ = function cljs$core$async$admix_STAR_(m, ch) {
  if (function() {
    var and__4297__auto__ = m;
    if (and__4297__auto__) {
      return m.cljs$core$async$Mix$admix_STAR_$arity$2;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$admix_STAR_$arity$2(m, ch);
  } else {
    var x__4945__auto__ = m == null ? null : m;
    return function() {
      var or__4309__auto__ = cljs.core.async.admix_STAR_[goog.typeOf(x__4945__auto__)];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core.async.admix_STAR_["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.admix*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.unmix_STAR_ = function cljs$core$async$unmix_STAR_(m, ch) {
  if (function() {
    var and__4297__auto__ = m;
    if (and__4297__auto__) {
      return m.cljs$core$async$Mix$unmix_STAR_$arity$2;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$unmix_STAR_$arity$2(m, ch);
  } else {
    var x__4945__auto__ = m == null ? null : m;
    return function() {
      var or__4309__auto__ = cljs.core.async.unmix_STAR_[goog.typeOf(x__4945__auto__)];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core.async.unmix_STAR_["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.unmix*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.unmix_all_STAR_ = function cljs$core$async$unmix_all_STAR_(m) {
  if (function() {
    var and__4297__auto__ = m;
    if (and__4297__auto__) {
      return m.cljs$core$async$Mix$unmix_all_STAR_$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$unmix_all_STAR_$arity$1(m);
  } else {
    var x__4945__auto__ = m == null ? null : m;
    return function() {
      var or__4309__auto__ = cljs.core.async.unmix_all_STAR_[goog.typeOf(x__4945__auto__)];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core.async.unmix_all_STAR_["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.unmix-all*", m);
        }
      }
    }().call(null, m);
  }
};
cljs.core.async.toggle_STAR_ = function cljs$core$async$toggle_STAR_(m, state_map) {
  if (function() {
    var and__4297__auto__ = m;
    if (and__4297__auto__) {
      return m.cljs$core$async$Mix$toggle_STAR_$arity$2;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$toggle_STAR_$arity$2(m, state_map);
  } else {
    var x__4945__auto__ = m == null ? null : m;
    return function() {
      var or__4309__auto__ = cljs.core.async.toggle_STAR_[goog.typeOf(x__4945__auto__)];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core.async.toggle_STAR_["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.toggle*", m);
        }
      }
    }().call(null, m, state_map);
  }
};
cljs.core.async.solo_mode_STAR_ = function cljs$core$async$solo_mode_STAR_(m, mode) {
  if (function() {
    var and__4297__auto__ = m;
    if (and__4297__auto__) {
      return m.cljs$core$async$Mix$solo_mode_STAR_$arity$2;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$solo_mode_STAR_$arity$2(m, mode);
  } else {
    var x__4945__auto__ = m == null ? null : m;
    return function() {
      var or__4309__auto__ = cljs.core.async.solo_mode_STAR_[goog.typeOf(x__4945__auto__)];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core.async.solo_mode_STAR_["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.solo-mode*", m);
        }
      }
    }().call(null, m, mode);
  }
};
cljs.core.async.ioc_alts_BANG_ = function cljs$core$async$ioc_alts_BANG_() {
  var argseq__5349__auto__ = 3 < arguments.length ? new cljs.core.IndexedSeq(Array.prototype.slice.call(arguments, 3), 0) : null;
  return cljs.core.async.ioc_alts_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5349__auto__);
};
cljs.core.async.ioc_alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(state, cont_block, ports, p__16329) {
  var map__16330 = p__16329;
  var map__16330__$1 = cljs.core.seq_QMARK_.call(null, map__16330) ? cljs.core.apply.call(null, cljs.core.hash_map, map__16330) : map__16330;
  var opts = map__16330__$1;
  var statearr_16331_16334 = state;
  statearr_16331_16334[cljs.core.async.impl.ioc_helpers.STATE_IDX] = cont_block;
  var temp__4422__auto__ = cljs.core.async.do_alts.call(null, function(map__16330, map__16330__$1, opts) {
    return function(val) {
      var statearr_16332_16335 = state;
      statearr_16332_16335[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = val;
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
    };
  }(map__16330, map__16330__$1, opts), ports, opts);
  if (cljs.core.truth_(temp__4422__auto__)) {
    var cb = temp__4422__auto__;
    var statearr_16333_16336 = state;
    statearr_16333_16336[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
  } else {
    return null;
  }
};
cljs.core.async.ioc_alts_BANG_.cljs$lang$maxFixedArity = 3;
cljs.core.async.ioc_alts_BANG_.cljs$lang$applyTo = function(seq16325) {
  var G__16326 = cljs.core.first.call(null, seq16325);
  var seq16325__$1 = cljs.core.next.call(null, seq16325);
  var G__16327 = cljs.core.first.call(null, seq16325__$1);
  var seq16325__$2 = cljs.core.next.call(null, seq16325__$1);
  var G__16328 = cljs.core.first.call(null, seq16325__$2);
  var seq16325__$3 = cljs.core.next.call(null, seq16325__$2);
  return cljs.core.async.ioc_alts_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__16326, G__16327, G__16328, seq16325__$3);
};
cljs.core.async.mix = function cljs$core$async$mix(out) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var solo_modes = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "pause", "pause", -2095325672), null, new cljs.core.Keyword(null, "mute", "mute", 1151223646), null], null), null);
  var attrs = cljs.core.conj.call(null, solo_modes, new cljs.core.Keyword(null, "solo", "solo", -316350075));
  var solo_mode = cljs.core.atom.call(null, new cljs.core.Keyword(null, "mute", "mute", 1151223646));
  var change = cljs.core.async.chan.call(null);
  var changed = function(cs, solo_modes, attrs, solo_mode, change) {
    return function() {
      return cljs.core.async.put_BANG_.call(null, change, true);
    };
  }(cs, solo_modes, attrs, solo_mode, change);
  var pick = function(cs, solo_modes, attrs, solo_mode, change, changed) {
    return function(attr, chs) {
      return cljs.core.reduce_kv.call(null, function(cs, solo_modes, attrs, solo_mode, change, changed) {
        return function(ret, c, v) {
          if (cljs.core.truth_(attr.call(null, v))) {
            return cljs.core.conj.call(null, ret, c);
          } else {
            return ret;
          }
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed), cljs.core.PersistentHashSet.EMPTY, chs);
    };
  }(cs, solo_modes, attrs, solo_mode, change, changed);
  var calc_state = function(cs, solo_modes, attrs, solo_mode, change, changed, pick) {
    return function() {
      var chs = cljs.core.deref.call(null, cs);
      var mode = cljs.core.deref.call(null, solo_mode);
      var solos = pick.call(null, new cljs.core.Keyword(null, "solo", "solo", -316350075), chs);
      var pauses = pick.call(null, new cljs.core.Keyword(null, "pause", "pause", -2095325672), chs);
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "solos", "solos", 1441458643), solos, new cljs.core.Keyword(null, "mutes", "mutes", 1068806309), pick.call(null, new cljs.core.Keyword(null, "mute", "mute", 1151223646), chs), new cljs.core.Keyword(null, "reads", "reads", -1215067361), cljs.core.conj.call(null, cljs.core._EQ_.call(null, mode, new cljs.core.Keyword(null, "pause", "pause", -2095325672)) && !cljs.core.empty_QMARK_.call(null, solos) ? cljs.core.vec.call(null, 
      solos) : cljs.core.vec.call(null, cljs.core.remove.call(null, pauses, cljs.core.keys.call(null, chs))), change)], null);
    };
  }(cs, solo_modes, attrs, solo_mode, change, changed, pick);
  var m = function() {
    if (typeof cljs.core.async.t16456 !== "undefined") {
    } else {
      cljs.core.async.t16456 = function(change, mix, solo_mode, pick, cs, calc_state, out, changed, solo_modes, attrs, meta16457) {
        this.change = change;
        this.mix = mix;
        this.solo_mode = solo_mode;
        this.pick = pick;
        this.cs = cs;
        this.calc_state = calc_state;
        this.out = out;
        this.changed = changed;
        this.solo_modes = solo_modes;
        this.attrs = attrs;
        this.meta16457 = meta16457;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
        this.cljs$lang$protocol_mask$partition1$ = 0;
      };
      cljs.core.async.t16456.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_16458, meta16457__$1) {
          var self__ = this;
          var _16458__$1 = this;
          return new cljs.core.async.t16456(self__.change, self__.mix, self__.solo_mode, self__.pick, self__.cs, self__.calc_state, self__.out, self__.changed, self__.solo_modes, self__.attrs, meta16457__$1);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t16456.prototype.cljs$core$IMeta$_meta$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_16458) {
          var self__ = this;
          var _16458__$1 = this;
          return self__.meta16457;
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t16456.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t16456.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.out;
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t16456.prototype.cljs$core$async$Mix$ = true;
      cljs.core.async.t16456.prototype.cljs$core$async$Mix$admix_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, ch) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch, cljs.core.PersistentArrayMap.EMPTY);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t16456.prototype.cljs$core$async$Mix$unmix_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, ch) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t16456.prototype.cljs$core$async$Mix$unmix_all_STAR_$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t16456.prototype.cljs$core$async$Mix$toggle_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, state_map) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.partial.call(null, cljs.core.merge_with, cljs.core.merge), state_map);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t16456.prototype.cljs$core$async$Mix$solo_mode_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, mode) {
          var self__ = this;
          var ___$1 = this;
          if (cljs.core.truth_(self__.solo_modes.call(null, mode))) {
          } else {
            throw new Error([cljs.core.str("Assert failed: "), cljs.core.str([cljs.core.str("mode must be one of: "), cljs.core.str(self__.solo_modes)].join("")), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "solo-modes", "solo-modes", 882180540, null), new cljs.core.Symbol(null, "mode", "mode", -2000032078, null))))].join(""));
          }
          cljs.core.reset_BANG_.call(null, self__.solo_mode, mode);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t16456.getBasis = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function() {
          return new cljs.core.PersistentVector(null, 11, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "change", "change", 477485025, null), new cljs.core.Symbol(null, "mix", "mix", 2121373763, null), new cljs.core.Symbol(null, "solo-mode", "solo-mode", 2031788074, null), new cljs.core.Symbol(null, "pick", "pick", 1300068175, null), new cljs.core.Symbol(null, "cs", "cs", -117024463, null), new cljs.core.Symbol(null, "calc-state", "calc-state", -349968968, null), new cljs.core.Symbol(null, 
          "out", "out", 729986010, null), new cljs.core.Symbol(null, "changed", "changed", -2083710852, null), new cljs.core.Symbol(null, "solo-modes", "solo-modes", 882180540, null), new cljs.core.Symbol(null, "attrs", "attrs", -450137186, null), new cljs.core.Symbol(null, "meta16457", "meta16457", 1168134323, null)], null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t16456.cljs$lang$type = true;
      cljs.core.async.t16456.cljs$lang$ctorStr = "cljs.core.async/t16456";
      cljs.core.async.t16456.cljs$lang$ctorPrWriter = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
          return cljs.core._write.call(null, writer__4889__auto__, "cljs.core.async/t16456");
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.__GT_t16456 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function cljs$core$async$mix_$___GT_t16456(change__$1, mix__$1, solo_mode__$1, pick__$1, cs__$1, calc_state__$1, out__$1, changed__$1, solo_modes__$1, attrs__$1, meta16457) {
          return new cljs.core.async.t16456(change__$1, mix__$1, solo_mode__$1, pick__$1, cs__$1, calc_state__$1, out__$1, changed__$1, solo_modes__$1, attrs__$1, meta16457);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
    }
    return new cljs.core.async.t16456(change, cljs$core$async$mix, solo_mode, pick, cs, calc_state, out, changed, solo_modes, attrs, cljs.core.PersistentArrayMap.EMPTY);
  }();
  var c__12926__auto___16575 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__12926__auto___16575, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
    return function() {
      var f__12927__auto__ = function() {
        var switch__12864__auto__ = function(c__12926__auto___16575, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
          return function(state_16528) {
            var state_val_16529 = state_16528[1];
            if (state_val_16529 === 7) {
              var inst_16472 = state_16528[7];
              var inst_16477 = cljs.core.apply.call(null, cljs.core.hash_map, inst_16472);
              var state_16528__$1 = state_16528;
              var statearr_16530_16576 = state_16528__$1;
              statearr_16530_16576[2] = inst_16477;
              statearr_16530_16576[1] = 9;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_16529 === 20) {
                var inst_16487 = state_16528[8];
                var state_16528__$1 = state_16528;
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_16528__$1, 23, out, inst_16487);
              } else {
                if (state_val_16529 === 1) {
                  var inst_16462 = state_16528[9];
                  var inst_16462__$1 = calc_state.call(null);
                  var inst_16463 = cljs.core.seq_QMARK_.call(null, inst_16462__$1);
                  var state_16528__$1 = function() {
                    var statearr_16531 = state_16528;
                    statearr_16531[9] = inst_16462__$1;
                    return statearr_16531;
                  }();
                  if (inst_16463) {
                    var statearr_16532_16577 = state_16528__$1;
                    statearr_16532_16577[1] = 2;
                  } else {
                    var statearr_16533_16578 = state_16528__$1;
                    statearr_16533_16578[1] = 3;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_16529 === 24) {
                    var inst_16480 = state_16528[10];
                    var inst_16472 = inst_16480;
                    var state_16528__$1 = function() {
                      var statearr_16534 = state_16528;
                      statearr_16534[7] = inst_16472;
                      return statearr_16534;
                    }();
                    var statearr_16535_16579 = state_16528__$1;
                    statearr_16535_16579[2] = null;
                    statearr_16535_16579[1] = 5;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_16529 === 4) {
                      var inst_16462 = state_16528[9];
                      var inst_16468 = state_16528[2];
                      var inst_16469 = cljs.core.get.call(null, inst_16468, new cljs.core.Keyword(null, "solos", "solos", 1441458643));
                      var inst_16470 = cljs.core.get.call(null, inst_16468, new cljs.core.Keyword(null, "mutes", "mutes", 1068806309));
                      var inst_16471 = cljs.core.get.call(null, inst_16468, new cljs.core.Keyword(null, "reads", "reads", -1215067361));
                      var inst_16472 = inst_16462;
                      var state_16528__$1 = function() {
                        var statearr_16536 = state_16528;
                        statearr_16536[11] = inst_16469;
                        statearr_16536[12] = inst_16471;
                        statearr_16536[13] = inst_16470;
                        statearr_16536[7] = inst_16472;
                        return statearr_16536;
                      }();
                      var statearr_16537_16580 = state_16528__$1;
                      statearr_16537_16580[2] = null;
                      statearr_16537_16580[1] = 5;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_16529 === 15) {
                        var state_16528__$1 = state_16528;
                        var statearr_16538_16581 = state_16528__$1;
                        statearr_16538_16581[2] = null;
                        statearr_16538_16581[1] = 16;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_16529 === 21) {
                          var inst_16480 = state_16528[10];
                          var inst_16472 = inst_16480;
                          var state_16528__$1 = function() {
                            var statearr_16539 = state_16528;
                            statearr_16539[7] = inst_16472;
                            return statearr_16539;
                          }();
                          var statearr_16540_16582 = state_16528__$1;
                          statearr_16540_16582[2] = null;
                          statearr_16540_16582[1] = 5;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_16529 === 13) {
                            var inst_16524 = state_16528[2];
                            var state_16528__$1 = state_16528;
                            var statearr_16541_16583 = state_16528__$1;
                            statearr_16541_16583[2] = inst_16524;
                            statearr_16541_16583[1] = 6;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_16529 === 22) {
                              var inst_16522 = state_16528[2];
                              var state_16528__$1 = state_16528;
                              var statearr_16542_16584 = state_16528__$1;
                              statearr_16542_16584[2] = inst_16522;
                              statearr_16542_16584[1] = 13;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_16529 === 6) {
                                var inst_16526 = state_16528[2];
                                var state_16528__$1 = state_16528;
                                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_16528__$1, inst_16526);
                              } else {
                                if (state_val_16529 === 25) {
                                  var state_16528__$1 = state_16528;
                                  var statearr_16543_16585 = state_16528__$1;
                                  statearr_16543_16585[2] = null;
                                  statearr_16543_16585[1] = 26;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_16529 === 17) {
                                    var inst_16502 = state_16528[14];
                                    var state_16528__$1 = state_16528;
                                    var statearr_16544_16586 = state_16528__$1;
                                    statearr_16544_16586[2] = inst_16502;
                                    statearr_16544_16586[1] = 19;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_16529 === 3) {
                                      var inst_16462 = state_16528[9];
                                      var state_16528__$1 = state_16528;
                                      var statearr_16545_16587 = state_16528__$1;
                                      statearr_16545_16587[2] = inst_16462;
                                      statearr_16545_16587[1] = 4;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_16529 === 12) {
                                        var inst_16488 = state_16528[15];
                                        var inst_16481 = state_16528[16];
                                        var inst_16502 = state_16528[14];
                                        var inst_16502__$1 = inst_16481.call(null, inst_16488);
                                        var state_16528__$1 = function() {
                                          var statearr_16546 = state_16528;
                                          statearr_16546[14] = inst_16502__$1;
                                          return statearr_16546;
                                        }();
                                        if (cljs.core.truth_(inst_16502__$1)) {
                                          var statearr_16547_16588 = state_16528__$1;
                                          statearr_16547_16588[1] = 17;
                                        } else {
                                          var statearr_16548_16589 = state_16528__$1;
                                          statearr_16548_16589[1] = 18;
                                        }
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_16529 === 2) {
                                          var inst_16462 = state_16528[9];
                                          var inst_16465 = cljs.core.apply.call(null, cljs.core.hash_map, inst_16462);
                                          var state_16528__$1 = state_16528;
                                          var statearr_16549_16590 = state_16528__$1;
                                          statearr_16549_16590[2] = inst_16465;
                                          statearr_16549_16590[1] = 4;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_16529 === 23) {
                                            var inst_16513 = state_16528[2];
                                            var state_16528__$1 = state_16528;
                                            if (cljs.core.truth_(inst_16513)) {
                                              var statearr_16550_16591 = state_16528__$1;
                                              statearr_16550_16591[1] = 24;
                                            } else {
                                              var statearr_16551_16592 = state_16528__$1;
                                              statearr_16551_16592[1] = 25;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_16529 === 19) {
                                              var inst_16510 = state_16528[2];
                                              var state_16528__$1 = state_16528;
                                              if (cljs.core.truth_(inst_16510)) {
                                                var statearr_16552_16593 = state_16528__$1;
                                                statearr_16552_16593[1] = 20;
                                              } else {
                                                var statearr_16553_16594 = state_16528__$1;
                                                statearr_16553_16594[1] = 21;
                                              }
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_16529 === 11) {
                                                var inst_16487 = state_16528[8];
                                                var inst_16493 = inst_16487 == null;
                                                var state_16528__$1 = state_16528;
                                                if (cljs.core.truth_(inst_16493)) {
                                                  var statearr_16554_16595 = state_16528__$1;
                                                  statearr_16554_16595[1] = 14;
                                                } else {
                                                  var statearr_16555_16596 = state_16528__$1;
                                                  statearr_16555_16596[1] = 15;
                                                }
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_16529 === 9) {
                                                  var inst_16480 = state_16528[10];
                                                  var inst_16480__$1 = state_16528[2];
                                                  var inst_16481 = cljs.core.get.call(null, inst_16480__$1, new cljs.core.Keyword(null, "solos", "solos", 1441458643));
                                                  var inst_16482 = cljs.core.get.call(null, inst_16480__$1, new cljs.core.Keyword(null, "mutes", "mutes", 1068806309));
                                                  var inst_16483 = cljs.core.get.call(null, inst_16480__$1, new cljs.core.Keyword(null, "reads", "reads", -1215067361));
                                                  var state_16528__$1 = function() {
                                                    var statearr_16556 = state_16528;
                                                    statearr_16556[17] = inst_16482;
                                                    statearr_16556[16] = inst_16481;
                                                    statearr_16556[10] = inst_16480__$1;
                                                    return statearr_16556;
                                                  }();
                                                  return cljs.core.async.ioc_alts_BANG_.call(null, state_16528__$1, 10, inst_16483);
                                                } else {
                                                  if (state_val_16529 === 5) {
                                                    var inst_16472 = state_16528[7];
                                                    var inst_16475 = cljs.core.seq_QMARK_.call(null, inst_16472);
                                                    var state_16528__$1 = state_16528;
                                                    if (inst_16475) {
                                                      var statearr_16557_16597 = state_16528__$1;
                                                      statearr_16557_16597[1] = 7;
                                                    } else {
                                                      var statearr_16558_16598 = state_16528__$1;
                                                      statearr_16558_16598[1] = 8;
                                                    }
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_16529 === 14) {
                                                      var inst_16488 = state_16528[15];
                                                      var inst_16495 = cljs.core.swap_BANG_.call(null, cs, cljs.core.dissoc, inst_16488);
                                                      var state_16528__$1 = state_16528;
                                                      var statearr_16559_16599 = state_16528__$1;
                                                      statearr_16559_16599[2] = inst_16495;
                                                      statearr_16559_16599[1] = 16;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_16529 === 26) {
                                                        var inst_16518 = state_16528[2];
                                                        var state_16528__$1 = state_16528;
                                                        var statearr_16560_16600 = state_16528__$1;
                                                        statearr_16560_16600[2] = inst_16518;
                                                        statearr_16560_16600[1] = 22;
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_16529 === 16) {
                                                          var inst_16498 = state_16528[2];
                                                          var inst_16499 = calc_state.call(null);
                                                          var inst_16472 = inst_16499;
                                                          var state_16528__$1 = function() {
                                                            var statearr_16561 = state_16528;
                                                            statearr_16561[18] = inst_16498;
                                                            statearr_16561[7] = inst_16472;
                                                            return statearr_16561;
                                                          }();
                                                          var statearr_16562_16601 = state_16528__$1;
                                                          statearr_16562_16601[2] = null;
                                                          statearr_16562_16601[1] = 5;
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          if (state_val_16529 === 10) {
                                                            var inst_16488 = state_16528[15];
                                                            var inst_16487 = state_16528[8];
                                                            var inst_16486 = state_16528[2];
                                                            var inst_16487__$1 = cljs.core.nth.call(null, inst_16486, 0, null);
                                                            var inst_16488__$1 = cljs.core.nth.call(null, inst_16486, 1, null);
                                                            var inst_16489 = inst_16487__$1 == null;
                                                            var inst_16490 = cljs.core._EQ_.call(null, inst_16488__$1, change);
                                                            var inst_16491 = inst_16489 || inst_16490;
                                                            var state_16528__$1 = function() {
                                                              var statearr_16563 = state_16528;
                                                              statearr_16563[15] = inst_16488__$1;
                                                              statearr_16563[8] = inst_16487__$1;
                                                              return statearr_16563;
                                                            }();
                                                            if (cljs.core.truth_(inst_16491)) {
                                                              var statearr_16564_16602 = state_16528__$1;
                                                              statearr_16564_16602[1] = 11;
                                                            } else {
                                                              var statearr_16565_16603 = state_16528__$1;
                                                              statearr_16565_16603[1] = 12;
                                                            }
                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                          } else {
                                                            if (state_val_16529 === 18) {
                                                              var inst_16482 = state_16528[17];
                                                              var inst_16488 = state_16528[15];
                                                              var inst_16481 = state_16528[16];
                                                              var inst_16505 = cljs.core.empty_QMARK_.call(null, inst_16481);
                                                              var inst_16506 = inst_16482.call(null, inst_16488);
                                                              var inst_16507 = cljs.core.not.call(null, inst_16506);
                                                              var inst_16508 = inst_16505 && inst_16507;
                                                              var state_16528__$1 = state_16528;
                                                              var statearr_16566_16604 = state_16528__$1;
                                                              statearr_16566_16604[2] = inst_16508;
                                                              statearr_16566_16604[1] = 19;
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              if (state_val_16529 === 8) {
                                                                var inst_16472 = state_16528[7];
                                                                var state_16528__$1 = state_16528;
                                                                var statearr_16567_16605 = state_16528__$1;
                                                                statearr_16567_16605[2] = inst_16472;
                                                                statearr_16567_16605[1] = 9;
                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                              } else {
                                                                return null;
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__12926__auto___16575, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m);
        return function(switch__12864__auto__, c__12926__auto___16575, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
          return function() {
            var cljs$core$async$mix_$_state_machine__12865__auto__ = null;
            var cljs$core$async$mix_$_state_machine__12865__auto____0 = function() {
              var statearr_16571 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_16571[0] = cljs$core$async$mix_$_state_machine__12865__auto__;
              statearr_16571[1] = 1;
              return statearr_16571;
            };
            var cljs$core$async$mix_$_state_machine__12865__auto____1 = function(state_16528) {
              while (true) {
                var ret_value__12866__auto__ = function() {
                  try {
                    while (true) {
                      var result__12867__auto__ = switch__12864__auto__.call(null, state_16528);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__12867__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__12867__auto__;
                      }
                      break;
                    }
                  } catch (e16572) {
                    if (e16572 instanceof Object) {
                      var ex__12868__auto__ = e16572;
                      var statearr_16573_16606 = state_16528;
                      statearr_16573_16606[5] = ex__12868__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_16528);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e16572;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__12866__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__16607 = state_16528;
                  state_16528 = G__16607;
                  continue;
                } else {
                  return ret_value__12866__auto__;
                }
                break;
              }
            };
            cljs$core$async$mix_$_state_machine__12865__auto__ = function(state_16528) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$mix_$_state_machine__12865__auto____0.call(this);
                case 1:
                  return cljs$core$async$mix_$_state_machine__12865__auto____1.call(this, state_16528);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$mix_$_state_machine__12865__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$mix_$_state_machine__12865__auto____0;
            cljs$core$async$mix_$_state_machine__12865__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$mix_$_state_machine__12865__auto____1;
            return cljs$core$async$mix_$_state_machine__12865__auto__;
          }();
        }(switch__12864__auto__, c__12926__auto___16575, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m);
      }();
      var state__12928__auto__ = function() {
        var statearr_16574 = f__12927__auto__.call(null);
        statearr_16574[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__12926__auto___16575;
        return statearr_16574;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__12928__auto__);
    };
  }(c__12926__auto___16575, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m));
  return m;
};
cljs.core.async.admix = function cljs$core$async$admix(mix, ch) {
  return cljs.core.async.admix_STAR_.call(null, mix, ch);
};
cljs.core.async.unmix = function cljs$core$async$unmix(mix, ch) {
  return cljs.core.async.unmix_STAR_.call(null, mix, ch);
};
cljs.core.async.unmix_all = function cljs$core$async$unmix_all(mix) {
  return cljs.core.async.unmix_all_STAR_.call(null, mix);
};
cljs.core.async.toggle = function cljs$core$async$toggle(mix, state_map) {
  return cljs.core.async.toggle_STAR_.call(null, mix, state_map);
};
cljs.core.async.solo_mode = function cljs$core$async$solo_mode(mix, mode) {
  return cljs.core.async.solo_mode_STAR_.call(null, mix, mode);
};
cljs.core.async.Pub = function() {
  var obj16609 = {};
  return obj16609;
}();
cljs.core.async.sub_STAR_ = function cljs$core$async$sub_STAR_(p, v, ch, close_QMARK_) {
  if (function() {
    var and__4297__auto__ = p;
    if (and__4297__auto__) {
      return p.cljs$core$async$Pub$sub_STAR_$arity$4;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return p.cljs$core$async$Pub$sub_STAR_$arity$4(p, v, ch, close_QMARK_);
  } else {
    var x__4945__auto__ = p == null ? null : p;
    return function() {
      var or__4309__auto__ = cljs.core.async.sub_STAR_[goog.typeOf(x__4945__auto__)];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core.async.sub_STAR_["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Pub.sub*", p);
        }
      }
    }().call(null, p, v, ch, close_QMARK_);
  }
};
cljs.core.async.unsub_STAR_ = function cljs$core$async$unsub_STAR_(p, v, ch) {
  if (function() {
    var and__4297__auto__ = p;
    if (and__4297__auto__) {
      return p.cljs$core$async$Pub$unsub_STAR_$arity$3;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return p.cljs$core$async$Pub$unsub_STAR_$arity$3(p, v, ch);
  } else {
    var x__4945__auto__ = p == null ? null : p;
    return function() {
      var or__4309__auto__ = cljs.core.async.unsub_STAR_[goog.typeOf(x__4945__auto__)];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core.async.unsub_STAR_["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Pub.unsub*", p);
        }
      }
    }().call(null, p, v, ch);
  }
};
cljs.core.async.unsub_all_STAR_ = function cljs$core$async$unsub_all_STAR_() {
  var G__16611 = arguments.length;
  switch(G__16611) {
    case 1:
      return cljs.core.async.unsub_all_STAR_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.unsub_all_STAR_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.unsub_all_STAR_.cljs$core$IFn$_invoke$arity$1 = function(p) {
  if (function() {
    var and__4297__auto__ = p;
    if (and__4297__auto__) {
      return p.cljs$core$async$Pub$unsub_all_STAR_$arity$1;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return p.cljs$core$async$Pub$unsub_all_STAR_$arity$1(p);
  } else {
    var x__4945__auto__ = p == null ? null : p;
    return function() {
      var or__4309__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__4945__auto__)];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core.async.unsub_all_STAR_["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
        }
      }
    }().call(null, p);
  }
};
cljs.core.async.unsub_all_STAR_.cljs$core$IFn$_invoke$arity$2 = function(p, v) {
  if (function() {
    var and__4297__auto__ = p;
    if (and__4297__auto__) {
      return p.cljs$core$async$Pub$unsub_all_STAR_$arity$2;
    } else {
      return and__4297__auto__;
    }
  }()) {
    return p.cljs$core$async$Pub$unsub_all_STAR_$arity$2(p, v);
  } else {
    var x__4945__auto__ = p == null ? null : p;
    return function() {
      var or__4309__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__4945__auto__)];
      if (or__4309__auto__) {
        return or__4309__auto__;
      } else {
        var or__4309__auto____$1 = cljs.core.async.unsub_all_STAR_["_"];
        if (or__4309__auto____$1) {
          return or__4309__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
        }
      }
    }().call(null, p, v);
  }
};
cljs.core.async.unsub_all_STAR_.cljs$lang$maxFixedArity = 2;
cljs.core.async.pub = function cljs$core$async$pub() {
  var G__16615 = arguments.length;
  switch(G__16615) {
    case 2:
      return cljs.core.async.pub.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.pub.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.pub.cljs$core$IFn$_invoke$arity$2 = function(ch, topic_fn) {
  return cljs.core.async.pub.call(null, ch, topic_fn, cljs.core.constantly.call(null, null));
};
cljs.core.async.pub.cljs$core$IFn$_invoke$arity$3 = function(ch, topic_fn, buf_fn) {
  var mults = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var ensure_mult = function(mults) {
    return function(topic) {
      var or__4309__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, mults), topic);
      if (cljs.core.truth_(or__4309__auto__)) {
        return or__4309__auto__;
      } else {
        return cljs.core.get.call(null, cljs.core.swap_BANG_.call(null, mults, function(or__4309__auto__, mults) {
          return function(p1__16613_SHARP_) {
            if (cljs.core.truth_(p1__16613_SHARP_.call(null, topic))) {
              return p1__16613_SHARP_;
            } else {
              return cljs.core.assoc.call(null, p1__16613_SHARP_, topic, cljs.core.async.mult.call(null, cljs.core.async.chan.call(null, buf_fn.call(null, topic))));
            }
          };
        }(or__4309__auto__, mults)), topic);
      }
    };
  }(mults);
  var p = function() {
    if (typeof cljs.core.async.t16616 !== "undefined") {
    } else {
      cljs.core.async.t16616 = function(ch, topic_fn, buf_fn, mults, ensure_mult, meta16617) {
        this.ch = ch;
        this.topic_fn = topic_fn;
        this.buf_fn = buf_fn;
        this.mults = mults;
        this.ensure_mult = ensure_mult;
        this.meta16617 = meta16617;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
        this.cljs$lang$protocol_mask$partition1$ = 0;
      };
      cljs.core.async.t16616.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(mults, ensure_mult) {
        return function(_16618, meta16617__$1) {
          var self__ = this;
          var _16618__$1 = this;
          return new cljs.core.async.t16616(self__.ch, self__.topic_fn, self__.buf_fn, self__.mults, self__.ensure_mult, meta16617__$1);
        };
      }(mults, ensure_mult);
      cljs.core.async.t16616.prototype.cljs$core$IMeta$_meta$arity$1 = function(mults, ensure_mult) {
        return function(_16618) {
          var self__ = this;
          var _16618__$1 = this;
          return self__.meta16617;
        };
      }(mults, ensure_mult);
      cljs.core.async.t16616.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t16616.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(mults, ensure_mult) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.ch;
        };
      }(mults, ensure_mult);
      cljs.core.async.t16616.prototype.cljs$core$async$Pub$ = true;
      cljs.core.async.t16616.prototype.cljs$core$async$Pub$sub_STAR_$arity$4 = function(mults, ensure_mult) {
        return function(p, topic, ch__$1, close_QMARK_) {
          var self__ = this;
          var p__$1 = this;
          var m = self__.ensure_mult.call(null, topic);
          return cljs.core.async.tap.call(null, m, ch__$1, close_QMARK_);
        };
      }(mults, ensure_mult);
      cljs.core.async.t16616.prototype.cljs$core$async$Pub$unsub_STAR_$arity$3 = function(mults, ensure_mult) {
        return function(p, topic, ch__$1) {
          var self__ = this;
          var p__$1 = this;
          var temp__4422__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, self__.mults), topic);
          if (cljs.core.truth_(temp__4422__auto__)) {
            var m = temp__4422__auto__;
            return cljs.core.async.untap.call(null, m, ch__$1);
          } else {
            return null;
          }
        };
      }(mults, ensure_mult);
      cljs.core.async.t16616.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$1 = function(mults, ensure_mult) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return cljs.core.reset_BANG_.call(null, self__.mults, cljs.core.PersistentArrayMap.EMPTY);
        };
      }(mults, ensure_mult);
      cljs.core.async.t16616.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$2 = function(mults, ensure_mult) {
        return function(_, topic) {
          var self__ = this;
          var ___$1 = this;
          return cljs.core.swap_BANG_.call(null, self__.mults, cljs.core.dissoc, topic);
        };
      }(mults, ensure_mult);
      cljs.core.async.t16616.getBasis = function(mults, ensure_mult) {
        return function() {
          return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "ch", "ch", 1085813622, null), new cljs.core.Symbol(null, "topic-fn", "topic-fn", -862449736, null), new cljs.core.Symbol(null, "buf-fn", "buf-fn", -1200281591, null), new cljs.core.Symbol(null, "mults", "mults", -461114485, null), new cljs.core.Symbol(null, "ensure-mult", "ensure-mult", 1796584816, null), new cljs.core.Symbol(null, "meta16617", "meta16617", 83494773, null)], 
          null);
        };
      }(mults, ensure_mult);
      cljs.core.async.t16616.cljs$lang$type = true;
      cljs.core.async.t16616.cljs$lang$ctorStr = "cljs.core.async/t16616";
      cljs.core.async.t16616.cljs$lang$ctorPrWriter = function(mults, ensure_mult) {
        return function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
          return cljs.core._write.call(null, writer__4889__auto__, "cljs.core.async/t16616");
        };
      }(mults, ensure_mult);
      cljs.core.async.__GT_t16616 = function(mults, ensure_mult) {
        return function cljs$core$async$__GT_t16616(ch__$1, topic_fn__$1, buf_fn__$1, mults__$1, ensure_mult__$1, meta16617) {
          return new cljs.core.async.t16616(ch__$1, topic_fn__$1, buf_fn__$1, mults__$1, ensure_mult__$1, meta16617);
        };
      }(mults, ensure_mult);
    }
    return new cljs.core.async.t16616(ch, topic_fn, buf_fn, mults, ensure_mult, cljs.core.PersistentArrayMap.EMPTY);
  }();
  var c__12926__auto___16739 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__12926__auto___16739, mults, ensure_mult, p) {
    return function() {
      var f__12927__auto__ = function() {
        var switch__12864__auto__ = function(c__12926__auto___16739, mults, ensure_mult, p) {
          return function(state_16690) {
            var state_val_16691 = state_16690[1];
            if (state_val_16691 === 7) {
              var inst_16686 = state_16690[2];
              var state_16690__$1 = state_16690;
              var statearr_16692_16740 = state_16690__$1;
              statearr_16692_16740[2] = inst_16686;
              statearr_16692_16740[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_16691 === 20) {
                var state_16690__$1 = state_16690;
                var statearr_16693_16741 = state_16690__$1;
                statearr_16693_16741[2] = null;
                statearr_16693_16741[1] = 21;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_16691 === 1) {
                  var state_16690__$1 = state_16690;
                  var statearr_16694_16742 = state_16690__$1;
                  statearr_16694_16742[2] = null;
                  statearr_16694_16742[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_16691 === 24) {
                    var inst_16669 = state_16690[7];
                    var inst_16678 = cljs.core.swap_BANG_.call(null, mults, cljs.core.dissoc, inst_16669);
                    var state_16690__$1 = state_16690;
                    var statearr_16695_16743 = state_16690__$1;
                    statearr_16695_16743[2] = inst_16678;
                    statearr_16695_16743[1] = 25;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_16691 === 4) {
                      var inst_16621 = state_16690[8];
                      var inst_16621__$1 = state_16690[2];
                      var inst_16622 = inst_16621__$1 == null;
                      var state_16690__$1 = function() {
                        var statearr_16696 = state_16690;
                        statearr_16696[8] = inst_16621__$1;
                        return statearr_16696;
                      }();
                      if (cljs.core.truth_(inst_16622)) {
                        var statearr_16697_16744 = state_16690__$1;
                        statearr_16697_16744[1] = 5;
                      } else {
                        var statearr_16698_16745 = state_16690__$1;
                        statearr_16698_16745[1] = 6;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_16691 === 15) {
                        var inst_16663 = state_16690[2];
                        var state_16690__$1 = state_16690;
                        var statearr_16699_16746 = state_16690__$1;
                        statearr_16699_16746[2] = inst_16663;
                        statearr_16699_16746[1] = 12;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_16691 === 21) {
                          var inst_16683 = state_16690[2];
                          var state_16690__$1 = function() {
                            var statearr_16700 = state_16690;
                            statearr_16700[9] = inst_16683;
                            return statearr_16700;
                          }();
                          var statearr_16701_16747 = state_16690__$1;
                          statearr_16701_16747[2] = null;
                          statearr_16701_16747[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_16691 === 13) {
                            var inst_16645 = state_16690[10];
                            var inst_16647 = cljs.core.chunked_seq_QMARK_.call(null, inst_16645);
                            var state_16690__$1 = state_16690;
                            if (inst_16647) {
                              var statearr_16702_16748 = state_16690__$1;
                              statearr_16702_16748[1] = 16;
                            } else {
                              var statearr_16703_16749 = state_16690__$1;
                              statearr_16703_16749[1] = 17;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_16691 === 22) {
                              var inst_16675 = state_16690[2];
                              var state_16690__$1 = state_16690;
                              if (cljs.core.truth_(inst_16675)) {
                                var statearr_16704_16750 = state_16690__$1;
                                statearr_16704_16750[1] = 23;
                              } else {
                                var statearr_16705_16751 = state_16690__$1;
                                statearr_16705_16751[1] = 24;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_16691 === 6) {
                                var inst_16669 = state_16690[7];
                                var inst_16621 = state_16690[8];
                                var inst_16671 = state_16690[11];
                                var inst_16669__$1 = topic_fn.call(null, inst_16621);
                                var inst_16670 = cljs.core.deref.call(null, mults);
                                var inst_16671__$1 = cljs.core.get.call(null, inst_16670, inst_16669__$1);
                                var state_16690__$1 = function() {
                                  var statearr_16706 = state_16690;
                                  statearr_16706[7] = inst_16669__$1;
                                  statearr_16706[11] = inst_16671__$1;
                                  return statearr_16706;
                                }();
                                if (cljs.core.truth_(inst_16671__$1)) {
                                  var statearr_16707_16752 = state_16690__$1;
                                  statearr_16707_16752[1] = 19;
                                } else {
                                  var statearr_16708_16753 = state_16690__$1;
                                  statearr_16708_16753[1] = 20;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_16691 === 25) {
                                  var inst_16680 = state_16690[2];
                                  var state_16690__$1 = state_16690;
                                  var statearr_16709_16754 = state_16690__$1;
                                  statearr_16709_16754[2] = inst_16680;
                                  statearr_16709_16754[1] = 21;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_16691 === 17) {
                                    var inst_16645 = state_16690[10];
                                    var inst_16654 = cljs.core.first.call(null, inst_16645);
                                    var inst_16655 = cljs.core.async.muxch_STAR_.call(null, inst_16654);
                                    var inst_16656 = cljs.core.async.close_BANG_.call(null, inst_16655);
                                    var inst_16657 = cljs.core.next.call(null, inst_16645);
                                    var inst_16631 = inst_16657;
                                    var inst_16632 = null;
                                    var inst_16633 = 0;
                                    var inst_16634 = 0;
                                    var state_16690__$1 = function() {
                                      var statearr_16710 = state_16690;
                                      statearr_16710[12] = inst_16634;
                                      statearr_16710[13] = inst_16656;
                                      statearr_16710[14] = inst_16633;
                                      statearr_16710[15] = inst_16631;
                                      statearr_16710[16] = inst_16632;
                                      return statearr_16710;
                                    }();
                                    var statearr_16711_16755 = state_16690__$1;
                                    statearr_16711_16755[2] = null;
                                    statearr_16711_16755[1] = 8;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_16691 === 3) {
                                      var inst_16688 = state_16690[2];
                                      var state_16690__$1 = state_16690;
                                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_16690__$1, inst_16688);
                                    } else {
                                      if (state_val_16691 === 12) {
                                        var inst_16665 = state_16690[2];
                                        var state_16690__$1 = state_16690;
                                        var statearr_16712_16756 = state_16690__$1;
                                        statearr_16712_16756[2] = inst_16665;
                                        statearr_16712_16756[1] = 9;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_16691 === 2) {
                                          var state_16690__$1 = state_16690;
                                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_16690__$1, 4, ch);
                                        } else {
                                          if (state_val_16691 === 23) {
                                            var state_16690__$1 = state_16690;
                                            var statearr_16713_16757 = state_16690__$1;
                                            statearr_16713_16757[2] = null;
                                            statearr_16713_16757[1] = 25;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_16691 === 19) {
                                              var inst_16621 = state_16690[8];
                                              var inst_16671 = state_16690[11];
                                              var inst_16673 = cljs.core.async.muxch_STAR_.call(null, inst_16671);
                                              var state_16690__$1 = state_16690;
                                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_16690__$1, 22, inst_16673, inst_16621);
                                            } else {
                                              if (state_val_16691 === 11) {
                                                var inst_16631 = state_16690[15];
                                                var inst_16645 = state_16690[10];
                                                var inst_16645__$1 = cljs.core.seq.call(null, inst_16631);
                                                var state_16690__$1 = function() {
                                                  var statearr_16714 = state_16690;
                                                  statearr_16714[10] = inst_16645__$1;
                                                  return statearr_16714;
                                                }();
                                                if (inst_16645__$1) {
                                                  var statearr_16715_16758 = state_16690__$1;
                                                  statearr_16715_16758[1] = 13;
                                                } else {
                                                  var statearr_16716_16759 = state_16690__$1;
                                                  statearr_16716_16759[1] = 14;
                                                }
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_16691 === 9) {
                                                  var inst_16667 = state_16690[2];
                                                  var state_16690__$1 = state_16690;
                                                  var statearr_16717_16760 = state_16690__$1;
                                                  statearr_16717_16760[2] = inst_16667;
                                                  statearr_16717_16760[1] = 7;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_16691 === 5) {
                                                    var inst_16628 = cljs.core.deref.call(null, mults);
                                                    var inst_16629 = cljs.core.vals.call(null, inst_16628);
                                                    var inst_16630 = cljs.core.seq.call(null, inst_16629);
                                                    var inst_16631 = inst_16630;
                                                    var inst_16632 = null;
                                                    var inst_16633 = 0;
                                                    var inst_16634 = 0;
                                                    var state_16690__$1 = function() {
                                                      var statearr_16718 = state_16690;
                                                      statearr_16718[12] = inst_16634;
                                                      statearr_16718[14] = inst_16633;
                                                      statearr_16718[15] = inst_16631;
                                                      statearr_16718[16] = inst_16632;
                                                      return statearr_16718;
                                                    }();
                                                    var statearr_16719_16761 = state_16690__$1;
                                                    statearr_16719_16761[2] = null;
                                                    statearr_16719_16761[1] = 8;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_16691 === 14) {
                                                      var state_16690__$1 = state_16690;
                                                      var statearr_16723_16762 = state_16690__$1;
                                                      statearr_16723_16762[2] = null;
                                                      statearr_16723_16762[1] = 15;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_16691 === 16) {
                                                        var inst_16645 = state_16690[10];
                                                        var inst_16649 = cljs.core.chunk_first.call(null, inst_16645);
                                                        var inst_16650 = cljs.core.chunk_rest.call(null, inst_16645);
                                                        var inst_16651 = cljs.core.count.call(null, inst_16649);
                                                        var inst_16631 = inst_16650;
                                                        var inst_16632 = inst_16649;
                                                        var inst_16633 = inst_16651;
                                                        var inst_16634 = 0;
                                                        var state_16690__$1 = function() {
                                                          var statearr_16724 = state_16690;
                                                          statearr_16724[12] = inst_16634;
                                                          statearr_16724[14] = inst_16633;
                                                          statearr_16724[15] = inst_16631;
                                                          statearr_16724[16] = inst_16632;
                                                          return statearr_16724;
                                                        }();
                                                        var statearr_16725_16763 = state_16690__$1;
                                                        statearr_16725_16763[2] = null;
                                                        statearr_16725_16763[1] = 8;
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_16691 === 10) {
                                                          var inst_16634 = state_16690[12];
                                                          var inst_16633 = state_16690[14];
                                                          var inst_16631 = state_16690[15];
                                                          var inst_16632 = state_16690[16];
                                                          var inst_16639 = cljs.core._nth.call(null, inst_16632, inst_16634);
                                                          var inst_16640 = cljs.core.async.muxch_STAR_.call(null, inst_16639);
                                                          var inst_16641 = cljs.core.async.close_BANG_.call(null, inst_16640);
                                                          var inst_16642 = inst_16634 + 1;
                                                          var tmp16720 = inst_16633;
                                                          var tmp16721 = inst_16631;
                                                          var tmp16722 = inst_16632;
                                                          var inst_16631__$1 = tmp16721;
                                                          var inst_16632__$1 = tmp16722;
                                                          var inst_16633__$1 = tmp16720;
                                                          var inst_16634__$1 = inst_16642;
                                                          var state_16690__$1 = function() {
                                                            var statearr_16726 = state_16690;
                                                            statearr_16726[17] = inst_16641;
                                                            statearr_16726[12] = inst_16634__$1;
                                                            statearr_16726[14] = inst_16633__$1;
                                                            statearr_16726[15] = inst_16631__$1;
                                                            statearr_16726[16] = inst_16632__$1;
                                                            return statearr_16726;
                                                          }();
                                                          var statearr_16727_16764 = state_16690__$1;
                                                          statearr_16727_16764[2] = null;
                                                          statearr_16727_16764[1] = 8;
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          if (state_val_16691 === 18) {
                                                            var inst_16660 = state_16690[2];
                                                            var state_16690__$1 = state_16690;
                                                            var statearr_16728_16765 = state_16690__$1;
                                                            statearr_16728_16765[2] = inst_16660;
                                                            statearr_16728_16765[1] = 15;
                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                          } else {
                                                            if (state_val_16691 === 8) {
                                                              var inst_16634 = state_16690[12];
                                                              var inst_16633 = state_16690[14];
                                                              var inst_16636 = inst_16634 < inst_16633;
                                                              var inst_16637 = inst_16636;
                                                              var state_16690__$1 = state_16690;
                                                              if (cljs.core.truth_(inst_16637)) {
                                                                var statearr_16729_16766 = state_16690__$1;
                                                                statearr_16729_16766[1] = 10;
                                                              } else {
                                                                var statearr_16730_16767 = state_16690__$1;
                                                                statearr_16730_16767[1] = 11;
                                                              }
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              return null;
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__12926__auto___16739, mults, ensure_mult, p);
        return function(switch__12864__auto__, c__12926__auto___16739, mults, ensure_mult, p) {
          return function() {
            var cljs$core$async$state_machine__12865__auto__ = null;
            var cljs$core$async$state_machine__12865__auto____0 = function() {
              var statearr_16734 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_16734[0] = cljs$core$async$state_machine__12865__auto__;
              statearr_16734[1] = 1;
              return statearr_16734;
            };
            var cljs$core$async$state_machine__12865__auto____1 = function(state_16690) {
              while (true) {
                var ret_value__12866__auto__ = function() {
                  try {
                    while (true) {
                      var result__12867__auto__ = switch__12864__auto__.call(null, state_16690);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__12867__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__12867__auto__;
                      }
                      break;
                    }
                  } catch (e16735) {
                    if (e16735 instanceof Object) {
                      var ex__12868__auto__ = e16735;
                      var statearr_16736_16768 = state_16690;
                      statearr_16736_16768[5] = ex__12868__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_16690);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e16735;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__12866__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__16769 = state_16690;
                  state_16690 = G__16769;
                  continue;
                } else {
                  return ret_value__12866__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__12865__auto__ = function(state_16690) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__12865__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__12865__auto____1.call(this, state_16690);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__12865__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__12865__auto____0;
            cljs$core$async$state_machine__12865__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__12865__auto____1;
            return cljs$core$async$state_machine__12865__auto__;
          }();
        }(switch__12864__auto__, c__12926__auto___16739, mults, ensure_mult, p);
      }();
      var state__12928__auto__ = function() {
        var statearr_16737 = f__12927__auto__.call(null);
        statearr_16737[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__12926__auto___16739;
        return statearr_16737;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__12928__auto__);
    };
  }(c__12926__auto___16739, mults, ensure_mult, p));
  return p;
};
cljs.core.async.pub.cljs$lang$maxFixedArity = 3;
cljs.core.async.sub = function cljs$core$async$sub() {
  var G__16771 = arguments.length;
  switch(G__16771) {
    case 3:
      return cljs.core.async.sub.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.async.sub.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.sub.cljs$core$IFn$_invoke$arity$3 = function(p, topic, ch) {
  return cljs.core.async.sub.call(null, p, topic, ch, true);
};
cljs.core.async.sub.cljs$core$IFn$_invoke$arity$4 = function(p, topic, ch, close_QMARK_) {
  return cljs.core.async.sub_STAR_.call(null, p, topic, ch, close_QMARK_);
};
cljs.core.async.sub.cljs$lang$maxFixedArity = 4;
cljs.core.async.unsub = function cljs$core$async$unsub(p, topic, ch) {
  return cljs.core.async.unsub_STAR_.call(null, p, topic, ch);
};
cljs.core.async.unsub_all = function cljs$core$async$unsub_all() {
  var G__16774 = arguments.length;
  switch(G__16774) {
    case 1:
      return cljs.core.async.unsub_all.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.unsub_all.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.unsub_all.cljs$core$IFn$_invoke$arity$1 = function(p) {
  return cljs.core.async.unsub_all_STAR_.call(null, p);
};
cljs.core.async.unsub_all.cljs$core$IFn$_invoke$arity$2 = function(p, topic) {
  return cljs.core.async.unsub_all_STAR_.call(null, p, topic);
};
cljs.core.async.unsub_all.cljs$lang$maxFixedArity = 2;
cljs.core.async.map = function cljs$core$async$map() {
  var G__16777 = arguments.length;
  switch(G__16777) {
    case 2:
      return cljs.core.async.map.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.map.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.map.cljs$core$IFn$_invoke$arity$2 = function(f, chs) {
  return cljs.core.async.map.call(null, f, chs, null);
};
cljs.core.async.map.cljs$core$IFn$_invoke$arity$3 = function(f, chs, buf_or_n) {
  var chs__$1 = cljs.core.vec.call(null, chs);
  var out = cljs.core.async.chan.call(null, buf_or_n);
  var cnt = cljs.core.count.call(null, chs__$1);
  var rets = cljs.core.object_array.call(null, cnt);
  var dchan = cljs.core.async.chan.call(null, 1);
  var dctr = cljs.core.atom.call(null, null);
  var done = cljs.core.mapv.call(null, function(chs__$1, out, cnt, rets, dchan, dctr) {
    return function(i) {
      return function(chs__$1, out, cnt, rets, dchan, dctr) {
        return function(ret) {
          rets[i] = ret;
          if (cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
            return cljs.core.async.put_BANG_.call(null, dchan, rets.slice(0));
          } else {
            return null;
          }
        };
      }(chs__$1, out, cnt, rets, dchan, dctr);
    };
  }(chs__$1, out, cnt, rets, dchan, dctr), cljs.core.range.call(null, cnt));
  var c__12926__auto___16847 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__12926__auto___16847, chs__$1, out, cnt, rets, dchan, dctr, done) {
    return function() {
      var f__12927__auto__ = function() {
        var switch__12864__auto__ = function(c__12926__auto___16847, chs__$1, out, cnt, rets, dchan, dctr, done) {
          return function(state_16816) {
            var state_val_16817 = state_16816[1];
            if (state_val_16817 === 7) {
              var state_16816__$1 = state_16816;
              var statearr_16818_16848 = state_16816__$1;
              statearr_16818_16848[2] = null;
              statearr_16818_16848[1] = 8;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_16817 === 1) {
                var state_16816__$1 = state_16816;
                var statearr_16819_16849 = state_16816__$1;
                statearr_16819_16849[2] = null;
                statearr_16819_16849[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_16817 === 4) {
                  var inst_16780 = state_16816[7];
                  var inst_16782 = inst_16780 < cnt;
                  var state_16816__$1 = state_16816;
                  if (cljs.core.truth_(inst_16782)) {
                    var statearr_16820_16850 = state_16816__$1;
                    statearr_16820_16850[1] = 6;
                  } else {
                    var statearr_16821_16851 = state_16816__$1;
                    statearr_16821_16851[1] = 7;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_16817 === 15) {
                    var inst_16812 = state_16816[2];
                    var state_16816__$1 = state_16816;
                    var statearr_16822_16852 = state_16816__$1;
                    statearr_16822_16852[2] = inst_16812;
                    statearr_16822_16852[1] = 3;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_16817 === 13) {
                      var inst_16805 = cljs.core.async.close_BANG_.call(null, out);
                      var state_16816__$1 = state_16816;
                      var statearr_16823_16853 = state_16816__$1;
                      statearr_16823_16853[2] = inst_16805;
                      statearr_16823_16853[1] = 15;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_16817 === 6) {
                        var state_16816__$1 = state_16816;
                        var statearr_16824_16854 = state_16816__$1;
                        statearr_16824_16854[2] = null;
                        statearr_16824_16854[1] = 11;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_16817 === 3) {
                          var inst_16814 = state_16816[2];
                          var state_16816__$1 = state_16816;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_16816__$1, inst_16814);
                        } else {
                          if (state_val_16817 === 12) {
                            var inst_16802 = state_16816[8];
                            var inst_16802__$1 = state_16816[2];
                            var inst_16803 = cljs.core.some.call(null, cljs.core.nil_QMARK_, inst_16802__$1);
                            var state_16816__$1 = function() {
                              var statearr_16825 = state_16816;
                              statearr_16825[8] = inst_16802__$1;
                              return statearr_16825;
                            }();
                            if (cljs.core.truth_(inst_16803)) {
                              var statearr_16826_16855 = state_16816__$1;
                              statearr_16826_16855[1] = 13;
                            } else {
                              var statearr_16827_16856 = state_16816__$1;
                              statearr_16827_16856[1] = 14;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_16817 === 2) {
                              var inst_16779 = cljs.core.reset_BANG_.call(null, dctr, cnt);
                              var inst_16780 = 0;
                              var state_16816__$1 = function() {
                                var statearr_16828 = state_16816;
                                statearr_16828[9] = inst_16779;
                                statearr_16828[7] = inst_16780;
                                return statearr_16828;
                              }();
                              var statearr_16829_16857 = state_16816__$1;
                              statearr_16829_16857[2] = null;
                              statearr_16829_16857[1] = 4;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_16817 === 11) {
                                var inst_16780 = state_16816[7];
                                var _ = cljs.core.async.impl.ioc_helpers.add_exception_frame.call(null, state_16816, 10, Object, null, 9);
                                var inst_16789 = chs__$1.call(null, inst_16780);
                                var inst_16790 = done.call(null, inst_16780);
                                var inst_16791 = cljs.core.async.take_BANG_.call(null, inst_16789, inst_16790);
                                var state_16816__$1 = state_16816;
                                var statearr_16830_16858 = state_16816__$1;
                                statearr_16830_16858[2] = inst_16791;
                                cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_16816__$1);
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_16817 === 9) {
                                  var inst_16780 = state_16816[7];
                                  var inst_16793 = state_16816[2];
                                  var inst_16794 = inst_16780 + 1;
                                  var inst_16780__$1 = inst_16794;
                                  var state_16816__$1 = function() {
                                    var statearr_16831 = state_16816;
                                    statearr_16831[10] = inst_16793;
                                    statearr_16831[7] = inst_16780__$1;
                                    return statearr_16831;
                                  }();
                                  var statearr_16832_16859 = state_16816__$1;
                                  statearr_16832_16859[2] = null;
                                  statearr_16832_16859[1] = 4;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_16817 === 5) {
                                    var inst_16800 = state_16816[2];
                                    var state_16816__$1 = function() {
                                      var statearr_16833 = state_16816;
                                      statearr_16833[11] = inst_16800;
                                      return statearr_16833;
                                    }();
                                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_16816__$1, 12, dchan);
                                  } else {
                                    if (state_val_16817 === 14) {
                                      var inst_16802 = state_16816[8];
                                      var inst_16807 = cljs.core.apply.call(null, f, inst_16802);
                                      var state_16816__$1 = state_16816;
                                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_16816__$1, 16, out, inst_16807);
                                    } else {
                                      if (state_val_16817 === 16) {
                                        var inst_16809 = state_16816[2];
                                        var state_16816__$1 = function() {
                                          var statearr_16834 = state_16816;
                                          statearr_16834[12] = inst_16809;
                                          return statearr_16834;
                                        }();
                                        var statearr_16835_16860 = state_16816__$1;
                                        statearr_16835_16860[2] = null;
                                        statearr_16835_16860[1] = 2;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_16817 === 10) {
                                          var inst_16784 = state_16816[2];
                                          var inst_16785 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                                          var state_16816__$1 = function() {
                                            var statearr_16836 = state_16816;
                                            statearr_16836[13] = inst_16784;
                                            return statearr_16836;
                                          }();
                                          var statearr_16837_16861 = state_16816__$1;
                                          statearr_16837_16861[2] = inst_16785;
                                          cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_16816__$1);
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_16817 === 8) {
                                            var inst_16798 = state_16816[2];
                                            var state_16816__$1 = state_16816;
                                            var statearr_16838_16862 = state_16816__$1;
                                            statearr_16838_16862[2] = inst_16798;
                                            statearr_16838_16862[1] = 5;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            return null;
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__12926__auto___16847, chs__$1, out, cnt, rets, dchan, dctr, done);
        return function(switch__12864__auto__, c__12926__auto___16847, chs__$1, out, cnt, rets, dchan, dctr, done) {
          return function() {
            var cljs$core$async$state_machine__12865__auto__ = null;
            var cljs$core$async$state_machine__12865__auto____0 = function() {
              var statearr_16842 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_16842[0] = cljs$core$async$state_machine__12865__auto__;
              statearr_16842[1] = 1;
              return statearr_16842;
            };
            var cljs$core$async$state_machine__12865__auto____1 = function(state_16816) {
              while (true) {
                var ret_value__12866__auto__ = function() {
                  try {
                    while (true) {
                      var result__12867__auto__ = switch__12864__auto__.call(null, state_16816);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__12867__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__12867__auto__;
                      }
                      break;
                    }
                  } catch (e16843) {
                    if (e16843 instanceof Object) {
                      var ex__12868__auto__ = e16843;
                      var statearr_16844_16863 = state_16816;
                      statearr_16844_16863[5] = ex__12868__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_16816);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e16843;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__12866__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__16864 = state_16816;
                  state_16816 = G__16864;
                  continue;
                } else {
                  return ret_value__12866__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__12865__auto__ = function(state_16816) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__12865__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__12865__auto____1.call(this, state_16816);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__12865__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__12865__auto____0;
            cljs$core$async$state_machine__12865__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__12865__auto____1;
            return cljs$core$async$state_machine__12865__auto__;
          }();
        }(switch__12864__auto__, c__12926__auto___16847, chs__$1, out, cnt, rets, dchan, dctr, done);
      }();
      var state__12928__auto__ = function() {
        var statearr_16845 = f__12927__auto__.call(null);
        statearr_16845[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__12926__auto___16847;
        return statearr_16845;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__12928__auto__);
    };
  }(c__12926__auto___16847, chs__$1, out, cnt, rets, dchan, dctr, done));
  return out;
};
cljs.core.async.map.cljs$lang$maxFixedArity = 3;
cljs.core.async.merge = function cljs$core$async$merge() {
  var G__16867 = arguments.length;
  switch(G__16867) {
    case 1:
      return cljs.core.async.merge.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.merge.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.merge.cljs$core$IFn$_invoke$arity$1 = function(chs) {
  return cljs.core.async.merge.call(null, chs, null);
};
cljs.core.async.merge.cljs$core$IFn$_invoke$arity$2 = function(chs, buf_or_n) {
  var out = cljs.core.async.chan.call(null, buf_or_n);
  var c__12926__auto___16922 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__12926__auto___16922, out) {
    return function() {
      var f__12927__auto__ = function() {
        var switch__12864__auto__ = function(c__12926__auto___16922, out) {
          return function(state_16897) {
            var state_val_16898 = state_16897[1];
            if (state_val_16898 === 7) {
              var inst_16877 = state_16897[7];
              var inst_16876 = state_16897[8];
              var inst_16876__$1 = state_16897[2];
              var inst_16877__$1 = cljs.core.nth.call(null, inst_16876__$1, 0, null);
              var inst_16878 = cljs.core.nth.call(null, inst_16876__$1, 1, null);
              var inst_16879 = inst_16877__$1 == null;
              var state_16897__$1 = function() {
                var statearr_16899 = state_16897;
                statearr_16899[7] = inst_16877__$1;
                statearr_16899[9] = inst_16878;
                statearr_16899[8] = inst_16876__$1;
                return statearr_16899;
              }();
              if (cljs.core.truth_(inst_16879)) {
                var statearr_16900_16923 = state_16897__$1;
                statearr_16900_16923[1] = 8;
              } else {
                var statearr_16901_16924 = state_16897__$1;
                statearr_16901_16924[1] = 9;
              }
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_16898 === 1) {
                var inst_16868 = cljs.core.vec.call(null, chs);
                var inst_16869 = inst_16868;
                var state_16897__$1 = function() {
                  var statearr_16902 = state_16897;
                  statearr_16902[10] = inst_16869;
                  return statearr_16902;
                }();
                var statearr_16903_16925 = state_16897__$1;
                statearr_16903_16925[2] = null;
                statearr_16903_16925[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_16898 === 4) {
                  var inst_16869 = state_16897[10];
                  var state_16897__$1 = state_16897;
                  return cljs.core.async.ioc_alts_BANG_.call(null, state_16897__$1, 7, inst_16869);
                } else {
                  if (state_val_16898 === 6) {
                    var inst_16893 = state_16897[2];
                    var state_16897__$1 = state_16897;
                    var statearr_16904_16926 = state_16897__$1;
                    statearr_16904_16926[2] = inst_16893;
                    statearr_16904_16926[1] = 3;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_16898 === 3) {
                      var inst_16895 = state_16897[2];
                      var state_16897__$1 = state_16897;
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_16897__$1, inst_16895);
                    } else {
                      if (state_val_16898 === 2) {
                        var inst_16869 = state_16897[10];
                        var inst_16871 = cljs.core.count.call(null, inst_16869);
                        var inst_16872 = inst_16871 > 0;
                        var state_16897__$1 = state_16897;
                        if (cljs.core.truth_(inst_16872)) {
                          var statearr_16906_16927 = state_16897__$1;
                          statearr_16906_16927[1] = 4;
                        } else {
                          var statearr_16907_16928 = state_16897__$1;
                          statearr_16907_16928[1] = 5;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_16898 === 11) {
                          var inst_16869 = state_16897[10];
                          var inst_16886 = state_16897[2];
                          var tmp16905 = inst_16869;
                          var inst_16869__$1 = tmp16905;
                          var state_16897__$1 = function() {
                            var statearr_16908 = state_16897;
                            statearr_16908[11] = inst_16886;
                            statearr_16908[10] = inst_16869__$1;
                            return statearr_16908;
                          }();
                          var statearr_16909_16929 = state_16897__$1;
                          statearr_16909_16929[2] = null;
                          statearr_16909_16929[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_16898 === 9) {
                            var inst_16877 = state_16897[7];
                            var state_16897__$1 = state_16897;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_16897__$1, 11, out, inst_16877);
                          } else {
                            if (state_val_16898 === 5) {
                              var inst_16891 = cljs.core.async.close_BANG_.call(null, out);
                              var state_16897__$1 = state_16897;
                              var statearr_16910_16930 = state_16897__$1;
                              statearr_16910_16930[2] = inst_16891;
                              statearr_16910_16930[1] = 6;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_16898 === 10) {
                                var inst_16889 = state_16897[2];
                                var state_16897__$1 = state_16897;
                                var statearr_16911_16931 = state_16897__$1;
                                statearr_16911_16931[2] = inst_16889;
                                statearr_16911_16931[1] = 6;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_16898 === 8) {
                                  var inst_16877 = state_16897[7];
                                  var inst_16878 = state_16897[9];
                                  var inst_16876 = state_16897[8];
                                  var inst_16869 = state_16897[10];
                                  var inst_16881 = function() {
                                    var cs = inst_16869;
                                    var vec__16874 = inst_16876;
                                    var v = inst_16877;
                                    var c = inst_16878;
                                    return function(cs, vec__16874, v, c, inst_16877, inst_16878, inst_16876, inst_16869, state_val_16898, c__12926__auto___16922, out) {
                                      return function(p1__16865_SHARP_) {
                                        return cljs.core.not_EQ_.call(null, c, p1__16865_SHARP_);
                                      };
                                    }(cs, vec__16874, v, c, inst_16877, inst_16878, inst_16876, inst_16869, state_val_16898, c__12926__auto___16922, out);
                                  }();
                                  var inst_16882 = cljs.core.filterv.call(null, inst_16881, inst_16869);
                                  var inst_16869__$1 = inst_16882;
                                  var state_16897__$1 = function() {
                                    var statearr_16912 = state_16897;
                                    statearr_16912[10] = inst_16869__$1;
                                    return statearr_16912;
                                  }();
                                  var statearr_16913_16932 = state_16897__$1;
                                  statearr_16913_16932[2] = null;
                                  statearr_16913_16932[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__12926__auto___16922, out);
        return function(switch__12864__auto__, c__12926__auto___16922, out) {
          return function() {
            var cljs$core$async$state_machine__12865__auto__ = null;
            var cljs$core$async$state_machine__12865__auto____0 = function() {
              var statearr_16917 = [null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_16917[0] = cljs$core$async$state_machine__12865__auto__;
              statearr_16917[1] = 1;
              return statearr_16917;
            };
            var cljs$core$async$state_machine__12865__auto____1 = function(state_16897) {
              while (true) {
                var ret_value__12866__auto__ = function() {
                  try {
                    while (true) {
                      var result__12867__auto__ = switch__12864__auto__.call(null, state_16897);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__12867__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__12867__auto__;
                      }
                      break;
                    }
                  } catch (e16918) {
                    if (e16918 instanceof Object) {
                      var ex__12868__auto__ = e16918;
                      var statearr_16919_16933 = state_16897;
                      statearr_16919_16933[5] = ex__12868__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_16897);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e16918;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__12866__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__16934 = state_16897;
                  state_16897 = G__16934;
                  continue;
                } else {
                  return ret_value__12866__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__12865__auto__ = function(state_16897) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__12865__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__12865__auto____1.call(this, state_16897);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__12865__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__12865__auto____0;
            cljs$core$async$state_machine__12865__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__12865__auto____1;
            return cljs$core$async$state_machine__12865__auto__;
          }();
        }(switch__12864__auto__, c__12926__auto___16922, out);
      }();
      var state__12928__auto__ = function() {
        var statearr_16920 = f__12927__auto__.call(null);
        statearr_16920[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__12926__auto___16922;
        return statearr_16920;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__12928__auto__);
    };
  }(c__12926__auto___16922, out));
  return out;
};
cljs.core.async.merge.cljs$lang$maxFixedArity = 2;
cljs.core.async.into = function cljs$core$async$into(coll, ch) {
  return cljs.core.async.reduce.call(null, cljs.core.conj, coll, ch);
};
cljs.core.async.take = function cljs$core$async$take() {
  var G__16936 = arguments.length;
  switch(G__16936) {
    case 2:
      return cljs.core.async.take.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.take.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.take.cljs$core$IFn$_invoke$arity$2 = function(n, ch) {
  return cljs.core.async.take.call(null, n, ch, null);
};
cljs.core.async.take.cljs$core$IFn$_invoke$arity$3 = function(n, ch, buf_or_n) {
  var out = cljs.core.async.chan.call(null, buf_or_n);
  var c__12926__auto___16984 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__12926__auto___16984, out) {
    return function() {
      var f__12927__auto__ = function() {
        var switch__12864__auto__ = function(c__12926__auto___16984, out) {
          return function(state_16960) {
            var state_val_16961 = state_16960[1];
            if (state_val_16961 === 7) {
              var inst_16942 = state_16960[7];
              var inst_16942__$1 = state_16960[2];
              var inst_16943 = inst_16942__$1 == null;
              var inst_16944 = cljs.core.not.call(null, inst_16943);
              var state_16960__$1 = function() {
                var statearr_16962 = state_16960;
                statearr_16962[7] = inst_16942__$1;
                return statearr_16962;
              }();
              if (inst_16944) {
                var statearr_16963_16985 = state_16960__$1;
                statearr_16963_16985[1] = 8;
              } else {
                var statearr_16964_16986 = state_16960__$1;
                statearr_16964_16986[1] = 9;
              }
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_16961 === 1) {
                var inst_16937 = 0;
                var state_16960__$1 = function() {
                  var statearr_16965 = state_16960;
                  statearr_16965[8] = inst_16937;
                  return statearr_16965;
                }();
                var statearr_16966_16987 = state_16960__$1;
                statearr_16966_16987[2] = null;
                statearr_16966_16987[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_16961 === 4) {
                  var state_16960__$1 = state_16960;
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_16960__$1, 7, ch);
                } else {
                  if (state_val_16961 === 6) {
                    var inst_16955 = state_16960[2];
                    var state_16960__$1 = state_16960;
                    var statearr_16967_16988 = state_16960__$1;
                    statearr_16967_16988[2] = inst_16955;
                    statearr_16967_16988[1] = 3;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_16961 === 3) {
                      var inst_16957 = state_16960[2];
                      var inst_16958 = cljs.core.async.close_BANG_.call(null, out);
                      var state_16960__$1 = function() {
                        var statearr_16968 = state_16960;
                        statearr_16968[9] = inst_16957;
                        return statearr_16968;
                      }();
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_16960__$1, inst_16958);
                    } else {
                      if (state_val_16961 === 2) {
                        var inst_16937 = state_16960[8];
                        var inst_16939 = inst_16937 < n;
                        var state_16960__$1 = state_16960;
                        if (cljs.core.truth_(inst_16939)) {
                          var statearr_16969_16989 = state_16960__$1;
                          statearr_16969_16989[1] = 4;
                        } else {
                          var statearr_16970_16990 = state_16960__$1;
                          statearr_16970_16990[1] = 5;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_16961 === 11) {
                          var inst_16937 = state_16960[8];
                          var inst_16947 = state_16960[2];
                          var inst_16948 = inst_16937 + 1;
                          var inst_16937__$1 = inst_16948;
                          var state_16960__$1 = function() {
                            var statearr_16971 = state_16960;
                            statearr_16971[8] = inst_16937__$1;
                            statearr_16971[10] = inst_16947;
                            return statearr_16971;
                          }();
                          var statearr_16972_16991 = state_16960__$1;
                          statearr_16972_16991[2] = null;
                          statearr_16972_16991[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_16961 === 9) {
                            var state_16960__$1 = state_16960;
                            var statearr_16973_16992 = state_16960__$1;
                            statearr_16973_16992[2] = null;
                            statearr_16973_16992[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_16961 === 5) {
                              var state_16960__$1 = state_16960;
                              var statearr_16974_16993 = state_16960__$1;
                              statearr_16974_16993[2] = null;
                              statearr_16974_16993[1] = 6;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_16961 === 10) {
                                var inst_16952 = state_16960[2];
                                var state_16960__$1 = state_16960;
                                var statearr_16975_16994 = state_16960__$1;
                                statearr_16975_16994[2] = inst_16952;
                                statearr_16975_16994[1] = 6;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_16961 === 8) {
                                  var inst_16942 = state_16960[7];
                                  var state_16960__$1 = state_16960;
                                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_16960__$1, 11, out, inst_16942);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__12926__auto___16984, out);
        return function(switch__12864__auto__, c__12926__auto___16984, out) {
          return function() {
            var cljs$core$async$state_machine__12865__auto__ = null;
            var cljs$core$async$state_machine__12865__auto____0 = function() {
              var statearr_16979 = [null, null, null, null, null, null, null, null, null, null, null];
              statearr_16979[0] = cljs$core$async$state_machine__12865__auto__;
              statearr_16979[1] = 1;
              return statearr_16979;
            };
            var cljs$core$async$state_machine__12865__auto____1 = function(state_16960) {
              while (true) {
                var ret_value__12866__auto__ = function() {
                  try {
                    while (true) {
                      var result__12867__auto__ = switch__12864__auto__.call(null, state_16960);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__12867__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__12867__auto__;
                      }
                      break;
                    }
                  } catch (e16980) {
                    if (e16980 instanceof Object) {
                      var ex__12868__auto__ = e16980;
                      var statearr_16981_16995 = state_16960;
                      statearr_16981_16995[5] = ex__12868__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_16960);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e16980;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__12866__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__16996 = state_16960;
                  state_16960 = G__16996;
                  continue;
                } else {
                  return ret_value__12866__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__12865__auto__ = function(state_16960) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__12865__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__12865__auto____1.call(this, state_16960);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__12865__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__12865__auto____0;
            cljs$core$async$state_machine__12865__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__12865__auto____1;
            return cljs$core$async$state_machine__12865__auto__;
          }();
        }(switch__12864__auto__, c__12926__auto___16984, out);
      }();
      var state__12928__auto__ = function() {
        var statearr_16982 = f__12927__auto__.call(null);
        statearr_16982[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__12926__auto___16984;
        return statearr_16982;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__12928__auto__);
    };
  }(c__12926__auto___16984, out));
  return out;
};
cljs.core.async.take.cljs$lang$maxFixedArity = 3;
cljs.core.async.map_LT_ = function cljs$core$async$map_LT_(f, ch) {
  if (typeof cljs.core.async.t17004 !== "undefined") {
  } else {
    cljs.core.async.t17004 = function(map_LT_, f, ch, meta17005) {
      this.map_LT_ = map_LT_;
      this.f = f;
      this.ch = ch;
      this.meta17005 = meta17005;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.async.t17004.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_17006, meta17005__$1) {
      var self__ = this;
      var _17006__$1 = this;
      return new cljs.core.async.t17004(self__.map_LT_, self__.f, self__.ch, meta17005__$1);
    };
    cljs.core.async.t17004.prototype.cljs$core$IMeta$_meta$arity$1 = function(_17006) {
      var self__ = this;
      var _17006__$1 = this;
      return self__.meta17005;
    };
    cljs.core.async.t17004.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t17004.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t17004.prototype.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.closed_QMARK_.call(null, self__.ch);
    };
    cljs.core.async.t17004.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t17004.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, function() {
        if (typeof cljs.core.async.t17007 !== "undefined") {
        } else {
          cljs.core.async.t17007 = function(map_LT_, f, ch, meta17005, _, fn1, meta17008) {
            this.map_LT_ = map_LT_;
            this.f = f;
            this.ch = ch;
            this.meta17005 = meta17005;
            this._ = _;
            this.fn1 = fn1;
            this.meta17008 = meta17008;
            this.cljs$lang$protocol_mask$partition0$ = 393216;
            this.cljs$lang$protocol_mask$partition1$ = 0;
          };
          cljs.core.async.t17007.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(___$1) {
            return function(_17009, meta17008__$1) {
              var self__ = this;
              var _17009__$1 = this;
              return new cljs.core.async.t17007(self__.map_LT_, self__.f, self__.ch, self__.meta17005, self__._, self__.fn1, meta17008__$1);
            };
          }(___$1);
          cljs.core.async.t17007.prototype.cljs$core$IMeta$_meta$arity$1 = function(___$1) {
            return function(_17009) {
              var self__ = this;
              var _17009__$1 = this;
              return self__.meta17008;
            };
          }(___$1);
          cljs.core.async.t17007.prototype.cljs$core$async$impl$protocols$Handler$ = true;
          cljs.core.async.t17007.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(___$1) {
            return function(___$1) {
              var self__ = this;
              var ___$2 = this;
              return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.fn1);
            };
          }(___$1);
          cljs.core.async.t17007.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(___$1) {
            return function(___$1) {
              var self__ = this;
              var ___$2 = this;
              var f1 = cljs.core.async.impl.protocols.commit.call(null, self__.fn1);
              return function(f1, ___$2, ___$1) {
                return function(p1__16997_SHARP_) {
                  return f1.call(null, p1__16997_SHARP_ == null ? null : self__.f.call(null, p1__16997_SHARP_));
                };
              }(f1, ___$2, ___$1);
            };
          }(___$1);
          cljs.core.async.t17007.getBasis = function(___$1) {
            return function() {
              return new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "map\x3c", "map\x3c", -1235808357, null), new cljs.core.Symbol(null, "f", "f", 43394975, null), new cljs.core.Symbol(null, "ch", "ch", 1085813622, null), new cljs.core.Symbol(null, "meta17005", "meta17005", -832257897, null), new cljs.core.Symbol(null, "_", "_", -1201019570, null), new cljs.core.Symbol(null, "fn1", "fn1", 895834444, null), new cljs.core.Symbol(null, "meta17008", 
              "meta17008", -1536455316, null)], null);
            };
          }(___$1);
          cljs.core.async.t17007.cljs$lang$type = true;
          cljs.core.async.t17007.cljs$lang$ctorStr = "cljs.core.async/t17007";
          cljs.core.async.t17007.cljs$lang$ctorPrWriter = function(___$1) {
            return function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
              return cljs.core._write.call(null, writer__4889__auto__, "cljs.core.async/t17007");
            };
          }(___$1);
          cljs.core.async.__GT_t17007 = function(___$1) {
            return function cljs$core$async$map_LT__$___GT_t17007(map_LT___$1, f__$1, ch__$1, meta17005__$1, ___$2, fn1__$1, meta17008) {
              return new cljs.core.async.t17007(map_LT___$1, f__$1, ch__$1, meta17005__$1, ___$2, fn1__$1, meta17008);
            };
          }(___$1);
        }
        return new cljs.core.async.t17007(self__.map_LT_, self__.f, self__.ch, self__.meta17005, ___$1, fn1, cljs.core.PersistentArrayMap.EMPTY);
      }());
      if (cljs.core.truth_(function() {
        var and__4297__auto__ = ret;
        if (cljs.core.truth_(and__4297__auto__)) {
          return !(cljs.core.deref.call(null, ret) == null);
        } else {
          return and__4297__auto__;
        }
      }())) {
        return cljs.core.async.impl.channels.box.call(null, self__.f.call(null, cljs.core.deref.call(null, ret)));
      } else {
        return ret;
      }
    };
    cljs.core.async.t17004.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t17004.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn1);
    };
    cljs.core.async.t17004.getBasis = function() {
      return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "map\x3c", "map\x3c", -1235808357, null), new cljs.core.Symbol(null, "f", "f", 43394975, null), new cljs.core.Symbol(null, "ch", "ch", 1085813622, null), new cljs.core.Symbol(null, "meta17005", "meta17005", -832257897, null)], null);
    };
    cljs.core.async.t17004.cljs$lang$type = true;
    cljs.core.async.t17004.cljs$lang$ctorStr = "cljs.core.async/t17004";
    cljs.core.async.t17004.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
      return cljs.core._write.call(null, writer__4889__auto__, "cljs.core.async/t17004");
    };
    cljs.core.async.__GT_t17004 = function cljs$core$async$map_LT__$___GT_t17004(map_LT___$1, f__$1, ch__$1, meta17005) {
      return new cljs.core.async.t17004(map_LT___$1, f__$1, ch__$1, meta17005);
    };
  }
  return new cljs.core.async.t17004(cljs$core$async$map_LT_, f, ch, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.map_GT_ = function cljs$core$async$map_GT_(f, ch) {
  if (typeof cljs.core.async.t17013 !== "undefined") {
  } else {
    cljs.core.async.t17013 = function(map_GT_, f, ch, meta17014) {
      this.map_GT_ = map_GT_;
      this.f = f;
      this.ch = ch;
      this.meta17014 = meta17014;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.async.t17013.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_17015, meta17014__$1) {
      var self__ = this;
      var _17015__$1 = this;
      return new cljs.core.async.t17013(self__.map_GT_, self__.f, self__.ch, meta17014__$1);
    };
    cljs.core.async.t17013.prototype.cljs$core$IMeta$_meta$arity$1 = function(_17015) {
      var self__ = this;
      var _17015__$1 = this;
      return self__.meta17014;
    };
    cljs.core.async.t17013.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t17013.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t17013.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t17013.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1);
    };
    cljs.core.async.t17013.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t17013.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, self__.f.call(null, val), fn1);
    };
    cljs.core.async.t17013.getBasis = function() {
      return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "map\x3e", "map\x3e", 1676369295, null), new cljs.core.Symbol(null, "f", "f", 43394975, null), new cljs.core.Symbol(null, "ch", "ch", 1085813622, null), new cljs.core.Symbol(null, "meta17014", "meta17014", 926873232, null)], null);
    };
    cljs.core.async.t17013.cljs$lang$type = true;
    cljs.core.async.t17013.cljs$lang$ctorStr = "cljs.core.async/t17013";
    cljs.core.async.t17013.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
      return cljs.core._write.call(null, writer__4889__auto__, "cljs.core.async/t17013");
    };
    cljs.core.async.__GT_t17013 = function cljs$core$async$map_GT__$___GT_t17013(map_GT___$1, f__$1, ch__$1, meta17014) {
      return new cljs.core.async.t17013(map_GT___$1, f__$1, ch__$1, meta17014);
    };
  }
  return new cljs.core.async.t17013(cljs$core$async$map_GT_, f, ch, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.filter_GT_ = function cljs$core$async$filter_GT_(p, ch) {
  if (typeof cljs.core.async.t17019 !== "undefined") {
  } else {
    cljs.core.async.t17019 = function(filter_GT_, p, ch, meta17020) {
      this.filter_GT_ = filter_GT_;
      this.p = p;
      this.ch = ch;
      this.meta17020 = meta17020;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.async.t17019.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_17021, meta17020__$1) {
      var self__ = this;
      var _17021__$1 = this;
      return new cljs.core.async.t17019(self__.filter_GT_, self__.p, self__.ch, meta17020__$1);
    };
    cljs.core.async.t17019.prototype.cljs$core$IMeta$_meta$arity$1 = function(_17021) {
      var self__ = this;
      var _17021__$1 = this;
      return self__.meta17020;
    };
    cljs.core.async.t17019.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t17019.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t17019.prototype.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.closed_QMARK_.call(null, self__.ch);
    };
    cljs.core.async.t17019.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t17019.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1);
    };
    cljs.core.async.t17019.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t17019.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn1) {
      var self__ = this;
      var ___$1 = this;
      if (cljs.core.truth_(self__.p.call(null, val))) {
        return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn1);
      } else {
        return cljs.core.async.impl.channels.box.call(null, cljs.core.not.call(null, cljs.core.async.impl.protocols.closed_QMARK_.call(null, self__.ch)));
      }
    };
    cljs.core.async.t17019.getBasis = function() {
      return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "filter\x3e", "filter\x3e", -37644455, null), new cljs.core.Symbol(null, "p", "p", 1791580836, null), new cljs.core.Symbol(null, "ch", "ch", 1085813622, null), new cljs.core.Symbol(null, "meta17020", "meta17020", 1326758879, null)], null);
    };
    cljs.core.async.t17019.cljs$lang$type = true;
    cljs.core.async.t17019.cljs$lang$ctorStr = "cljs.core.async/t17019";
    cljs.core.async.t17019.cljs$lang$ctorPrWriter = function(this__4888__auto__, writer__4889__auto__, opt__4890__auto__) {
      return cljs.core._write.call(null, writer__4889__auto__, "cljs.core.async/t17019");
    };
    cljs.core.async.__GT_t17019 = function cljs$core$async$filter_GT__$___GT_t17019(filter_GT___$1, p__$1, ch__$1, meta17020) {
      return new cljs.core.async.t17019(filter_GT___$1, p__$1, ch__$1, meta17020);
    };
  }
  return new cljs.core.async.t17019(cljs$core$async$filter_GT_, p, ch, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.async.remove_GT_ = function cljs$core$async$remove_GT_(p, ch) {
  return cljs.core.async.filter_GT_.call(null, cljs.core.complement.call(null, p), ch);
};
cljs.core.async.filter_LT_ = function cljs$core$async$filter_LT_() {
  var G__17023 = arguments.length;
  switch(G__17023) {
    case 2:
      return cljs.core.async.filter_LT_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.filter_LT_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.filter_LT_.cljs$core$IFn$_invoke$arity$2 = function(p, ch) {
  return cljs.core.async.filter_LT_.call(null, p, ch, null);
};
cljs.core.async.filter_LT_.cljs$core$IFn$_invoke$arity$3 = function(p, ch, buf_or_n) {
  var out = cljs.core.async.chan.call(null, buf_or_n);
  var c__12926__auto___17066 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__12926__auto___17066, out) {
    return function() {
      var f__12927__auto__ = function() {
        var switch__12864__auto__ = function(c__12926__auto___17066, out) {
          return function(state_17044) {
            var state_val_17045 = state_17044[1];
            if (state_val_17045 === 7) {
              var inst_17040 = state_17044[2];
              var state_17044__$1 = state_17044;
              var statearr_17046_17067 = state_17044__$1;
              statearr_17046_17067[2] = inst_17040;
              statearr_17046_17067[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_17045 === 1) {
                var state_17044__$1 = state_17044;
                var statearr_17047_17068 = state_17044__$1;
                statearr_17047_17068[2] = null;
                statearr_17047_17068[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_17045 === 4) {
                  var inst_17026 = state_17044[7];
                  var inst_17026__$1 = state_17044[2];
                  var inst_17027 = inst_17026__$1 == null;
                  var state_17044__$1 = function() {
                    var statearr_17048 = state_17044;
                    statearr_17048[7] = inst_17026__$1;
                    return statearr_17048;
                  }();
                  if (cljs.core.truth_(inst_17027)) {
                    var statearr_17049_17069 = state_17044__$1;
                    statearr_17049_17069[1] = 5;
                  } else {
                    var statearr_17050_17070 = state_17044__$1;
                    statearr_17050_17070[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_17045 === 6) {
                    var inst_17026 = state_17044[7];
                    var inst_17031 = p.call(null, inst_17026);
                    var state_17044__$1 = state_17044;
                    if (cljs.core.truth_(inst_17031)) {
                      var statearr_17051_17071 = state_17044__$1;
                      statearr_17051_17071[1] = 8;
                    } else {
                      var statearr_17052_17072 = state_17044__$1;
                      statearr_17052_17072[1] = 9;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_17045 === 3) {
                      var inst_17042 = state_17044[2];
                      var state_17044__$1 = state_17044;
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_17044__$1, inst_17042);
                    } else {
                      if (state_val_17045 === 2) {
                        var state_17044__$1 = state_17044;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_17044__$1, 4, ch);
                      } else {
                        if (state_val_17045 === 11) {
                          var inst_17034 = state_17044[2];
                          var state_17044__$1 = state_17044;
                          var statearr_17053_17073 = state_17044__$1;
                          statearr_17053_17073[2] = inst_17034;
                          statearr_17053_17073[1] = 10;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_17045 === 9) {
                            var state_17044__$1 = state_17044;
                            var statearr_17054_17074 = state_17044__$1;
                            statearr_17054_17074[2] = null;
                            statearr_17054_17074[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_17045 === 5) {
                              var inst_17029 = cljs.core.async.close_BANG_.call(null, out);
                              var state_17044__$1 = state_17044;
                              var statearr_17055_17075 = state_17044__$1;
                              statearr_17055_17075[2] = inst_17029;
                              statearr_17055_17075[1] = 7;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_17045 === 10) {
                                var inst_17037 = state_17044[2];
                                var state_17044__$1 = function() {
                                  var statearr_17056 = state_17044;
                                  statearr_17056[8] = inst_17037;
                                  return statearr_17056;
                                }();
                                var statearr_17057_17076 = state_17044__$1;
                                statearr_17057_17076[2] = null;
                                statearr_17057_17076[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_17045 === 8) {
                                  var inst_17026 = state_17044[7];
                                  var state_17044__$1 = state_17044;
                                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_17044__$1, 11, out, inst_17026);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__12926__auto___17066, out);
        return function(switch__12864__auto__, c__12926__auto___17066, out) {
          return function() {
            var cljs$core$async$state_machine__12865__auto__ = null;
            var cljs$core$async$state_machine__12865__auto____0 = function() {
              var statearr_17061 = [null, null, null, null, null, null, null, null, null];
              statearr_17061[0] = cljs$core$async$state_machine__12865__auto__;
              statearr_17061[1] = 1;
              return statearr_17061;
            };
            var cljs$core$async$state_machine__12865__auto____1 = function(state_17044) {
              while (true) {
                var ret_value__12866__auto__ = function() {
                  try {
                    while (true) {
                      var result__12867__auto__ = switch__12864__auto__.call(null, state_17044);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__12867__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__12867__auto__;
                      }
                      break;
                    }
                  } catch (e17062) {
                    if (e17062 instanceof Object) {
                      var ex__12868__auto__ = e17062;
                      var statearr_17063_17077 = state_17044;
                      statearr_17063_17077[5] = ex__12868__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_17044);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e17062;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__12866__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__17078 = state_17044;
                  state_17044 = G__17078;
                  continue;
                } else {
                  return ret_value__12866__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__12865__auto__ = function(state_17044) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__12865__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__12865__auto____1.call(this, state_17044);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__12865__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__12865__auto____0;
            cljs$core$async$state_machine__12865__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__12865__auto____1;
            return cljs$core$async$state_machine__12865__auto__;
          }();
        }(switch__12864__auto__, c__12926__auto___17066, out);
      }();
      var state__12928__auto__ = function() {
        var statearr_17064 = f__12927__auto__.call(null);
        statearr_17064[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__12926__auto___17066;
        return statearr_17064;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__12928__auto__);
    };
  }(c__12926__auto___17066, out));
  return out;
};
cljs.core.async.filter_LT_.cljs$lang$maxFixedArity = 3;
cljs.core.async.remove_LT_ = function cljs$core$async$remove_LT_() {
  var G__17080 = arguments.length;
  switch(G__17080) {
    case 2:
      return cljs.core.async.remove_LT_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.remove_LT_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.remove_LT_.cljs$core$IFn$_invoke$arity$2 = function(p, ch) {
  return cljs.core.async.remove_LT_.call(null, p, ch, null);
};
cljs.core.async.remove_LT_.cljs$core$IFn$_invoke$arity$3 = function(p, ch, buf_or_n) {
  return cljs.core.async.filter_LT_.call(null, cljs.core.complement.call(null, p), ch, buf_or_n);
};
cljs.core.async.remove_LT_.cljs$lang$maxFixedArity = 3;
cljs.core.async.mapcat_STAR_ = function cljs$core$async$mapcat_STAR_(f, in$, out) {
  var c__12926__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__12926__auto__) {
    return function() {
      var f__12927__auto__ = function() {
        var switch__12864__auto__ = function(c__12926__auto__) {
          return function(state_17247) {
            var state_val_17248 = state_17247[1];
            if (state_val_17248 === 7) {
              var inst_17243 = state_17247[2];
              var state_17247__$1 = state_17247;
              var statearr_17249_17290 = state_17247__$1;
              statearr_17249_17290[2] = inst_17243;
              statearr_17249_17290[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_17248 === 20) {
                var inst_17213 = state_17247[7];
                var inst_17224 = state_17247[2];
                var inst_17225 = cljs.core.next.call(null, inst_17213);
                var inst_17199 = inst_17225;
                var inst_17200 = null;
                var inst_17201 = 0;
                var inst_17202 = 0;
                var state_17247__$1 = function() {
                  var statearr_17250 = state_17247;
                  statearr_17250[8] = inst_17201;
                  statearr_17250[9] = inst_17224;
                  statearr_17250[10] = inst_17200;
                  statearr_17250[11] = inst_17202;
                  statearr_17250[12] = inst_17199;
                  return statearr_17250;
                }();
                var statearr_17251_17291 = state_17247__$1;
                statearr_17251_17291[2] = null;
                statearr_17251_17291[1] = 8;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_17248 === 1) {
                  var state_17247__$1 = state_17247;
                  var statearr_17252_17292 = state_17247__$1;
                  statearr_17252_17292[2] = null;
                  statearr_17252_17292[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_17248 === 4) {
                    var inst_17188 = state_17247[13];
                    var inst_17188__$1 = state_17247[2];
                    var inst_17189 = inst_17188__$1 == null;
                    var state_17247__$1 = function() {
                      var statearr_17253 = state_17247;
                      statearr_17253[13] = inst_17188__$1;
                      return statearr_17253;
                    }();
                    if (cljs.core.truth_(inst_17189)) {
                      var statearr_17254_17293 = state_17247__$1;
                      statearr_17254_17293[1] = 5;
                    } else {
                      var statearr_17255_17294 = state_17247__$1;
                      statearr_17255_17294[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_17248 === 15) {
                      var state_17247__$1 = state_17247;
                      var statearr_17259_17295 = state_17247__$1;
                      statearr_17259_17295[2] = null;
                      statearr_17259_17295[1] = 16;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_17248 === 21) {
                        var state_17247__$1 = state_17247;
                        var statearr_17260_17296 = state_17247__$1;
                        statearr_17260_17296[2] = null;
                        statearr_17260_17296[1] = 23;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_17248 === 13) {
                          var inst_17201 = state_17247[8];
                          var inst_17200 = state_17247[10];
                          var inst_17202 = state_17247[11];
                          var inst_17199 = state_17247[12];
                          var inst_17209 = state_17247[2];
                          var inst_17210 = inst_17202 + 1;
                          var tmp17256 = inst_17201;
                          var tmp17257 = inst_17200;
                          var tmp17258 = inst_17199;
                          var inst_17199__$1 = tmp17258;
                          var inst_17200__$1 = tmp17257;
                          var inst_17201__$1 = tmp17256;
                          var inst_17202__$1 = inst_17210;
                          var state_17247__$1 = function() {
                            var statearr_17261 = state_17247;
                            statearr_17261[14] = inst_17209;
                            statearr_17261[8] = inst_17201__$1;
                            statearr_17261[10] = inst_17200__$1;
                            statearr_17261[11] = inst_17202__$1;
                            statearr_17261[12] = inst_17199__$1;
                            return statearr_17261;
                          }();
                          var statearr_17262_17297 = state_17247__$1;
                          statearr_17262_17297[2] = null;
                          statearr_17262_17297[1] = 8;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_17248 === 22) {
                            var state_17247__$1 = state_17247;
                            var statearr_17263_17298 = state_17247__$1;
                            statearr_17263_17298[2] = null;
                            statearr_17263_17298[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_17248 === 6) {
                              var inst_17188 = state_17247[13];
                              var inst_17197 = f.call(null, inst_17188);
                              var inst_17198 = cljs.core.seq.call(null, inst_17197);
                              var inst_17199 = inst_17198;
                              var inst_17200 = null;
                              var inst_17201 = 0;
                              var inst_17202 = 0;
                              var state_17247__$1 = function() {
                                var statearr_17264 = state_17247;
                                statearr_17264[8] = inst_17201;
                                statearr_17264[10] = inst_17200;
                                statearr_17264[11] = inst_17202;
                                statearr_17264[12] = inst_17199;
                                return statearr_17264;
                              }();
                              var statearr_17265_17299 = state_17247__$1;
                              statearr_17265_17299[2] = null;
                              statearr_17265_17299[1] = 8;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_17248 === 17) {
                                var inst_17213 = state_17247[7];
                                var inst_17217 = cljs.core.chunk_first.call(null, inst_17213);
                                var inst_17218 = cljs.core.chunk_rest.call(null, inst_17213);
                                var inst_17219 = cljs.core.count.call(null, inst_17217);
                                var inst_17199 = inst_17218;
                                var inst_17200 = inst_17217;
                                var inst_17201 = inst_17219;
                                var inst_17202 = 0;
                                var state_17247__$1 = function() {
                                  var statearr_17266 = state_17247;
                                  statearr_17266[8] = inst_17201;
                                  statearr_17266[10] = inst_17200;
                                  statearr_17266[11] = inst_17202;
                                  statearr_17266[12] = inst_17199;
                                  return statearr_17266;
                                }();
                                var statearr_17267_17300 = state_17247__$1;
                                statearr_17267_17300[2] = null;
                                statearr_17267_17300[1] = 8;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_17248 === 3) {
                                  var inst_17245 = state_17247[2];
                                  var state_17247__$1 = state_17247;
                                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_17247__$1, inst_17245);
                                } else {
                                  if (state_val_17248 === 12) {
                                    var inst_17233 = state_17247[2];
                                    var state_17247__$1 = state_17247;
                                    var statearr_17268_17301 = state_17247__$1;
                                    statearr_17268_17301[2] = inst_17233;
                                    statearr_17268_17301[1] = 9;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_17248 === 2) {
                                      var state_17247__$1 = state_17247;
                                      return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_17247__$1, 4, in$);
                                    } else {
                                      if (state_val_17248 === 23) {
                                        var inst_17241 = state_17247[2];
                                        var state_17247__$1 = state_17247;
                                        var statearr_17269_17302 = state_17247__$1;
                                        statearr_17269_17302[2] = inst_17241;
                                        statearr_17269_17302[1] = 7;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_17248 === 19) {
                                          var inst_17228 = state_17247[2];
                                          var state_17247__$1 = state_17247;
                                          var statearr_17270_17303 = state_17247__$1;
                                          statearr_17270_17303[2] = inst_17228;
                                          statearr_17270_17303[1] = 16;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_17248 === 11) {
                                            var inst_17213 = state_17247[7];
                                            var inst_17199 = state_17247[12];
                                            var inst_17213__$1 = cljs.core.seq.call(null, inst_17199);
                                            var state_17247__$1 = function() {
                                              var statearr_17271 = state_17247;
                                              statearr_17271[7] = inst_17213__$1;
                                              return statearr_17271;
                                            }();
                                            if (inst_17213__$1) {
                                              var statearr_17272_17304 = state_17247__$1;
                                              statearr_17272_17304[1] = 14;
                                            } else {
                                              var statearr_17273_17305 = state_17247__$1;
                                              statearr_17273_17305[1] = 15;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_17248 === 9) {
                                              var inst_17235 = state_17247[2];
                                              var inst_17236 = cljs.core.async.impl.protocols.closed_QMARK_.call(null, out);
                                              var state_17247__$1 = function() {
                                                var statearr_17274 = state_17247;
                                                statearr_17274[15] = inst_17235;
                                                return statearr_17274;
                                              }();
                                              if (cljs.core.truth_(inst_17236)) {
                                                var statearr_17275_17306 = state_17247__$1;
                                                statearr_17275_17306[1] = 21;
                                              } else {
                                                var statearr_17276_17307 = state_17247__$1;
                                                statearr_17276_17307[1] = 22;
                                              }
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_17248 === 5) {
                                                var inst_17191 = cljs.core.async.close_BANG_.call(null, out);
                                                var state_17247__$1 = state_17247;
                                                var statearr_17277_17308 = state_17247__$1;
                                                statearr_17277_17308[2] = inst_17191;
                                                statearr_17277_17308[1] = 7;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_17248 === 14) {
                                                  var inst_17213 = state_17247[7];
                                                  var inst_17215 = cljs.core.chunked_seq_QMARK_.call(null, inst_17213);
                                                  var state_17247__$1 = state_17247;
                                                  if (inst_17215) {
                                                    var statearr_17278_17309 = state_17247__$1;
                                                    statearr_17278_17309[1] = 17;
                                                  } else {
                                                    var statearr_17279_17310 = state_17247__$1;
                                                    statearr_17279_17310[1] = 18;
                                                  }
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_17248 === 16) {
                                                    var inst_17231 = state_17247[2];
                                                    var state_17247__$1 = state_17247;
                                                    var statearr_17280_17311 = state_17247__$1;
                                                    statearr_17280_17311[2] = inst_17231;
                                                    statearr_17280_17311[1] = 12;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_17248 === 10) {
                                                      var inst_17200 = state_17247[10];
                                                      var inst_17202 = state_17247[11];
                                                      var inst_17207 = cljs.core._nth.call(null, inst_17200, inst_17202);
                                                      var state_17247__$1 = state_17247;
                                                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_17247__$1, 13, out, inst_17207);
                                                    } else {
                                                      if (state_val_17248 === 18) {
                                                        var inst_17213 = state_17247[7];
                                                        var inst_17222 = cljs.core.first.call(null, inst_17213);
                                                        var state_17247__$1 = state_17247;
                                                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_17247__$1, 20, out, inst_17222);
                                                      } else {
                                                        if (state_val_17248 === 8) {
                                                          var inst_17201 = state_17247[8];
                                                          var inst_17202 = state_17247[11];
                                                          var inst_17204 = inst_17202 < inst_17201;
                                                          var inst_17205 = inst_17204;
                                                          var state_17247__$1 = state_17247;
                                                          if (cljs.core.truth_(inst_17205)) {
                                                            var statearr_17281_17312 = state_17247__$1;
                                                            statearr_17281_17312[1] = 10;
                                                          } else {
                                                            var statearr_17282_17313 = state_17247__$1;
                                                            statearr_17282_17313[1] = 11;
                                                          }
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          return null;
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__12926__auto__);
        return function(switch__12864__auto__, c__12926__auto__) {
          return function() {
            var cljs$core$async$mapcat_STAR__$_state_machine__12865__auto__ = null;
            var cljs$core$async$mapcat_STAR__$_state_machine__12865__auto____0 = function() {
              var statearr_17286 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_17286[0] = cljs$core$async$mapcat_STAR__$_state_machine__12865__auto__;
              statearr_17286[1] = 1;
              return statearr_17286;
            };
            var cljs$core$async$mapcat_STAR__$_state_machine__12865__auto____1 = function(state_17247) {
              while (true) {
                var ret_value__12866__auto__ = function() {
                  try {
                    while (true) {
                      var result__12867__auto__ = switch__12864__auto__.call(null, state_17247);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__12867__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__12867__auto__;
                      }
                      break;
                    }
                  } catch (e17287) {
                    if (e17287 instanceof Object) {
                      var ex__12868__auto__ = e17287;
                      var statearr_17288_17314 = state_17247;
                      statearr_17288_17314[5] = ex__12868__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_17247);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e17287;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__12866__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__17315 = state_17247;
                  state_17247 = G__17315;
                  continue;
                } else {
                  return ret_value__12866__auto__;
                }
                break;
              }
            };
            cljs$core$async$mapcat_STAR__$_state_machine__12865__auto__ = function(state_17247) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$mapcat_STAR__$_state_machine__12865__auto____0.call(this);
                case 1:
                  return cljs$core$async$mapcat_STAR__$_state_machine__12865__auto____1.call(this, state_17247);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$mapcat_STAR__$_state_machine__12865__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$mapcat_STAR__$_state_machine__12865__auto____0;
            cljs$core$async$mapcat_STAR__$_state_machine__12865__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$mapcat_STAR__$_state_machine__12865__auto____1;
            return cljs$core$async$mapcat_STAR__$_state_machine__12865__auto__;
          }();
        }(switch__12864__auto__, c__12926__auto__);
      }();
      var state__12928__auto__ = function() {
        var statearr_17289 = f__12927__auto__.call(null);
        statearr_17289[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__12926__auto__;
        return statearr_17289;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__12928__auto__);
    };
  }(c__12926__auto__));
  return c__12926__auto__;
};
cljs.core.async.mapcat_LT_ = function cljs$core$async$mapcat_LT_() {
  var G__17317 = arguments.length;
  switch(G__17317) {
    case 2:
      return cljs.core.async.mapcat_LT_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.mapcat_LT_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.mapcat_LT_.cljs$core$IFn$_invoke$arity$2 = function(f, in$) {
  return cljs.core.async.mapcat_LT_.call(null, f, in$, null);
};
cljs.core.async.mapcat_LT_.cljs$core$IFn$_invoke$arity$3 = function(f, in$, buf_or_n) {
  var out = cljs.core.async.chan.call(null, buf_or_n);
  cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
  return out;
};
cljs.core.async.mapcat_LT_.cljs$lang$maxFixedArity = 3;
cljs.core.async.mapcat_GT_ = function cljs$core$async$mapcat_GT_() {
  var G__17320 = arguments.length;
  switch(G__17320) {
    case 2:
      return cljs.core.async.mapcat_GT_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.mapcat_GT_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.mapcat_GT_.cljs$core$IFn$_invoke$arity$2 = function(f, out) {
  return cljs.core.async.mapcat_GT_.call(null, f, out, null);
};
cljs.core.async.mapcat_GT_.cljs$core$IFn$_invoke$arity$3 = function(f, out, buf_or_n) {
  var in$ = cljs.core.async.chan.call(null, buf_or_n);
  cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
  return in$;
};
cljs.core.async.mapcat_GT_.cljs$lang$maxFixedArity = 3;
cljs.core.async.unique = function cljs$core$async$unique() {
  var G__17323 = arguments.length;
  switch(G__17323) {
    case 1:
      return cljs.core.async.unique.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.async.unique.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.unique.cljs$core$IFn$_invoke$arity$1 = function(ch) {
  return cljs.core.async.unique.call(null, ch, null);
};
cljs.core.async.unique.cljs$core$IFn$_invoke$arity$2 = function(ch, buf_or_n) {
  var out = cljs.core.async.chan.call(null, buf_or_n);
  var c__12926__auto___17373 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__12926__auto___17373, out) {
    return function() {
      var f__12927__auto__ = function() {
        var switch__12864__auto__ = function(c__12926__auto___17373, out) {
          return function(state_17347) {
            var state_val_17348 = state_17347[1];
            if (state_val_17348 === 7) {
              var inst_17342 = state_17347[2];
              var state_17347__$1 = state_17347;
              var statearr_17349_17374 = state_17347__$1;
              statearr_17349_17374[2] = inst_17342;
              statearr_17349_17374[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_17348 === 1) {
                var inst_17324 = null;
                var state_17347__$1 = function() {
                  var statearr_17350 = state_17347;
                  statearr_17350[7] = inst_17324;
                  return statearr_17350;
                }();
                var statearr_17351_17375 = state_17347__$1;
                statearr_17351_17375[2] = null;
                statearr_17351_17375[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_17348 === 4) {
                  var inst_17327 = state_17347[8];
                  var inst_17327__$1 = state_17347[2];
                  var inst_17328 = inst_17327__$1 == null;
                  var inst_17329 = cljs.core.not.call(null, inst_17328);
                  var state_17347__$1 = function() {
                    var statearr_17352 = state_17347;
                    statearr_17352[8] = inst_17327__$1;
                    return statearr_17352;
                  }();
                  if (inst_17329) {
                    var statearr_17353_17376 = state_17347__$1;
                    statearr_17353_17376[1] = 5;
                  } else {
                    var statearr_17354_17377 = state_17347__$1;
                    statearr_17354_17377[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_17348 === 6) {
                    var state_17347__$1 = state_17347;
                    var statearr_17355_17378 = state_17347__$1;
                    statearr_17355_17378[2] = null;
                    statearr_17355_17378[1] = 7;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_17348 === 3) {
                      var inst_17344 = state_17347[2];
                      var inst_17345 = cljs.core.async.close_BANG_.call(null, out);
                      var state_17347__$1 = function() {
                        var statearr_17356 = state_17347;
                        statearr_17356[9] = inst_17344;
                        return statearr_17356;
                      }();
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_17347__$1, inst_17345);
                    } else {
                      if (state_val_17348 === 2) {
                        var state_17347__$1 = state_17347;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_17347__$1, 4, ch);
                      } else {
                        if (state_val_17348 === 11) {
                          var inst_17327 = state_17347[8];
                          var inst_17336 = state_17347[2];
                          var inst_17324 = inst_17327;
                          var state_17347__$1 = function() {
                            var statearr_17357 = state_17347;
                            statearr_17357[10] = inst_17336;
                            statearr_17357[7] = inst_17324;
                            return statearr_17357;
                          }();
                          var statearr_17358_17379 = state_17347__$1;
                          statearr_17358_17379[2] = null;
                          statearr_17358_17379[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_17348 === 9) {
                            var inst_17327 = state_17347[8];
                            var state_17347__$1 = state_17347;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_17347__$1, 11, out, inst_17327);
                          } else {
                            if (state_val_17348 === 5) {
                              var inst_17327 = state_17347[8];
                              var inst_17324 = state_17347[7];
                              var inst_17331 = cljs.core._EQ_.call(null, inst_17327, inst_17324);
                              var state_17347__$1 = state_17347;
                              if (inst_17331) {
                                var statearr_17360_17380 = state_17347__$1;
                                statearr_17360_17380[1] = 8;
                              } else {
                                var statearr_17361_17381 = state_17347__$1;
                                statearr_17361_17381[1] = 9;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_17348 === 10) {
                                var inst_17339 = state_17347[2];
                                var state_17347__$1 = state_17347;
                                var statearr_17362_17382 = state_17347__$1;
                                statearr_17362_17382[2] = inst_17339;
                                statearr_17362_17382[1] = 7;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_17348 === 8) {
                                  var inst_17324 = state_17347[7];
                                  var tmp17359 = inst_17324;
                                  var inst_17324__$1 = tmp17359;
                                  var state_17347__$1 = function() {
                                    var statearr_17363 = state_17347;
                                    statearr_17363[7] = inst_17324__$1;
                                    return statearr_17363;
                                  }();
                                  var statearr_17364_17383 = state_17347__$1;
                                  statearr_17364_17383[2] = null;
                                  statearr_17364_17383[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__12926__auto___17373, out);
        return function(switch__12864__auto__, c__12926__auto___17373, out) {
          return function() {
            var cljs$core$async$state_machine__12865__auto__ = null;
            var cljs$core$async$state_machine__12865__auto____0 = function() {
              var statearr_17368 = [null, null, null, null, null, null, null, null, null, null, null];
              statearr_17368[0] = cljs$core$async$state_machine__12865__auto__;
              statearr_17368[1] = 1;
              return statearr_17368;
            };
            var cljs$core$async$state_machine__12865__auto____1 = function(state_17347) {
              while (true) {
                var ret_value__12866__auto__ = function() {
                  try {
                    while (true) {
                      var result__12867__auto__ = switch__12864__auto__.call(null, state_17347);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__12867__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__12867__auto__;
                      }
                      break;
                    }
                  } catch (e17369) {
                    if (e17369 instanceof Object) {
                      var ex__12868__auto__ = e17369;
                      var statearr_17370_17384 = state_17347;
                      statearr_17370_17384[5] = ex__12868__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_17347);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e17369;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__12866__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__17385 = state_17347;
                  state_17347 = G__17385;
                  continue;
                } else {
                  return ret_value__12866__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__12865__auto__ = function(state_17347) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__12865__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__12865__auto____1.call(this, state_17347);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__12865__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__12865__auto____0;
            cljs$core$async$state_machine__12865__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__12865__auto____1;
            return cljs$core$async$state_machine__12865__auto__;
          }();
        }(switch__12864__auto__, c__12926__auto___17373, out);
      }();
      var state__12928__auto__ = function() {
        var statearr_17371 = f__12927__auto__.call(null);
        statearr_17371[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__12926__auto___17373;
        return statearr_17371;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__12928__auto__);
    };
  }(c__12926__auto___17373, out));
  return out;
};
cljs.core.async.unique.cljs$lang$maxFixedArity = 2;
cljs.core.async.partition = function cljs$core$async$partition() {
  var G__17387 = arguments.length;
  switch(G__17387) {
    case 2:
      return cljs.core.async.partition.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.partition.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.partition.cljs$core$IFn$_invoke$arity$2 = function(n, ch) {
  return cljs.core.async.partition.call(null, n, ch, null);
};
cljs.core.async.partition.cljs$core$IFn$_invoke$arity$3 = function(n, ch, buf_or_n) {
  var out = cljs.core.async.chan.call(null, buf_or_n);
  var c__12926__auto___17456 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__12926__auto___17456, out) {
    return function() {
      var f__12927__auto__ = function() {
        var switch__12864__auto__ = function(c__12926__auto___17456, out) {
          return function(state_17425) {
            var state_val_17426 = state_17425[1];
            if (state_val_17426 === 7) {
              var inst_17421 = state_17425[2];
              var state_17425__$1 = state_17425;
              var statearr_17427_17457 = state_17425__$1;
              statearr_17427_17457[2] = inst_17421;
              statearr_17427_17457[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_17426 === 1) {
                var inst_17388 = new Array(n);
                var inst_17389 = inst_17388;
                var inst_17390 = 0;
                var state_17425__$1 = function() {
                  var statearr_17428 = state_17425;
                  statearr_17428[7] = inst_17390;
                  statearr_17428[8] = inst_17389;
                  return statearr_17428;
                }();
                var statearr_17429_17458 = state_17425__$1;
                statearr_17429_17458[2] = null;
                statearr_17429_17458[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_17426 === 4) {
                  var inst_17393 = state_17425[9];
                  var inst_17393__$1 = state_17425[2];
                  var inst_17394 = inst_17393__$1 == null;
                  var inst_17395 = cljs.core.not.call(null, inst_17394);
                  var state_17425__$1 = function() {
                    var statearr_17430 = state_17425;
                    statearr_17430[9] = inst_17393__$1;
                    return statearr_17430;
                  }();
                  if (inst_17395) {
                    var statearr_17431_17459 = state_17425__$1;
                    statearr_17431_17459[1] = 5;
                  } else {
                    var statearr_17432_17460 = state_17425__$1;
                    statearr_17432_17460[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_17426 === 15) {
                    var inst_17415 = state_17425[2];
                    var state_17425__$1 = state_17425;
                    var statearr_17433_17461 = state_17425__$1;
                    statearr_17433_17461[2] = inst_17415;
                    statearr_17433_17461[1] = 14;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_17426 === 13) {
                      var state_17425__$1 = state_17425;
                      var statearr_17434_17462 = state_17425__$1;
                      statearr_17434_17462[2] = null;
                      statearr_17434_17462[1] = 14;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_17426 === 6) {
                        var inst_17390 = state_17425[7];
                        var inst_17411 = inst_17390 > 0;
                        var state_17425__$1 = state_17425;
                        if (cljs.core.truth_(inst_17411)) {
                          var statearr_17435_17463 = state_17425__$1;
                          statearr_17435_17463[1] = 12;
                        } else {
                          var statearr_17436_17464 = state_17425__$1;
                          statearr_17436_17464[1] = 13;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_17426 === 3) {
                          var inst_17423 = state_17425[2];
                          var state_17425__$1 = state_17425;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_17425__$1, inst_17423);
                        } else {
                          if (state_val_17426 === 12) {
                            var inst_17389 = state_17425[8];
                            var inst_17413 = cljs.core.vec.call(null, inst_17389);
                            var state_17425__$1 = state_17425;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_17425__$1, 15, out, inst_17413);
                          } else {
                            if (state_val_17426 === 2) {
                              var state_17425__$1 = state_17425;
                              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_17425__$1, 4, ch);
                            } else {
                              if (state_val_17426 === 11) {
                                var inst_17405 = state_17425[2];
                                var inst_17406 = new Array(n);
                                var inst_17389 = inst_17406;
                                var inst_17390 = 0;
                                var state_17425__$1 = function() {
                                  var statearr_17437 = state_17425;
                                  statearr_17437[7] = inst_17390;
                                  statearr_17437[8] = inst_17389;
                                  statearr_17437[10] = inst_17405;
                                  return statearr_17437;
                                }();
                                var statearr_17438_17465 = state_17425__$1;
                                statearr_17438_17465[2] = null;
                                statearr_17438_17465[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_17426 === 9) {
                                  var inst_17389 = state_17425[8];
                                  var inst_17403 = cljs.core.vec.call(null, inst_17389);
                                  var state_17425__$1 = state_17425;
                                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_17425__$1, 11, out, inst_17403);
                                } else {
                                  if (state_val_17426 === 5) {
                                    var inst_17390 = state_17425[7];
                                    var inst_17398 = state_17425[11];
                                    var inst_17389 = state_17425[8];
                                    var inst_17393 = state_17425[9];
                                    var inst_17397 = inst_17389[inst_17390] = inst_17393;
                                    var inst_17398__$1 = inst_17390 + 1;
                                    var inst_17399 = inst_17398__$1 < n;
                                    var state_17425__$1 = function() {
                                      var statearr_17439 = state_17425;
                                      statearr_17439[12] = inst_17397;
                                      statearr_17439[11] = inst_17398__$1;
                                      return statearr_17439;
                                    }();
                                    if (cljs.core.truth_(inst_17399)) {
                                      var statearr_17440_17466 = state_17425__$1;
                                      statearr_17440_17466[1] = 8;
                                    } else {
                                      var statearr_17441_17467 = state_17425__$1;
                                      statearr_17441_17467[1] = 9;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_17426 === 14) {
                                      var inst_17418 = state_17425[2];
                                      var inst_17419 = cljs.core.async.close_BANG_.call(null, out);
                                      var state_17425__$1 = function() {
                                        var statearr_17443 = state_17425;
                                        statearr_17443[13] = inst_17418;
                                        return statearr_17443;
                                      }();
                                      var statearr_17444_17468 = state_17425__$1;
                                      statearr_17444_17468[2] = inst_17419;
                                      statearr_17444_17468[1] = 7;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_17426 === 10) {
                                        var inst_17409 = state_17425[2];
                                        var state_17425__$1 = state_17425;
                                        var statearr_17445_17469 = state_17425__$1;
                                        statearr_17445_17469[2] = inst_17409;
                                        statearr_17445_17469[1] = 7;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_17426 === 8) {
                                          var inst_17398 = state_17425[11];
                                          var inst_17389 = state_17425[8];
                                          var tmp17442 = inst_17389;
                                          var inst_17389__$1 = tmp17442;
                                          var inst_17390 = inst_17398;
                                          var state_17425__$1 = function() {
                                            var statearr_17446 = state_17425;
                                            statearr_17446[7] = inst_17390;
                                            statearr_17446[8] = inst_17389__$1;
                                            return statearr_17446;
                                          }();
                                          var statearr_17447_17470 = state_17425__$1;
                                          statearr_17447_17470[2] = null;
                                          statearr_17447_17470[1] = 2;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          return null;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__12926__auto___17456, out);
        return function(switch__12864__auto__, c__12926__auto___17456, out) {
          return function() {
            var cljs$core$async$state_machine__12865__auto__ = null;
            var cljs$core$async$state_machine__12865__auto____0 = function() {
              var statearr_17451 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_17451[0] = cljs$core$async$state_machine__12865__auto__;
              statearr_17451[1] = 1;
              return statearr_17451;
            };
            var cljs$core$async$state_machine__12865__auto____1 = function(state_17425) {
              while (true) {
                var ret_value__12866__auto__ = function() {
                  try {
                    while (true) {
                      var result__12867__auto__ = switch__12864__auto__.call(null, state_17425);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__12867__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__12867__auto__;
                      }
                      break;
                    }
                  } catch (e17452) {
                    if (e17452 instanceof Object) {
                      var ex__12868__auto__ = e17452;
                      var statearr_17453_17471 = state_17425;
                      statearr_17453_17471[5] = ex__12868__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_17425);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e17452;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__12866__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__17472 = state_17425;
                  state_17425 = G__17472;
                  continue;
                } else {
                  return ret_value__12866__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__12865__auto__ = function(state_17425) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__12865__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__12865__auto____1.call(this, state_17425);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__12865__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__12865__auto____0;
            cljs$core$async$state_machine__12865__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__12865__auto____1;
            return cljs$core$async$state_machine__12865__auto__;
          }();
        }(switch__12864__auto__, c__12926__auto___17456, out);
      }();
      var state__12928__auto__ = function() {
        var statearr_17454 = f__12927__auto__.call(null);
        statearr_17454[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__12926__auto___17456;
        return statearr_17454;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__12928__auto__);
    };
  }(c__12926__auto___17456, out));
  return out;
};
cljs.core.async.partition.cljs$lang$maxFixedArity = 3;
cljs.core.async.partition_by = function cljs$core$async$partition_by() {
  var G__17474 = arguments.length;
  switch(G__17474) {
    case 2:
      return cljs.core.async.partition_by.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.async.partition_by.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(arguments.length)].join(""));;
  }
};
cljs.core.async.partition_by.cljs$core$IFn$_invoke$arity$2 = function(f, ch) {
  return cljs.core.async.partition_by.call(null, f, ch, null);
};
cljs.core.async.partition_by.cljs$core$IFn$_invoke$arity$3 = function(f, ch, buf_or_n) {
  var out = cljs.core.async.chan.call(null, buf_or_n);
  var c__12926__auto___17547 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__12926__auto___17547, out) {
    return function() {
      var f__12927__auto__ = function() {
        var switch__12864__auto__ = function(c__12926__auto___17547, out) {
          return function(state_17516) {
            var state_val_17517 = state_17516[1];
            if (state_val_17517 === 7) {
              var inst_17512 = state_17516[2];
              var state_17516__$1 = state_17516;
              var statearr_17518_17548 = state_17516__$1;
              statearr_17518_17548[2] = inst_17512;
              statearr_17518_17548[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_17517 === 1) {
                var inst_17475 = [];
                var inst_17476 = inst_17475;
                var inst_17477 = new cljs.core.Keyword("cljs.core.async", "nothing", "cljs.core.async/nothing", -69252123);
                var state_17516__$1 = function() {
                  var statearr_17519 = state_17516;
                  statearr_17519[7] = inst_17477;
                  statearr_17519[8] = inst_17476;
                  return statearr_17519;
                }();
                var statearr_17520_17549 = state_17516__$1;
                statearr_17520_17549[2] = null;
                statearr_17520_17549[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_17517 === 4) {
                  var inst_17480 = state_17516[9];
                  var inst_17480__$1 = state_17516[2];
                  var inst_17481 = inst_17480__$1 == null;
                  var inst_17482 = cljs.core.not.call(null, inst_17481);
                  var state_17516__$1 = function() {
                    var statearr_17521 = state_17516;
                    statearr_17521[9] = inst_17480__$1;
                    return statearr_17521;
                  }();
                  if (inst_17482) {
                    var statearr_17522_17550 = state_17516__$1;
                    statearr_17522_17550[1] = 5;
                  } else {
                    var statearr_17523_17551 = state_17516__$1;
                    statearr_17523_17551[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_17517 === 15) {
                    var inst_17506 = state_17516[2];
                    var state_17516__$1 = state_17516;
                    var statearr_17524_17552 = state_17516__$1;
                    statearr_17524_17552[2] = inst_17506;
                    statearr_17524_17552[1] = 14;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_17517 === 13) {
                      var state_17516__$1 = state_17516;
                      var statearr_17525_17553 = state_17516__$1;
                      statearr_17525_17553[2] = null;
                      statearr_17525_17553[1] = 14;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_17517 === 6) {
                        var inst_17476 = state_17516[8];
                        var inst_17501 = inst_17476.length;
                        var inst_17502 = inst_17501 > 0;
                        var state_17516__$1 = state_17516;
                        if (cljs.core.truth_(inst_17502)) {
                          var statearr_17526_17554 = state_17516__$1;
                          statearr_17526_17554[1] = 12;
                        } else {
                          var statearr_17527_17555 = state_17516__$1;
                          statearr_17527_17555[1] = 13;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_17517 === 3) {
                          var inst_17514 = state_17516[2];
                          var state_17516__$1 = state_17516;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_17516__$1, inst_17514);
                        } else {
                          if (state_val_17517 === 12) {
                            var inst_17476 = state_17516[8];
                            var inst_17504 = cljs.core.vec.call(null, inst_17476);
                            var state_17516__$1 = state_17516;
                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_17516__$1, 15, out, inst_17504);
                          } else {
                            if (state_val_17517 === 2) {
                              var state_17516__$1 = state_17516;
                              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_17516__$1, 4, ch);
                            } else {
                              if (state_val_17517 === 11) {
                                var inst_17484 = state_17516[10];
                                var inst_17480 = state_17516[9];
                                var inst_17494 = state_17516[2];
                                var inst_17495 = [];
                                var inst_17496 = inst_17495.push(inst_17480);
                                var inst_17476 = inst_17495;
                                var inst_17477 = inst_17484;
                                var state_17516__$1 = function() {
                                  var statearr_17528 = state_17516;
                                  statearr_17528[7] = inst_17477;
                                  statearr_17528[8] = inst_17476;
                                  statearr_17528[11] = inst_17494;
                                  statearr_17528[12] = inst_17496;
                                  return statearr_17528;
                                }();
                                var statearr_17529_17556 = state_17516__$1;
                                statearr_17529_17556[2] = null;
                                statearr_17529_17556[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_17517 === 9) {
                                  var inst_17476 = state_17516[8];
                                  var inst_17492 = cljs.core.vec.call(null, inst_17476);
                                  var state_17516__$1 = state_17516;
                                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_17516__$1, 11, out, inst_17492);
                                } else {
                                  if (state_val_17517 === 5) {
                                    var inst_17484 = state_17516[10];
                                    var inst_17480 = state_17516[9];
                                    var inst_17477 = state_17516[7];
                                    var inst_17484__$1 = f.call(null, inst_17480);
                                    var inst_17485 = cljs.core._EQ_.call(null, inst_17484__$1, inst_17477);
                                    var inst_17486 = cljs.core.keyword_identical_QMARK_.call(null, inst_17477, new cljs.core.Keyword("cljs.core.async", "nothing", "cljs.core.async/nothing", -69252123));
                                    var inst_17487 = inst_17485 || inst_17486;
                                    var state_17516__$1 = function() {
                                      var statearr_17530 = state_17516;
                                      statearr_17530[10] = inst_17484__$1;
                                      return statearr_17530;
                                    }();
                                    if (cljs.core.truth_(inst_17487)) {
                                      var statearr_17531_17557 = state_17516__$1;
                                      statearr_17531_17557[1] = 8;
                                    } else {
                                      var statearr_17532_17558 = state_17516__$1;
                                      statearr_17532_17558[1] = 9;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_17517 === 14) {
                                      var inst_17509 = state_17516[2];
                                      var inst_17510 = cljs.core.async.close_BANG_.call(null, out);
                                      var state_17516__$1 = function() {
                                        var statearr_17534 = state_17516;
                                        statearr_17534[13] = inst_17509;
                                        return statearr_17534;
                                      }();
                                      var statearr_17535_17559 = state_17516__$1;
                                      statearr_17535_17559[2] = inst_17510;
                                      statearr_17535_17559[1] = 7;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_17517 === 10) {
                                        var inst_17499 = state_17516[2];
                                        var state_17516__$1 = state_17516;
                                        var statearr_17536_17560 = state_17516__$1;
                                        statearr_17536_17560[2] = inst_17499;
                                        statearr_17536_17560[1] = 7;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_17517 === 8) {
                                          var inst_17484 = state_17516[10];
                                          var inst_17480 = state_17516[9];
                                          var inst_17476 = state_17516[8];
                                          var inst_17489 = inst_17476.push(inst_17480);
                                          var tmp17533 = inst_17476;
                                          var inst_17476__$1 = tmp17533;
                                          var inst_17477 = inst_17484;
                                          var state_17516__$1 = function() {
                                            var statearr_17537 = state_17516;
                                            statearr_17537[14] = inst_17489;
                                            statearr_17537[7] = inst_17477;
                                            statearr_17537[8] = inst_17476__$1;
                                            return statearr_17537;
                                          }();
                                          var statearr_17538_17561 = state_17516__$1;
                                          statearr_17538_17561[2] = null;
                                          statearr_17538_17561[1] = 2;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          return null;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__12926__auto___17547, out);
        return function(switch__12864__auto__, c__12926__auto___17547, out) {
          return function() {
            var cljs$core$async$state_machine__12865__auto__ = null;
            var cljs$core$async$state_machine__12865__auto____0 = function() {
              var statearr_17542 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_17542[0] = cljs$core$async$state_machine__12865__auto__;
              statearr_17542[1] = 1;
              return statearr_17542;
            };
            var cljs$core$async$state_machine__12865__auto____1 = function(state_17516) {
              while (true) {
                var ret_value__12866__auto__ = function() {
                  try {
                    while (true) {
                      var result__12867__auto__ = switch__12864__auto__.call(null, state_17516);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__12867__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__12867__auto__;
                      }
                      break;
                    }
                  } catch (e17543) {
                    if (e17543 instanceof Object) {
                      var ex__12868__auto__ = e17543;
                      var statearr_17544_17562 = state_17516;
                      statearr_17544_17562[5] = ex__12868__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_17516);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e17543;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__12866__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__17563 = state_17516;
                  state_17516 = G__17563;
                  continue;
                } else {
                  return ret_value__12866__auto__;
                }
                break;
              }
            };
            cljs$core$async$state_machine__12865__auto__ = function(state_17516) {
              switch(arguments.length) {
                case 0:
                  return cljs$core$async$state_machine__12865__auto____0.call(this);
                case 1:
                  return cljs$core$async$state_machine__12865__auto____1.call(this, state_17516);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            cljs$core$async$state_machine__12865__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__12865__auto____0;
            cljs$core$async$state_machine__12865__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__12865__auto____1;
            return cljs$core$async$state_machine__12865__auto__;
          }();
        }(switch__12864__auto__, c__12926__auto___17547, out);
      }();
      var state__12928__auto__ = function() {
        var statearr_17545 = f__12927__auto__.call(null);
        statearr_17545[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__12926__auto___17547;
        return statearr_17545;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__12928__auto__);
    };
  }(c__12926__auto___17547, out));
  return out;
};
cljs.core.async.partition_by.cljs$lang$maxFixedArity = 3;
goog.provide("metaverse.core");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("metaverse.util");
metaverse.core.render = function metaverse$core$render(ts, renderer, scene, camera) {
  requestAnimationFrame(function(p1__62107_SHARP_) {
    return metaverse$core$render.call(null, p1__62107_SHARP_, renderer, scene, camera);
  });
  return renderer.render(scene, camera);
};
metaverse.core.add_single_cube = function metaverse$core$add_single_cube(c) {
  var geom = new THREE.BoxGeometry(1, 1, 1);
  var material = new THREE.MeshBasicMaterial({"color":15746048});
  var cube = new THREE.Mesh(geom, material);
  var c__12926__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__12926__auto__, geom, material, cube) {
    return function() {
      var f__12927__auto__ = function() {
        var switch__12864__auto__ = function(c__12926__auto__, geom, material, cube) {
          return function(state_62135) {
            var state_val_62136 = state_62135[1];
            if (state_val_62136 === 1) {
              var inst_62126 = [new cljs.core.Keyword(null, "geometry", "geometry", -405034994)];
              var inst_62127 = [new cljs.core.Keyword(null, "0x0000", "0x0000", 1541547801)];
              var inst_62128 = [cube];
              var inst_62129 = cljs.core.PersistentHashMap.fromArrays(inst_62127, inst_62128);
              var inst_62130 = [inst_62129];
              var inst_62131 = cljs.core.PersistentHashMap.fromArrays(inst_62126, inst_62130);
              var state_62135__$1 = state_62135;
              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_62135__$1, 2, c, inst_62131);
            } else {
              if (state_val_62136 === 2) {
                var inst_62133 = state_62135[2];
                var state_62135__$1 = state_62135;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_62135__$1, inst_62133);
              } else {
                return null;
              }
            }
          };
        }(c__12926__auto__, geom, material, cube);
        return function(switch__12864__auto__, c__12926__auto__, geom, material, cube) {
          return function() {
            var metaverse$core$add_single_cube_$_state_machine__12865__auto__ = null;
            var metaverse$core$add_single_cube_$_state_machine__12865__auto____0 = function() {
              var statearr_62140 = [null, null, null, null, null, null, null];
              statearr_62140[0] = metaverse$core$add_single_cube_$_state_machine__12865__auto__;
              statearr_62140[1] = 1;
              return statearr_62140;
            };
            var metaverse$core$add_single_cube_$_state_machine__12865__auto____1 = function(state_62135) {
              while (true) {
                var ret_value__12866__auto__ = function() {
                  try {
                    while (true) {
                      var result__12867__auto__ = switch__12864__auto__.call(null, state_62135);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__12867__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__12867__auto__;
                      }
                      break;
                    }
                  } catch (e62141) {
                    if (e62141 instanceof Object) {
                      var ex__12868__auto__ = e62141;
                      var statearr_62142_62144 = state_62135;
                      statearr_62142_62144[5] = ex__12868__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_62135);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e62141;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__12866__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__62145 = state_62135;
                  state_62135 = G__62145;
                  continue;
                } else {
                  return ret_value__12866__auto__;
                }
                break;
              }
            };
            metaverse$core$add_single_cube_$_state_machine__12865__auto__ = function(state_62135) {
              switch(arguments.length) {
                case 0:
                  return metaverse$core$add_single_cube_$_state_machine__12865__auto____0.call(this);
                case 1:
                  return metaverse$core$add_single_cube_$_state_machine__12865__auto____1.call(this, state_62135);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            metaverse$core$add_single_cube_$_state_machine__12865__auto__.cljs$core$IFn$_invoke$arity$0 = metaverse$core$add_single_cube_$_state_machine__12865__auto____0;
            metaverse$core$add_single_cube_$_state_machine__12865__auto__.cljs$core$IFn$_invoke$arity$1 = metaverse$core$add_single_cube_$_state_machine__12865__auto____1;
            return metaverse$core$add_single_cube_$_state_machine__12865__auto__;
          }();
        }(switch__12864__auto__, c__12926__auto__, geom, material, cube);
      }();
      var state__12928__auto__ = function() {
        var statearr_62143 = f__12927__auto__.call(null);
        statearr_62143[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__12926__auto__;
        return statearr_62143;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__12928__auto__);
    };
  }(c__12926__auto__, geom, material, cube));
  return c__12926__auto__;
};
metaverse.core.set_initial_camera_position = function metaverse$core$set_initial_camera_position(c) {
  var c__12926__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__12926__auto__) {
    return function() {
      var f__12927__auto__ = function() {
        var switch__12864__auto__ = function(c__12926__auto__) {
          return function(state_62173) {
            var state_val_62174 = state_62173[1];
            if (state_val_62174 === 1) {
              var inst_62164 = [new cljs.core.Keyword(null, "camera", "camera", -1190348585)];
              var inst_62165 = [new cljs.core.Keyword(null, "z", "z", -789527183)];
              var inst_62166 = [5];
              var inst_62167 = cljs.core.PersistentHashMap.fromArrays(inst_62165, inst_62166);
              var inst_62168 = [inst_62167];
              var inst_62169 = cljs.core.PersistentHashMap.fromArrays(inst_62164, inst_62168);
              var state_62173__$1 = state_62173;
              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_62173__$1, 2, c, inst_62169);
            } else {
              if (state_val_62174 === 2) {
                var inst_62171 = state_62173[2];
                var state_62173__$1 = state_62173;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_62173__$1, inst_62171);
              } else {
                return null;
              }
            }
          };
        }(c__12926__auto__);
        return function(switch__12864__auto__, c__12926__auto__) {
          return function() {
            var metaverse$core$set_initial_camera_position_$_state_machine__12865__auto__ = null;
            var metaverse$core$set_initial_camera_position_$_state_machine__12865__auto____0 = function() {
              var statearr_62178 = [null, null, null, null, null, null, null];
              statearr_62178[0] = metaverse$core$set_initial_camera_position_$_state_machine__12865__auto__;
              statearr_62178[1] = 1;
              return statearr_62178;
            };
            var metaverse$core$set_initial_camera_position_$_state_machine__12865__auto____1 = function(state_62173) {
              while (true) {
                var ret_value__12866__auto__ = function() {
                  try {
                    while (true) {
                      var result__12867__auto__ = switch__12864__auto__.call(null, state_62173);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__12867__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__12867__auto__;
                      }
                      break;
                    }
                  } catch (e62179) {
                    if (e62179 instanceof Object) {
                      var ex__12868__auto__ = e62179;
                      var statearr_62180_62182 = state_62173;
                      statearr_62180_62182[5] = ex__12868__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_62173);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e62179;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__12866__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__62183 = state_62173;
                  state_62173 = G__62183;
                  continue;
                } else {
                  return ret_value__12866__auto__;
                }
                break;
              }
            };
            metaverse$core$set_initial_camera_position_$_state_machine__12865__auto__ = function(state_62173) {
              switch(arguments.length) {
                case 0:
                  return metaverse$core$set_initial_camera_position_$_state_machine__12865__auto____0.call(this);
                case 1:
                  return metaverse$core$set_initial_camera_position_$_state_machine__12865__auto____1.call(this, state_62173);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            metaverse$core$set_initial_camera_position_$_state_machine__12865__auto__.cljs$core$IFn$_invoke$arity$0 = metaverse$core$set_initial_camera_position_$_state_machine__12865__auto____0;
            metaverse$core$set_initial_camera_position_$_state_machine__12865__auto__.cljs$core$IFn$_invoke$arity$1 = metaverse$core$set_initial_camera_position_$_state_machine__12865__auto____1;
            return metaverse$core$set_initial_camera_position_$_state_machine__12865__auto__;
          }();
        }(switch__12864__auto__, c__12926__auto__);
      }();
      var state__12928__auto__ = function() {
        var statearr_62181 = f__12927__auto__.call(null);
        statearr_62181[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__12926__auto__;
        return statearr_62181;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__12928__auto__);
    };
  }(c__12926__auto__));
  return c__12926__auto__;
};
metaverse.core.rotate_fn = function metaverse$core$rotate_fn(c) {
  var c__12926__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__12926__auto__) {
    return function() {
      var f__12927__auto__ = function() {
        var switch__12864__auto__ = function(c__12926__auto__) {
          return function(state_62235) {
            var state_val_62236 = state_62235[1];
            if (state_val_62236 === 1) {
              var inst_62215 = [new cljs.core.Keyword(null, "modifications", "modifications", 2043415709)];
              var inst_62216 = [new cljs.core.Keyword(null, "0x0000", "0x0000", 1541547801)];
              var inst_62217 = cljs.core.PersistentVector.EMPTY_NODE;
              var inst_62218 = ["rotation", "x"];
              var inst_62219 = new cljs.core.PersistentVector(null, 2, 5, inst_62217, inst_62218, null);
              var inst_62220 = cljs.core.PersistentVector.EMPTY_NODE;
              var inst_62221 = ["rotation", "y"];
              var inst_62222 = new cljs.core.PersistentVector(null, 2, 5, inst_62220, inst_62221, null);
              var inst_62223 = [inst_62219, inst_62222];
              var inst_62224 = function() {
                return function(inst_62215, inst_62216, inst_62217, inst_62218, inst_62219, inst_62220, inst_62221, inst_62222, inst_62223, state_val_62236, c__12926__auto__) {
                  return function(p1__62184_SHARP_) {
                    return p1__62184_SHARP_ + .1;
                  };
                }(inst_62215, inst_62216, inst_62217, inst_62218, inst_62219, inst_62220, inst_62221, inst_62222, inst_62223, state_val_62236, c__12926__auto__);
              }();
              var inst_62225 = function() {
                return function(inst_62215, inst_62216, inst_62217, inst_62218, inst_62219, inst_62220, inst_62221, inst_62222, inst_62223, inst_62224, state_val_62236, c__12926__auto__) {
                  return function(p1__62185_SHARP_) {
                    return p1__62185_SHARP_ + .1;
                  };
                }(inst_62215, inst_62216, inst_62217, inst_62218, inst_62219, inst_62220, inst_62221, inst_62222, inst_62223, inst_62224, state_val_62236, c__12926__auto__);
              }();
              var inst_62226 = [inst_62224, inst_62225];
              var inst_62227 = cljs.core.PersistentHashMap.fromArrays(inst_62223, inst_62226);
              var inst_62228 = [inst_62227];
              var inst_62229 = cljs.core.PersistentHashMap.fromArrays(inst_62216, inst_62228);
              var inst_62230 = [inst_62229];
              var inst_62231 = cljs.core.PersistentHashMap.fromArrays(inst_62215, inst_62230);
              var state_62235__$1 = state_62235;
              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_62235__$1, 2, c, inst_62231);
            } else {
              if (state_val_62236 === 2) {
                var inst_62233 = state_62235[2];
                var state_62235__$1 = state_62235;
                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_62235__$1, inst_62233);
              } else {
                return null;
              }
            }
          };
        }(c__12926__auto__);
        return function(switch__12864__auto__, c__12926__auto__) {
          return function() {
            var metaverse$core$rotate_fn_$_state_machine__12865__auto__ = null;
            var metaverse$core$rotate_fn_$_state_machine__12865__auto____0 = function() {
              var statearr_62240 = [null, null, null, null, null, null, null];
              statearr_62240[0] = metaverse$core$rotate_fn_$_state_machine__12865__auto__;
              statearr_62240[1] = 1;
              return statearr_62240;
            };
            var metaverse$core$rotate_fn_$_state_machine__12865__auto____1 = function(state_62235) {
              while (true) {
                var ret_value__12866__auto__ = function() {
                  try {
                    while (true) {
                      var result__12867__auto__ = switch__12864__auto__.call(null, state_62235);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__12867__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__12867__auto__;
                      }
                      break;
                    }
                  } catch (e62241) {
                    if (e62241 instanceof Object) {
                      var ex__12868__auto__ = e62241;
                      var statearr_62242_62244 = state_62235;
                      statearr_62242_62244[5] = ex__12868__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_62235);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e62241;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__12866__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__62245 = state_62235;
                  state_62235 = G__62245;
                  continue;
                } else {
                  return ret_value__12866__auto__;
                }
                break;
              }
            };
            metaverse$core$rotate_fn_$_state_machine__12865__auto__ = function(state_62235) {
              switch(arguments.length) {
                case 0:
                  return metaverse$core$rotate_fn_$_state_machine__12865__auto____0.call(this);
                case 1:
                  return metaverse$core$rotate_fn_$_state_machine__12865__auto____1.call(this, state_62235);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            metaverse$core$rotate_fn_$_state_machine__12865__auto__.cljs$core$IFn$_invoke$arity$0 = metaverse$core$rotate_fn_$_state_machine__12865__auto____0;
            metaverse$core$rotate_fn_$_state_machine__12865__auto__.cljs$core$IFn$_invoke$arity$1 = metaverse$core$rotate_fn_$_state_machine__12865__auto____1;
            return metaverse$core$rotate_fn_$_state_machine__12865__auto__;
          }();
        }(switch__12864__auto__, c__12926__auto__);
      }();
      var state__12928__auto__ = function() {
        var statearr_62243 = f__12927__auto__.call(null);
        statearr_62243[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__12926__auto__;
        return statearr_62243;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__12928__auto__);
    };
  }(c__12926__auto__));
  return c__12926__auto__;
};
metaverse.core.main = function metaverse$core$main() {
  var render_state = cljs.core.async.chan.call(null);
  var scene = new THREE.Scene;
  var camera = new THREE.PerspectiveCamera(75, window["innerWidth"] / window["innerHeight"], .1, 1E3);
  var renderer = new THREE.WebGLRenderer;
  renderer.setSize(window["innerWidth"], window["innerHeight"]);
  document.body.appendChild(renderer.domElement);
  var c__12926__auto___63240 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__12926__auto___63240, render_state, scene, camera, renderer) {
    return function() {
      var f__12927__auto__ = function() {
        var switch__12864__auto__ = function(c__12926__auto___63240, render_state, scene, camera, renderer) {
          return function(state_63077) {
            var state_val_63078 = state_63077[1];
            if (state_val_63078 === 65) {
              var state_63077__$1 = state_63077;
              var statearr_63082_63241 = state_63077__$1;
              statearr_63082_63241[2] = null;
              statearr_63082_63241[1] = 66;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_63078 === 70) {
                var inst_62984 = state_63077[7];
                var inst_63017 = state_63077[8];
                var inst_63017__$1 = cljs.core.seq.call(null, inst_62984);
                var state_63077__$1 = function() {
                  var statearr_63083 = state_63077;
                  statearr_63083[8] = inst_63017__$1;
                  return statearr_63083;
                }();
                if (inst_63017__$1) {
                  var statearr_63084_63242 = state_63077__$1;
                  statearr_63084_63242[1] = 75;
                } else {
                  var statearr_63085_63243 = state_63077__$1;
                  statearr_63085_63243[1] = 76;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_63078 === 62) {
                  var inst_62976 = state_63077[9];
                  var inst_62751 = state_63077[10];
                  var inst_62963 = state_63077[11];
                  var inst_62973 = cljs.core.first.call(null, inst_62963);
                  var inst_62974 = cljs.core.nth.call(null, inst_62973, 0, null);
                  var inst_62975 = cljs.core.nth.call(null, inst_62973, 1, null);
                  var inst_62976__$1 = cljs.core.get.call(null, inst_62751, inst_62974);
                  var state_63077__$1 = function() {
                    var statearr_63089 = state_63077;
                    statearr_63089[9] = inst_62976__$1;
                    statearr_63089[12] = inst_62975;
                    return statearr_63089;
                  }();
                  if (cljs.core.truth_(inst_62976__$1)) {
                    var statearr_63090_63244 = state_63077__$1;
                    statearr_63090_63244[1] = 64;
                  } else {
                    var statearr_63091_63245 = state_63077__$1;
                    statearr_63091_63245[1] = 65;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_63078 === 74) {
                    var inst_62986 = state_63077[13];
                    var inst_62995 = state_63077[14];
                    var inst_62985 = state_63077[15];
                    var inst_62999 = state_63077[16];
                    var inst_62984 = state_63077[7];
                    var inst_62996 = state_63077[17];
                    var inst_62987 = state_63077[18];
                    var inst_63007 = state_63077[2];
                    var inst_63008 = cljs.core.PersistentVector.EMPTY_NODE;
                    var inst_63009 = inst_62995.call(null, inst_62996);
                    var inst_63010 = [inst_63009];
                    var inst_63011 = new cljs.core.PersistentVector(null, 1, 5, inst_63008, inst_63010, null);
                    var inst_63012 = cljs.core.concat.call(null, inst_62999, inst_63007, inst_63011);
                    var inst_63013 = cljs.core.apply.call(null, cljs.core.aset, inst_63012);
                    var inst_63014 = inst_62987 + 1;
                    var tmp63079 = inst_62986;
                    var tmp63080 = inst_62985;
                    var tmp63081 = inst_62984;
                    var inst_62984__$1 = tmp63081;
                    var inst_62985__$1 = tmp63080;
                    var inst_62986__$1 = tmp63079;
                    var inst_62987__$1 = inst_63014;
                    var state_63077__$1 = function() {
                      var statearr_63092 = state_63077;
                      statearr_63092[13] = inst_62986__$1;
                      statearr_63092[19] = inst_63013;
                      statearr_63092[15] = inst_62985__$1;
                      statearr_63092[7] = inst_62984__$1;
                      statearr_63092[18] = inst_62987__$1;
                      return statearr_63092;
                    }();
                    var statearr_63093_63246 = state_63077__$1;
                    statearr_63093_63246[2] = null;
                    statearr_63093_63246[1] = 67;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_63078 === 7) {
                      var inst_62760 = state_63077[20];
                      var inst_62761 = state_63077[21];
                      var inst_62759 = state_63077[22];
                      var inst_62758 = state_63077[23];
                      var inst_62767 = cljs.core._nth.call(null, inst_62759, inst_62761);
                      var inst_62768 = cljs.core.nth.call(null, inst_62767, 0, null);
                      var inst_62769 = cljs.core.nth.call(null, inst_62767, 1, null);
                      var inst_62770 = scene.add(inst_62769);
                      var inst_62771 = inst_62761 + 1;
                      var tmp63086 = inst_62760;
                      var tmp63087 = inst_62759;
                      var tmp63088 = inst_62758;
                      var inst_62758__$1 = tmp63088;
                      var inst_62759__$1 = tmp63087;
                      var inst_62760__$1 = tmp63086;
                      var inst_62761__$1 = inst_62771;
                      var state_63077__$1 = function() {
                        var statearr_63094 = state_63077;
                        statearr_63094[24] = inst_62770;
                        statearr_63094[20] = inst_62760__$1;
                        statearr_63094[21] = inst_62761__$1;
                        statearr_63094[25] = inst_62768;
                        statearr_63094[22] = inst_62759__$1;
                        statearr_63094[23] = inst_62758__$1;
                        return statearr_63094;
                      }();
                      var statearr_63095_63247 = state_63077__$1;
                      statearr_63095_63247[2] = null;
                      statearr_63095_63247[1] = 5;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_63078 === 59) {
                        var state_63077__$1 = state_63077;
                        var statearr_63096_63248 = state_63077__$1;
                        statearr_63096_63248[2] = null;
                        statearr_63096_63248[1] = 60;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_63078 === 20) {
                          var inst_62853 = state_63077[2];
                          var state_63077__$1 = state_63077;
                          var statearr_63097_63249 = state_63077__$1;
                          statearr_63097_63249[2] = inst_62853;
                          statearr_63097_63249[1] = 17;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_63078 === 72) {
                            var inst_62994 = state_63077[26];
                            var state_63077__$1 = state_63077;
                            var statearr_63098_63250 = state_63077__$1;
                            statearr_63098_63250[2] = inst_62994;
                            statearr_63098_63250[1] = 74;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_63078 === 58) {
                              var inst_62963 = state_63077[11];
                              var inst_62965 = cljs.core.chunked_seq_QMARK_.call(null, inst_62963);
                              var state_63077__$1 = state_63077;
                              if (inst_62965) {
                                var statearr_63099_63251 = state_63077__$1;
                                statearr_63099_63251[1] = 61;
                              } else {
                                var statearr_63100_63252 = state_63077__$1;
                                statearr_63100_63252[1] = 62;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_63078 === 60) {
                                var inst_63068 = state_63077[2];
                                var state_63077__$1 = state_63077;
                                var statearr_63101_63253 = state_63077__$1;
                                statearr_63101_63253[2] = inst_63068;
                                statearr_63101_63253[1] = 37;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_63078 === 27) {
                                  var inst_62827 = state_63077[27];
                                  var inst_62831 = cljs.core.chunk_first.call(null, inst_62827);
                                  var inst_62832 = cljs.core.chunk_rest.call(null, inst_62827);
                                  var inst_62833 = cljs.core.count.call(null, inst_62831);
                                  var inst_62807 = inst_62832;
                                  var inst_62808 = inst_62831;
                                  var inst_62809 = inst_62833;
                                  var inst_62810 = 0;
                                  var state_63077__$1 = function() {
                                    var statearr_63102 = state_63077;
                                    statearr_63102[28] = inst_62810;
                                    statearr_63102[29] = inst_62809;
                                    statearr_63102[30] = inst_62808;
                                    statearr_63102[31] = inst_62807;
                                    return statearr_63102;
                                  }();
                                  var statearr_63103_63254 = state_63077__$1;
                                  statearr_63103_63254[2] = null;
                                  statearr_63103_63254[1] = 16;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_63078 === 1) {
                                    var inst_62743 = cljs.core.PersistentHashMap.EMPTY;
                                    var inst_62744 = inst_62743;
                                    var state_63077__$1 = function() {
                                      var statearr_63104 = state_63077;
                                      statearr_63104[32] = inst_62744;
                                      return statearr_63104;
                                    }();
                                    var statearr_63105_63255 = state_63077__$1;
                                    statearr_63105_63255[2] = null;
                                    statearr_63105_63255[1] = 2;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_63078 === 69) {
                                      var inst_62976 = state_63077[9];
                                      var inst_62994 = state_63077[26];
                                      var inst_62985 = state_63077[15];
                                      var inst_62987 = state_63077[18];
                                      var inst_62993 = cljs.core._nth.call(null, inst_62985, inst_62987);
                                      var inst_62994__$1 = cljs.core.nth.call(null, inst_62993, 0, null);
                                      var inst_62995 = cljs.core.nth.call(null, inst_62993, 1, null);
                                      var inst_62996 = cljs.core.apply.call(null, cljs.core.aget, inst_62976, inst_62994__$1);
                                      var inst_62997 = cljs.core.PersistentVector.EMPTY_NODE;
                                      var inst_62998 = [inst_62976];
                                      var inst_62999 = new cljs.core.PersistentVector(null, 1, 5, inst_62997, inst_62998, null);
                                      var inst_63000 = cljs.core.sequential_QMARK_.call(null, inst_62994__$1);
                                      var state_63077__$1 = function() {
                                        var statearr_63106 = state_63077;
                                        statearr_63106[26] = inst_62994__$1;
                                        statearr_63106[14] = inst_62995;
                                        statearr_63106[16] = inst_62999;
                                        statearr_63106[17] = inst_62996;
                                        return statearr_63106;
                                      }();
                                      if (inst_63000) {
                                        var statearr_63107_63256 = state_63077__$1;
                                        statearr_63107_63256[1] = 72;
                                      } else {
                                        var statearr_63108_63257 = state_63077__$1;
                                        statearr_63108_63257[1] = 73;
                                      }
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_63078 === 24) {
                                        var inst_62827 = state_63077[27];
                                        var inst_62829 = cljs.core.chunked_seq_QMARK_.call(null, inst_62827);
                                        var state_63077__$1 = state_63077;
                                        if (inst_62829) {
                                          var statearr_63109_63258 = state_63077__$1;
                                          statearr_63109_63258[1] = 27;
                                        } else {
                                          var statearr_63110_63259 = state_63077__$1;
                                          statearr_63110_63259[1] = 28;
                                        }
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_63078 === 55) {
                                          var inst_62926 = state_63077[33];
                                          var state_63077__$1 = state_63077;
                                          var statearr_63111_63260 = state_63077__$1;
                                          statearr_63111_63260[2] = inst_62926;
                                          statearr_63111_63260[1] = 57;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_63078 === 39) {
                                            var state_63077__$1 = state_63077;
                                            var statearr_63112_63261 = state_63077__$1;
                                            statearr_63112_63261[2] = null;
                                            statearr_63112_63261[1] = 40;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_63078 === 46) {
                                              var inst_62892 = state_63077[34];
                                              var state_63077__$1 = state_63077;
                                              var statearr_63113_63262 = state_63077__$1;
                                              statearr_63113_63262[2] = inst_62892;
                                              statearr_63113_63262[1] = 48;
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_63078 === 4) {
                                                var inst_62744 = state_63077[32];
                                                var inst_62747 = state_63077[2];
                                                var inst_62748 = (new cljs.core.Keyword(null, "geometry", "geometry", -405034994)).cljs$core$IFn$_invoke$arity$1(inst_62747);
                                                var inst_62749 = (new cljs.core.Keyword(null, "camera", "camera", -1190348585)).cljs$core$IFn$_invoke$arity$1(inst_62747);
                                                var inst_62750 = (new cljs.core.Keyword(null, "modifications", "modifications", 2043415709)).cljs$core$IFn$_invoke$arity$1(inst_62747);
                                                var inst_62751 = cljs.core.merge.call(null, inst_62744, inst_62748);
                                                var inst_62756 = cljs.core.seq.call(null, inst_62748);
                                                var inst_62757 = cljs.core.seq.call(null, inst_62756);
                                                var inst_62758 = inst_62757;
                                                var inst_62759 = null;
                                                var inst_62760 = 0;
                                                var inst_62761 = 0;
                                                var state_63077__$1 = function() {
                                                  var statearr_63114 = state_63077;
                                                  statearr_63114[20] = inst_62760;
                                                  statearr_63114[21] = inst_62761;
                                                  statearr_63114[35] = inst_62749;
                                                  statearr_63114[10] = inst_62751;
                                                  statearr_63114[36] = inst_62750;
                                                  statearr_63114[22] = inst_62759;
                                                  statearr_63114[23] = inst_62758;
                                                  return statearr_63114;
                                                }();
                                                var statearr_63115_63263 = state_63077__$1;
                                                statearr_63115_63263[2] = null;
                                                statearr_63115_63263[1] = 5;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_63078 === 77) {
                                                  var inst_63054 = state_63077[2];
                                                  var state_63077__$1 = state_63077;
                                                  var statearr_63116_63264 = state_63077__$1;
                                                  statearr_63116_63264[2] = inst_63054;
                                                  statearr_63116_63264[1] = 71;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_63078 === 54) {
                                                    var inst_62949 = state_63077[2];
                                                    var state_63077__$1 = state_63077;
                                                    var statearr_63120_63265 = state_63077__$1;
                                                    statearr_63120_63265[2] = inst_62949;
                                                    statearr_63120_63265[1] = 51;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_63078 === 15) {
                                                      var inst_62791 = state_63077[2];
                                                      var state_63077__$1 = state_63077;
                                                      var statearr_63121_63266 = state_63077__$1;
                                                      statearr_63121_63266[2] = inst_62791;
                                                      statearr_63121_63266[1] = 12;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_63078 === 48) {
                                                        var inst_62884 = state_63077[37];
                                                        var inst_62897 = state_63077[38];
                                                        var inst_62885 = state_63077[39];
                                                        var inst_62882 = state_63077[40];
                                                        var inst_62883 = state_63077[41];
                                                        var inst_62894 = state_63077[42];
                                                        var inst_62893 = state_63077[43];
                                                        var inst_62905 = state_63077[2];
                                                        var inst_62906 = cljs.core.PersistentVector.EMPTY_NODE;
                                                        var inst_62907 = inst_62893.call(null, inst_62894);
                                                        var inst_62908 = [inst_62907];
                                                        var inst_62909 = new cljs.core.PersistentVector(null, 1, 5, inst_62906, inst_62908, null);
                                                        var inst_62910 = cljs.core.concat.call(null, inst_62897, inst_62905, inst_62909);
                                                        var inst_62911 = cljs.core.apply.call(null, cljs.core.aset, inst_62910);
                                                        var inst_62912 = inst_62885 + 1;
                                                        var tmp63117 = inst_62884;
                                                        var tmp63118 = inst_62882;
                                                        var tmp63119 = inst_62883;
                                                        var inst_62882__$1 = tmp63118;
                                                        var inst_62883__$1 = tmp63119;
                                                        var inst_62884__$1 = tmp63117;
                                                        var inst_62885__$1 = inst_62912;
                                                        var state_63077__$1 = function() {
                                                          var statearr_63122 = state_63077;
                                                          statearr_63122[37] = inst_62884__$1;
                                                          statearr_63122[39] = inst_62885__$1;
                                                          statearr_63122[40] = inst_62882__$1;
                                                          statearr_63122[41] = inst_62883__$1;
                                                          statearr_63122[44] = inst_62911;
                                                          return statearr_63122;
                                                        }();
                                                        var statearr_63123_63267 = state_63077__$1;
                                                        statearr_63123_63267[2] = null;
                                                        statearr_63123_63267[1] = 41;
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_63078 === 50) {
                                                          var state_63077__$1 = state_63077;
                                                          var statearr_63124_63268 = state_63077__$1;
                                                          statearr_63124_63268[2] = null;
                                                          statearr_63124_63268[1] = 51;
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          if (state_val_63078 === 75) {
                                                            var inst_63017 = state_63077[8];
                                                            var inst_63019 = cljs.core.chunked_seq_QMARK_.call(null, inst_63017);
                                                            var state_63077__$1 = state_63077;
                                                            if (inst_63019) {
                                                              var statearr_63125_63269 = state_63077__$1;
                                                              statearr_63125_63269[1] = 78;
                                                            } else {
                                                              var statearr_63126_63270 = state_63077__$1;
                                                              statearr_63126_63270[1] = 79;
                                                            }
                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                          } else {
                                                            if (state_val_63078 === 21) {
                                                              var inst_62749 = state_63077[35];
                                                              var inst_62815 = state_63077[45];
                                                              var inst_62818 = cljs.core.name.call(null, inst_62815);
                                                              var inst_62819 = cljs.core.get.call(null, inst_62749, inst_62815);
                                                              var inst_62820 = camera["position"][inst_62818] = inst_62819;
                                                              var state_63077__$1 = state_63077;
                                                              var statearr_63127_63271 = state_63077__$1;
                                                              statearr_63127_63271[2] = inst_62820;
                                                              statearr_63127_63271[1] = 23;
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              if (state_val_63078 === 31) {
                                                                var state_63077__$1 = state_63077;
                                                                var statearr_63131_63272 = state_63077__$1;
                                                                statearr_63131_63272[2] = null;
                                                                statearr_63131_63272[1] = 32;
                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                              } else {
                                                                if (state_val_63078 === 32) {
                                                                  var inst_62827 = state_63077[27];
                                                                  var inst_62844 = state_63077[2];
                                                                  var inst_62845 = cljs.core.next.call(null, inst_62827);
                                                                  var inst_62807 = inst_62845;
                                                                  var inst_62808 = null;
                                                                  var inst_62809 = 0;
                                                                  var inst_62810 = 0;
                                                                  var state_63077__$1 = function() {
                                                                    var statearr_63132 = state_63077;
                                                                    statearr_63132[28] = inst_62810;
                                                                    statearr_63132[29] = inst_62809;
                                                                    statearr_63132[46] = inst_62844;
                                                                    statearr_63132[30] = inst_62808;
                                                                    statearr_63132[31] = inst_62807;
                                                                    return statearr_63132;
                                                                  }();
                                                                  var statearr_63133_63273 = state_63077__$1;
                                                                  statearr_63133_63273[2] = null;
                                                                  statearr_63133_63273[1] = 16;
                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                } else {
                                                                  if (state_val_63078 === 40) {
                                                                    var inst_62863 = state_63077[47];
                                                                    var inst_62865 = state_63077[48];
                                                                    var inst_62864 = state_63077[49];
                                                                    var inst_62862 = state_63077[50];
                                                                    var inst_62959 = state_63077[2];
                                                                    var inst_62960 = inst_62865 + 1;
                                                                    var tmp63128 = inst_62863;
                                                                    var tmp63129 = inst_62864;
                                                                    var tmp63130 = inst_62862;
                                                                    var inst_62862__$1 = tmp63130;
                                                                    var inst_62863__$1 = tmp63128;
                                                                    var inst_62864__$1 = tmp63129;
                                                                    var inst_62865__$1 = inst_62960;
                                                                    var state_63077__$1 = function() {
                                                                      var statearr_63134 = state_63077;
                                                                      statearr_63134[47] = inst_62863__$1;
                                                                      statearr_63134[51] = inst_62959;
                                                                      statearr_63134[48] = inst_62865__$1;
                                                                      statearr_63134[49] = inst_62864__$1;
                                                                      statearr_63134[50] = inst_62862__$1;
                                                                      return statearr_63134;
                                                                    }();
                                                                    var statearr_63135_63274 = state_63077__$1;
                                                                    statearr_63135_63274[2] = null;
                                                                    statearr_63135_63274[1] = 33;
                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                  } else {
                                                                    if (state_val_63078 === 56) {
                                                                      var inst_62926 = state_63077[33];
                                                                      var inst_62935 = cljs.core.PersistentVector.EMPTY_NODE;
                                                                      var inst_62936 = [inst_62926];
                                                                      var inst_62937 = new cljs.core.PersistentVector(null, 1, 5, inst_62935, inst_62936, null);
                                                                      var state_63077__$1 = state_63077;
                                                                      var statearr_63136_63275 = state_63077__$1;
                                                                      statearr_63136_63275[2] = inst_62937;
                                                                      statearr_63136_63275[1] = 57;
                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                    } else {
                                                                      if (state_val_63078 === 33) {
                                                                        var inst_62865 = state_63077[48];
                                                                        var inst_62864 = state_63077[49];
                                                                        var inst_62867 = inst_62865 < inst_62864;
                                                                        var inst_62868 = inst_62867;
                                                                        var state_63077__$1 = state_63077;
                                                                        if (cljs.core.truth_(inst_62868)) {
                                                                          var statearr_63137_63276 = state_63077__$1;
                                                                          statearr_63137_63276[1] = 35;
                                                                        } else {
                                                                          var statearr_63138_63277 = state_63077__$1;
                                                                          statearr_63138_63277[1] = 36;
                                                                        }
                                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                      } else {
                                                                        if (state_val_63078 === 13) {
                                                                          var inst_62774 = state_63077[52];
                                                                          var inst_62778 = cljs.core.chunk_first.call(null, inst_62774);
                                                                          var inst_62779 = cljs.core.chunk_rest.call(null, inst_62774);
                                                                          var inst_62780 = cljs.core.count.call(null, inst_62778);
                                                                          var inst_62758 = inst_62779;
                                                                          var inst_62759 = inst_62778;
                                                                          var inst_62760 = inst_62780;
                                                                          var inst_62761 = 0;
                                                                          var state_63077__$1 = function() {
                                                                            var statearr_63139 = state_63077;
                                                                            statearr_63139[20] = inst_62760;
                                                                            statearr_63139[21] = inst_62761;
                                                                            statearr_63139[22] = inst_62759;
                                                                            statearr_63139[23] = inst_62758;
                                                                            return statearr_63139;
                                                                          }();
                                                                          var statearr_63140_63278 = state_63077__$1;
                                                                          statearr_63140_63278[2] = null;
                                                                          statearr_63140_63278[1] = 5;
                                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                        } else {
                                                                          if (state_val_63078 === 22) {
                                                                            var state_63077__$1 = state_63077;
                                                                            var statearr_63141_63279 = state_63077__$1;
                                                                            statearr_63141_63279[2] = null;
                                                                            statearr_63141_63279[1] = 23;
                                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                          } else {
                                                                            if (state_val_63078 === 36) {
                                                                              var inst_62963 = state_63077[11];
                                                                              var inst_62862 = state_63077[50];
                                                                              var inst_62963__$1 = cljs.core.seq.call(null, inst_62862);
                                                                              var state_63077__$1 = function() {
                                                                                var statearr_63142 = state_63077;
                                                                                statearr_63142[11] = inst_62963__$1;
                                                                                return statearr_63142;
                                                                              }();
                                                                              if (inst_62963__$1) {
                                                                                var statearr_63143_63280 = state_63077__$1;
                                                                                statearr_63143_63280[1] = 58;
                                                                              } else {
                                                                                var statearr_63144_63281 = state_63077__$1;
                                                                                statearr_63144_63281[1] = 59;
                                                                              }
                                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                            } else {
                                                                              if (state_val_63078 === 41) {
                                                                                var inst_62884 = state_63077[37];
                                                                                var inst_62885 = state_63077[39];
                                                                                var inst_62887 = inst_62885 < inst_62884;
                                                                                var inst_62888 = inst_62887;
                                                                                var state_63077__$1 = state_63077;
                                                                                if (cljs.core.truth_(inst_62888)) {
                                                                                  var statearr_63145_63282 = state_63077__$1;
                                                                                  statearr_63145_63282[1] = 43;
                                                                                } else {
                                                                                  var statearr_63146_63283 = state_63077__$1;
                                                                                  statearr_63146_63283[1] = 44;
                                                                                }
                                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                              } else {
                                                                                if (state_val_63078 === 43) {
                                                                                  var inst_62885 = state_63077[39];
                                                                                  var inst_62883 = state_63077[41];
                                                                                  var inst_62892 = state_63077[34];
                                                                                  var inst_62874 = state_63077[53];
                                                                                  var inst_62891 = cljs.core._nth.call(null, inst_62883, inst_62885);
                                                                                  var inst_62892__$1 = cljs.core.nth.call(null, inst_62891, 0, null);
                                                                                  var inst_62893 = cljs.core.nth.call(null, inst_62891, 1, null);
                                                                                  var inst_62894 = cljs.core.apply.call(null, cljs.core.aget, inst_62874, inst_62892__$1);
                                                                                  var inst_62895 = cljs.core.PersistentVector.EMPTY_NODE;
                                                                                  var inst_62896 = [inst_62874];
                                                                                  var inst_62897 = new cljs.core.PersistentVector(null, 1, 5, inst_62895, inst_62896, null);
                                                                                  var inst_62898 = cljs.core.sequential_QMARK_.call(null, inst_62892__$1);
                                                                                  var state_63077__$1 = function() {
                                                                                    var statearr_63147 = state_63077;
                                                                                    statearr_63147[38] = inst_62897;
                                                                                    statearr_63147[42] = inst_62894;
                                                                                    statearr_63147[34] = inst_62892__$1;
                                                                                    statearr_63147[43] = inst_62893;
                                                                                    return statearr_63147;
                                                                                  }();
                                                                                  if (inst_62898) {
                                                                                    var statearr_63148_63284 = state_63077__$1;
                                                                                    statearr_63148_63284[1] = 46;
                                                                                  } else {
                                                                                    var statearr_63149_63285 = state_63077__$1;
                                                                                    statearr_63149_63285[1] = 47;
                                                                                  }
                                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                } else {
                                                                                  if (state_val_63078 === 61) {
                                                                                    var inst_62963 = state_63077[11];
                                                                                    var inst_62967 = cljs.core.chunk_first.call(null, inst_62963);
                                                                                    var inst_62968 = cljs.core.chunk_rest.call(null, inst_62963);
                                                                                    var inst_62969 = cljs.core.count.call(null, inst_62967);
                                                                                    var inst_62862 = inst_62968;
                                                                                    var inst_62863 = inst_62967;
                                                                                    var inst_62864 = inst_62969;
                                                                                    var inst_62865 = 0;
                                                                                    var state_63077__$1 = function() {
                                                                                      var statearr_63150 = state_63077;
                                                                                      statearr_63150[47] = inst_62863;
                                                                                      statearr_63150[48] = inst_62865;
                                                                                      statearr_63150[49] = inst_62864;
                                                                                      statearr_63150[50] = inst_62862;
                                                                                      return statearr_63150;
                                                                                    }();
                                                                                    var statearr_63151_63286 = state_63077__$1;
                                                                                    statearr_63151_63286[2] = null;
                                                                                    statearr_63151_63286[1] = 33;
                                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                  } else {
                                                                                    if (state_val_63078 === 29) {
                                                                                      var inst_62848 = state_63077[2];
                                                                                      var state_63077__$1 = state_63077;
                                                                                      var statearr_63152_63287 = state_63077__$1;
                                                                                      statearr_63152_63287[2] = inst_62848;
                                                                                      statearr_63152_63287[1] = 26;
                                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                    } else {
                                                                                      if (state_val_63078 === 44) {
                                                                                        var inst_62882 = state_63077[40];
                                                                                        var inst_62915 = state_63077[54];
                                                                                        var inst_62915__$1 = cljs.core.seq.call(null, inst_62882);
                                                                                        var state_63077__$1 = function() {
                                                                                          var statearr_63153 = state_63077;
                                                                                          statearr_63153[54] = inst_62915__$1;
                                                                                          return statearr_63153;
                                                                                        }();
                                                                                        if (inst_62915__$1) {
                                                                                          var statearr_63154_63288 = state_63077__$1;
                                                                                          statearr_63154_63288[1] = 49;
                                                                                        } else {
                                                                                          var statearr_63155_63289 = state_63077__$1;
                                                                                          statearr_63155_63289[1] = 50;
                                                                                        }
                                                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                      } else {
                                                                                        if (state_val_63078 === 6) {
                                                                                          var inst_62798 = state_63077[2];
                                                                                          var inst_62803 = cljs.core.PersistentVector.EMPTY_NODE;
                                                                                          var inst_62804 = [new cljs.core.Keyword(null, "x", "x", 2099068185), new cljs.core.Keyword(null, "y", "y", -1757859776), new cljs.core.Keyword(null, "z", "z", -789527183)];
                                                                                          var inst_62805 = new cljs.core.PersistentVector(null, 3, 5, inst_62803, inst_62804, null);
                                                                                          var inst_62806 = cljs.core.seq.call(null, inst_62805);
                                                                                          var inst_62807 = inst_62806;
                                                                                          var inst_62808 = null;
                                                                                          var inst_62809 = 0;
                                                                                          var inst_62810 = 0;
                                                                                          var state_63077__$1 = function() {
                                                                                            var statearr_63156 = state_63077;
                                                                                            statearr_63156[28] = inst_62810;
                                                                                            statearr_63156[29] = inst_62809;
                                                                                            statearr_63156[55] = inst_62798;
                                                                                            statearr_63156[30] = inst_62808;
                                                                                            statearr_63156[31] = inst_62807;
                                                                                            return statearr_63156;
                                                                                          }();
                                                                                          var statearr_63157_63290 = state_63077__$1;
                                                                                          statearr_63157_63290[2] = null;
                                                                                          statearr_63157_63290[1] = 16;
                                                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                        } else {
                                                                                          if (state_val_63078 === 28) {
                                                                                            var inst_62827 = state_63077[27];
                                                                                            var inst_62836 = state_63077[56];
                                                                                            var inst_62749 = state_63077[35];
                                                                                            var inst_62836__$1 = cljs.core.first.call(null, inst_62827);
                                                                                            var inst_62837 = cljs.core.contains_QMARK_.call(null, inst_62749, inst_62836__$1);
                                                                                            var state_63077__$1 = function() {
                                                                                              var statearr_63158 = state_63077;
                                                                                              statearr_63158[56] = inst_62836__$1;
                                                                                              return statearr_63158;
                                                                                            }();
                                                                                            if (inst_62837) {
                                                                                              var statearr_63159_63291 = state_63077__$1;
                                                                                              statearr_63159_63291[1] = 30;
                                                                                            } else {
                                                                                              var statearr_63160_63292 = state_63077__$1;
                                                                                              statearr_63160_63292[1] = 31;
                                                                                            }
                                                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                          } else {
                                                                                            if (state_val_63078 === 64) {
                                                                                              var inst_62975 = state_63077[12];
                                                                                              var inst_62982 = cljs.core.seq.call(null, inst_62975);
                                                                                              var inst_62983 = cljs.core.seq.call(null, inst_62982);
                                                                                              var inst_62984 = inst_62983;
                                                                                              var inst_62985 = null;
                                                                                              var inst_62986 = 0;
                                                                                              var inst_62987 = 0;
                                                                                              var state_63077__$1 = function() {
                                                                                                var statearr_63161 = state_63077;
                                                                                                statearr_63161[13] = inst_62986;
                                                                                                statearr_63161[15] = inst_62985;
                                                                                                statearr_63161[7] = inst_62984;
                                                                                                statearr_63161[18] = inst_62987;
                                                                                                return statearr_63161;
                                                                                              }();
                                                                                              var statearr_63162_63293 = state_63077__$1;
                                                                                              statearr_63162_63293[2] = null;
                                                                                              statearr_63162_63293[1] = 67;
                                                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                            } else {
                                                                                              if (state_val_63078 === 51) {
                                                                                                var inst_62952 = state_63077[2];
                                                                                                var state_63077__$1 = state_63077;
                                                                                                var statearr_63163_63294 = state_63077__$1;
                                                                                                statearr_63163_63294[2] = inst_62952;
                                                                                                statearr_63163_63294[1] = 45;
                                                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                              } else {
                                                                                                if (state_val_63078 === 25) {
                                                                                                  var state_63077__$1 = state_63077;
                                                                                                  var statearr_63164_63295 = state_63077__$1;
                                                                                                  statearr_63164_63295[2] = null;
                                                                                                  statearr_63164_63295[1] = 26;
                                                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                } else {
                                                                                                  if (state_val_63078 === 34) {
                                                                                                    var inst_62751 = state_63077[10];
                                                                                                    var inst_63072 = state_63077[2];
                                                                                                    var inst_62744 = inst_62751;
                                                                                                    var state_63077__$1 = function() {
                                                                                                      var statearr_63165 = state_63077;
                                                                                                      statearr_63165[57] = inst_63072;
                                                                                                      statearr_63165[32] = inst_62744;
                                                                                                      return statearr_63165;
                                                                                                    }();
                                                                                                    var statearr_63166_63296 = state_63077__$1;
                                                                                                    statearr_63166_63296[2] = null;
                                                                                                    statearr_63166_63296[1] = 2;
                                                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                  } else {
                                                                                                    if (state_val_63078 === 17) {
                                                                                                      var inst_62750 = state_63077[36];
                                                                                                      var inst_62855 = state_63077[2];
                                                                                                      var inst_62860 = cljs.core.seq.call(null, inst_62750);
                                                                                                      var inst_62861 = cljs.core.seq.call(null, inst_62860);
                                                                                                      var inst_62862 = inst_62861;
                                                                                                      var inst_62863 = null;
                                                                                                      var inst_62864 = 0;
                                                                                                      var inst_62865 = 0;
                                                                                                      var state_63077__$1 = function() {
                                                                                                        var statearr_63167 = state_63077;
                                                                                                        statearr_63167[47] = inst_62863;
                                                                                                        statearr_63167[48] = inst_62865;
                                                                                                        statearr_63167[49] = inst_62864;
                                                                                                        statearr_63167[58] = inst_62855;
                                                                                                        statearr_63167[50] = inst_62862;
                                                                                                        return statearr_63167;
                                                                                                      }();
                                                                                                      var statearr_63168_63297 = state_63077__$1;
                                                                                                      statearr_63168_63297[2] = null;
                                                                                                      statearr_63168_63297[1] = 33;
                                                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                    } else {
                                                                                                      if (state_val_63078 === 3) {
                                                                                                        var inst_63075 = state_63077[2];
                                                                                                        var state_63077__$1 = state_63077;
                                                                                                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_63077__$1, inst_63075);
                                                                                                      } else {
                                                                                                        if (state_val_63078 === 12) {
                                                                                                          var inst_62794 = state_63077[2];
                                                                                                          var state_63077__$1 = state_63077;
                                                                                                          var statearr_63169_63298 = state_63077__$1;
                                                                                                          statearr_63169_63298[2] = inst_62794;
                                                                                                          statearr_63169_63298[1] = 9;
                                                                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                        } else {
                                                                                                          if (state_val_63078 === 2) {
                                                                                                            var state_63077__$1 = state_63077;
                                                                                                            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_63077__$1, 4, render_state);
                                                                                                          } else {
                                                                                                            if (state_val_63078 === 66) {
                                                                                                              var inst_62963 = state_63077[11];
                                                                                                              var inst_63061 = state_63077[2];
                                                                                                              var inst_63062 = cljs.core.next.call(null, inst_62963);
                                                                                                              var inst_62862 = inst_63062;
                                                                                                              var inst_62863 = null;
                                                                                                              var inst_62864 = 0;
                                                                                                              var inst_62865 = 0;
                                                                                                              var state_63077__$1 = function() {
                                                                                                                var statearr_63173 = state_63077;
                                                                                                                statearr_63173[59] = inst_63061;
                                                                                                                statearr_63173[47] = inst_62863;
                                                                                                                statearr_63173[48] = inst_62865;
                                                                                                                statearr_63173[49] = inst_62864;
                                                                                                                statearr_63173[50] = inst_62862;
                                                                                                                return statearr_63173;
                                                                                                              }();
                                                                                                              var statearr_63174_63299 = state_63077__$1;
                                                                                                              statearr_63174_63299[2] = null;
                                                                                                              statearr_63174_63299[1] = 33;
                                                                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                            } else {
                                                                                                              if (state_val_63078 === 23) {
                                                                                                                var inst_62810 = state_63077[28];
                                                                                                                var inst_62809 = state_63077[29];
                                                                                                                var inst_62808 = state_63077[30];
                                                                                                                var inst_62807 = state_63077[31];
                                                                                                                var inst_62823 = state_63077[2];
                                                                                                                var inst_62824 = inst_62810 + 1;
                                                                                                                var tmp63170 = inst_62809;
                                                                                                                var tmp63171 = inst_62808;
                                                                                                                var tmp63172 = inst_62807;
                                                                                                                var inst_62807__$1 = tmp63172;
                                                                                                                var inst_62808__$1 = tmp63171;
                                                                                                                var inst_62809__$1 = tmp63170;
                                                                                                                var inst_62810__$1 = inst_62824;
                                                                                                                var state_63077__$1 = function() {
                                                                                                                  var statearr_63175 = state_63077;
                                                                                                                  statearr_63175[28] = inst_62810__$1;
                                                                                                                  statearr_63175[29] = inst_62809__$1;
                                                                                                                  statearr_63175[60] = inst_62823;
                                                                                                                  statearr_63175[30] = inst_62808__$1;
                                                                                                                  statearr_63175[31] = inst_62807__$1;
                                                                                                                  return statearr_63175;
                                                                                                                }();
                                                                                                                var statearr_63176_63300 = state_63077__$1;
                                                                                                                statearr_63176_63300[2] = null;
                                                                                                                statearr_63176_63300[1] = 16;
                                                                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                              } else {
                                                                                                                if (state_val_63078 === 47) {
                                                                                                                  var inst_62892 = state_63077[34];
                                                                                                                  var inst_62901 = cljs.core.PersistentVector.EMPTY_NODE;
                                                                                                                  var inst_62902 = [inst_62892];
                                                                                                                  var inst_62903 = new cljs.core.PersistentVector(null, 1, 5, inst_62901, inst_62902, null);
                                                                                                                  var state_63077__$1 = state_63077;
                                                                                                                  var statearr_63177_63301 = state_63077__$1;
                                                                                                                  statearr_63177_63301[2] = inst_62903;
                                                                                                                  statearr_63177_63301[1] = 48;
                                                                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                                } else {
                                                                                                                  if (state_val_63078 === 35) {
                                                                                                                    var inst_62863 = state_63077[47];
                                                                                                                    var inst_62865 = state_63077[48];
                                                                                                                    var inst_62751 = state_63077[10];
                                                                                                                    var inst_62874 = state_63077[53];
                                                                                                                    var inst_62871 = cljs.core._nth.call(null, inst_62863, inst_62865);
                                                                                                                    var inst_62872 = cljs.core.nth.call(null, inst_62871, 0, null);
                                                                                                                    var inst_62873 = cljs.core.nth.call(null, inst_62871, 1, null);
                                                                                                                    var inst_62874__$1 = cljs.core.get.call(null, inst_62751, inst_62872);
                                                                                                                    var state_63077__$1 = function() {
                                                                                                                      var statearr_63178 = state_63077;
                                                                                                                      statearr_63178[61] = inst_62873;
                                                                                                                      statearr_63178[53] = inst_62874__$1;
                                                                                                                      return statearr_63178;
                                                                                                                    }();
                                                                                                                    if (cljs.core.truth_(inst_62874__$1)) {
                                                                                                                      var statearr_63179_63302 = state_63077__$1;
                                                                                                                      statearr_63179_63302[1] = 38;
                                                                                                                    } else {
                                                                                                                      var statearr_63180_63303 = state_63077__$1;
                                                                                                                      statearr_63180_63303[1] = 39;
                                                                                                                    }
                                                                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                                  } else {
                                                                                                                    if (state_val_63078 === 82) {
                                                                                                                      var inst_63028 = state_63077[62];
                                                                                                                      var inst_63037 = cljs.core.PersistentVector.EMPTY_NODE;
                                                                                                                      var inst_63038 = [inst_63028];
                                                                                                                      var inst_63039 = new cljs.core.PersistentVector(null, 1, 5, inst_63037, inst_63038, null);
                                                                                                                      var state_63077__$1 = state_63077;
                                                                                                                      var statearr_63181_63304 = state_63077__$1;
                                                                                                                      statearr_63181_63304[2] = inst_63039;
                                                                                                                      statearr_63181_63304[1] = 83;
                                                                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                                    } else {
                                                                                                                      if (state_val_63078 === 76) {
                                                                                                                        var state_63077__$1 = state_63077;
                                                                                                                        var statearr_63182_63305 = state_63077__$1;
                                                                                                                        statearr_63182_63305[2] = null;
                                                                                                                        statearr_63182_63305[1] = 77;
                                                                                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                                      } else {
                                                                                                                        if (state_val_63078 === 19) {
                                                                                                                          var inst_62827 = state_63077[27];
                                                                                                                          var inst_62807 = state_63077[31];
                                                                                                                          var inst_62827__$1 = cljs.core.seq.call(null, inst_62807);
                                                                                                                          var state_63077__$1 = function() {
                                                                                                                            var statearr_63183 = state_63077;
                                                                                                                            statearr_63183[27] = inst_62827__$1;
                                                                                                                            return statearr_63183;
                                                                                                                          }();
                                                                                                                          if (inst_62827__$1) {
                                                                                                                            var statearr_63184_63306 = state_63077__$1;
                                                                                                                            statearr_63184_63306[1] = 24;
                                                                                                                          } else {
                                                                                                                            var statearr_63185_63307 = state_63077__$1;
                                                                                                                            statearr_63185_63307[1] = 25;
                                                                                                                          }
                                                                                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                                        } else {
                                                                                                                          if (state_val_63078 === 57) {
                                                                                                                            var inst_62928 = state_63077[63];
                                                                                                                            var inst_62927 = state_63077[64];
                                                                                                                            var inst_62915 = state_63077[54];
                                                                                                                            var inst_62931 = state_63077[65];
                                                                                                                            var inst_62939 = state_63077[2];
                                                                                                                            var inst_62940 = cljs.core.PersistentVector.EMPTY_NODE;
                                                                                                                            var inst_62941 = inst_62927.call(null, inst_62928);
                                                                                                                            var inst_62942 = [inst_62941];
                                                                                                                            var inst_62943 = new cljs.core.PersistentVector(null, 1, 5, inst_62940, inst_62942, null);
                                                                                                                            var inst_62944 = cljs.core.concat.call(null, inst_62931, inst_62939, inst_62943);
                                                                                                                            var inst_62945 = cljs.core.apply.call(null, cljs.core.aset, inst_62944);
                                                                                                                            var inst_62946 = cljs.core.next.call(null, inst_62915);
                                                                                                                            var inst_62882 = inst_62946;
                                                                                                                            var inst_62883 = null;
                                                                                                                            var inst_62884 = 0;
                                                                                                                            var inst_62885 = 0;
                                                                                                                            var state_63077__$1 = function() {
                                                                                                                              var statearr_63186 = state_63077;
                                                                                                                              statearr_63186[37] = inst_62884;
                                                                                                                              statearr_63186[39] = inst_62885;
                                                                                                                              statearr_63186[40] = inst_62882;
                                                                                                                              statearr_63186[41] = inst_62883;
                                                                                                                              statearr_63186[66] = inst_62945;
                                                                                                                              return statearr_63186;
                                                                                                                            }();
                                                                                                                            var statearr_63187_63308 = state_63077__$1;
                                                                                                                            statearr_63187_63308[2] = null;
                                                                                                                            statearr_63187_63308[1] = 41;
                                                                                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                                          } else {
                                                                                                                            if (state_val_63078 === 68) {
                                                                                                                              var inst_63058 = state_63077[2];
                                                                                                                              var state_63077__$1 = state_63077;
                                                                                                                              var statearr_63188_63309 = state_63077__$1;
                                                                                                                              statearr_63188_63309[2] = inst_63058;
                                                                                                                              statearr_63188_63309[1] = 66;
                                                                                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                                            } else {
                                                                                                                              if (state_val_63078 === 11) {
                                                                                                                                var state_63077__$1 = state_63077;
                                                                                                                                var statearr_63189_63310 = state_63077__$1;
                                                                                                                                statearr_63189_63310[2] = null;
                                                                                                                                statearr_63189_63310[1] = 12;
                                                                                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                                              } else {
                                                                                                                                if (state_val_63078 === 9) {
                                                                                                                                  var inst_62796 = state_63077[2];
                                                                                                                                  var state_63077__$1 = state_63077;
                                                                                                                                  var statearr_63190_63311 = state_63077__$1;
                                                                                                                                  statearr_63190_63311[2] = inst_62796;
                                                                                                                                  statearr_63190_63311[1] = 6;
                                                                                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                                                } else {
                                                                                                                                  if (state_val_63078 === 5) {
                                                                                                                                    var inst_62760 = state_63077[20];
                                                                                                                                    var inst_62761 = state_63077[21];
                                                                                                                                    var inst_62763 = inst_62761 < inst_62760;
                                                                                                                                    var inst_62764 = inst_62763;
                                                                                                                                    var state_63077__$1 = state_63077;
                                                                                                                                    if (cljs.core.truth_(inst_62764)) {
                                                                                                                                      var statearr_63191_63312 = state_63077__$1;
                                                                                                                                      statearr_63191_63312[1] = 7;
                                                                                                                                    } else {
                                                                                                                                      var statearr_63192_63313 = state_63077__$1;
                                                                                                                                      statearr_63192_63313[1] = 8;
                                                                                                                                    }
                                                                                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                                                  } else {
                                                                                                                                    if (state_val_63078 === 83) {
                                                                                                                                      var inst_63033 = state_63077[67];
                                                                                                                                      var inst_63029 = state_63077[68];
                                                                                                                                      var inst_63017 = state_63077[8];
                                                                                                                                      var inst_63030 = state_63077[69];
                                                                                                                                      var inst_63041 = state_63077[2];
                                                                                                                                      var inst_63042 = cljs.core.PersistentVector.EMPTY_NODE;
                                                                                                                                      var inst_63043 = inst_63029.call(null, inst_63030);
                                                                                                                                      var inst_63044 = [inst_63043];
                                                                                                                                      var inst_63045 = new cljs.core.PersistentVector(null, 1, 5, inst_63042, inst_63044, null);
                                                                                                                                      var inst_63046 = cljs.core.concat.call(null, inst_63033, inst_63041, inst_63045);
                                                                                                                                      var inst_63047 = cljs.core.apply.call(null, cljs.core.aset, inst_63046);
                                                                                                                                      var inst_63048 = cljs.core.next.call(null, inst_63017);
                                                                                                                                      var inst_62984 = inst_63048;
                                                                                                                                      var inst_62985 = null;
                                                                                                                                      var inst_62986 = 0;
                                                                                                                                      var inst_62987 = 0;
                                                                                                                                      var state_63077__$1 = function() {
                                                                                                                                        var statearr_63193 = state_63077;
                                                                                                                                        statearr_63193[13] = inst_62986;
                                                                                                                                        statearr_63193[15] = inst_62985;
                                                                                                                                        statearr_63193[7] = inst_62984;
                                                                                                                                        statearr_63193[70] = inst_63047;
                                                                                                                                        statearr_63193[18] = inst_62987;
                                                                                                                                        return statearr_63193;
                                                                                                                                      }();
                                                                                                                                      var statearr_63194_63314 = state_63077__$1;
                                                                                                                                      statearr_63194_63314[2] = null;
                                                                                                                                      statearr_63194_63314[1] = 67;
                                                                                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                                                    } else {
                                                                                                                                      if (state_val_63078 === 14) {
                                                                                                                                        var inst_62774 = state_63077[52];
                                                                                                                                        var inst_62784 = cljs.core.first.call(null, inst_62774);
                                                                                                                                        var inst_62785 = cljs.core.nth.call(null, inst_62784, 0, null);
                                                                                                                                        var inst_62786 = cljs.core.nth.call(null, inst_62784, 1, null);
                                                                                                                                        var inst_62787 = scene.add(inst_62786);
                                                                                                                                        var inst_62788 = cljs.core.next.call(null, inst_62774);
                                                                                                                                        var inst_62758 = inst_62788;
                                                                                                                                        var inst_62759 = null;
                                                                                                                                        var inst_62760 = 0;
                                                                                                                                        var inst_62761 = 0;
                                                                                                                                        var state_63077__$1 = function() {
                                                                                                                                          var statearr_63195 = state_63077;
                                                                                                                                          statearr_63195[20] = inst_62760;
                                                                                                                                          statearr_63195[21] = inst_62761;
                                                                                                                                          statearr_63195[71] = inst_62785;
                                                                                                                                          statearr_63195[72] = inst_62787;
                                                                                                                                          statearr_63195[22] = inst_62759;
                                                                                                                                          statearr_63195[23] = inst_62758;
                                                                                                                                          return statearr_63195;
                                                                                                                                        }();
                                                                                                                                        var statearr_63196_63315 = state_63077__$1;
                                                                                                                                        statearr_63196_63315[2] = null;
                                                                                                                                        statearr_63196_63315[1] = 5;
                                                                                                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                                                      } else {
                                                                                                                                        if (state_val_63078 === 45) {
                                                                                                                                          var inst_62954 = state_63077[2];
                                                                                                                                          var state_63077__$1 = state_63077;
                                                                                                                                          var statearr_63197_63316 = state_63077__$1;
                                                                                                                                          statearr_63197_63316[2] = inst_62954;
                                                                                                                                          statearr_63197_63316[1] = 42;
                                                                                                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                                                        } else {
                                                                                                                                          if (state_val_63078 === 53) {
                                                                                                                                            var inst_62926 = state_63077[33];
                                                                                                                                            var inst_62915 = state_63077[54];
                                                                                                                                            var inst_62874 = state_63077[53];
                                                                                                                                            var inst_62925 = cljs.core.first.call(null, inst_62915);
                                                                                                                                            var inst_62926__$1 = cljs.core.nth.call(null, inst_62925, 0, null);
                                                                                                                                            var inst_62927 = cljs.core.nth.call(null, inst_62925, 1, null);
                                                                                                                                            var inst_62928 = cljs.core.apply.call(null, cljs.core.aget, inst_62874, inst_62926__$1);
                                                                                                                                            var inst_62929 = cljs.core.PersistentVector.EMPTY_NODE;
                                                                                                                                            var inst_62930 = [inst_62874];
                                                                                                                                            var inst_62931 = new cljs.core.PersistentVector(null, 1, 5, inst_62929, inst_62930, null);
                                                                                                                                            var inst_62932 = cljs.core.sequential_QMARK_.call(null, inst_62926__$1);
                                                                                                                                            var state_63077__$1 = function() {
                                                                                                                                              var statearr_63198 = state_63077;
                                                                                                                                              statearr_63198[33] = inst_62926__$1;
                                                                                                                                              statearr_63198[63] = inst_62928;
                                                                                                                                              statearr_63198[64] = inst_62927;
                                                                                                                                              statearr_63198[65] = inst_62931;
                                                                                                                                              return statearr_63198;
                                                                                                                                            }();
                                                                                                                                            if (inst_62932) {
                                                                                                                                              var statearr_63199_63317 = state_63077__$1;
                                                                                                                                              statearr_63199_63317[1] = 55;
                                                                                                                                            } else {
                                                                                                                                              var statearr_63200_63318 = state_63077__$1;
                                                                                                                                              statearr_63200_63318[1] = 56;
                                                                                                                                            }
                                                                                                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                                                          } else {
                                                                                                                                            if (state_val_63078 === 78) {
                                                                                                                                              var inst_63017 = state_63077[8];
                                                                                                                                              var inst_63021 = cljs.core.chunk_first.call(null, inst_63017);
                                                                                                                                              var inst_63022 = cljs.core.chunk_rest.call(null, inst_63017);
                                                                                                                                              var inst_63023 = cljs.core.count.call(null, inst_63021);
                                                                                                                                              var inst_62984 = inst_63022;
                                                                                                                                              var inst_62985 = inst_63021;
                                                                                                                                              var inst_62986 = inst_63023;
                                                                                                                                              var inst_62987 = 0;
                                                                                                                                              var state_63077__$1 = function() {
                                                                                                                                                var statearr_63201 = state_63077;
                                                                                                                                                statearr_63201[13] = inst_62986;
                                                                                                                                                statearr_63201[15] = inst_62985;
                                                                                                                                                statearr_63201[7] = inst_62984;
                                                                                                                                                statearr_63201[18] = inst_62987;
                                                                                                                                                return statearr_63201;
                                                                                                                                              }();
                                                                                                                                              var statearr_63202_63319 = state_63077__$1;
                                                                                                                                              statearr_63202_63319[2] = null;
                                                                                                                                              statearr_63202_63319[1] = 67;
                                                                                                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                                                            } else {
                                                                                                                                              if (state_val_63078 === 26) {
                                                                                                                                                var inst_62851 = state_63077[2];
                                                                                                                                                var state_63077__$1 = state_63077;
                                                                                                                                                var statearr_63203_63320 = state_63077__$1;
                                                                                                                                                statearr_63203_63320[2] = inst_62851;
                                                                                                                                                statearr_63203_63320[1] = 20;
                                                                                                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                                                              } else {
                                                                                                                                                if (state_val_63078 === 16) {
                                                                                                                                                  var inst_62810 = state_63077[28];
                                                                                                                                                  var inst_62809 = state_63077[29];
                                                                                                                                                  var inst_62812 = inst_62810 < inst_62809;
                                                                                                                                                  var inst_62813 = inst_62812;
                                                                                                                                                  var state_63077__$1 = state_63077;
                                                                                                                                                  if (cljs.core.truth_(inst_62813)) {
                                                                                                                                                    var statearr_63204_63321 = state_63077__$1;
                                                                                                                                                    statearr_63204_63321[1] = 18;
                                                                                                                                                  } else {
                                                                                                                                                    var statearr_63205_63322 = state_63077__$1;
                                                                                                                                                    statearr_63205_63322[1] = 19;
                                                                                                                                                  }
                                                                                                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                                                                } else {
                                                                                                                                                  if (state_val_63078 === 81) {
                                                                                                                                                    var inst_63028 = state_63077[62];
                                                                                                                                                    var state_63077__$1 = state_63077;
                                                                                                                                                    var statearr_63206_63323 = state_63077__$1;
                                                                                                                                                    statearr_63206_63323[2] = inst_63028;
                                                                                                                                                    statearr_63206_63323[1] = 83;
                                                                                                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                                                                  } else {
                                                                                                                                                    if (state_val_63078 === 79) {
                                                                                                                                                      var inst_62976 = state_63077[9];
                                                                                                                                                      var inst_63028 = state_63077[62];
                                                                                                                                                      var inst_63017 = state_63077[8];
                                                                                                                                                      var inst_63027 = cljs.core.first.call(null, inst_63017);
                                                                                                                                                      var inst_63028__$1 = cljs.core.nth.call(null, inst_63027, 0, null);
                                                                                                                                                      var inst_63029 = cljs.core.nth.call(null, inst_63027, 1, null);
                                                                                                                                                      var inst_63030 = cljs.core.apply.call(null, cljs.core.aget, inst_62976, inst_63028__$1);
                                                                                                                                                      var inst_63031 = cljs.core.PersistentVector.EMPTY_NODE;
                                                                                                                                                      var inst_63032 = [inst_62976];
                                                                                                                                                      var inst_63033 = new cljs.core.PersistentVector(null, 1, 5, inst_63031, inst_63032, null);
                                                                                                                                                      var inst_63034 = cljs.core.sequential_QMARK_.call(null, inst_63028__$1);
                                                                                                                                                      var state_63077__$1 = function() {
                                                                                                                                                        var statearr_63207 = state_63077;
                                                                                                                                                        statearr_63207[67] = inst_63033;
                                                                                                                                                        statearr_63207[62] = inst_63028__$1;
                                                                                                                                                        statearr_63207[68] = inst_63029;
                                                                                                                                                        statearr_63207[69] = inst_63030;
                                                                                                                                                        return statearr_63207;
                                                                                                                                                      }();
                                                                                                                                                      if (inst_63034) {
                                                                                                                                                        var statearr_63208_63324 = state_63077__$1;
                                                                                                                                                        statearr_63208_63324[1] = 81;
                                                                                                                                                      } else {
                                                                                                                                                        var statearr_63209_63325 = state_63077__$1;
                                                                                                                                                        statearr_63209_63325[1] = 82;
                                                                                                                                                      }
                                                                                                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                                                                    } else {
                                                                                                                                                      if (state_val_63078 === 38) {
                                                                                                                                                        var inst_62873 = state_63077[61];
                                                                                                                                                        var inst_62880 = cljs.core.seq.call(null, inst_62873);
                                                                                                                                                        var inst_62881 = cljs.core.seq.call(null, inst_62880);
                                                                                                                                                        var inst_62882 = inst_62881;
                                                                                                                                                        var inst_62883 = null;
                                                                                                                                                        var inst_62884 = 0;
                                                                                                                                                        var inst_62885 = 0;
                                                                                                                                                        var state_63077__$1 = function() {
                                                                                                                                                          var statearr_63210 = state_63077;
                                                                                                                                                          statearr_63210[37] = inst_62884;
                                                                                                                                                          statearr_63210[39] = inst_62885;
                                                                                                                                                          statearr_63210[40] = inst_62882;
                                                                                                                                                          statearr_63210[41] = inst_62883;
                                                                                                                                                          return statearr_63210;
                                                                                                                                                        }();
                                                                                                                                                        var statearr_63211_63326 = state_63077__$1;
                                                                                                                                                        statearr_63211_63326[2] = null;
                                                                                                                                                        statearr_63211_63326[1] = 41;
                                                                                                                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                                                                      } else {
                                                                                                                                                        if (state_val_63078 === 30) {
                                                                                                                                                          var inst_62836 = state_63077[56];
                                                                                                                                                          var inst_62749 = state_63077[35];
                                                                                                                                                          var inst_62839 = cljs.core.name.call(null, inst_62836);
                                                                                                                                                          var inst_62840 = cljs.core.get.call(null, inst_62749, inst_62836);
                                                                                                                                                          var inst_62841 = camera["position"][inst_62839] = inst_62840;
                                                                                                                                                          var state_63077__$1 = state_63077;
                                                                                                                                                          var statearr_63212_63327 = state_63077__$1;
                                                                                                                                                          statearr_63212_63327[2] = inst_62841;
                                                                                                                                                          statearr_63212_63327[1] = 32;
                                                                                                                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                                                                        } else {
                                                                                                                                                          if (state_val_63078 === 73) {
                                                                                                                                                            var inst_62994 = state_63077[26];
                                                                                                                                                            var inst_63003 = cljs.core.PersistentVector.EMPTY_NODE;
                                                                                                                                                            var inst_63004 = [inst_62994];
                                                                                                                                                            var inst_63005 = new cljs.core.PersistentVector(null, 1, 5, inst_63003, inst_63004, null);
                                                                                                                                                            var state_63077__$1 = state_63077;
                                                                                                                                                            var statearr_63213_63328 = state_63077__$1;
                                                                                                                                                            statearr_63213_63328[2] = inst_63005;
                                                                                                                                                            statearr_63213_63328[1] = 74;
                                                                                                                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                                                                          } else {
                                                                                                                                                            if (state_val_63078 === 10) {
                                                                                                                                                              var inst_62774 = state_63077[52];
                                                                                                                                                              var inst_62776 = cljs.core.chunked_seq_QMARK_.call(null, inst_62774);
                                                                                                                                                              var state_63077__$1 = state_63077;
                                                                                                                                                              if (inst_62776) {
                                                                                                                                                                var statearr_63214_63329 = state_63077__$1;
                                                                                                                                                                statearr_63214_63329[1] = 13;
                                                                                                                                                              } else {
                                                                                                                                                                var statearr_63215_63330 = state_63077__$1;
                                                                                                                                                                statearr_63215_63330[1] = 14;
                                                                                                                                                              }
                                                                                                                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                                                                            } else {
                                                                                                                                                              if (state_val_63078 === 18) {
                                                                                                                                                                var inst_62810 = state_63077[28];
                                                                                                                                                                var inst_62749 = state_63077[35];
                                                                                                                                                                var inst_62808 = state_63077[30];
                                                                                                                                                                var inst_62815 = state_63077[45];
                                                                                                                                                                var inst_62815__$1 = cljs.core._nth.call(null, inst_62808, inst_62810);
                                                                                                                                                                var inst_62816 = cljs.core.contains_QMARK_.call(null, inst_62749, inst_62815__$1);
                                                                                                                                                                var state_63077__$1 = function() {
                                                                                                                                                                  var statearr_63216 = state_63077;
                                                                                                                                                                  statearr_63216[45] = inst_62815__$1;
                                                                                                                                                                  return statearr_63216;
                                                                                                                                                                }();
                                                                                                                                                                if (inst_62816) {
                                                                                                                                                                  var statearr_63217_63331 = state_63077__$1;
                                                                                                                                                                  statearr_63217_63331[1] = 21;
                                                                                                                                                                } else {
                                                                                                                                                                  var statearr_63218_63332 = state_63077__$1;
                                                                                                                                                                  statearr_63218_63332[1] = 22;
                                                                                                                                                                }
                                                                                                                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                                                                              } else {
                                                                                                                                                                if (state_val_63078 === 52) {
                                                                                                                                                                  var inst_62915 = state_63077[54];
                                                                                                                                                                  var inst_62919 = cljs.core.chunk_first.call(null, inst_62915);
                                                                                                                                                                  var inst_62920 = cljs.core.chunk_rest.call(null, inst_62915);
                                                                                                                                                                  var inst_62921 = cljs.core.count.call(null, inst_62919);
                                                                                                                                                                  var inst_62882 = inst_62920;
                                                                                                                                                                  var inst_62883 = inst_62919;
                                                                                                                                                                  var inst_62884 = inst_62921;
                                                                                                                                                                  var inst_62885 = 0;
                                                                                                                                                                  var state_63077__$1 = function() {
                                                                                                                                                                    var statearr_63219 = state_63077;
                                                                                                                                                                    statearr_63219[37] = inst_62884;
                                                                                                                                                                    statearr_63219[39] = inst_62885;
                                                                                                                                                                    statearr_63219[40] = inst_62882;
                                                                                                                                                                    statearr_63219[41] = inst_62883;
                                                                                                                                                                    return statearr_63219;
                                                                                                                                                                  }();
                                                                                                                                                                  var statearr_63220_63333 = state_63077__$1;
                                                                                                                                                                  statearr_63220_63333[2] = null;
                                                                                                                                                                  statearr_63220_63333[1] = 41;
                                                                                                                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                                                                                } else {
                                                                                                                                                                  if (state_val_63078 === 67) {
                                                                                                                                                                    var inst_62986 = state_63077[13];
                                                                                                                                                                    var inst_62987 = state_63077[18];
                                                                                                                                                                    var inst_62989 = inst_62987 < inst_62986;
                                                                                                                                                                    var inst_62990 = inst_62989;
                                                                                                                                                                    var state_63077__$1 = state_63077;
                                                                                                                                                                    if (cljs.core.truth_(inst_62990)) {
                                                                                                                                                                      var statearr_63221_63334 = state_63077__$1;
                                                                                                                                                                      statearr_63221_63334[1] = 69;
                                                                                                                                                                    } else {
                                                                                                                                                                      var statearr_63222_63335 = state_63077__$1;
                                                                                                                                                                      statearr_63222_63335[1] = 70;
                                                                                                                                                                    }
                                                                                                                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                                                                                  } else {
                                                                                                                                                                    if (state_val_63078 === 71) {
                                                                                                                                                                      var inst_63056 = state_63077[2];
                                                                                                                                                                      var state_63077__$1 = state_63077;
                                                                                                                                                                      var statearr_63223_63336 = state_63077__$1;
                                                                                                                                                                      statearr_63223_63336[2] = inst_63056;
                                                                                                                                                                      statearr_63223_63336[1] = 68;
                                                                                                                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                                                                                    } else {
                                                                                                                                                                      if (state_val_63078 === 42) {
                                                                                                                                                                        var inst_62956 = state_63077[2];
                                                                                                                                                                        var state_63077__$1 = state_63077;
                                                                                                                                                                        var statearr_63224_63337 = state_63077__$1;
                                                                                                                                                                        statearr_63224_63337[2] = inst_62956;
                                                                                                                                                                        statearr_63224_63337[1] = 40;
                                                                                                                                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                                                                                      } else {
                                                                                                                                                                        if (state_val_63078 === 80) {
                                                                                                                                                                          var inst_63051 = state_63077[2];
                                                                                                                                                                          var state_63077__$1 = state_63077;
                                                                                                                                                                          var statearr_63225_63338 = state_63077__$1;
                                                                                                                                                                          statearr_63225_63338[2] = inst_63051;
                                                                                                                                                                          statearr_63225_63338[1] = 77;
                                                                                                                                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                                                                                        } else {
                                                                                                                                                                          if (state_val_63078 === 37) {
                                                                                                                                                                            var inst_63070 = state_63077[2];
                                                                                                                                                                            var state_63077__$1 = state_63077;
                                                                                                                                                                            var statearr_63226_63339 = state_63077__$1;
                                                                                                                                                                            statearr_63226_63339[2] = inst_63070;
                                                                                                                                                                            statearr_63226_63339[1] = 34;
                                                                                                                                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                                                                                          } else {
                                                                                                                                                                            if (state_val_63078 === 63) {
                                                                                                                                                                              var inst_63065 = state_63077[2];
                                                                                                                                                                              var state_63077__$1 = state_63077;
                                                                                                                                                                              var statearr_63227_63340 = state_63077__$1;
                                                                                                                                                                              statearr_63227_63340[2] = inst_63065;
                                                                                                                                                                              statearr_63227_63340[1] = 60;
                                                                                                                                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                                                                                            } else {
                                                                                                                                                                              if (state_val_63078 === 8) {
                                                                                                                                                                                var inst_62774 = state_63077[52];
                                                                                                                                                                                var inst_62758 = state_63077[23];
                                                                                                                                                                                var inst_62774__$1 = cljs.core.seq.call(null, inst_62758);
                                                                                                                                                                                var state_63077__$1 = function() {
                                                                                                                                                                                  var statearr_63228 = state_63077;
                                                                                                                                                                                  statearr_63228[52] = inst_62774__$1;
                                                                                                                                                                                  return statearr_63228;
                                                                                                                                                                                }();
                                                                                                                                                                                if (inst_62774__$1) {
                                                                                                                                                                                  var statearr_63229_63341 = state_63077__$1;
                                                                                                                                                                                  statearr_63229_63341[1] = 10;
                                                                                                                                                                                } else {
                                                                                                                                                                                  var statearr_63230_63342 = state_63077__$1;
                                                                                                                                                                                  statearr_63230_63342[1] = 11;
                                                                                                                                                                                }
                                                                                                                                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                                                                                              } else {
                                                                                                                                                                                if (state_val_63078 === 49) {
                                                                                                                                                                                  var inst_62915 = state_63077[54];
                                                                                                                                                                                  var inst_62917 = cljs.core.chunked_seq_QMARK_.call(null, inst_62915);
                                                                                                                                                                                  var state_63077__$1 = state_63077;
                                                                                                                                                                                  if (inst_62917) {
                                                                                                                                                                                    var statearr_63231_63343 = state_63077__$1;
                                                                                                                                                                                    statearr_63231_63343[1] = 52;
                                                                                                                                                                                  } else {
                                                                                                                                                                                    var statearr_63232_63344 = state_63077__$1;
                                                                                                                                                                                    statearr_63232_63344[1] = 53;
                                                                                                                                                                                  }
                                                                                                                                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                                                                                                } else {
                                                                                                                                                                                  return null;
                                                                                                                                                                                }
                                                                                                                                                                              }
                                                                                                                                                                            }
                                                                                                                                                                          }
                                                                                                                                                                        }
                                                                                                                                                                      }
                                                                                                                                                                    }
                                                                                                                                                                  }
                                                                                                                                                                }
                                                                                                                                                              }
                                                                                                                                                            }
                                                                                                                                                          }
                                                                                                                                                        }
                                                                                                                                                      }
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                                              }
                                                                                                                                            }
                                                                                                                                          }
                                                                                                                                        }
                                                                                                                                      }
                                                                                                                                    }
                                                                                                                                  }
                                                                                                                                }
                                                                                                                              }
                                                                                                                            }
                                                                                                                          }
                                                                                                                        }
                                                                                                                      }
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__12926__auto___63240, render_state, scene, camera, renderer);
        return function(switch__12864__auto__, c__12926__auto___63240, render_state, scene, camera, renderer) {
          return function() {
            var metaverse$core$main_$_state_machine__12865__auto__ = null;
            var metaverse$core$main_$_state_machine__12865__auto____0 = function() {
              var statearr_63236 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_63236[0] = metaverse$core$main_$_state_machine__12865__auto__;
              statearr_63236[1] = 1;
              return statearr_63236;
            };
            var metaverse$core$main_$_state_machine__12865__auto____1 = function(state_63077) {
              while (true) {
                var ret_value__12866__auto__ = function() {
                  try {
                    while (true) {
                      var result__12867__auto__ = switch__12864__auto__.call(null, state_63077);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__12867__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__12867__auto__;
                      }
                      break;
                    }
                  } catch (e63237) {
                    if (e63237 instanceof Object) {
                      var ex__12868__auto__ = e63237;
                      var statearr_63238_63345 = state_63077;
                      statearr_63238_63345[5] = ex__12868__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_63077);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e63237;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__12866__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__63346 = state_63077;
                  state_63077 = G__63346;
                  continue;
                } else {
                  return ret_value__12866__auto__;
                }
                break;
              }
            };
            metaverse$core$main_$_state_machine__12865__auto__ = function(state_63077) {
              switch(arguments.length) {
                case 0:
                  return metaverse$core$main_$_state_machine__12865__auto____0.call(this);
                case 1:
                  return metaverse$core$main_$_state_machine__12865__auto____1.call(this, state_63077);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            metaverse$core$main_$_state_machine__12865__auto__.cljs$core$IFn$_invoke$arity$0 = metaverse$core$main_$_state_machine__12865__auto____0;
            metaverse$core$main_$_state_machine__12865__auto__.cljs$core$IFn$_invoke$arity$1 = metaverse$core$main_$_state_machine__12865__auto____1;
            return metaverse$core$main_$_state_machine__12865__auto__;
          }();
        }(switch__12864__auto__, c__12926__auto___63240, render_state, scene, camera, renderer);
      }();
      var state__12928__auto__ = function() {
        var statearr_63239 = f__12927__auto__.call(null);
        statearr_63239[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__12926__auto___63240;
        return statearr_63239;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__12928__auto__);
    };
  }(c__12926__auto___63240, render_state, scene, camera, renderer));
  metaverse.core.add_single_cube.call(null, render_state);
  metaverse.core.set_initial_camera_position.call(null, render_state);
  metaverse.util.recur_infinitely.call(null, cljs.core.partial.call(null, metaverse.core.rotate_fn, render_state), 200);
  return metaverse.core.render.call(null, 0, renderer, scene, camera);
};
metaverse.util.append_onload.call(null, metaverse.core.main);

//# sourceMappingURL=main.js.map